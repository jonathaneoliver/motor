
/home/joliver/photon3/motor4/target/2.0.1/argon/motor4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005510  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9530  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a0  2003dda0  000d9534  0001dda0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009b4  2003de40  2003de40  0002de40  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d95d4  000d95d4  000295d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d95fc  000d95fc  000295fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ba501  00000000  00000000  00029600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bb59  00000000  00000000  001e3b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002800  00000000  00000000  001ff65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003f4ee  00000000  00000000  00201e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00044f6b  00000000  00000000  00241348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010d965  00000000  00000000  002862b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002ad60  00000000  00000000  00393c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00007748  00000000  00000000  003be978  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006d50  00000000  00000000  003c60c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd27 	bl	d8a84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fd2f 	bl	d8aa0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dda0 	.word	0x2003dda0
   d404c:	000d9534 	.word	0x000d9534
   d4050:	2003de40 	.word	0x2003de40
   d4054:	2003de40 	.word	0x2003de40
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 faef 	bl	d7644 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9508 	.word	0x000d9508
   d4080:	000d952c 	.word	0x000d952c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9dc 	b.w	d4440 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb05 	bl	d4698 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 ba99 	b.w	d75c8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bf4d 	b.w	d6f34 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bf4b 	b.w	d6f34 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bf51 	b.w	d6f44 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_BNO055D1Ev>:

    uint16_t accel_radius;
    uint16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
   d40b2:	4770      	bx	lr

000d40b4 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b4:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d40b6:	b510      	push	{r4, lr}
   d40b8:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40ba:	d90d      	bls.n	d40d8 <nrf_gpio_pin_read+0x24>
   d40bc:	4a09      	ldr	r2, [pc, #36]	; (d40e4 <nrf_gpio_pin_read+0x30>)
   d40be:	2100      	movs	r1, #0
   d40c0:	200a      	movs	r0, #10
   d40c2:	f002 fe81 	bl	d6dc8 <panic_>
        return NRF_P1;
   d40c6:	4b08      	ldr	r3, [pc, #32]	; (d40e8 <nrf_gpio_pin_read+0x34>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40c8:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d40cc:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d40d0:	40e0      	lsrs	r0, r4
}
   d40d2:	f000 0001 	and.w	r0, r0, #1
   d40d6:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   d40d8:	281f      	cmp	r0, #31
   d40da:	d8f4      	bhi.n	d40c6 <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   d40dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   d40e0:	e7f4      	b.n	d40cc <nrf_gpio_pin_read+0x18>
   d40e2:	bf00      	nop
   d40e4:	000d6c99 	.word	0x000d6c99
   d40e8:	50000300 	.word	0x50000300

000d40ec <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d40ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d40f0:	4b4c      	ldr	r3, [pc, #304]	; (d4224 <_ZN7Encoder16interruptHandlerEv+0x138>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d40f2:	4e4d      	ldr	r6, [pc, #308]	; (d4228 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d40f4:	685b      	ldr	r3, [r3, #4]
		ticks=System.ticks();
   d40f6:	6183      	str	r3, [r0, #24]
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   d40f8:	6887      	ldr	r7, [r0, #8]
   d40fa:	7833      	ldrb	r3, [r6, #0]
   d40fc:	4d4b      	ldr	r5, [pc, #300]	; (d422c <_ZN7Encoder16interruptHandlerEv+0x140>)
   d40fe:	f3bf 8f5b 	dmb	ish
   d4102:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   d4106:	4604      	mov	r4, r0
   d4108:	d109      	bne.n	d411e <_ZN7Encoder16interruptHandlerEv+0x32>
   d410a:	4630      	mov	r0, r6
   d410c:	f7ff ffc9 	bl	d40a2 <__cxa_guard_acquire>
   d4110:	b128      	cbz	r0, d411e <_ZN7Encoder16interruptHandlerEv+0x32>
   d4112:	f002 fde1 	bl	d6cd8 <HAL_Pin_Map>
   d4116:	6028      	str	r0, [r5, #0]
   d4118:	4630      	mov	r0, r6
   d411a:	f7ff ffc7 	bl	d40ac <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d411e:	fa1f f887 	uxth.w	r8, r7
   d4122:	682b      	ldr	r3, [r5, #0]
   d4124:	ea4f 1808 	mov.w	r8, r8, lsl #4
   d4128:	f813 7008 	ldrb.w	r7, [r3, r8]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d412c:	7833      	ldrb	r3, [r6, #0]
   d412e:	f3bf 8f5b 	dmb	ish
   d4132:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4134:	ea4f 1947 	mov.w	r9, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4138:	d409      	bmi.n	d414e <_ZN7Encoder16interruptHandlerEv+0x62>
   d413a:	483b      	ldr	r0, [pc, #236]	; (d4228 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d413c:	f7ff ffb1 	bl	d40a2 <__cxa_guard_acquire>
   d4140:	b128      	cbz	r0, d414e <_ZN7Encoder16interruptHandlerEv+0x62>
   d4142:	f002 fdc9 	bl	d6cd8 <HAL_Pin_Map>
   d4146:	6028      	str	r0, [r5, #0]
   d4148:	4837      	ldr	r0, [pc, #220]	; (d4228 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d414a:	f7ff ffaf 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d414e:	682b      	ldr	r3, [r5, #0]
   d4150:	4443      	add	r3, r8
   d4152:	785f      	ldrb	r7, [r3, #1]
   d4154:	f007 071f 	and.w	r7, r7, #31
   d4158:	ea47 0709 	orr.w	r7, r7, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d415c:	4638      	mov	r0, r7
   d415e:	f7ff ffa9 	bl	d40b4 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4162:	4638      	mov	r0, r7
   d4164:	f7ff ffa6 	bl	d40b4 <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d4168:	f8d4 800c 	ldr.w	r8, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d416c:	7833      	ldrb	r3, [r6, #0]
   d416e:	f3bf 8f5b 	dmb	ish
   d4172:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   d4174:	b2c7      	uxtb	r7, r0
   d4176:	d409      	bmi.n	d418c <_ZN7Encoder16interruptHandlerEv+0xa0>
   d4178:	482b      	ldr	r0, [pc, #172]	; (d4228 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d417a:	f7ff ff92 	bl	d40a2 <__cxa_guard_acquire>
   d417e:	b128      	cbz	r0, d418c <_ZN7Encoder16interruptHandlerEv+0xa0>
   d4180:	f002 fdaa 	bl	d6cd8 <HAL_Pin_Map>
   d4184:	6028      	str	r0, [r5, #0]
   d4186:	4828      	ldr	r0, [pc, #160]	; (d4228 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d4188:	f7ff ff90 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d418c:	fa1f f888 	uxth.w	r8, r8
   d4190:	682b      	ldr	r3, [r5, #0]
   d4192:	ea4f 1808 	mov.w	r8, r8, lsl #4
   d4196:	f813 9008 	ldrb.w	r9, [r3, r8]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d419a:	7833      	ldrb	r3, [r6, #0]
   d419c:	f3bf 8f5b 	dmb	ish
   d41a0:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41a2:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41a6:	d409      	bmi.n	d41bc <_ZN7Encoder16interruptHandlerEv+0xd0>
   d41a8:	481f      	ldr	r0, [pc, #124]	; (d4228 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d41aa:	f7ff ff7a 	bl	d40a2 <__cxa_guard_acquire>
   d41ae:	b128      	cbz	r0, d41bc <_ZN7Encoder16interruptHandlerEv+0xd0>
   d41b0:	f002 fd92 	bl	d6cd8 <HAL_Pin_Map>
   d41b4:	6028      	str	r0, [r5, #0]
   d41b6:	481c      	ldr	r0, [pc, #112]	; (d4228 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d41b8:	f7ff ff78 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41bc:	682b      	ldr	r3, [r5, #0]
   d41be:	4498      	add	r8, r3
   d41c0:	f898 5001 	ldrb.w	r5, [r8, #1]
   d41c4:	f005 051f 	and.w	r5, r5, #31
   d41c8:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   d41cc:	4628      	mov	r0, r5
   d41ce:	f7ff ff71 	bl	d40b4 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41d2:	4628      	mov	r0, r5
   d41d4:	f7ff ff6e 	bl	d40b4 <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   d41d8:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d41da:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   d41dc:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   d41e0:	b10f      	cbz	r7, d41e6 <_ZN7Encoder16interruptHandlerEv+0xfa>
   d41e2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   d41e6:	b108      	cbz	r0, d41ec <_ZN7Encoder16interruptHandlerEv+0x100>
   d41e8:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   d41ec:	109a      	asrs	r2, r3, #2
   d41ee:	3b01      	subs	r3, #1
   d41f0:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   d41f2:	2b0d      	cmp	r3, #13
   d41f4:	d80b      	bhi.n	d420e <_ZN7Encoder16interruptHandlerEv+0x122>
   d41f6:	e8df f003 	tbb	[pc, r3]
   d41fa:	0c07      	.short	0x0c07
   d41fc:	120a0c0f 	.word	0x120a0c0f
   d4200:	0a120707 	.word	0x0a120707
   d4204:	070c0f0c 	.word	0x070c0f0c
			case 1: case 7: case 8: case 14:
				position++;
   d4208:	6963      	ldr	r3, [r4, #20]
   d420a:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
   d420c:	6163      	str	r3, [r4, #20]
				return;
		}
	}
   d420e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   d4212:	6963      	ldr	r3, [r4, #20]
   d4214:	3b01      	subs	r3, #1
   d4216:	e7f9      	b.n	d420c <_ZN7Encoder16interruptHandlerEv+0x120>
				position += 2;
   d4218:	6963      	ldr	r3, [r4, #20]
   d421a:	3302      	adds	r3, #2
   d421c:	e7f6      	b.n	d420c <_ZN7Encoder16interruptHandlerEv+0x120>
				position -= 2;
   d421e:	6963      	ldr	r3, [r4, #20]
   d4220:	3b02      	subs	r3, #2
   d4222:	e7f3      	b.n	d420c <_ZN7Encoder16interruptHandlerEv+0x120>
   d4224:	e0001000 	.word	0xe0001000
   d4228:	2003de44 	.word	0x2003de44
   d422c:	2003de48 	.word	0x2003de48

000d4230 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4230:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4232:	b538      	push	{r3, r4, r5, lr}
   d4234:	4604      	mov	r4, r0
	  switch (__op)
   d4236:	d007      	beq.n	d4248 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
   d4238:	2a03      	cmp	r2, #3
   d423a:	d011      	beq.n	d4260 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x30>
   d423c:	2a01      	cmp	r2, #1
   d423e:	d101      	bne.n	d4244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4240:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d4242:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4244:	2000      	movs	r0, #0
   d4246:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4248:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d424a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d424c:	f7ff ff23 	bl	d4096 <_Znwj>
   d4250:	4603      	mov	r3, r0
   d4252:	2800      	cmp	r0, #0
   d4254:	d0f5      	beq.n	d4242 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
   d4256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d425a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d425e:	e7f0      	b.n	d4242 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d4260:	6800      	ldr	r0, [r0, #0]
   d4262:	2800      	cmp	r0, #0
   d4264:	d0ee      	beq.n	d4244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
   d4266:	210c      	movs	r1, #12
   d4268:	f003 fe6f 	bl	d7f4a <_ZdlPvj>
   d426c:	e7ea      	b.n	d4244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d426e <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d426e:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   d4270:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d4272:	685a      	ldr	r2, [r3, #4]
   d4274:	6899      	ldr	r1, [r3, #8]
   d4276:	681b      	ldr	r3, [r3, #0]
   d4278:	1054      	asrs	r4, r2, #1
   d427a:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d427e:	07d2      	lsls	r2, r2, #31
   d4280:	bf48      	it	mi
   d4282:	590a      	ldrmi	r2, [r1, r4]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4284:	f85d 4b04 	ldr.w	r4, [sp], #4
   d4288:	bf48      	it	mi
   d428a:	58d3      	ldrmi	r3, [r2, r3]
   d428c:	4718      	bx	r3

000d428e <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d428e:	b40e      	push	{r1, r2, r3}
   d4290:	b503      	push	{r0, r1, lr}
   d4292:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d4294:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4296:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d429a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d429c:	f003 fc30 	bl	d7b00 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d42a0:	b002      	add	sp, #8
   d42a2:	f85d eb04 	ldr.w	lr, [sp], #4
   d42a6:	b003      	add	sp, #12
   d42a8:	4770      	bx	lr
	...

000d42ac <_Z13SleepStateStr12sleepState_t>:

#define SLEEPSTATE_PIN A0

const char * SleepStateStr( sleepState_t sleepState )
{
  switch (sleepState) 
   d42ac:	b130      	cbz	r0, d42bc <_Z13SleepStateStr12sleepState_t+0x10>
   d42ae:	4b04      	ldr	r3, [pc, #16]	; (d42c0 <_Z13SleepStateStr12sleepState_t+0x14>)
   d42b0:	4a04      	ldr	r2, [pc, #16]	; (d42c4 <_Z13SleepStateStr12sleepState_t+0x18>)
   d42b2:	2801      	cmp	r0, #1
   d42b4:	bf14      	ite	ne
   d42b6:	4618      	movne	r0, r3
   d42b8:	4610      	moveq	r0, r2
   d42ba:	4770      	bx	lr
  {
    case AWAKE:
      return "AWAKE";
   d42bc:	4802      	ldr	r0, [pc, #8]	; (d42c8 <_Z13SleepStateStr12sleepState_t+0x1c>)
      break;
    default:
      return "UNKNOWN";
      break;
  }
}
   d42be:	4770      	bx	lr
   d42c0:	000d8b44 	.word	0x000d8b44
   d42c4:	000d8b52 	.word	0x000d8b52
   d42c8:	000d8b4c 	.word	0x000d8b4c

000d42cc <_Z16SleepStateTogglev>:




void SleepStateToggle()
{
   d42cc:	b530      	push	{r4, r5, lr}
  // debounce
  if ( millis()-sleepStateTime < 1000 )
   d42ce:	4c29      	ldr	r4, [pc, #164]	; (d4374 <_Z16SleepStateTogglev+0xa8>)
{
   d42d0:	b08b      	sub	sp, #44	; 0x2c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42d2:	f002 fce9 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
  if ( millis()-sleepStateTime < 1000 )
   d42d6:	6823      	ldr	r3, [r4, #0]
   d42d8:	1ac0      	subs	r0, r0, r3
   d42da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d42de:	d20c      	bcs.n	d42fa <_Z16SleepStateTogglev+0x2e>
  {
    // ignore this
    VERBOSE(  Serial.printlnf( "[%s] %lu -> debounce ", __FUNCTION__, millis()) ) ;
   d42e0:	f003 f8ac 	bl	d743c <_Z16_fetch_usbserialv>
   d42e4:	4604      	mov	r4, r0
   d42e6:	f002 fcdf 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d42ea:	4a23      	ldr	r2, [pc, #140]	; (d4378 <_Z16SleepStateTogglev+0xac>)
   d42ec:	4923      	ldr	r1, [pc, #140]	; (d437c <_Z16SleepStateTogglev+0xb0>)
   d42ee:	4603      	mov	r3, r0
   d42f0:	4620      	mov	r0, r4
   d42f2:	f7ff ffcc 	bl	d428e <_ZN5Print8printlnfEPKcz>
    /* this is the default when woken from System.sleep() by timer or interrupt from pin */
    sleepState=AWAKE;
  }

  VERBOSE(  Serial.printlnf( "[%s] %lu ->%s ", __FUNCTION__, millis(), SleepStateStr(sleepState)) ) ;
}
   d42f6:	b00b      	add	sp, #44	; 0x2c
   d42f8:	bd30      	pop	{r4, r5, pc}
   d42fa:	f002 fcd5 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
  sleepStateTime=millis();
   d42fe:	6020      	str	r0, [r4, #0]
  if ( sleepState==AWAKE )
   d4300:	4c1f      	ldr	r4, [pc, #124]	; (d4380 <_Z16SleepStateTogglev+0xb4>)
   d4302:	7823      	ldrb	r3, [r4, #0]
   d4304:	bb9b      	cbnz	r3, d436e <_Z16SleepStateTogglev+0xa2>
    VERBOSE( Serial.printlnf( "[%s] %lu enter sleep mode for 60 seconds or A0 falling", __FUNCTION__, millis() ) );
   d4306:	f003 f899 	bl	d743c <_Z16_fetch_usbserialv>
   d430a:	4605      	mov	r5, r0
   d430c:	f002 fccc 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4310:	4a19      	ldr	r2, [pc, #100]	; (d4378 <_Z16SleepStateTogglev+0xac>)
   d4312:	491c      	ldr	r1, [pc, #112]	; (d4384 <_Z16SleepStateTogglev+0xb8>)
   d4314:	4603      	mov	r3, r0
   d4316:	4628      	mov	r0, r5
   d4318:	f7ff ffb9 	bl	d428e <_ZN5Print8printlnfEPKcz>
    delay(100);
   d431c:	2064      	movs	r0, #100	; 0x64
   d431e:	f003 fab1 	bl	d7884 <delay>
    sleepState=ASLEEP;
   d4322:	4b19      	ldr	r3, [pc, #100]	; (d4388 <_Z16SleepStateTogglev+0xbc>)
   d4324:	2201      	movs	r2, #1
   d4326:	681b      	ldr	r3, [r3, #0]
   d4328:	7022      	strb	r2, [r4, #0]
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d432a:	2113      	movs	r1, #19
   d432c:	f8ad 101e 	strh.w	r1, [sp, #30]
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d4330:	9302      	str	r3, [sp, #8]
   d4332:	2102      	movs	r1, #2
   d4334:	233c      	movs	r3, #60	; 0x3c
   d4336:	e9cd 2300 	strd	r2, r3, [sp]
   d433a:	f88d 101d 	strb.w	r1, [sp, #29]
   d433e:	f10d 031d 	add.w	r3, sp, #29
   d4342:	f10d 011e 	add.w	r1, sp, #30
   d4346:	a808      	add	r0, sp, #32
   d4348:	f003 fc84 	bl	d7c54 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
  VERBOSE(  Serial.printlnf( "[%s] %lu ->%s ", __FUNCTION__, millis(), SleepStateStr(sleepState)) ) ;
   d434c:	f003 f876 	bl	d743c <_Z16_fetch_usbserialv>
   d4350:	4605      	mov	r5, r0
   d4352:	f002 fca9 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4356:	9005      	str	r0, [sp, #20]
   d4358:	7820      	ldrb	r0, [r4, #0]
   d435a:	f7ff ffa7 	bl	d42ac <_Z13SleepStateStr12sleepState_t>
   d435e:	9b05      	ldr	r3, [sp, #20]
   d4360:	9000      	str	r0, [sp, #0]
   d4362:	4a05      	ldr	r2, [pc, #20]	; (d4378 <_Z16SleepStateTogglev+0xac>)
   d4364:	4909      	ldr	r1, [pc, #36]	; (d438c <_Z16SleepStateTogglev+0xc0>)
   d4366:	4628      	mov	r0, r5
   d4368:	f7ff ff91 	bl	d428e <_ZN5Print8printlnfEPKcz>
   d436c:	e7c3      	b.n	d42f6 <_Z16SleepStateTogglev+0x2a>
    sleepState=AWAKE;
   d436e:	2300      	movs	r3, #0
   d4370:	7023      	strb	r3, [r4, #0]
   d4372:	e7eb      	b.n	d434c <_Z16SleepStateTogglev+0x80>
   d4374:	2003de50 	.word	0x2003de50
   d4378:	000d8b59 	.word	0x000d8b59
   d437c:	000d8b6a 	.word	0x000d8b6a
   d4380:	2003de4c 	.word	0x2003de4c
   d4384:	000d8b80 	.word	0x000d8b80
   d4388:	2003de54 	.word	0x2003de54
   d438c:	000d8bb7 	.word	0x000d8bb7

000d4390 <_Z15SleepStateCheckv>:

void SleepStateCheck(void)
{
   d4390:	b530      	push	{r4, r5, lr}
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
   d4392:	2013      	movs	r0, #19
{
   d4394:	b085      	sub	sp, #20
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
   d4396:	f003 fdc0 	bl	d7f1a <digitalRead>
   d439a:	b9d0      	cbnz	r0, d43d2 <_Z15SleepStateCheckv+0x42>
  {
    VERBOSE(  Serial.printlnf( "[%s] %lu sleepState=%s (%ld) ", __FUNCTION__, millis(), SleepStateStr(sleepState), digitalRead(SLEEPSTATE_PIN) ) );
   d439c:	f003 f84e 	bl	d743c <_Z16_fetch_usbserialv>
   d43a0:	4604      	mov	r4, r0
   d43a2:	f002 fc81 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d43a6:	4a0c      	ldr	r2, [pc, #48]	; (d43d8 <_Z15SleepStateCheckv+0x48>)
   d43a8:	9003      	str	r0, [sp, #12]
   d43aa:	7810      	ldrb	r0, [r2, #0]
   d43ac:	f7ff ff7e 	bl	d42ac <_Z13SleepStateStr12sleepState_t>
   d43b0:	4605      	mov	r5, r0
   d43b2:	2013      	movs	r0, #19
   d43b4:	f003 fdb1 	bl	d7f1a <digitalRead>
   d43b8:	9b03      	ldr	r3, [sp, #12]
   d43ba:	4a08      	ldr	r2, [pc, #32]	; (d43dc <_Z15SleepStateCheckv+0x4c>)
   d43bc:	4908      	ldr	r1, [pc, #32]	; (d43e0 <_Z15SleepStateCheckv+0x50>)
   d43be:	e9cd 5000 	strd	r5, r0, [sp]
   d43c2:	4620      	mov	r0, r4
   d43c4:	f7ff ff63 	bl	d428e <_ZN5Print8printlnfEPKcz>
    SleepStateToggle();  
  }
}
   d43c8:	b005      	add	sp, #20
   d43ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SleepStateToggle();  
   d43ce:	f7ff bf7d 	b.w	d42cc <_Z16SleepStateTogglev>
}
   d43d2:	b005      	add	sp, #20
   d43d4:	bd30      	pop	{r4, r5, pc}
   d43d6:	bf00      	nop
   d43d8:	2003de4c 	.word	0x2003de4c
   d43dc:	000d8bc6 	.word	0x000d8bc6
   d43e0:	000d8bd6 	.word	0x000d8bd6

000d43e4 <_Z14SleepStateInitv>:

void SleepStateInit()
{
   d43e4:	b508      	push	{r3, lr}
  VERBOSE( Serial.printlnf( "[%s]", __FUNCTION__ ) );
   d43e6:	f003 f829 	bl	d743c <_Z16_fetch_usbserialv>
   d43ea:	4905      	ldr	r1, [pc, #20]	; (d4400 <_Z14SleepStateInitv+0x1c>)
   d43ec:	4a05      	ldr	r2, [pc, #20]	; (d4404 <_Z14SleepStateInitv+0x20>)
   d43ee:	f7ff ff4e 	bl	d428e <_ZN5Print8printlnfEPKcz>
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
}
   d43f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
   d43f6:	2102      	movs	r1, #2
   d43f8:	2013      	movs	r0, #19
   d43fa:	f003 bd7d 	b.w	d7ef8 <pinMode>
   d43fe:	bf00      	nop
   d4400:	000d8c03 	.word	0x000d8c03
   d4404:	000d8bf4 	.word	0x000d8bf4

000d4408 <_Z6setPwmP16Adafruit_DCMotori>:
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
{  
   d4408:	b538      	push	{r3, r4, r5, lr}
  if( power==0 ) {
   d440a:	1e0c      	subs	r4, r1, #0
{  
   d440c:	4605      	mov	r5, r0
  if( power==0 ) {
   d440e:	d107      	bne.n	d4420 <_Z6setPwmP16Adafruit_DCMotori+0x18>
    motor->setSpeed(abs(power));
   d4410:	f001 ff2a 	bl	d6268 <_ZN16Adafruit_DCMotor8setSpeedEh>
#if 1
    motor->run(FORWARD);
   d4414:	2101      	movs	r1, #1
   d4416:	4628      	mov	r0, r5
   d4418:	f001 ff00 	bl	d621c <_ZN16Adafruit_DCMotor3runEh>
  {
    motor->run(BACKWARD);
    motor->setSpeed(abs(power));      
  }
  return power;
}
   d441c:	4620      	mov	r0, r4
   d441e:	bd38      	pop	{r3, r4, r5, pc}
  else if( power>0 ) {
   d4420:	dd07      	ble.n	d4432 <_Z6setPwmP16Adafruit_DCMotori+0x2a>
    motor->run(FORWARD);
   d4422:	2101      	movs	r1, #1
   d4424:	f001 fefa 	bl	d621c <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(power));
   d4428:	b2e1      	uxtb	r1, r4
    motor->setSpeed(abs(power));      
   d442a:	4628      	mov	r0, r5
   d442c:	f001 ff1c 	bl	d6268 <_ZN16Adafruit_DCMotor8setSpeedEh>
   d4430:	e7f4      	b.n	d441c <_Z6setPwmP16Adafruit_DCMotori+0x14>
    motor->run(BACKWARD);
   d4432:	2102      	movs	r1, #2
   d4434:	f001 fef2 	bl	d621c <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(power));      
   d4438:	4261      	negs	r1, r4
   d443a:	b2c9      	uxtb	r1, r1
   d443c:	e7f5      	b.n	d442a <_Z6setPwmP16Adafruit_DCMotori+0x22>
	...

000d4440 <setup>:
void setup() {
   d4440:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(115200);
   d4442:	f002 fffb 	bl	d743c <_Z16_fetch_usbserialv>
   d4446:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d444a:	f002 ffeb 	bl	d7424 <_ZN9USBSerial5beginEl>
  Serial.printlnf("setup()\n");
   d444e:	f002 fff5 	bl	d743c <_Z16_fetch_usbserialv>
   d4452:	495b      	ldr	r1, [pc, #364]	; (d45c0 <setup+0x180>)
  for (;!bno.begin();)
   d4454:	4d5b      	ldr	r5, [pc, #364]	; (d45c4 <setup+0x184>)
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d4456:	4c5c      	ldr	r4, [pc, #368]	; (d45c8 <setup+0x188>)
  Serial.printlnf("setup()\n");
   d4458:	f7ff ff19 	bl	d428e <_ZN5Print8printlnfEPKcz>
  for (;!bno.begin();)
   d445c:	210c      	movs	r1, #12
   d445e:	4628      	mov	r0, r5
   d4460:	f002 f8f3 	bl	d664a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d4464:	b948      	cbnz	r0, d447a <setup+0x3a>
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d4466:	f002 ffe9 	bl	d743c <_Z16_fetch_usbserialv>
   d446a:	4621      	mov	r1, r4
   d446c:	f003 fa35 	bl	d78da <_ZN5Print5printEPKc>
    delay(1000);
   d4470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4474:	f003 fa06 	bl	d7884 <delay>
  for (;!bno.begin();)
   d4478:	e7f0      	b.n	d445c <setup+0x1c>
  Serial.printlnf("[%s]bno ready",__FUNCTION__);    
   d447a:	f002 ffdf 	bl	d743c <_Z16_fetch_usbserialv>
   d447e:	4a53      	ldr	r2, [pc, #332]	; (d45cc <setup+0x18c>)
   d4480:	4953      	ldr	r1, [pc, #332]	; (d45d0 <setup+0x190>)
   d4482:	f7ff ff04 	bl	d428e <_ZN5Print8printlnfEPKcz>
  delay(100);
   d4486:	2064      	movs	r0, #100	; 0x64
   d4488:	f003 f9fc 	bl	d7884 <delay>
  RGB.control(true);
   d448c:	2001      	movs	r0, #1
   d448e:	f003 f911 	bl	d76b4 <_ZN8RGBClass7controlEb>
  Serial.printlnf("[%s]rgb ready",__FUNCTION__);    
   d4492:	f002 ffd3 	bl	d743c <_Z16_fetch_usbserialv>
   d4496:	4a4d      	ldr	r2, [pc, #308]	; (d45cc <setup+0x18c>)
   d4498:	494e      	ldr	r1, [pc, #312]	; (d45d4 <setup+0x194>)
   d449a:	f7ff fef8 	bl	d428e <_ZN5Print8printlnfEPKcz>
	device.begin();
   d449e:	484e      	ldr	r0, [pc, #312]	; (d45d8 <setup+0x198>)
   d44a0:	f002 fa2c 	bl	d68fc <_ZN8I2CSlave5beginEv>
  Serial.printlnf("[%s]i2c slave ready",__FUNCTION__);    
   d44a4:	f002 ffca 	bl	d743c <_Z16_fetch_usbserialv>
   d44a8:	4a48      	ldr	r2, [pc, #288]	; (d45cc <setup+0x18c>)
   d44aa:	494c      	ldr	r1, [pc, #304]	; (d45dc <setup+0x19c>)
   d44ac:	f7ff feef 	bl	d428e <_ZN5Print8printlnfEPKcz>
  SleepStateInit();
   d44b0:	f7ff ff98 	bl	d43e4 <_Z14SleepStateInitv>
  Serial.printlnf("[%s]low power ready",__FUNCTION__);    
   d44b4:	f002 ffc2 	bl	d743c <_Z16_fetch_usbserialv>
   d44b8:	4a44      	ldr	r2, [pc, #272]	; (d45cc <setup+0x18c>)
   d44ba:	4949      	ldr	r1, [pc, #292]	; (d45e0 <setup+0x1a0>)
   d44bc:	f7ff fee7 	bl	d428e <_ZN5Print8printlnfEPKcz>
  IBus.begin(Serial1);
   d44c0:	f002 ff34 	bl	d732c <_Z22__fetch_global_Serial1v>
   d44c4:	4601      	mov	r1, r0
   d44c6:	4847      	ldr	r0, [pc, #284]	; (d45e4 <setup+0x1a4>)
   d44c8:	f001 ffc4 	bl	d6454 <_ZN10FlySkyIBus5beginER11USARTSerial>
  Serial.printlnf("[%s]ibus ready",__FUNCTION__);    
   d44cc:	f002 ffb6 	bl	d743c <_Z16_fetch_usbserialv>
   d44d0:	4a3e      	ldr	r2, [pc, #248]	; (d45cc <setup+0x18c>)
   d44d2:	4945      	ldr	r1, [pc, #276]	; (d45e8 <setup+0x1a8>)
   d44d4:	f7ff fedb 	bl	d428e <_ZN5Print8printlnfEPKcz>
  Serial.printlnf(__FUNCTION__);
   d44d8:	f002 ffb0 	bl	d743c <_Z16_fetch_usbserialv>
   d44dc:	493b      	ldr	r1, [pc, #236]	; (d45cc <setup+0x18c>)
   d44de:	f7ff fed6 	bl	d428e <_ZN5Print8printlnfEPKcz>
  shield.begin();
   d44e2:	4842      	ldr	r0, [pc, #264]	; (d45ec <setup+0x1ac>)
   d44e4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   d44e8:	f001 fdfc 	bl	d60e4 <_ZN20Adafruit_MotorShield5beginEt>
  balanceSetpoint=0;
   d44ec:	4b40      	ldr	r3, [pc, #256]	; (d45f0 <setup+0x1b0>)
  balancePID.SetMode(PID::AUTOMATIC);
   d44ee:	4841      	ldr	r0, [pc, #260]	; (d45f4 <setup+0x1b4>)
  balanceSetpoint=0;
   d44f0:	2400      	movs	r4, #0
   d44f2:	2500      	movs	r5, #0
  balancePID.SetMode(PID::AUTOMATIC);
   d44f4:	2101      	movs	r1, #1
  balanceSetpoint=0;
   d44f6:	e9c3 4500 	strd	r4, r5, [r3]
  balancePID.SetMode(PID::AUTOMATIC);
   d44fa:	f001 fb57 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
  balancePID.SetOutputLimits(-255, 255);
   d44fe:	ed9f 1b2c 	vldr	d1, [pc, #176]	; d45b0 <setup+0x170>
   d4502:	ed9f 0b2d 	vldr	d0, [pc, #180]	; d45b8 <setup+0x178>
   d4506:	483b      	ldr	r0, [pc, #236]	; (d45f4 <setup+0x1b4>)
   d4508:	f001 fae0 	bl	d5acc <_ZN3PID15SetOutputLimitsEdd>
  balancePID.SetSampleTime(20);
   d450c:	4839      	ldr	r0, [pc, #228]	; (d45f4 <setup+0x1b4>)
   d450e:	2114      	movs	r1, #20
   d4510:	f001 fab6 	bl	d5a80 <_ZN3PID13SetSampleTimeEi>
  leftSetpoint=0;
   d4514:	4b38      	ldr	r3, [pc, #224]	; (d45f8 <setup+0x1b8>)
   d4516:	e9c3 4500 	strd	r4, r5, [r3]
  rightSetpoint=0;
   d451a:	4b38      	ldr	r3, [pc, #224]	; (d45fc <setup+0x1bc>)
   d451c:	e9c3 4500 	strd	r4, r5, [r3]
  speed=0;
   d4520:	4b37      	ldr	r3, [pc, #220]	; (d4600 <setup+0x1c0>)
   d4522:	2400      	movs	r4, #0
   d4524:	601c      	str	r4, [r3, #0]
  leftPower=setPwm( leftMotor, 0);
   d4526:	4b37      	ldr	r3, [pc, #220]	; (d4604 <setup+0x1c4>)
   d4528:	4621      	mov	r1, r4
   d452a:	6818      	ldr	r0, [r3, #0]
   d452c:	f7ff ff6c 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>
   d4530:	f003 fee8 	bl	d8304 <__aeabi_i2d>
   d4534:	4b34      	ldr	r3, [pc, #208]	; (d4608 <setup+0x1c8>)
   d4536:	e9c3 0100 	strd	r0, r1, [r3]
  rightPower=setPwm( rightMotor, 0);
   d453a:	4b34      	ldr	r3, [pc, #208]	; (d460c <setup+0x1cc>)
   d453c:	4621      	mov	r1, r4
   d453e:	6818      	ldr	r0, [r3, #0]
   d4540:	f7ff ff62 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>
   d4544:	f003 fede 	bl	d8304 <__aeabi_i2d>
   d4548:	4b31      	ldr	r3, [pc, #196]	; (d4610 <setup+0x1d0>)
   d454a:	e9c3 0100 	strd	r0, r1, [r3]
  leftPID.SetMode(PID::AUTOMATIC);
   d454e:	2101      	movs	r1, #1
   d4550:	4830      	ldr	r0, [pc, #192]	; (d4614 <setup+0x1d4>)
   d4552:	f001 fb2b 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
  leftPID.SetOutputLimits(-255, 255);
   d4556:	ed9f 1b16 	vldr	d1, [pc, #88]	; d45b0 <setup+0x170>
   d455a:	ed9f 0b17 	vldr	d0, [pc, #92]	; d45b8 <setup+0x178>
   d455e:	482d      	ldr	r0, [pc, #180]	; (d4614 <setup+0x1d4>)
   d4560:	f001 fab4 	bl	d5acc <_ZN3PID15SetOutputLimitsEdd>
  leftPID.SetSampleTime(10);
   d4564:	482b      	ldr	r0, [pc, #172]	; (d4614 <setup+0x1d4>)
   d4566:	210a      	movs	r1, #10
   d4568:	f001 fa8a 	bl	d5a80 <_ZN3PID13SetSampleTimeEi>
  rightPID.SetMode(PID::AUTOMATIC);
   d456c:	2101      	movs	r1, #1
   d456e:	482a      	ldr	r0, [pc, #168]	; (d4618 <setup+0x1d8>)
   d4570:	f001 fb1c 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
  rightPID.SetOutputLimits(-255, 255);
   d4574:	ed9f 1b0e 	vldr	d1, [pc, #56]	; d45b0 <setup+0x170>
   d4578:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d45b8 <setup+0x178>
   d457c:	4826      	ldr	r0, [pc, #152]	; (d4618 <setup+0x1d8>)
   d457e:	f001 faa5 	bl	d5acc <_ZN3PID15SetOutputLimitsEdd>
  rightPID.SetSampleTime(10);
   d4582:	210a      	movs	r1, #10
   d4584:	4824      	ldr	r0, [pc, #144]	; (d4618 <setup+0x1d8>)
   d4586:	f001 fa7b 	bl	d5a80 <_ZN3PID13SetSampleTimeEi>
  Serial.printlnf("[%s]pids ready",__FUNCTION__);    
   d458a:	f002 ff57 	bl	d743c <_Z16_fetch_usbserialv>
   d458e:	4a0f      	ldr	r2, [pc, #60]	; (d45cc <setup+0x18c>)
   d4590:	4922      	ldr	r1, [pc, #136]	; (d461c <setup+0x1dc>)
   d4592:	f7ff fe7c 	bl	d428e <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("setup( complete )\n");
   d4596:	f002 ff51 	bl	d743c <_Z16_fetch_usbserialv>
   d459a:	4921      	ldr	r1, [pc, #132]	; (d4620 <setup+0x1e0>)
   d459c:	f7ff fe77 	bl	d428e <_ZN5Print8printlnfEPKcz>
  RGB.color(0, 255, 0);
   d45a0:	4622      	mov	r2, r4
   d45a2:	4620      	mov	r0, r4
   d45a4:	21ff      	movs	r1, #255	; 0xff
}
   d45a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  RGB.color(0, 255, 0);
   d45aa:	f003 b893 	b.w	d76d4 <_ZN8RGBClass5colorEiii>
   d45ae:	bf00      	nop
   d45b0:	00000000 	.word	0x00000000
   d45b4:	406fe000 	.word	0x406fe000
   d45b8:	00000000 	.word	0x00000000
   d45bc:	c06fe000 	.word	0xc06fe000
   d45c0:	000d8c08 	.word	0x000d8c08
   d45c4:	2003e300 	.word	0x2003e300
   d45c8:	000d8c11 	.word	0x000d8c11
   d45cc:	000d8c4e 	.word	0x000d8c4e
   d45d0:	000d8c54 	.word	0x000d8c54
   d45d4:	000d8c62 	.word	0x000d8c62
   d45d8:	2003e310 	.word	0x2003e310
   d45dc:	000d8c70 	.word	0x000d8c70
   d45e0:	000d8c84 	.word	0x000d8c84
   d45e4:	2003e53c 	.word	0x2003e53c
   d45e8:	000d8c98 	.word	0x000d8c98
   d45ec:	2003e4c4 	.word	0x2003e4c4
   d45f0:	2003e2e8 	.word	0x2003e2e8
   d45f4:	2003e270 	.word	0x2003e270
   d45f8:	2003e3e8 	.word	0x2003e3e8
   d45fc:	2003e4b8 	.word	0x2003e4b8
   d4600:	2003e534 	.word	0x2003e534
   d4604:	2003e358 	.word	0x2003e358
   d4608:	2003e3e0 	.word	0x2003e3e0
   d460c:	2003e428 	.word	0x2003e428
   d4610:	2003e4b0 	.word	0x2003e4b0
   d4614:	2003e368 	.word	0x2003e368
   d4618:	2003e438 	.word	0x2003e438
   d461c:	000d8ca7 	.word	0x000d8ca7
   d4620:	000d8cb6 	.word	0x000d8cb6

000d4624 <_Z14setTargetSpeedi>:

int setTargetSpeed( int speed )
{  
   d4624:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4626:	4604      	mov	r4, r0
  VERBOSE(  Serial.printlnf( "[%s] %lu -> %d  ", __FUNCTION__, millis(), speed) ) ;
   d4628:	f002 ff08 	bl	d743c <_Z16_fetch_usbserialv>
   d462c:	4605      	mov	r5, r0
   d462e:	f002 fb3b 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4632:	4a09      	ldr	r2, [pc, #36]	; (d4658 <_Z14setTargetSpeedi+0x34>)
   d4634:	4909      	ldr	r1, [pc, #36]	; (d465c <_Z14setTargetSpeedi+0x38>)
   d4636:	9400      	str	r4, [sp, #0]
   d4638:	4603      	mov	r3, r0
   d463a:	4628      	mov	r0, r5
   d463c:	f7ff fe27 	bl	d428e <_ZN5Print8printlnfEPKcz>
  leftSetpoint=rightSetpoint=speed;
   d4640:	4620      	mov	r0, r4
   d4642:	f003 fe5f 	bl	d8304 <__aeabi_i2d>
   d4646:	4b06      	ldr	r3, [pc, #24]	; (d4660 <_Z14setTargetSpeedi+0x3c>)
   d4648:	e9c3 0100 	strd	r0, r1, [r3]
   d464c:	4b05      	ldr	r3, [pc, #20]	; (d4664 <_Z14setTargetSpeedi+0x40>)
   d464e:	e9c3 0100 	strd	r0, r1, [r3]
  return speed;
}
   d4652:	4620      	mov	r0, r4
   d4654:	b003      	add	sp, #12
   d4656:	bd30      	pop	{r4, r5, pc}
   d4658:	000d8cc9 	.word	0x000d8cc9
   d465c:	000d8cd8 	.word	0x000d8cd8
   d4660:	2003e4b8 	.word	0x2003e4b8
   d4664:	2003e3e8 	.word	0x2003e3e8

000d4668 <_Z13telemetrySendPKcS0_z>:

void telemetrySend( const char *name, const char *format, ...)
{
   d4668:	b40e      	push	{r1, r2, r3}
   d466a:	b500      	push	{lr}
   d466c:	b0c2      	sub	sp, #264	; 0x108
   d466e:	ab43      	add	r3, sp, #268	; 0x10c
  char buffer[256];
  va_list args;
  va_start (args, format);
  vsnprintf (buffer, sizeof(buffer), format, args);
   d4670:	f44f 7180 	mov.w	r1, #256	; 0x100
{
   d4674:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start (args, format);
   d4678:	9301      	str	r3, [sp, #4]
  vsnprintf (buffer, sizeof(buffer), format, args);
   d467a:	a802      	add	r0, sp, #8
   d467c:	f002 fc6a 	bl	d6f54 <vsnprintf>
  va_end (args);

  VERBOSE(  Serial.printlnf( buffer ) ) ;
   d4680:	f002 fedc 	bl	d743c <_Z16_fetch_usbserialv>
   d4684:	a902      	add	r1, sp, #8
   d4686:	f7ff fe02 	bl	d428e <_ZN5Print8printlnfEPKcz>
#if 0
      {
        Serial.printlnf(buffer);
      }
#endif 
}
   d468a:	b042      	add	sp, #264	; 0x108
   d468c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4690:	b003      	add	sp, #12
   d4692:	4770      	bx	lr
   d4694:	0000      	movs	r0, r0
	...

000d4698 <loop>:



void loop() 
{
   d4698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d469c:	ed2d 8b0a 	vpush	{d8-d12}
   d46a0:	b09f      	sub	sp, #124	; 0x7c
  static bool TxOn=false;

  SleepStateCheck();
   d46a2:	f7ff fe75 	bl	d4390 <_Z15SleepStateCheckv>

	uint16_t regAddr;
	while(device.getRegisterSet(regAddr)) {
   d46a6:	4d0c      	ldr	r5, [pc, #48]	; (d46d8 <loop+0x40>)
		// regAddr was updated from the I2C master
		Serial.printlnf("master updated %u to %lu", regAddr, device.getRegister(regAddr));
   d46a8:	4e0c      	ldr	r6, [pc, #48]	; (d46dc <loop+0x44>)
	while(device.getRegisterSet(regAddr)) {
   d46aa:	f10d 0152 	add.w	r1, sp, #82	; 0x52
   d46ae:	4628      	mov	r0, r5
   d46b0:	f002 f947 	bl	d6942 <_ZN8I2CSlave14getRegisterSetERt>
   d46b4:	b1a0      	cbz	r0, d46e0 <loop+0x48>
		Serial.printlnf("master updated %u to %lu", regAddr, device.getRegister(regAddr));
   d46b6:	f002 fec1 	bl	d743c <_Z16_fetch_usbserialv>
   d46ba:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   d46be:	920f      	str	r2, [sp, #60]	; 0x3c
   d46c0:	4604      	mov	r4, r0
   d46c2:	4611      	mov	r1, r2
   d46c4:	4628      	mov	r0, r5
   d46c6:	f002 f92d 	bl	d6924 <_ZNK8I2CSlave11getRegisterEt>
   d46ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d46cc:	4603      	mov	r3, r0
   d46ce:	4631      	mov	r1, r6
   d46d0:	4620      	mov	r0, r4
   d46d2:	f7ff fddc 	bl	d428e <_ZN5Print8printlnfEPKcz>
	while(device.getRegisterSet(regAddr)) {
   d46d6:	e7e8      	b.n	d46aa <loop+0x12>
   d46d8:	2003e310 	.word	0x2003e310
   d46dc:	000d8cfa 	.word	0x000d8cfa
#endif


  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d46e0:	a915      	add	r1, sp, #84	; 0x54
   d46e2:	48b1      	ldr	r0, [pc, #708]	; (d49a8 <loop+0x310>)
#if 1
  static double prevZ=0.0;

  if ( prevZ != event.orientation.z )
   d46e4:	4eb1      	ldr	r6, [pc, #708]	; (d49ac <loop+0x314>)
  bno.getEvent(&event);
   d46e6:	f002 f8af 	bl	d6848 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  if ( prevZ != event.orientation.z )
   d46ea:	981c      	ldr	r0, [sp, #112]	; 0x70
   d46ec:	f003 fe1c 	bl	d8328 <__aeabi_f2d>
   d46f0:	e9d6 2300 	ldrd	r2, r3, [r6]
   d46f4:	f004 f8d8 	bl	d88a8 <__aeabi_dcmpeq>
   d46f8:	4604      	mov	r4, r0
   d46fa:	2800      	cmp	r0, #0
   d46fc:	d159      	bne.n	d47b2 <loop+0x11a>
    bno.getCalibration(&system, &gyro, &accel, &mag);
    Serial.printlnf("CALIBRATION: Sys=%d\tGyro=%d\tAccel=%d\tMag=%d", system, gyro, accel, mag );
    imu::Vector<3> euler = bno.getVector(Adaf ruit_BNO055::VECTOR_EULER);
    Serial.printlnf("X: %f\tY: %f\tZ: %f", euler.x(), euler.y(), euler.z() );
#else
    VERBOSE( Serial.printlnf("(%lu) Z: %f", millis(), event.orientation.z ) );
   d46fe:	f002 fe9d 	bl	d743c <_Z16_fetch_usbserialv>
   d4702:	4605      	mov	r5, r0
   d4704:	f002 fad0 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4708:	900f      	str	r0, [sp, #60]	; 0x3c
   d470a:	981c      	ldr	r0, [sp, #112]	; 0x70
   d470c:	f003 fe0c 	bl	d8328 <__aeabi_f2d>
   d4710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d4712:	e9cd 0100 	strd	r0, r1, [sp]
   d4716:	49a6      	ldr	r1, [pc, #664]	; (d49b0 <loop+0x318>)
   d4718:	4628      	mov	r0, r5
   d471a:	f7ff fdb8 	bl	d428e <_ZN5Print8printlnfEPKcz>

    //VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));
   d471e:	ed9f 7aa5 	vldr	s14, [pc, #660]	; d49b4 <loop+0x31c>
   d4722:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
   d4726:	48a4      	ldr	r0, [pc, #656]	; (d49b8 <loop+0x320>)

    telemetrySend( "robot/imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": %lu, \"imutime\":%lu, \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), event.type, event.timestamp, event.orientation.x, event.orientation.y, event.orientation.z );
    balanceInput=balanceCorrection( event.orientation.z );
   d4728:	4da4      	ldr	r5, [pc, #656]	; (d49bc <loop+0x324>)
		device.setRegister(0, int(event.orientation.z*100));
   d472a:	ee67 7a87 	vmul.f32	s15, s15, s14
   d472e:	4621      	mov	r1, r4
   d4730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4734:	ee17 2a90 	vmov	r2, s15
   d4738:	f002 f8fc 	bl	d6934 <_ZN8I2CSlave11setRegisterEtm>
    telemetrySend( "robot/imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": %lu, \"imutime\":%lu, \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), event.type, event.timestamp, event.orientation.x, event.orientation.y, event.orientation.z );
   d473c:	f003 f880 	bl	d7840 <_ZN9TimeClass3nowEv>
   d4740:	9010      	str	r0, [sp, #64]	; 0x40
   d4742:	f002 fab1 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4746:	900f      	str	r0, [sp, #60]	; 0x3c
   d4748:	981c      	ldr	r0, [sp, #112]	; 0x70
   d474a:	f003 fded 	bl	d8328 <__aeabi_f2d>
   d474e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4752:	981b      	ldr	r0, [sp, #108]	; 0x6c
   d4754:	f003 fde8 	bl	d8328 <__aeabi_f2d>
   d4758:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d475c:	981a      	ldr	r0, [sp, #104]	; 0x68
   d475e:	f003 fde3 	bl	d8328 <__aeabi_f2d>
   d4762:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4766:	9919      	ldr	r1, [sp, #100]	; 0x64
   d4768:	9101      	str	r1, [sp, #4]
   d476a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   d476c:	4894      	ldr	r0, [pc, #592]	; (d49c0 <loop+0x328>)
   d476e:	9100      	str	r1, [sp, #0]
   d4770:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   d4774:	4993      	ldr	r1, [pc, #588]	; (d49c4 <loop+0x32c>)
   d4776:	f7ff ff77 	bl	d4668 <_Z13telemetrySendPKcS0_z>
    balanceInput=balanceCorrection( event.orientation.z );
   d477a:	981c      	ldr	r0, [sp, #112]	; 0x70
   d477c:	f003 fdd4 	bl	d8328 <__aeabi_f2d>
  return input+balanceOffset;
   d4780:	2300      	movs	r3, #0
   d4782:	2200      	movs	r2, #0
   d4784:	f003 fc72 	bl	d806c <__adddf3>
    balanceInput=balanceCorrection( event.orientation.z );
   d4788:	e9c5 0100 	strd	r0, r1, [r5]
    VERBOSE( Serial.printlnf("(%lu) balanceInput: %f", millis(), balanceInput ) );
   d478c:	f002 fe56 	bl	d743c <_Z16_fetch_usbserialv>
   d4790:	4604      	mov	r4, r0
   d4792:	f002 fa89 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4796:	4602      	mov	r2, r0
   d4798:	e9d5 0100 	ldrd	r0, r1, [r5]
   d479c:	e9cd 0100 	strd	r0, r1, [sp]
   d47a0:	4989      	ldr	r1, [pc, #548]	; (d49c8 <loop+0x330>)
   d47a2:	4620      	mov	r0, r4
   d47a4:	f7ff fd73 	bl	d428e <_ZN5Print8printlnfEPKcz>
    imu::Vector<3> gs = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
    //telemetrySend( "imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": \"VECTOR_GYROSCOPE\", \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), int(gs.x()*57.2958), int(gs.y()*57.2958), int(gs.z()*57.2958) );
    telemetrySend( "robot/imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": \"VECTOR_GYROSCOPE\", \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), gs.x()*57.2958, gs.y()*57.2958, gs.z()*57.2958 );
#endif

    prevZ = event.orientation.z;
   d47a8:	981c      	ldr	r0, [sp, #112]	; 0x70
   d47aa:	f003 fdbd 	bl	d8328 <__aeabi_f2d>
   d47ae:	e9c6 0100 	strd	r0, r1, [r6]

#endif

  //if ( digitalRead(RX_ENABLE) ) 
  { 
    IBus.loop();
   d47b2:	4886      	ldr	r0, [pc, #536]	; (d49cc <loop+0x334>)

    uint32_t imu_update=IBus.lastUpdate();

    if ( imu_update!=imu_last_update)
   d47b4:	f8df 9258 	ldr.w	r9, [pc, #600]	; d4a10 <loop+0x378>
    IBus.loop();
   d47b8:	f001 fe5a 	bl	d6470 <_ZN10FlySkyIBus4loopEv>
    uint32_t imu_update=IBus.lastUpdate();
   d47bc:	4883      	ldr	r0, [pc, #524]	; (d49cc <loop+0x334>)
   d47be:	f001 fed4 	bl	d656a <_ZN10FlySkyIBus10lastUpdateEv>
    if ( imu_update!=imu_last_update)
   d47c2:	f8d9 3000 	ldr.w	r3, [r9]
   d47c6:	4283      	cmp	r3, r0
    uint32_t imu_update=IBus.lastUpdate();
   d47c8:	4604      	mov	r4, r0
    if ( imu_update!=imu_last_update)
   d47ca:	d04b      	beq.n	d4864 <loop+0x1cc>
    {
      // TX ON ( top left switch )
      //telemetrySend( "iBus", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"iBus\", \"name\":\"iBus\", \"Channels\" : [ %d,%d,%d,%d,%d,%d,%d,%d,%d,%d ] }", Time.now(), millis(), IBus.readChannel(0),IBus.readChannel(1),IBus.readChannel(2),IBus.readChannel(3),IBus.readChannel(4),IBus.readChannel(5),IBus.readChannel(6),IBus.readChannel(7),IBus.readChannel(8),IBus.readChannel(9) );
      telemetrySend( "robot/iBus", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"iBus\", \"name\":\"iBus\", \"C0\":%d,\"C1\":%d,\"C2\":%d,\"C3\":%d,\"C4\":%d,\"C5\":%d,\"C6\":%d,\"C7\":%d,\"C8\":%d,\"C9\":%d }", Time.now(), millis(), IBus.readChannel(0),IBus.readChannel(1),IBus.readChannel(2),IBus.readChannel(3),IBus.readChannel(4),IBus.readChannel(5),IBus.readChannel(6),IBus.readChannel(7),IBus.readChannel(8),IBus.readChannel(9) );
   d47cc:	f003 f838 	bl	d7840 <_ZN9TimeClass3nowEv>
   d47d0:	9013      	str	r0, [sp, #76]	; 0x4c
   d47d2:	f002 fa69 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d47d6:	2100      	movs	r1, #0
   d47d8:	9012      	str	r0, [sp, #72]	; 0x48
   d47da:	487c      	ldr	r0, [pc, #496]	; (d49cc <loop+0x334>)
   d47dc:	f001 febe 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d47e0:	2101      	movs	r1, #1
   d47e2:	900f      	str	r0, [sp, #60]	; 0x3c
   d47e4:	4879      	ldr	r0, [pc, #484]	; (d49cc <loop+0x334>)
   d47e6:	f001 feb9 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d47ea:	2102      	movs	r1, #2
   d47ec:	9010      	str	r0, [sp, #64]	; 0x40
   d47ee:	4877      	ldr	r0, [pc, #476]	; (d49cc <loop+0x334>)
   d47f0:	f001 feb4 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d47f4:	2103      	movs	r1, #3
   d47f6:	9011      	str	r0, [sp, #68]	; 0x44
   d47f8:	4874      	ldr	r0, [pc, #464]	; (d49cc <loop+0x334>)
   d47fa:	f001 feaf 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d47fe:	2104      	movs	r1, #4
   d4800:	4605      	mov	r5, r0
   d4802:	4872      	ldr	r0, [pc, #456]	; (d49cc <loop+0x334>)
   d4804:	f001 feaa 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d4808:	2105      	movs	r1, #5
   d480a:	4606      	mov	r6, r0
   d480c:	486f      	ldr	r0, [pc, #444]	; (d49cc <loop+0x334>)
   d480e:	f001 fea5 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d4812:	2106      	movs	r1, #6
   d4814:	4607      	mov	r7, r0
   d4816:	486d      	ldr	r0, [pc, #436]	; (d49cc <loop+0x334>)
   d4818:	f001 fea0 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d481c:	2107      	movs	r1, #7
   d481e:	4680      	mov	r8, r0
   d4820:	486a      	ldr	r0, [pc, #424]	; (d49cc <loop+0x334>)
   d4822:	f001 fe9b 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d4826:	2108      	movs	r1, #8
   d4828:	4682      	mov	sl, r0
   d482a:	4868      	ldr	r0, [pc, #416]	; (d49cc <loop+0x334>)
   d482c:	f001 fe96 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d4830:	2109      	movs	r1, #9
   d4832:	4683      	mov	fp, r0
   d4834:	4865      	ldr	r0, [pc, #404]	; (d49cc <loop+0x334>)
   d4836:	f001 fe91 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d483a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d483c:	9302      	str	r3, [sp, #8]
   d483e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4844:	9300      	str	r3, [sp, #0]
   d4846:	e9cd b008 	strd	fp, r0, [sp, #32]
   d484a:	e9cd 8a06 	strd	r8, sl, [sp, #24]
   d484e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d4852:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
   d4856:	495e      	ldr	r1, [pc, #376]	; (d49d0 <loop+0x338>)
   d4858:	485e      	ldr	r0, [pc, #376]	; (d49d4 <loop+0x33c>)
   d485a:	9503      	str	r5, [sp, #12]
   d485c:	f7ff ff04 	bl	d4668 <_Z13telemetrySendPKcS0_z>
      imu_last_update=imu_update;
   d4860:	f8c9 4000 	str.w	r4, [r9]
    }

    switch ( IBus.readChannel(7) ) {
   d4864:	4859      	ldr	r0, [pc, #356]	; (d49cc <loop+0x334>)
   d4866:	4c5c      	ldr	r4, [pc, #368]	; (d49d8 <loop+0x340>)
   d4868:	2107      	movs	r1, #7
   d486a:	f001 fe77 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d486e:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4872:	4298      	cmp	r0, r3
   d4874:	f000 80ce 	beq.w	d4a14 <loop+0x37c>
   d4878:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d487c:	d00c      	beq.n	d4898 <loop+0x200>
      default:
      case 1000:
        if( !(mode!=BALANCE_INIT) && (mode!=BALANCE_ACTIVE) )
   d487e:	7823      	ldrb	r3, [r4, #0]
   d4880:	2b02      	cmp	r3, #2
   d4882:	d109      	bne.n	d4898 <loop+0x200>
        {
          mode=IDLE;
   d4884:	2300      	movs	r3, #0
   d4886:	7023      	strb	r3, [r4, #0]
          Serial.printlnf("STOP balanceInput from RX = %f", balanceInput );
   d4888:	f002 fdd8 	bl	d743c <_Z16_fetch_usbserialv>
   d488c:	4b4b      	ldr	r3, [pc, #300]	; (d49bc <loop+0x324>)
   d488e:	4953      	ldr	r1, [pc, #332]	; (d49dc <loop+0x344>)
   d4890:	e9d3 2300 	ldrd	r2, r3, [r3]
        break;
      case 1500:
        if( (mode!=BALANCE_INIT) && (mode!=BALANCE_ACTIVE) )
        {
          mode=BALANCE_INIT;
          Serial.printlnf("START balanceInput from RX = %f", balanceInput );
   d4894:	f7ff fcfb 	bl	d428e <_ZN5Print8printlnfEPKcz>
    //}
        
    static double prevLeftSetpoint=-1;
    static double prevRightSetpoint=-1;  

    switch(IBus.readChannel(6)) {
   d4898:	484c      	ldr	r0, [pc, #304]	; (d49cc <loop+0x334>)
   d489a:	4e51      	ldr	r6, [pc, #324]	; (d49e0 <loop+0x348>)
   d489c:	2106      	movs	r1, #6
   d489e:	f001 fe5d 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d48a2:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d48a6:	4298      	cmp	r0, r3
   d48a8:	f000 80c2 	beq.w	d4a30 <loop+0x398>
   d48ac:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d48b0:	f000 813c 	beq.w	d4b2c <loop+0x494>
      default:
      case 1000:
        if( TxOn==true )
   d48b4:	7833      	ldrb	r3, [r6, #0]
   d48b6:	b15b      	cbz	r3, d48d0 <loop+0x238>
        {
          speed=setTargetSpeed(0);
   d48b8:	2000      	movs	r0, #0
   d48ba:	f7ff feb3 	bl	d4624 <_Z14setTargetSpeedi>
   d48be:	4b49      	ldr	r3, [pc, #292]	; (d49e4 <loop+0x34c>)
          mode=IDLE;
   d48c0:	2200      	movs	r2, #0
          speed=setTargetSpeed(0);
   d48c2:	6018      	str	r0, [r3, #0]
          mode=IDLE;
   d48c4:	7022      	strb	r2, [r4, #0]
          TxOn=false;
   d48c6:	7032      	strb	r2, [r6, #0]
          RGB.color(0, 255, 0);
   d48c8:	21ff      	movs	r1, #255	; 0xff
   d48ca:	4610      	mov	r0, r2
          TxOn=true;
          mode=DRIVE;
          prevLeftSetpoint=-1;
          prevRightSetpoint=-1;
          //RGB.color(255, 0, 0);
          RGB.color(0, 0, 255);
   d48cc:	f002 ff02 	bl	d76d4 <_ZN8RGBClass5colorEiii>

        }
        break;
    }

    switch(IBus.readChannel(5)) {
   d48d0:	483e      	ldr	r0, [pc, #248]	; (d49cc <loop+0x334>)
   d48d2:	2105      	movs	r1, #5
   d48d4:	f001 fe42 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d48d8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d48dc:	d135      	bne.n	d494a <loop+0x2b2>

      case 2000:
        // reset PID
        leftPID.SetMode(PID::MANUAL);
   d48de:	4842      	ldr	r0, [pc, #264]	; (d49e8 <loop+0x350>)
   d48e0:	2100      	movs	r1, #0
   d48e2:	f001 f963 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
        leftOutput=0;
   d48e6:	4b41      	ldr	r3, [pc, #260]	; (d49ec <loop+0x354>)
   d48e8:	f04f 0800 	mov.w	r8, #0
   d48ec:	f04f 0900 	mov.w	r9, #0
   d48f0:	e9c3 8900 	strd	r8, r9, [r3]
        leftPower=0;
   d48f4:	4b3e      	ldr	r3, [pc, #248]	; (d49f0 <loop+0x358>)
   d48f6:	e9c3 8900 	strd	r8, r9, [r3]
        setPwm( leftMotor, leftOutput);
   d48fa:	4b3e      	ldr	r3, [pc, #248]	; (d49f4 <loop+0x35c>)
   d48fc:	2100      	movs	r1, #0
   d48fe:	6818      	ldr	r0, [r3, #0]
   d4900:	f7ff fd82 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>

        rightPID.SetMode(PID::MANUAL);
   d4904:	483c      	ldr	r0, [pc, #240]	; (d49f8 <loop+0x360>)
   d4906:	2100      	movs	r1, #0
   d4908:	f001 f950 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
        rightOutput=0;
   d490c:	4b3b      	ldr	r3, [pc, #236]	; (d49fc <loop+0x364>)
   d490e:	e9c3 8900 	strd	r8, r9, [r3]
        rightPower=0;
   d4912:	4b3b      	ldr	r3, [pc, #236]	; (d4a00 <loop+0x368>)
   d4914:	e9c3 8900 	strd	r8, r9, [r3]
        setPwm( rightMotor, rightOutput);
   d4918:	4b3a      	ldr	r3, [pc, #232]	; (d4a04 <loop+0x36c>)
   d491a:	2100      	movs	r1, #0
   d491c:	6818      	ldr	r0, [r3, #0]
   d491e:	f7ff fd73 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>

        speed=setTargetSpeed(0);
   d4922:	2000      	movs	r0, #0
   d4924:	f7ff fe7e 	bl	d4624 <_Z14setTargetSpeedi>
   d4928:	4b2e      	ldr	r3, [pc, #184]	; (d49e4 <loop+0x34c>)
        leftPID.SetMode(PID::AUTOMATIC);
   d492a:	2101      	movs	r1, #1
        speed=setTargetSpeed(0);
   d492c:	6018      	str	r0, [r3, #0]
        leftPID.SetMode(PID::AUTOMATIC);
   d492e:	482e      	ldr	r0, [pc, #184]	; (d49e8 <loop+0x350>)
   d4930:	f001 f93c 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
        rightPID.SetMode(PID::AUTOMATIC);
   d4934:	4830      	ldr	r0, [pc, #192]	; (d49f8 <loop+0x360>)
   d4936:	2101      	movs	r1, #1
   d4938:	f001 f938 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>

        TxOn=false;
   d493c:	2200      	movs	r2, #0
        mode=IDLE;
        //RGB.color(0, 255, 0);
        RGB.color(0, 255, 0);
   d493e:	21ff      	movs	r1, #255	; 0xff
   d4940:	4610      	mov	r0, r2
        TxOn=false;
   d4942:	7032      	strb	r2, [r6, #0]
        mode=IDLE;
   d4944:	7022      	strb	r2, [r4, #0]
        RGB.color(0, 255, 0);
   d4946:	f002 fec5 	bl	d76d4 <_ZN8RGBClass5colorEiii>
      default:
        break;
    }
  }

  if (Serial.available())
   d494a:	f002 fd77 	bl	d743c <_Z16_fetch_usbserialv>
   d494e:	6803      	ldr	r3, [r0, #0]
   d4950:	691b      	ldr	r3, [r3, #16]
   d4952:	4798      	blx	r3
   d4954:	2800      	cmp	r0, #0
   d4956:	f000 819c 	beq.w	d4c92 <loop+0x5fa>
  {
    int inByte = Serial.read();
   d495a:	f002 fd6f 	bl	d743c <_Z16_fetch_usbserialv>
   d495e:	6803      	ldr	r3, [r0, #0]
   d4960:	695b      	ldr	r3, [r3, #20]
   d4962:	4798      	blx	r3
   d4964:	4605      	mov	r5, r0
    VERBOSE(  Serial.printlnf( "[%s] %lu -> %d  ", __FUNCTION__, millis(), inByte) ) ;
   d4966:	f002 fd69 	bl	d743c <_Z16_fetch_usbserialv>
   d496a:	4606      	mov	r6, r0
   d496c:	f002 f99c 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4970:	4a25      	ldr	r2, [pc, #148]	; (d4a08 <loop+0x370>)
   d4972:	4926      	ldr	r1, [pc, #152]	; (d4a0c <loop+0x374>)
   d4974:	9500      	str	r5, [sp, #0]
   d4976:	4603      	mov	r3, r0
   d4978:	4630      	mov	r0, r6
   d497a:	f7ff fc88 	bl	d428e <_ZN5Print8printlnfEPKcz>
    switch (inByte)
   d497e:	2d20      	cmp	r5, #32
   d4980:	f000 8134 	beq.w	d4bec <loop+0x554>
   d4984:	3d31      	subs	r5, #49	; 0x31
   d4986:	2d08      	cmp	r5, #8
   d4988:	f200 8183 	bhi.w	d4c92 <loop+0x5fa>
   d498c:	2d08      	cmp	r5, #8
   d498e:	f200 8180 	bhi.w	d4c92 <loop+0x5fa>
   d4992:	e8df f015 	tbh	[pc, r5, lsl #1]
   d4996:	015b      	.short	0x015b
   d4998:	01e501dd 	.word	0x01e501dd
   d499c:	01ed017e 	.word	0x01ed017e
   d49a0:	017e01fa 	.word	0x017e01fa
   d49a4:	02300207 	.word	0x02300207
   d49a8:	2003e300 	.word	0x2003e300
   d49ac:	2003de60 	.word	0x2003de60
   d49b0:	000d8d13 	.word	0x000d8d13
   d49b4:	42c80000 	.word	0x42c80000
   d49b8:	2003e310 	.word	0x2003e310
   d49bc:	2003e260 	.word	0x2003e260
   d49c0:	000d8d89 	.word	0x000d8d89
   d49c4:	000d8d1f 	.word	0x000d8d1f
   d49c8:	000d8d93 	.word	0x000d8d93
   d49cc:	2003e53c 	.word	0x2003e53c
   d49d0:	000d8daa 	.word	0x000d8daa
   d49d4:	000d8e3d 	.word	0x000d8e3d
   d49d8:	2003de58 	.word	0x2003de58
   d49dc:	000d8e48 	.word	0x000d8e48
   d49e0:	2003de59 	.word	0x2003de59
   d49e4:	2003e534 	.word	0x2003e534
   d49e8:	2003e368 	.word	0x2003e368
   d49ec:	2003e360 	.word	0x2003e360
   d49f0:	2003e3e0 	.word	0x2003e3e0
   d49f4:	2003e358 	.word	0x2003e358
   d49f8:	2003e438 	.word	0x2003e438
   d49fc:	2003e430 	.word	0x2003e430
   d4a00:	2003e4b0 	.word	0x2003e4b0
   d4a04:	2003e428 	.word	0x2003e428
   d4a08:	000d8ed5 	.word	0x000d8ed5
   d4a0c:	000d8cd8 	.word	0x000d8cd8
   d4a10:	2003e32c 	.word	0x2003e32c
        if( (mode!=BALANCE_INIT) && (mode!=BALANCE_ACTIVE) )
   d4a14:	7823      	ldrb	r3, [r4, #0]
   d4a16:	3b02      	subs	r3, #2
   d4a18:	2b01      	cmp	r3, #1
   d4a1a:	f67f af3d 	bls.w	d4898 <loop+0x200>
          mode=BALANCE_INIT;
   d4a1e:	2302      	movs	r3, #2
   d4a20:	7023      	strb	r3, [r4, #0]
          Serial.printlnf("START balanceInput from RX = %f", balanceInput );
   d4a22:	f002 fd0b 	bl	d743c <_Z16_fetch_usbserialv>
   d4a26:	4baa      	ldr	r3, [pc, #680]	; (d4cd0 <loop+0x638>)
   d4a28:	49aa      	ldr	r1, [pc, #680]	; (d4cd4 <loop+0x63c>)
   d4a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a2e:	e731      	b.n	d4894 <loop+0x1fc>
        if ( TxOn==false) {
   d4a30:	7831      	ldrb	r1, [r6, #0]
   d4a32:	f8df 92c4 	ldr.w	r9, [pc, #708]	; d4cf8 <loop+0x660>
   d4a36:	f8df a310 	ldr.w	sl, [pc, #784]	; d4d48 <loop+0x6b0>
   d4a3a:	b959      	cbnz	r1, d4a54 <loop+0x3bc>
          TxOn=true;
   d4a3c:	2301      	movs	r3, #1
   d4a3e:	7033      	strb	r3, [r6, #0]
          mode=DRIVE;
   d4a40:	7023      	strb	r3, [r4, #0]
          prevLeftSetpoint=-1;
   d4a42:	4ba5      	ldr	r3, [pc, #660]	; (d4cd8 <loop+0x640>)
   d4a44:	2200      	movs	r2, #0
   d4a46:	e9c9 2300 	strd	r2, r3, [r9]
          prevRightSetpoint=-1;
   d4a4a:	e9ca 2300 	strd	r2, r3, [sl]
          RGB.color(0, 0, 255);
   d4a4e:	4608      	mov	r0, r1
   d4a50:	22ff      	movs	r2, #255	; 0xff
   d4a52:	e73b      	b.n	d48cc <loop+0x234>
          int steering=IBus.readChannel(0)-1500;
   d4a54:	2100      	movs	r1, #0
   d4a56:	48a1      	ldr	r0, [pc, #644]	; (d4cdc <loop+0x644>)
   d4a58:	f8df b2f0 	ldr.w	fp, [pc, #752]	; d4d4c <loop+0x6b4>
   d4a5c:	f001 fd7e 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
          int throttle=IBus.readChannel(2)-1500;
   d4a60:	2102      	movs	r1, #2
          int steering=IBus.readChannel(0)-1500;
   d4a62:	f2a0 55dc 	subw	r5, r0, #1500	; 0x5dc
   d4a66:	4680      	mov	r8, r0
          int throttle=IBus.readChannel(2)-1500;
   d4a68:	489c      	ldr	r0, [pc, #624]	; (d4cdc <loop+0x644>)
   d4a6a:	f001 fd77 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
          if ( steering!=prevSteering || throttle!=prevThrottle )
   d4a6e:	4b9c      	ldr	r3, [pc, #624]	; (d4ce0 <loop+0x648>)
          int throttle=IBus.readChannel(2)-1500;
   d4a70:	900f      	str	r0, [sp, #60]	; 0x3c
          if ( steering!=prevSteering || throttle!=prevThrottle )
   d4a72:	681a      	ldr	r2, [r3, #0]
   d4a74:	9310      	str	r3, [sp, #64]	; 0x40
   d4a76:	42aa      	cmp	r2, r5
          int throttle=IBus.readChannel(2)-1500;
   d4a78:	f2a0 57dc 	subw	r7, r0, #1500	; 0x5dc
          if ( steering!=prevSteering || throttle!=prevThrottle )
   d4a7c:	d103      	bne.n	d4a86 <loop+0x3ee>
   d4a7e:	f8db 3000 	ldr.w	r3, [fp]
   d4a82:	42bb      	cmp	r3, r7
   d4a84:	d00a      	beq.n	d4a9c <loop+0x404>
            Serial.printlnf("throttle=%d, steering=%d", throttle, steering );
   d4a86:	f002 fcd9 	bl	d743c <_Z16_fetch_usbserialv>
   d4a8a:	462b      	mov	r3, r5
   d4a8c:	4995      	ldr	r1, [pc, #596]	; (d4ce4 <loop+0x64c>)
   d4a8e:	463a      	mov	r2, r7
   d4a90:	f7ff fbfd 	bl	d428e <_ZN5Print8printlnfEPKcz>
            prevSteering=steering;
   d4a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
            prevThrottle=throttle;
   d4a96:	f8cb 7000 	str.w	r7, [fp]
            prevSteering=steering;
   d4a9a:	601d      	str	r5, [r3, #0]
          rightSetpoint=max( min( throttle-steering, SPEED_MAX ), SPEED_MIN );
   d4a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4a9e:	eba3 0008 	sub.w	r0, r3, r8
   d4aa2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4aa6:	4b90      	ldr	r3, [pc, #576]	; (d4ce8 <loop+0x650>)
   d4aa8:	f8df 8250 	ldr.w	r8, [pc, #592]	; d4cfc <loop+0x664>
   d4aac:	bfa8      	it	ge
   d4aae:	f44f 70fa 	movge.w	r0, #500	; 0x1f4
   d4ab2:	4298      	cmp	r0, r3
   d4ab4:	bfb8      	it	lt
   d4ab6:	4618      	movlt	r0, r3
   d4ab8:	f003 fc24 	bl	d8304 <__aeabi_i2d>
   d4abc:	4602      	mov	r2, r0
   d4abe:	460b      	mov	r3, r1
   d4ac0:	e9c8 2300 	strd	r2, r3, [r8]
          if ( rightSetpoint != prevRightSetpoint ) {
   d4ac4:	e9da 2300 	ldrd	r2, r3, [sl]
   d4ac8:	f003 feee 	bl	d88a8 <__aeabi_dcmpeq>
   d4acc:	b950      	cbnz	r0, d4ae4 <loop+0x44c>
            Serial.printlnf("rightSetpoint from RX = %f", rightSetpoint );
   d4ace:	f002 fcb5 	bl	d743c <_Z16_fetch_usbserialv>
   d4ad2:	e9d8 2300 	ldrd	r2, r3, [r8]
   d4ad6:	4985      	ldr	r1, [pc, #532]	; (d4cec <loop+0x654>)
   d4ad8:	f7ff fbd9 	bl	d428e <_ZN5Print8printlnfEPKcz>
            prevRightSetpoint=rightSetpoint;
   d4adc:	e9d8 2300 	ldrd	r2, r3, [r8]
   d4ae0:	e9ca 2300 	strd	r2, r3, [sl]
          leftSetpoint=(double(max( min( throttle+steering, SPEED_MAX ), SPEED_MIN )));
   d4ae4:	443d      	add	r5, r7
   d4ae6:	4880      	ldr	r0, [pc, #512]	; (d4ce8 <loop+0x650>)
   d4ae8:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   d4aec:	bfa8      	it	ge
   d4aee:	f44f 75fa 	movge.w	r5, #500	; 0x1f4
   d4af2:	42a8      	cmp	r0, r5
   d4af4:	bfb8      	it	lt
   d4af6:	4628      	movlt	r0, r5
   d4af8:	f003 fc04 	bl	d8304 <__aeabi_i2d>
   d4afc:	4d7c      	ldr	r5, [pc, #496]	; (d4cf0 <loop+0x658>)
   d4afe:	4602      	mov	r2, r0
   d4b00:	460b      	mov	r3, r1
   d4b02:	e9c5 2300 	strd	r2, r3, [r5]
          if ( leftSetpoint != prevLeftSetpoint ){
   d4b06:	e9d9 2300 	ldrd	r2, r3, [r9]
   d4b0a:	f003 fecd 	bl	d88a8 <__aeabi_dcmpeq>
   d4b0e:	2800      	cmp	r0, #0
   d4b10:	f47f aede 	bne.w	d48d0 <loop+0x238>
            Serial.printlnf("leftSetpoint from RX = %f", leftSetpoint );
   d4b14:	f002 fc92 	bl	d743c <_Z16_fetch_usbserialv>
   d4b18:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4b1c:	4975      	ldr	r1, [pc, #468]	; (d4cf4 <loop+0x65c>)
   d4b1e:	f7ff fbb6 	bl	d428e <_ZN5Print8printlnfEPKcz>
            prevLeftSetpoint=leftSetpoint;
   d4b22:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4b26:	e9c9 2300 	strd	r2, r3, [r9]
   d4b2a:	e6d1      	b.n	d48d0 <loop+0x238>
        if ( TxOn==false) {
   d4b2c:	7832      	ldrb	r2, [r6, #0]
   d4b2e:	4d72      	ldr	r5, [pc, #456]	; (d4cf8 <loop+0x660>)
   d4b30:	f8df 8214 	ldr.w	r8, [pc, #532]	; d4d48 <loop+0x6b0>
   d4b34:	b95a      	cbnz	r2, d4b4e <loop+0x4b6>
          prevLeftSetpoint=-1;
   d4b36:	4968      	ldr	r1, [pc, #416]	; (d4cd8 <loop+0x640>)
   d4b38:	2000      	movs	r0, #0
          TxOn=true;
   d4b3a:	2301      	movs	r3, #1
          prevLeftSetpoint=-1;
   d4b3c:	e9c5 0100 	strd	r0, r1, [r5]
          prevRightSetpoint=-1;
   d4b40:	e9c8 0100 	strd	r0, r1, [r8]
          TxOn=true;
   d4b44:	7033      	strb	r3, [r6, #0]
          mode=DRIVE;
   d4b46:	7023      	strb	r3, [r4, #0]
          RGB.color(255, 0, 0);
   d4b48:	4611      	mov	r1, r2
   d4b4a:	20ff      	movs	r0, #255	; 0xff
   d4b4c:	e6be      	b.n	d48cc <loop+0x234>
          rightSetpoint=max( min( IBus.readChannel(1)-1500, SPEED_MAX ), SPEED_MIN );
   d4b4e:	2101      	movs	r1, #1
   d4b50:	4862      	ldr	r0, [pc, #392]	; (d4cdc <loop+0x644>)
   d4b52:	4f6a      	ldr	r7, [pc, #424]	; (d4cfc <loop+0x664>)
   d4b54:	f001 fd02 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d4b58:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
   d4b5c:	4b62      	ldr	r3, [pc, #392]	; (d4ce8 <loop+0x650>)
   d4b5e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4b62:	bfa8      	it	ge
   d4b64:	f44f 70fa 	movge.w	r0, #500	; 0x1f4
   d4b68:	4298      	cmp	r0, r3
   d4b6a:	bfb8      	it	lt
   d4b6c:	4618      	movlt	r0, r3
   d4b6e:	f003 fbc9 	bl	d8304 <__aeabi_i2d>
   d4b72:	4602      	mov	r2, r0
   d4b74:	460b      	mov	r3, r1
   d4b76:	e9c7 2300 	strd	r2, r3, [r7]
          if ( rightSetpoint != prevRightSetpoint ) {
   d4b7a:	e9d8 2300 	ldrd	r2, r3, [r8]
   d4b7e:	f003 fe93 	bl	d88a8 <__aeabi_dcmpeq>
   d4b82:	b950      	cbnz	r0, d4b9a <loop+0x502>
            Serial.printlnf("rightSetpoint from RX = %f", rightSetpoint );
   d4b84:	f002 fc5a 	bl	d743c <_Z16_fetch_usbserialv>
   d4b88:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4b8c:	4957      	ldr	r1, [pc, #348]	; (d4cec <loop+0x654>)
   d4b8e:	f7ff fb7e 	bl	d428e <_ZN5Print8printlnfEPKcz>
            prevRightSetpoint=rightSetpoint;
   d4b92:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4b96:	e9c8 2300 	strd	r2, r3, [r8]
          leftSetpoint=(double(max( min( IBus.readChannel(2)-1500, SPEED_MAX ), SPEED_MIN )));
   d4b9a:	2102      	movs	r1, #2
   d4b9c:	484f      	ldr	r0, [pc, #316]	; (d4cdc <loop+0x644>)
   d4b9e:	4f54      	ldr	r7, [pc, #336]	; (d4cf0 <loop+0x658>)
   d4ba0:	f001 fcdc 	bl	d655c <_ZN10FlySkyIBus11readChannelEh>
   d4ba4:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
   d4ba8:	4b4f      	ldr	r3, [pc, #316]	; (d4ce8 <loop+0x650>)
   d4baa:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4bae:	bfa8      	it	ge
   d4bb0:	f44f 70fa 	movge.w	r0, #500	; 0x1f4
   d4bb4:	4298      	cmp	r0, r3
   d4bb6:	bfb8      	it	lt
   d4bb8:	4618      	movlt	r0, r3
   d4bba:	f003 fba3 	bl	d8304 <__aeabi_i2d>
   d4bbe:	4602      	mov	r2, r0
   d4bc0:	460b      	mov	r3, r1
   d4bc2:	e9c7 2300 	strd	r2, r3, [r7]
          if ( leftSetpoint != prevLeftSetpoint ){
   d4bc6:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4bca:	f003 fe6d 	bl	d88a8 <__aeabi_dcmpeq>
   d4bce:	2800      	cmp	r0, #0
   d4bd0:	f47f ae7e 	bne.w	d48d0 <loop+0x238>
            Serial.printlnf("leftSetpoint from RX = %f", leftSetpoint );
   d4bd4:	f002 fc32 	bl	d743c <_Z16_fetch_usbserialv>
   d4bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4bdc:	4945      	ldr	r1, [pc, #276]	; (d4cf4 <loop+0x65c>)
   d4bde:	f7ff fb56 	bl	d428e <_ZN5Print8printlnfEPKcz>
            prevLeftSetpoint=leftSetpoint;
   d4be2:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4be6:	e9c5 2300 	strd	r2, r3, [r5]
   d4bea:	e671      	b.n	d48d0 <loop+0x238>
    {
        case ' ':
          // reset PID
          leftPID.SetMode(PID::MANUAL);
   d4bec:	4844      	ldr	r0, [pc, #272]	; (d4d00 <loop+0x668>)
   d4bee:	2100      	movs	r1, #0
   d4bf0:	f000 ffdc 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
          leftOutput=0;
   d4bf4:	4b43      	ldr	r3, [pc, #268]	; (d4d04 <loop+0x66c>)
   d4bf6:	2600      	movs	r6, #0
   d4bf8:	2700      	movs	r7, #0
   d4bfa:	e9c3 6700 	strd	r6, r7, [r3]
          leftPower=0;
   d4bfe:	4b42      	ldr	r3, [pc, #264]	; (d4d08 <loop+0x670>)
   d4c00:	e9c3 6700 	strd	r6, r7, [r3]
          setPwm( leftMotor, leftOutput);
   d4c04:	4b41      	ldr	r3, [pc, #260]	; (d4d0c <loop+0x674>)
   d4c06:	2100      	movs	r1, #0
   d4c08:	6818      	ldr	r0, [r3, #0]
   d4c0a:	f7ff fbfd 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>

          rightPID.SetMode(PID::MANUAL);
   d4c0e:	4840      	ldr	r0, [pc, #256]	; (d4d10 <loop+0x678>)
   d4c10:	2100      	movs	r1, #0
   d4c12:	f000 ffcb 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
          rightOutput=0;
   d4c16:	4b3f      	ldr	r3, [pc, #252]	; (d4d14 <loop+0x67c>)
   d4c18:	e9c3 6700 	strd	r6, r7, [r3]
          rightPower=0;
   d4c1c:	4b3e      	ldr	r3, [pc, #248]	; (d4d18 <loop+0x680>)
   d4c1e:	e9c3 6700 	strd	r6, r7, [r3]
          setPwm( rightMotor, rightOutput);
   d4c22:	4b3e      	ldr	r3, [pc, #248]	; (d4d1c <loop+0x684>)
   d4c24:	2100      	movs	r1, #0
   d4c26:	6818      	ldr	r0, [r3, #0]
   d4c28:	f7ff fbee 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>

          speed=setTargetSpeed(0);
   d4c2c:	2000      	movs	r0, #0
   d4c2e:	f7ff fcf9 	bl	d4624 <_Z14setTargetSpeedi>
   d4c32:	4b3b      	ldr	r3, [pc, #236]	; (d4d20 <loop+0x688>)
          leftPID.SetMode(PID::AUTOMATIC);
   d4c34:	2101      	movs	r1, #1
          speed=setTargetSpeed(0);
   d4c36:	6018      	str	r0, [r3, #0]
          leftPID.SetMode(PID::AUTOMATIC);
   d4c38:	4831      	ldr	r0, [pc, #196]	; (d4d00 <loop+0x668>)
   d4c3a:	f000 ffb7 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>
          rightPID.SetMode(PID::AUTOMATIC);
   d4c3e:	4834      	ldr	r0, [pc, #208]	; (d4d10 <loop+0x678>)
   d4c40:	2101      	movs	r1, #1
   d4c42:	f000 ffb3 	bl	d5bac <_ZN3PID7SetModeENS_6mode_tE>

          mode=IDLE;
   d4c46:	2300      	movs	r3, #0
          VERBOSE(  Serial.printlnf( "[%s] %lu -> BALANCE_INIT  ", __FUNCTION__, millis()) ) ;
          mode=BALANCE_INIT;
          break;         
        case '6':
          VERBOSE(  Serial.printlnf( "[%s] %lu -> MQTT_TEST  ", __FUNCTION__, millis()) ) ;
          mode=MQTT_TEST;
   d4c48:	7023      	strb	r3, [r4, #0]
          break;              
   d4c4a:	e022      	b.n	d4c92 <loop+0x5fa>
          bkp+=1;
   d4c4c:	4e35      	ldr	r6, [pc, #212]	; (d4d24 <loop+0x68c>)
   d4c4e:	4b36      	ldr	r3, [pc, #216]	; (d4d28 <loop+0x690>)
   d4c50:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4c54:	2200      	movs	r2, #0
   d4c56:	f003 fa09 	bl	d806c <__adddf3>
          balancePID.SetTunings(bkp, bki, bkd);
   d4c5a:	4b34      	ldr	r3, [pc, #208]	; (d4d2c <loop+0x694>)
   d4c5c:	ed93 2b00 	vldr	d2, [r3]
   d4c60:	4b33      	ldr	r3, [pc, #204]	; (d4d30 <loop+0x698>)
          bkp-=1;
   d4c62:	e9c6 0100 	strd	r0, r1, [r6]
   d4c66:	ec41 0b10 	vmov	d0, r0, r1
          balancePID.SetTunings(bkp, bki, bkd);
   d4c6a:	ed93 1b00 	vldr	d1, [r3]
   d4c6e:	4831      	ldr	r0, [pc, #196]	; (d4d34 <loop+0x69c>)
   d4c70:	f000 fe9a 	bl	d59a8 <_ZN3PID10SetTuningsEddd>
          VERBOSE(  Serial.printlnf( "[%s] %lu BALANCE PID BKp-> %f ", __FUNCTION__, millis(), bkp) ) ;
   d4c74:	f002 fbe2 	bl	d743c <_Z16_fetch_usbserialv>
   d4c78:	4605      	mov	r5, r0
   d4c7a:	f002 f815 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4c7e:	4603      	mov	r3, r0
   d4c80:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4c84:	4a2c      	ldr	r2, [pc, #176]	; (d4d38 <loop+0x6a0>)
   d4c86:	e9cd 0100 	strd	r0, r1, [sp]
   d4c8a:	492c      	ldr	r1, [pc, #176]	; (d4d3c <loop+0x6a4>)
   d4c8c:	4628      	mov	r0, r5
   d4c8e:	f7ff fafe 	bl	d428e <_ZN5Print8printlnfEPKcz>
		noInterrupts();
   d4c92:	f002 fd4a 	bl	d772a <_Z12noInterruptsv>
		int32_t ret = position;
   d4c96:	4b2a      	ldr	r3, [pc, #168]	; (d4d40 <loop+0x6a8>)
   d4c98:	695e      	ldr	r6, [r3, #20]
		interrupts();
   d4c9a:	f002 fd48 	bl	d772e <_Z10interruptsv>
		noInterrupts();
   d4c9e:	f002 fd44 	bl	d772a <_Z12noInterruptsv>
		int32_t ret = position;
   d4ca2:	4b28      	ldr	r3, [pc, #160]	; (d4d44 <loop+0x6ac>)
   d4ca4:	695b      	ldr	r3, [r3, #20]
   d4ca6:	930f      	str	r3, [sp, #60]	; 0x3c
		interrupts();
   d4ca8:	f002 fd41 	bl	d772e <_Z10interruptsv>
   d4cac:	f001 fffc 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4cb0:	7823      	ldrb	r3, [r4, #0]
   d4cb2:	3b01      	subs	r3, #1
   d4cb4:	4605      	mov	r5, r0
  //VERBOSE(  Serial.printlnf( "[%s] %d -> LeftEncoder = %d  ", __FUNCTION__, millis(),newLeftPosition) ) ;

  long newRightPosition = rightEnc.read();
  //VERBOSE(  Serial.printlnf( "[%s] %d -> RightEncoder = %d  ", __FUNCTION__, millis(),newRightPosition) ) ;
  int time=millis();
  switch(mode)
   d4cb6:	2b07      	cmp	r3, #7
   d4cb8:	f200 80b6 	bhi.w	d4e28 <loop+0x790>
   d4cbc:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc0:	00b90153 	.word	0x00b90153
   d4cc4:	00b400d5 	.word	0x00b400d5
   d4cc8:	00b400b4 	.word	0x00b400b4
   d4ccc:	009e02e3 	.word	0x009e02e3
   d4cd0:	2003e260 	.word	0x2003e260
   d4cd4:	000d8e67 	.word	0x000d8e67
   d4cd8:	bff00000 	.word	0xbff00000
   d4cdc:	2003e53c 	.word	0x2003e53c
   d4ce0:	2003dda0 	.word	0x2003dda0
   d4ce4:	000d8e87 	.word	0x000d8e87
   d4ce8:	fffffe0c 	.word	0xfffffe0c
   d4cec:	000d8ea0 	.word	0x000d8ea0
   d4cf0:	2003e3e8 	.word	0x2003e3e8
   d4cf4:	000d8ebb 	.word	0x000d8ebb
   d4cf8:	2003dda8 	.word	0x2003dda8
   d4cfc:	2003e4b8 	.word	0x2003e4b8
   d4d00:	2003e368 	.word	0x2003e368
   d4d04:	2003e360 	.word	0x2003e360
   d4d08:	2003e3e0 	.word	0x2003e3e0
   d4d0c:	2003e358 	.word	0x2003e358
   d4d10:	2003e438 	.word	0x2003e438
   d4d14:	2003e430 	.word	0x2003e430
   d4d18:	2003e4b0 	.word	0x2003e4b0
   d4d1c:	2003e428 	.word	0x2003e428
   d4d20:	2003e534 	.word	0x2003e534
   d4d24:	2003ddd0 	.word	0x2003ddd0
   d4d28:	3ff00000 	.word	0x3ff00000
   d4d2c:	2003e2f0 	.word	0x2003e2f0
   d4d30:	2003e2f8 	.word	0x2003e2f8
   d4d34:	2003e270 	.word	0x2003e270
   d4d38:	000d8ed5 	.word	0x000d8ed5
   d4d3c:	000d8eda 	.word	0x000d8eda
   d4d40:	2003e330 	.word	0x2003e330
   d4d44:	2003e400 	.word	0x2003e400
   d4d48:	2003ddb0 	.word	0x2003ddb0
   d4d4c:	2003dda4 	.word	0x2003dda4
          bkp-=1;
   d4d50:	4e8d      	ldr	r6, [pc, #564]	; (d4f88 <loop+0x8f0>)
   d4d52:	4b8e      	ldr	r3, [pc, #568]	; (d4f8c <loop+0x8f4>)
   d4d54:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4d58:	2200      	movs	r2, #0
   d4d5a:	f003 f985 	bl	d8068 <__aeabi_dsub>
   d4d5e:	e77c      	b.n	d4c5a <loop+0x5c2>
          speed=setTargetSpeed(-speed);
   d4d60:	4d8b      	ldr	r5, [pc, #556]	; (d4f90 <loop+0x8f8>)
   d4d62:	6828      	ldr	r0, [r5, #0]
   d4d64:	4240      	negs	r0, r0
   d4d66:	f7ff fc5d 	bl	d4624 <_Z14setTargetSpeedi>
          mode=DRIVE;
   d4d6a:	2301      	movs	r3, #1
          speed=setTargetSpeed(-speed);
   d4d6c:	6028      	str	r0, [r5, #0]
          mode=DRIVE;
   d4d6e:	e76b      	b.n	d4c48 <loop+0x5b0>
          VERBOSE(  Serial.printlnf( "[%s] %lu -> BALANCE_INIT  ", __FUNCTION__, millis()) ) ;
   d4d70:	f002 fb64 	bl	d743c <_Z16_fetch_usbserialv>
   d4d74:	4605      	mov	r5, r0
   d4d76:	f001 ff97 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4d7a:	4a86      	ldr	r2, [pc, #536]	; (d4f94 <loop+0x8fc>)
   d4d7c:	4986      	ldr	r1, [pc, #536]	; (d4f98 <loop+0x900>)
   d4d7e:	4603      	mov	r3, r0
   d4d80:	4628      	mov	r0, r5
   d4d82:	f7ff fa84 	bl	d428e <_ZN5Print8printlnfEPKcz>
          mode=BALANCE_INIT;
   d4d86:	2302      	movs	r3, #2
   d4d88:	e75e      	b.n	d4c48 <loop+0x5b0>
          VERBOSE(  Serial.printlnf( "[%s] %lu -> MQTT_TEST  ", __FUNCTION__, millis()) ) ;
   d4d8a:	f002 fb57 	bl	d743c <_Z16_fetch_usbserialv>
   d4d8e:	4605      	mov	r5, r0
   d4d90:	f001 ff8a 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4d94:	4a7f      	ldr	r2, [pc, #508]	; (d4f94 <loop+0x8fc>)
   d4d96:	4981      	ldr	r1, [pc, #516]	; (d4f9c <loop+0x904>)
   d4d98:	4603      	mov	r3, r0
   d4d9a:	4628      	mov	r0, r5
   d4d9c:	f7ff fa77 	bl	d428e <_ZN5Print8printlnfEPKcz>
          mode=MQTT_TEST;
   d4da0:	2308      	movs	r3, #8
   d4da2:	e751      	b.n	d4c48 <loop+0x5b0>
          if( mode==AUTOTUNE) {
   d4da4:	7823      	ldrb	r3, [r4, #0]
   d4da6:	4d7e      	ldr	r5, [pc, #504]	; (d4fa0 <loop+0x908>)
   d4da8:	2b07      	cmp	r3, #7
   d4daa:	d105      	bne.n	d4db8 <loop+0x720>
            aTune.Cancel();
   d4dac:	487d      	ldr	r0, [pc, #500]	; (d4fa4 <loop+0x90c>)
   d4dae:	f000 ff91 	bl	d5cd4 <_ZN9PID_ATune6CancelEv>
            tuning = false;
   d4db2:	2300      	movs	r3, #0
   d4db4:	702b      	strb	r3, [r5, #0]
            mode=IDLE;
   d4db6:	e747      	b.n	d4c48 <loop+0x5b0>
            mode=AUTOTUNE;
   d4db8:	2307      	movs	r3, #7
   d4dba:	7023      	strb	r3, [r4, #0]
            leftOutput=aTuneStartValue;
   d4dbc:	4b7a      	ldr	r3, [pc, #488]	; (d4fa8 <loop+0x910>)
   d4dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
   d4dc2:	4b7a      	ldr	r3, [pc, #488]	; (d4fac <loop+0x914>)
   d4dc4:	e9c3 0100 	strd	r0, r1, [r3]
            aTune.SetNoiseBand(aTuneNoise);
   d4dc8:	4b79      	ldr	r3, [pc, #484]	; (d4fb0 <loop+0x918>)
   d4dca:	4876      	ldr	r0, [pc, #472]	; (d4fa4 <loop+0x90c>)
   d4dcc:	ed93 0b00 	vldr	d0, [r3]
   d4dd0:	f001 f96f 	bl	d60b2 <_ZN9PID_ATune12SetNoiseBandEd>
            aTune.SetOutputStep(aTuneStep);
   d4dd4:	4b77      	ldr	r3, [pc, #476]	; (d4fb4 <loop+0x91c>)
   d4dd6:	4873      	ldr	r0, [pc, #460]	; (d4fa4 <loop+0x90c>)
   d4dd8:	ed93 0b00 	vldr	d0, [r3]
   d4ddc:	f001 f966 	bl	d60ac <_ZN9PID_ATune13SetOutputStepEd>
            aTune.SetLookbackSec((int)aTuneLookBack);
   d4de0:	4b75      	ldr	r3, [pc, #468]	; (d4fb8 <loop+0x920>)
   d4de2:	4870      	ldr	r0, [pc, #448]	; (d4fa4 <loop+0x90c>)
   d4de4:	6819      	ldr	r1, [r3, #0]
   d4de6:	f001 f967 	bl	d60b8 <_ZN9PID_ATune14SetLookbackSecEi>
            tuning=true;
   d4dea:	2301      	movs	r3, #1
   d4dec:	702b      	strb	r3, [r5, #0]
            serialTime = 0;
   d4dee:	4b73      	ldr	r3, [pc, #460]	; (d4fbc <loop+0x924>)
   d4df0:	2200      	movs	r2, #0
   d4df2:	601a      	str	r2, [r3, #0]
   d4df4:	e74d      	b.n	d4c92 <loop+0x5fa>
          SleepStateToggle();
   d4df6:	f7ff fa69 	bl	d42cc <_Z16SleepStateTogglev>
          break;
   d4dfa:	e74a      	b.n	d4c92 <loop+0x5fa>
  {
    case MQTT_TEST:
      VERBOSE(  Serial.printlnf( "[%s] %lu -> MQTT_TEST  ", __FUNCTION__, millis()) ) ;
   d4dfc:	f002 fb1e 	bl	d743c <_Z16_fetch_usbserialv>
   d4e00:	4604      	mov	r4, r0
   d4e02:	f001 ff51 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4e06:	4a63      	ldr	r2, [pc, #396]	; (d4f94 <loop+0x8fc>)
   d4e08:	4964      	ldr	r1, [pc, #400]	; (d4f9c <loop+0x904>)
   d4e0a:	4603      	mov	r3, r0
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	f7ff fa3e 	bl	d428e <_ZN5Print8printlnfEPKcz>
      telemetrySend( "robot/test", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\": \"test\" }",Time.now(), millis() );
   d4e12:	f002 fd15 	bl	d7840 <_ZN9TimeClass3nowEv>
   d4e16:	900f      	str	r0, [sp, #60]	; 0x3c
   d4e18:	f001 ff46 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4e1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d4e1e:	4968      	ldr	r1, [pc, #416]	; (d4fc0 <loop+0x928>)
   d4e20:	4603      	mov	r3, r0
   d4e22:	4868      	ldr	r0, [pc, #416]	; (d4fc4 <loop+0x92c>)
   d4e24:	f7ff fc20 	bl	d4668 <_Z13telemetrySendPKcS0_z>
        }
      }
      break;
  }

}
   d4e28:	b01f      	add	sp, #124	; 0x7c
   d4e2a:	ecbd 8b0a 	vpop	{d8-d12}
   d4e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( abs(balanceInput)<BALANCE_THRESHOLD_START )
   d4e32:	4d65      	ldr	r5, [pc, #404]	; (d4fc8 <loop+0x930>)
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   d4e34:	e9d5 0300 	ldrd	r0, r3, [r5]
   d4e38:	2200      	movs	r2, #0
   d4e3a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d4e3e:	4b63      	ldr	r3, [pc, #396]	; (d4fcc <loop+0x934>)
   d4e40:	f003 fd3c 	bl	d88bc <__aeabi_dcmplt>
   d4e44:	2800      	cmp	r0, #0
   d4e46:	d0ef      	beq.n	d4e28 <loop+0x790>
        mode=BALANCE_ACTIVE;
   d4e48:	2303      	movs	r3, #3
   d4e4a:	7023      	strb	r3, [r4, #0]
        Serial.printlnf( "balance goes active:  %lu, %f", millis(), balanceInput ) ;
   d4e4c:	f002 faf6 	bl	d743c <_Z16_fetch_usbserialv>
   d4e50:	4604      	mov	r4, r0
   d4e52:	f001 ff29 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4e56:	4602      	mov	r2, r0
   d4e58:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4e5c:	e9cd 0100 	strd	r0, r1, [sp]
   d4e60:	495b      	ldr	r1, [pc, #364]	; (d4fd0 <loop+0x938>)
   d4e62:	4620      	mov	r0, r4
   d4e64:	f7ff fa13 	bl	d428e <_ZN5Print8printlnfEPKcz>
   d4e68:	e7de      	b.n	d4e28 <loop+0x790>
      if ( abs(balanceInput)>BALANCE_THRESHOLD_MAX )
   d4e6a:	4f57      	ldr	r7, [pc, #348]	; (d4fc8 <loop+0x930>)
   d4e6c:	e9d7 0300 	ldrd	r0, r3, [r7]
   d4e70:	2200      	movs	r2, #0
   d4e72:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d4e76:	4b57      	ldr	r3, [pc, #348]	; (d4fd4 <loop+0x93c>)
   d4e78:	f003 fd3e 	bl	d88f8 <__aeabi_dcmpgt>
   d4e7c:	b178      	cbz	r0, d4e9e <loop+0x806>
        mode=BALANCE_INIT;
   d4e7e:	2302      	movs	r3, #2
   d4e80:	7023      	strb	r3, [r4, #0]
        Serial.printlnf( "balance goes idle: %lu, %f", millis(), balanceInput ) ;
   d4e82:	f002 fadb 	bl	d743c <_Z16_fetch_usbserialv>
   d4e86:	4604      	mov	r4, r0
   d4e88:	f001 ff0e 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4e8c:	4602      	mov	r2, r0
   d4e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
   d4e92:	e9cd 0100 	strd	r0, r1, [sp]
   d4e96:	4950      	ldr	r1, [pc, #320]	; (d4fd8 <loop+0x940>)
   d4e98:	4620      	mov	r0, r4
   d4e9a:	f7ff f9f8 	bl	d428e <_ZN5Print8printlnfEPKcz>
      if ( balancePID.Compute() )
   d4e9e:	484f      	ldr	r0, [pc, #316]	; (d4fdc <loop+0x944>)
   d4ea0:	f000 fcfc 	bl	d589c <_ZN3PID7ComputeEv>
   d4ea4:	2800      	cmp	r0, #0
   d4ea6:	d05e      	beq.n	d4f66 <loop+0x8ce>
        leftSetpoint=balanceOutput;
   d4ea8:	4c4d      	ldr	r4, [pc, #308]	; (d4fe0 <loop+0x948>)
   d4eaa:	494e      	ldr	r1, [pc, #312]	; (d4fe4 <loop+0x94c>)
        Serial.printlnf( "balancePid { \"timestamp\": \"%lu\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\" }", millis(), balanceInput, balanceSetpoint, balanceOutput  ) ;
   d4eac:	4f4e      	ldr	r7, [pc, #312]	; (d4fe8 <loop+0x950>)
   d4eae:	f8df 9118 	ldr.w	r9, [pc, #280]	; d4fc8 <loop+0x930>
        leftSetpoint=balanceOutput;
   d4eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4eb6:	e9c1 2300 	strd	r2, r3, [r1]
        rightSetpoint=balanceOutput;
   d4eba:	494c      	ldr	r1, [pc, #304]	; (d4fec <loop+0x954>)
   d4ebc:	e9c1 2300 	strd	r2, r3, [r1]
        Serial.printlnf( "balancePid { \"timestamp\": \"%lu\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\" }", millis(), balanceInput, balanceSetpoint, balanceOutput  ) ;
   d4ec0:	f002 fabc 	bl	d743c <_Z16_fetch_usbserialv>
   d4ec4:	4680      	mov	r8, r0
   d4ec6:	f001 feef 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4eca:	4602      	mov	r2, r0
   d4ecc:	e9d4 0100 	ldrd	r0, r1, [r4]
   d4ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
   d4ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4edc:	e9d9 0100 	ldrd	r0, r1, [r9]
   d4ee0:	e9cd 0100 	strd	r0, r1, [sp]
   d4ee4:	4942      	ldr	r1, [pc, #264]	; (d4ff0 <loop+0x958>)
   d4ee6:	4640      	mov	r0, r8
   d4ee8:	f7ff f9d1 	bl	d428e <_ZN5Print8printlnfEPKcz>
        telemetrySend( "robot/balancePid", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"pid\", \"name\":\"balancePid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), balanceInput, balanceSetpoint, balanceOutput, balancePID.GetKp(), balancePID.GetKi(), balancePID.GetKd(), (balancePID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d4eec:	f002 fca8 	bl	d7840 <_ZN9TimeClass3nowEv>
   d4ef0:	9011      	str	r0, [sp, #68]	; 0x44
   d4ef2:	f001 fed9 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d4ef6:	9010      	str	r0, [sp, #64]	; 0x40
   d4ef8:	4838      	ldr	r0, [pc, #224]	; (d4fdc <loop+0x944>)
   d4efa:	ed94 bb00 	vldr	d11, [r4]
   d4efe:	e9d9 8900 	ldrd	r8, r9, [r9]
   d4f02:	e9d7 ab00 	ldrd	sl, fp, [r7]
   d4f06:	f000 febb 	bl	d5c80 <_ZN3PID5GetKpEv>
   d4f0a:	4834      	ldr	r0, [pc, #208]	; (d4fdc <loop+0x944>)
   d4f0c:	eeb0 8a40 	vmov.f32	s16, s0
   d4f10:	eef0 8a60 	vmov.f32	s17, s1
   d4f14:	f000 feb7 	bl	d5c86 <_ZN3PID5GetKiEv>
   d4f18:	4830      	ldr	r0, [pc, #192]	; (d4fdc <loop+0x944>)
   d4f1a:	eeb0 9a40 	vmov.f32	s18, s0
   d4f1e:	eef0 9a60 	vmov.f32	s19, s1
   d4f22:	f000 feb3 	bl	d5c8c <_ZN3PID5GetKdEv>
   d4f26:	482d      	ldr	r0, [pc, #180]	; (d4fdc <loop+0x944>)
   d4f28:	eeb0 aa40 	vmov.f32	s20, s0
   d4f2c:	eef0 aa60 	vmov.f32	s21, s1
   d4f30:	f000 feaf 	bl	d5c92 <_ZN3PID7GetModeEv>
   d4f34:	4c2f      	ldr	r4, [pc, #188]	; (d4ff4 <loop+0x95c>)
   d4f36:	4930      	ldr	r1, [pc, #192]	; (d4ff8 <loop+0x960>)
   d4f38:	2801      	cmp	r0, #1
   d4f3a:	bf0c      	ite	eq
   d4f3c:	4608      	moveq	r0, r1
   d4f3e:	4620      	movne	r0, r4
   d4f40:	900c      	str	r0, [sp, #48]	; 0x30
   d4f42:	ed8d ab0a 	vstr	d10, [sp, #40]	; 0x28
   d4f46:	ed8d 9b08 	vstr	d9, [sp, #32]
   d4f4a:	ed8d 8b06 	vstr	d8, [sp, #24]
   d4f4e:	ed8d bb04 	vstr	d11, [sp, #16]
   d4f52:	e9cd ab02 	strd	sl, fp, [sp, #8]
   d4f56:	e9cd 8900 	strd	r8, r9, [sp]
   d4f5a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   d4f5e:	4927      	ldr	r1, [pc, #156]	; (d4ffc <loop+0x964>)
   d4f60:	4827      	ldr	r0, [pc, #156]	; (d5000 <loop+0x968>)
   d4f62:	f7ff fb81 	bl	d4668 <_Z13telemetrySendPKcS0_z>
      if ( oldLeftTime==0 )
   d4f66:	4b27      	ldr	r3, [pc, #156]	; (d5004 <loop+0x96c>)
   d4f68:	681a      	ldr	r2, [r3, #0]
   d4f6a:	2a00      	cmp	r2, #0
   d4f6c:	d152      	bne.n	d5014 <loop+0x97c>
        oldLeftPosition = newLeftPosition;
   d4f6e:	4a26      	ldr	r2, [pc, #152]	; (d5008 <loop+0x970>)
   d4f70:	6016      	str	r6, [r2, #0]
          oldLeftTime = time;
   d4f72:	601d      	str	r5, [r3, #0]
      if ( oldRightTime==0 )
   d4f74:	4b25      	ldr	r3, [pc, #148]	; (d500c <loop+0x974>)
   d4f76:	681c      	ldr	r4, [r3, #0]
   d4f78:	2c00      	cmp	r4, #0
   d4f7a:	f040 80c0 	bne.w	d50fe <loop+0xa66>
        oldRightPosition = newRightPosition;
   d4f7e:	4a24      	ldr	r2, [pc, #144]	; (d5010 <loop+0x978>)
   d4f80:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d4f82:	6011      	str	r1, [r2, #0]
          oldLeftTime = time;
   d4f84:	601d      	str	r5, [r3, #0]
}
   d4f86:	e74f      	b.n	d4e28 <loop+0x790>
   d4f88:	2003ddd0 	.word	0x2003ddd0
   d4f8c:	3ff00000 	.word	0x3ff00000
   d4f90:	2003e534 	.word	0x2003e534
   d4f94:	000d8ed5 	.word	0x000d8ed5
   d4f98:	000d8ef9 	.word	0x000d8ef9
   d4f9c:	000d8f14 	.word	0x000d8f14
   d4fa0:	2003e538 	.word	0x2003e538
   d4fa4:	2003de68 	.word	0x2003de68
   d4fa8:	2003e258 	.word	0x2003e258
   d4fac:	2003e360 	.word	0x2003e360
   d4fb0:	2003ddc0 	.word	0x2003ddc0
   d4fb4:	2003ddc8 	.word	0x2003ddc8
   d4fb8:	2003ddb8 	.word	0x2003ddb8
   d4fbc:	2003e4c0 	.word	0x2003e4c0
   d4fc0:	000d8f2c 	.word	0x000d8f2c
   d4fc4:	000d8f60 	.word	0x000d8f60
   d4fc8:	2003e260 	.word	0x2003e260
   d4fcc:	40080000 	.word	0x40080000
   d4fd0:	000d8f6b 	.word	0x000d8f6b
   d4fd4:	40390000 	.word	0x40390000
   d4fd8:	000d8f89 	.word	0x000d8f89
   d4fdc:	2003e270 	.word	0x2003e270
   d4fe0:	2003e268 	.word	0x2003e268
   d4fe4:	2003e3e8 	.word	0x2003e3e8
   d4fe8:	2003e2e8 	.word	0x2003e2e8
   d4fec:	2003e4b8 	.word	0x2003e4b8
   d4ff0:	000d8fa4 	.word	0x000d8fa4
   d4ff4:	000d8cf3 	.word	0x000d8cf3
   d4ff8:	000d8ce9 	.word	0x000d8ce9
   d4ffc:	000d8ffb 	.word	0x000d8ffb
   d5000:	000d909a 	.word	0x000d909a
   d5004:	2003e3f4 	.word	0x2003e3f4
   d5008:	2003e3f0 	.word	0x2003e3f0
   d500c:	2003e3fc 	.word	0x2003e3fc
   d5010:	2003e3f8 	.word	0x2003e3f8
      else if (time-oldLeftTime>0)
   d5014:	eba5 0a02 	sub.w	sl, r5, r2
   d5018:	f1ba 0f00 	cmp.w	sl, #0
   d501c:	ddaa      	ble.n	d4f74 <loop+0x8dc>
        leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(time-oldLeftTime)));
   d501e:	4fa2      	ldr	r7, [pc, #648]	; (d52a8 <loop+0xc10>)
   d5020:	4ca2      	ldr	r4, [pc, #648]	; (d52ac <loop+0xc14>)
   d5022:	6838      	ldr	r0, [r7, #0]
   d5024:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5028:	1a30      	subs	r0, r6, r0
   d502a:	4358      	muls	r0, r3
   d502c:	f003 f96a 	bl	d8304 <__aeabi_i2d>
   d5030:	4680      	mov	r8, r0
   d5032:	4650      	mov	r0, sl
   d5034:	4689      	mov	r9, r1
   d5036:	f003 f965 	bl	d8304 <__aeabi_i2d>
   d503a:	4b9d      	ldr	r3, [pc, #628]	; (d52b0 <loop+0xc18>)
   d503c:	2200      	movs	r2, #0
   d503e:	f003 f9cb 	bl	d83d8 <__aeabi_dmul>
   d5042:	4602      	mov	r2, r0
   d5044:	460b      	mov	r3, r1
   d5046:	4640      	mov	r0, r8
   d5048:	4649      	mov	r1, r9
   d504a:	f003 faef 	bl	d862c <__aeabi_ddiv>
   d504e:	e9c4 0100 	strd	r0, r1, [r4]
        if ( leftPID.Compute() )
   d5052:	4898      	ldr	r0, [pc, #608]	; (d52b4 <loop+0xc1c>)
   d5054:	f000 fc22 	bl	d589c <_ZN3PID7ComputeEv>
   d5058:	46a2      	mov	sl, r4
   d505a:	2800      	cmp	r0, #0
   d505c:	d08a      	beq.n	d4f74 <loop+0x8dc>
          leftPower=adjustSpeed( leftPower, leftOutput );
   d505e:	4c96      	ldr	r4, [pc, #600]	; (d52b8 <loop+0xc20>)
   d5060:	f8df b2b0 	ldr.w	fp, [pc, #688]	; d5314 <loop+0xc7c>
  double new_speed=max(min((speed+increment), 255), -255); 
   d5064:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5068:	e9db 2300 	ldrd	r2, r3, [fp]
   d506c:	f002 fffe 	bl	d806c <__adddf3>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5070:	a389      	add	r3, pc, #548	; (adr r3, d5298 <loop+0xc00>)
   d5072:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5076:	4680      	mov	r8, r0
   d5078:	4689      	mov	r9, r1
   d507a:	f003 fc1f 	bl	d88bc <__aeabi_dcmplt>
   d507e:	2800      	cmp	r0, #0
   d5080:	d038      	beq.n	d50f4 <loop+0xa5c>
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5082:	a387      	add	r3, pc, #540	; (adr r3, d52a0 <loop+0xc08>)
   d5084:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5088:	4640      	mov	r0, r8
   d508a:	4649      	mov	r1, r9
   d508c:	f003 fc34 	bl	d88f8 <__aeabi_dcmpgt>
   d5090:	b918      	cbnz	r0, d509a <loop+0xa02>
   d5092:	f20f 290c 	addw	r9, pc, #524	; 0x20c
   d5096:	e9d9 8900 	ldrd	r8, r9, [r9]
          setPwm( leftMotor, leftPower );
   d509a:	4649      	mov	r1, r9
          leftPower=adjustSpeed( leftPower, leftOutput );
   d509c:	e9c4 8900 	strd	r8, r9, [r4]
          setPwm( leftMotor, leftPower );
   d50a0:	4640      	mov	r0, r8
   d50a2:	f003 fc49 	bl	d8938 <__aeabi_d2iz>
   d50a6:	4b85      	ldr	r3, [pc, #532]	; (d52bc <loop+0xc24>)
   d50a8:	4601      	mov	r1, r0
   d50aa:	6818      	ldr	r0, [r3, #0]
   d50ac:	f7ff f9ac 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>
          VERBOSE( Serial.printlnf( "[%s] %d - left pid input=%f, setpoint=%f, output=%f", __FUNCTION__, time, leftInput, leftSetpoint, leftOutput) );
   d50b0:	f002 f9c4 	bl	d743c <_Z16_fetch_usbserialv>
   d50b4:	e9db 2300 	ldrd	r2, r3, [fp]
   d50b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d50bc:	4b80      	ldr	r3, [pc, #512]	; (d52c0 <loop+0xc28>)
   d50be:	4981      	ldr	r1, [pc, #516]	; (d52c4 <loop+0xc2c>)
   d50c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d50c8:	e9da 2300 	ldrd	r2, r3, [sl]
   d50cc:	e9cd 2300 	strd	r2, r3, [sp]
   d50d0:	4a7d      	ldr	r2, [pc, #500]	; (d52c8 <loop+0xc30>)
   d50d2:	462b      	mov	r3, r5
   d50d4:	f7ff f8db 	bl	d428e <_ZN5Print8printlnfEPKcz>
          VERBOSE( Serial.printlnf( "[%s] %d - left power=%f", __FUNCTION__, time, leftPower) );
   d50d8:	f002 f9b0 	bl	d743c <_Z16_fetch_usbserialv>
   d50dc:	e9d4 2300 	ldrd	r2, r3, [r4]
   d50e0:	497a      	ldr	r1, [pc, #488]	; (d52cc <loop+0xc34>)
   d50e2:	e9cd 2300 	strd	r2, r3, [sp]
   d50e6:	462b      	mov	r3, r5
   d50e8:	4a77      	ldr	r2, [pc, #476]	; (d52c8 <loop+0xc30>)
   d50ea:	f7ff f8d0 	bl	d428e <_ZN5Print8printlnfEPKcz>
          oldLeftTime = time;
   d50ee:	4b78      	ldr	r3, [pc, #480]	; (d52d0 <loop+0xc38>)
          oldLeftPosition = newLeftPosition;
   d50f0:	603e      	str	r6, [r7, #0]
          oldLeftTime = time;
   d50f2:	e73e      	b.n	d4f72 <loop+0x8da>
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d50f4:	f20f 19a0 	addw	r9, pc, #416	; 0x1a0
   d50f8:	e9d9 8900 	ldrd	r8, r9, [r9]
   d50fc:	e7cd      	b.n	d509a <loop+0xa02>
      else if (time-oldRightTime>0)
   d50fe:	1b2c      	subs	r4, r5, r4
   d5100:	2c00      	cmp	r4, #0
   d5102:	f77f ae91 	ble.w	d4e28 <loop+0x790>
        rightInput = (((newRightPosition-oldRightPosition)*60000)/(18.75*64*(time-oldRightTime)));
   d5106:	4b73      	ldr	r3, [pc, #460]	; (d52d4 <loop+0xc3c>)
   d5108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d510a:	681b      	ldr	r3, [r3, #0]
   d510c:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d5304 <loop+0xc6c>
   d5110:	1ad3      	subs	r3, r2, r3
   d5112:	f64e 2060 	movw	r0, #60000	; 0xea60
   d5116:	4358      	muls	r0, r3
   d5118:	f003 f8f4 	bl	d8304 <__aeabi_i2d>
   d511c:	4606      	mov	r6, r0
   d511e:	4620      	mov	r0, r4
   d5120:	460f      	mov	r7, r1
   d5122:	f003 f8ef 	bl	d8304 <__aeabi_i2d>
   d5126:	4b62      	ldr	r3, [pc, #392]	; (d52b0 <loop+0xc18>)
   d5128:	2200      	movs	r2, #0
   d512a:	f003 f955 	bl	d83d8 <__aeabi_dmul>
   d512e:	4602      	mov	r2, r0
   d5130:	460b      	mov	r3, r1
   d5132:	4630      	mov	r0, r6
   d5134:	4639      	mov	r1, r7
   d5136:	f003 fa79 	bl	d862c <__aeabi_ddiv>
   d513a:	e9c8 0100 	strd	r0, r1, [r8]
        if ( rightPID.Compute() )
   d513e:	4866      	ldr	r0, [pc, #408]	; (d52d8 <loop+0xc40>)
   d5140:	f000 fbac 	bl	d589c <_ZN3PID7ComputeEv>
   d5144:	2800      	cmp	r0, #0
   d5146:	f43f ae6f 	beq.w	d4e28 <loop+0x790>
            telemetrySend( "robot/rightPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d514a:	f002 fb79 	bl	d7840 <_ZN9TimeClass3nowEv>
   d514e:	9011      	str	r0, [sp, #68]	; 0x44
   d5150:	f001 fdaa 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d5154:	4e61      	ldr	r6, [pc, #388]	; (d52dc <loop+0xc44>)
   d5156:	4c62      	ldr	r4, [pc, #392]	; (d52e0 <loop+0xc48>)
   d5158:	9010      	str	r0, [sp, #64]	; 0x40
   d515a:	485f      	ldr	r0, [pc, #380]	; (d52d8 <loop+0xc40>)
   d515c:	e9d8 ab00 	ldrd	sl, fp, [r8]
   d5160:	ed96 bb00 	vldr	d11, [r6]
   d5164:	ed94 cb00 	vldr	d12, [r4]
   d5168:	f000 fd8a 	bl	d5c80 <_ZN3PID5GetKpEv>
   d516c:	485a      	ldr	r0, [pc, #360]	; (d52d8 <loop+0xc40>)
   d516e:	eeb0 8a40 	vmov.f32	s16, s0
   d5172:	eef0 8a60 	vmov.f32	s17, s1
   d5176:	f000 fd86 	bl	d5c86 <_ZN3PID5GetKiEv>
   d517a:	4857      	ldr	r0, [pc, #348]	; (d52d8 <loop+0xc40>)
   d517c:	eeb0 9a40 	vmov.f32	s18, s0
   d5180:	eef0 9a60 	vmov.f32	s19, s1
   d5184:	f000 fd82 	bl	d5c8c <_ZN3PID5GetKdEv>
   d5188:	4853      	ldr	r0, [pc, #332]	; (d52d8 <loop+0xc40>)
   d518a:	eeb0 aa40 	vmov.f32	s20, s0
   d518e:	eef0 aa60 	vmov.f32	s21, s1
   d5192:	f000 fd7e 	bl	d5c92 <_ZN3PID7GetModeEv>
   d5196:	46a0      	mov	r8, r4
   d5198:	4952      	ldr	r1, [pc, #328]	; (d52e4 <loop+0xc4c>)
   d519a:	4c53      	ldr	r4, [pc, #332]	; (d52e8 <loop+0xc50>)
   d519c:	2801      	cmp	r0, #1
   d519e:	bf0c      	ite	eq
   d51a0:	4608      	moveq	r0, r1
   d51a2:	4620      	movne	r0, r4
            rightPower=adjustSpeed( rightPower, rightOutput );
   d51a4:	4c51      	ldr	r4, [pc, #324]	; (d52ec <loop+0xc54>)
            telemetrySend( "robot/rightPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d51a6:	4952      	ldr	r1, [pc, #328]	; (d52f0 <loop+0xc58>)
   d51a8:	900c      	str	r0, [sp, #48]	; 0x30
   d51aa:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   d51ae:	4851      	ldr	r0, [pc, #324]	; (d52f4 <loop+0xc5c>)
   d51b0:	ed8d ab0a 	vstr	d10, [sp, #40]	; 0x28
   d51b4:	ed8d 9b08 	vstr	d9, [sp, #32]
   d51b8:	ed8d 8b06 	vstr	d8, [sp, #24]
   d51bc:	ed8d cb04 	vstr	d12, [sp, #16]
   d51c0:	ed8d bb02 	vstr	d11, [sp, #8]
   d51c4:	e9cd ab00 	strd	sl, fp, [sp]
   d51c8:	f7ff fa4e 	bl	d4668 <_Z13telemetrySendPKcS0_z>
  double new_speed=max(min((speed+increment), 255), -255); 
   d51cc:	e9d8 2300 	ldrd	r2, r3, [r8]
   d51d0:	e9d4 0100 	ldrd	r0, r1, [r4]
   d51d4:	f002 ff4a 	bl	d806c <__adddf3>
   d51d8:	a32f      	add	r3, pc, #188	; (adr r3, d5298 <loop+0xc00>)
   d51da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d51de:	46b1      	mov	r9, r6
   d51e0:	460f      	mov	r7, r1
   d51e2:	4606      	mov	r6, r0
   d51e4:	f003 fb6a 	bl	d88bc <__aeabi_dcmplt>
   d51e8:	2800      	cmp	r0, #0
   d51ea:	d048      	beq.n	d527e <loop+0xbe6>
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d51ec:	a32c      	add	r3, pc, #176	; (adr r3, d52a0 <loop+0xc08>)
   d51ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d51f2:	4630      	mov	r0, r6
   d51f4:	4639      	mov	r1, r7
   d51f6:	f003 fb7f 	bl	d88f8 <__aeabi_dcmpgt>
   d51fa:	b910      	cbnz	r0, d5202 <loop+0xb6a>
   d51fc:	a728      	add	r7, pc, #160	; (adr r7, d52a0 <loop+0xc08>)
   d51fe:	e9d7 6700 	ldrd	r6, r7, [r7]
            setPwm( rightMotor, rightPower);
   d5202:	4639      	mov	r1, r7
            rightPower=adjustSpeed( rightPower, rightOutput );
   d5204:	e9c4 6700 	strd	r6, r7, [r4]
            setPwm( rightMotor, rightPower);
   d5208:	4630      	mov	r0, r6
   d520a:	f003 fb95 	bl	d8938 <__aeabi_d2iz>
   d520e:	4b3a      	ldr	r3, [pc, #232]	; (d52f8 <loop+0xc60>)
   d5210:	4601      	mov	r1, r0
   d5212:	6818      	ldr	r0, [r3, #0]
   d5214:	f7ff f8f8 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>
            telemetrySend( "robot/rightPower", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"power\", \"name\":\"rightPower\", \"power\" : %f  }", Time.now(), millis(), rightPower ) ;
   d5218:	f002 fb12 	bl	d7840 <_ZN9TimeClass3nowEv>
   d521c:	9010      	str	r0, [sp, #64]	; 0x40
   d521e:	f001 fd43 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d5222:	4603      	mov	r3, r0
   d5224:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5228:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d522a:	e9cd 0100 	strd	r0, r1, [sp]
   d522e:	4933      	ldr	r1, [pc, #204]	; (d52fc <loop+0xc64>)
   d5230:	4833      	ldr	r0, [pc, #204]	; (d5300 <loop+0xc68>)
   d5232:	f7ff fa19 	bl	d4668 <_Z13telemetrySendPKcS0_z>
            VERBOSE( Serial.printlnf( "[%s] %d - right pid input=%f, setpoint=%f, output=%f", __FUNCTION__, time, rightInput, rightSetpoint, rightOutput) );
   d5236:	f002 f901 	bl	d743c <_Z16_fetch_usbserialv>
   d523a:	e9d8 2300 	ldrd	r2, r3, [r8]
   d523e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d5242:	e9d9 2300 	ldrd	r2, r3, [r9]
   d5246:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d524a:	4b2e      	ldr	r3, [pc, #184]	; (d5304 <loop+0xc6c>)
   d524c:	492e      	ldr	r1, [pc, #184]	; (d5308 <loop+0xc70>)
   d524e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5252:	e9cd 2300 	strd	r2, r3, [sp]
   d5256:	4a1c      	ldr	r2, [pc, #112]	; (d52c8 <loop+0xc30>)
   d5258:	462b      	mov	r3, r5
   d525a:	f7ff f818 	bl	d428e <_ZN5Print8printlnfEPKcz>
            VERBOSE( Serial.printlnf( "[%s] %d - right power=%f", __FUNCTION__, time, rightPower) );
   d525e:	f002 f8ed 	bl	d743c <_Z16_fetch_usbserialv>
   d5262:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5266:	4929      	ldr	r1, [pc, #164]	; (d530c <loop+0xc74>)
   d5268:	e9cd 2300 	strd	r2, r3, [sp]
   d526c:	4a16      	ldr	r2, [pc, #88]	; (d52c8 <loop+0xc30>)
   d526e:	462b      	mov	r3, r5
   d5270:	f7ff f80d 	bl	d428e <_ZN5Print8printlnfEPKcz>
            oldRightPosition = newRightPosition;
   d5274:	4b17      	ldr	r3, [pc, #92]	; (d52d4 <loop+0xc3c>)
   d5276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d5278:	601a      	str	r2, [r3, #0]
            oldRightTime = time; 
   d527a:	4b25      	ldr	r3, [pc, #148]	; (d5310 <loop+0xc78>)
   d527c:	e682      	b.n	d4f84 <loop+0x8ec>
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d527e:	a706      	add	r7, pc, #24	; (adr r7, d5298 <loop+0xc00>)
   d5280:	e9d7 6700 	ldrd	r6, r7, [r7]
   d5284:	e7bd      	b.n	d5202 <loop+0xb6a>
      if ( oldLeftTime==0 )
   d5286:	4b12      	ldr	r3, [pc, #72]	; (d52d0 <loop+0xc38>)
   d5288:	681f      	ldr	r7, [r3, #0]
   d528a:	2f00      	cmp	r7, #0
   d528c:	d144      	bne.n	d5318 <loop+0xc80>
        oldLeftPosition = newLeftPosition;
   d528e:	4a06      	ldr	r2, [pc, #24]	; (d52a8 <loop+0xc10>)
   d5290:	6016      	str	r6, [r2, #0]
        oldLeftTime = time;
   d5292:	e677      	b.n	d4f84 <loop+0x8ec>
   d5294:	f3af 8000 	nop.w
   d5298:	00000000 	.word	0x00000000
   d529c:	406fe000 	.word	0x406fe000
   d52a0:	00000000 	.word	0x00000000
   d52a4:	c06fe000 	.word	0xc06fe000
   d52a8:	2003e3f0 	.word	0x2003e3f0
   d52ac:	2003e350 	.word	0x2003e350
   d52b0:	4092c000 	.word	0x4092c000
   d52b4:	2003e368 	.word	0x2003e368
   d52b8:	2003e3e0 	.word	0x2003e3e0
   d52bc:	2003e358 	.word	0x2003e358
   d52c0:	2003e3e8 	.word	0x2003e3e8
   d52c4:	000d90ab 	.word	0x000d90ab
   d52c8:	000d8ed5 	.word	0x000d8ed5
   d52cc:	000d90df 	.word	0x000d90df
   d52d0:	2003e3f4 	.word	0x2003e3f4
   d52d4:	2003e3f8 	.word	0x2003e3f8
   d52d8:	2003e438 	.word	0x2003e438
   d52dc:	2003e4b8 	.word	0x2003e4b8
   d52e0:	2003e430 	.word	0x2003e430
   d52e4:	000d8ce9 	.word	0x000d8ce9
   d52e8:	000d8cf3 	.word	0x000d8cf3
   d52ec:	2003e4b0 	.word	0x2003e4b0
   d52f0:	000d90f7 	.word	0x000d90f7
   d52f4:	000d9193 	.word	0x000d9193
   d52f8:	2003e428 	.word	0x2003e428
   d52fc:	000d91a2 	.word	0x000d91a2
   d5300:	000d91fa 	.word	0x000d91fa
   d5304:	2003e420 	.word	0x2003e420
   d5308:	000d920b 	.word	0x000d920b
   d530c:	000d9240 	.word	0x000d9240
   d5310:	2003e3fc 	.word	0x2003e3fc
   d5314:	2003e360 	.word	0x2003e360
      else if (time-oldLeftTime>0)
   d5318:	1bc7      	subs	r7, r0, r7
   d531a:	2f00      	cmp	r7, #0
   d531c:	f77f ad84 	ble.w	d4e28 <loop+0x790>
        leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(time-oldLeftTime)));
   d5320:	f8df b1f0 	ldr.w	fp, [pc, #496]	; d5514 <loop+0xe7c>
   d5324:	f8df a1f0 	ldr.w	sl, [pc, #496]	; d5518 <loop+0xe80>
   d5328:	f8db 0000 	ldr.w	r0, [fp]
   d532c:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5330:	1a30      	subs	r0, r6, r0
   d5332:	4358      	muls	r0, r3
   d5334:	f002 ffe6 	bl	d8304 <__aeabi_i2d>
   d5338:	4680      	mov	r8, r0
   d533a:	4638      	mov	r0, r7
   d533c:	4689      	mov	r9, r1
   d533e:	f002 ffe1 	bl	d8304 <__aeabi_i2d>
   d5342:	4b67      	ldr	r3, [pc, #412]	; (d54e0 <loop+0xe48>)
   d5344:	4f67      	ldr	r7, [pc, #412]	; (d54e4 <loop+0xe4c>)
   d5346:	2200      	movs	r2, #0
   d5348:	f003 f846 	bl	d83d8 <__aeabi_dmul>
   d534c:	4602      	mov	r2, r0
   d534e:	460b      	mov	r3, r1
   d5350:	4640      	mov	r0, r8
   d5352:	4649      	mov	r1, r9
   d5354:	f003 f96a 	bl	d862c <__aeabi_ddiv>
   d5358:	e9ca 0100 	strd	r0, r1, [sl]
        if ((aTune.Runtime())!=0)
   d535c:	4862      	ldr	r0, [pc, #392]	; (d54e8 <loop+0xe50>)
   d535e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; d551c <loop+0xe84>
   d5362:	f000 fcf9 	bl	d5d58 <_ZN9PID_ATune7RuntimeEv>
   d5366:	46d1      	mov	r9, sl
   d5368:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   d536c:	2800      	cmp	r0, #0
   d536e:	d04f      	beq.n	d5410 <loop+0xd78>
          tuning = false;
   d5370:	4b5e      	ldr	r3, [pc, #376]	; (d54ec <loop+0xe54>)
   d5372:	f04f 0900 	mov.w	r9, #0
   d5376:	f883 9000 	strb.w	r9, [r3]
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE COMPLETE Kp=%f, Ki=%f, Kd=%f", __FUNCTION__, time, aTune.GetKp(), aTune.GetKi(), aTune.GetKd()) );
   d537a:	f002 f85f 	bl	d743c <_Z16_fetch_usbserialv>
   d537e:	4606      	mov	r6, r0
   d5380:	4859      	ldr	r0, [pc, #356]	; (d54e8 <loop+0xe50>)
   d5382:	f000 fe35 	bl	d5ff0 <_ZN9PID_ATune5GetKpEv>
   d5386:	4858      	ldr	r0, [pc, #352]	; (d54e8 <loop+0xe50>)
   d5388:	eeb0 8a40 	vmov.f32	s16, s0
   d538c:	eef0 8a60 	vmov.f32	s17, s1
   d5390:	f000 fe4a 	bl	d6028 <_ZN9PID_ATune5GetKiEv>
   d5394:	4854      	ldr	r0, [pc, #336]	; (d54e8 <loop+0xe50>)
   d5396:	eeb0 9a40 	vmov.f32	s18, s0
   d539a:	eef0 9a60 	vmov.f32	s19, s1
   d539e:	f000 fe67 	bl	d6070 <_ZN9PID_ATune5GetKdEv>
   d53a2:	462b      	mov	r3, r5
   d53a4:	ed8d 0b04 	vstr	d0, [sp, #16]
   d53a8:	4a51      	ldr	r2, [pc, #324]	; (d54f0 <loop+0xe58>)
   d53aa:	4952      	ldr	r1, [pc, #328]	; (d54f4 <loop+0xe5c>)
   d53ac:	ed8d 9b02 	vstr	d9, [sp, #8]
   d53b0:	ed8d 8b00 	vstr	d8, [sp]
   d53b4:	4630      	mov	r0, r6
   d53b6:	f7fe ff6a 	bl	d428e <_ZN5Print8printlnfEPKcz>
          mode=IDLE;
   d53ba:	f884 9000 	strb.w	r9, [r4]
  double new_speed=max(min((speed+increment), 255), -255); 
   d53be:	2200      	movs	r2, #0
   d53c0:	2300      	movs	r3, #0
   d53c2:	e9d7 0100 	ldrd	r0, r1, [r7]
   d53c6:	f002 fe51 	bl	d806c <__adddf3>
   d53ca:	a341      	add	r3, pc, #260	; (adr r3, d54d0 <loop+0xe38>)
   d53cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53d0:	4604      	mov	r4, r0
   d53d2:	460d      	mov	r5, r1
   d53d4:	f003 fa72 	bl	d88bc <__aeabi_dcmplt>
   d53d8:	b1b0      	cbz	r0, d5408 <loop+0xd70>
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d53da:	a33f      	add	r3, pc, #252	; (adr r3, d54d8 <loop+0xe40>)
   d53dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53e0:	4620      	mov	r0, r4
   d53e2:	4629      	mov	r1, r5
   d53e4:	f003 fa88 	bl	d88f8 <__aeabi_dcmpgt>
   d53e8:	b910      	cbnz	r0, d53f0 <loop+0xd58>
   d53ea:	a53b      	add	r5, pc, #236	; (adr r5, d54d8 <loop+0xe40>)
   d53ec:	e9d5 4500 	ldrd	r4, r5, [r5]
          setPwm( leftMotor, leftPower );          
   d53f0:	4629      	mov	r1, r5
          leftPower=adjustSpeed( leftPower, 0 );
   d53f2:	e9c7 4500 	strd	r4, r5, [r7]
          setPwm( leftMotor, leftPower );          
   d53f6:	4620      	mov	r0, r4
   d53f8:	f003 fa9e 	bl	d8938 <__aeabi_d2iz>
   d53fc:	4601      	mov	r1, r0
   d53fe:	f8d8 0000 	ldr.w	r0, [r8]
   d5402:	f7ff f801 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>
   d5406:	e50f      	b.n	d4e28 <loop+0x790>
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5408:	a531      	add	r5, pc, #196	; (adr r5, d54d0 <loop+0xe38>)
   d540a:	e9d5 4500 	ldrd	r4, r5, [r5]
   d540e:	e7ef      	b.n	d53f0 <loop+0xd58>
          leftPower=adjustSpeed( leftPower, leftOutput );
   d5410:	4c39      	ldr	r4, [pc, #228]	; (d54f8 <loop+0xe60>)
  double new_speed=max(min((speed+increment), 255), -255); 
   d5412:	e9d7 0100 	ldrd	r0, r1, [r7]
   d5416:	e9d4 2300 	ldrd	r2, r3, [r4]
   d541a:	f002 fe27 	bl	d806c <__adddf3>
   d541e:	a32c      	add	r3, pc, #176	; (adr r3, d54d0 <loop+0xe38>)
   d5420:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5424:	4682      	mov	sl, r0
   d5426:	468b      	mov	fp, r1
   d5428:	f003 fa48 	bl	d88bc <__aeabi_dcmplt>
   d542c:	2800      	cmp	r0, #0
   d542e:	d048      	beq.n	d54c2 <loop+0xe2a>
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5430:	a329      	add	r3, pc, #164	; (adr r3, d54d8 <loop+0xe40>)
   d5432:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5436:	4650      	mov	r0, sl
   d5438:	4659      	mov	r1, fp
   d543a:	f003 fa5d 	bl	d88f8 <__aeabi_dcmpgt>
   d543e:	b918      	cbnz	r0, d5448 <loop+0xdb0>
   d5440:	f20f 0b94 	addw	fp, pc, #148	; 0x94
   d5444:	e9db ab00 	ldrd	sl, fp, [fp]
          setPwm( leftMotor, leftPower );
   d5448:	4659      	mov	r1, fp
          leftPower=adjustSpeed( leftPower, leftOutput );
   d544a:	e9c7 ab00 	strd	sl, fp, [r7]
          setPwm( leftMotor, leftPower );
   d544e:	4650      	mov	r0, sl
   d5450:	f003 fa72 	bl	d8938 <__aeabi_d2iz>
   d5454:	4601      	mov	r1, r0
   d5456:	f8d8 0000 	ldr.w	r0, [r8]
   d545a:	f7fe ffd5 	bl	d4408 <_Z6setPwmP16Adafruit_DCMotori>
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE RUNNING input=%f, setpoint=%f, output=%f", __FUNCTION__, time, leftInput, leftSetpoint, leftOutput) );
   d545e:	f001 ffed 	bl	d743c <_Z16_fetch_usbserialv>
   d5462:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5466:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d546a:	4b24      	ldr	r3, [pc, #144]	; (d54fc <loop+0xe64>)
   d546c:	4924      	ldr	r1, [pc, #144]	; (d5500 <loop+0xe68>)
   d546e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5472:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5476:	e9d9 2300 	ldrd	r2, r3, [r9]
   d547a:	e9cd 2300 	strd	r2, r3, [sp]
   d547e:	4a1c      	ldr	r2, [pc, #112]	; (d54f0 <loop+0xe58>)
   d5480:	462b      	mov	r3, r5
   d5482:	f7fe ff04 	bl	d428e <_ZN5Print8printlnfEPKcz>
          telemetrySend( "robot/leftPower", "{ \"timestamp\": %lu, \"millis\": %lu,  \"type\":\"power\", \"name\":\"leftPower\", \"power\" : %f  }", Time.now(), millis(),leftPower ) ;
   d5486:	f002 f9db 	bl	d7840 <_ZN9TimeClass3nowEv>
   d548a:	9010      	str	r0, [sp, #64]	; 0x40
   d548c:	f001 fc0c 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   d5490:	4603      	mov	r3, r0
   d5492:	e9d7 0100 	ldrd	r0, r1, [r7]
   d5496:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d5498:	e9cd 0100 	strd	r0, r1, [sp]
   d549c:	4919      	ldr	r1, [pc, #100]	; (d5504 <loop+0xe6c>)
   d549e:	481a      	ldr	r0, [pc, #104]	; (d5508 <loop+0xe70>)
   d54a0:	f7ff f8e2 	bl	d4668 <_Z13telemetrySendPKcS0_z>
          VERBOSE( Serial.printlnf( "[%s] %d - left power=%f", __FUNCTION__, time, leftPower) );
   d54a4:	f001 ffca 	bl	d743c <_Z16_fetch_usbserialv>
   d54a8:	e9d7 2300 	ldrd	r2, r3, [r7]
   d54ac:	4917      	ldr	r1, [pc, #92]	; (d550c <loop+0xe74>)
   d54ae:	e9cd 2300 	strd	r2, r3, [sp]
   d54b2:	462b      	mov	r3, r5
   d54b4:	4a0e      	ldr	r2, [pc, #56]	; (d54f0 <loop+0xe58>)
   d54b6:	f7fe feea 	bl	d428e <_ZN5Print8printlnfEPKcz>
          oldLeftPosition = newLeftPosition;
   d54ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d54bc:	601e      	str	r6, [r3, #0]
          oldLeftTime = time;
   d54be:	4b14      	ldr	r3, [pc, #80]	; (d5510 <loop+0xe78>)
   d54c0:	e560      	b.n	d4f84 <loop+0x8ec>
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d54c2:	f20f 0b0c 	addw	fp, pc, #12
   d54c6:	e9db ab00 	ldrd	sl, fp, [fp]
   d54ca:	e7bd      	b.n	d5448 <loop+0xdb0>
   d54cc:	f3af 8000 	nop.w
   d54d0:	00000000 	.word	0x00000000
   d54d4:	406fe000 	.word	0x406fe000
   d54d8:	00000000 	.word	0x00000000
   d54dc:	c06fe000 	.word	0xc06fe000
   d54e0:	4092c000 	.word	0x4092c000
   d54e4:	2003e3e0 	.word	0x2003e3e0
   d54e8:	2003de68 	.word	0x2003de68
   d54ec:	2003e538 	.word	0x2003e538
   d54f0:	000d8ed5 	.word	0x000d8ed5
   d54f4:	000d9259 	.word	0x000d9259
   d54f8:	2003e360 	.word	0x2003e360
   d54fc:	2003e3e8 	.word	0x2003e3e8
   d5500:	000d9292 	.word	0x000d9292
   d5504:	000d92d7 	.word	0x000d92d7
   d5508:	000d932f 	.word	0x000d932f
   d550c:	000d90df 	.word	0x000d90df
   d5510:	2003e3f4 	.word	0x2003e3f4
   d5514:	2003e3f0 	.word	0x2003e3f0
   d5518:	2003e350 	.word	0x2003e350
   d551c:	2003e358 	.word	0x2003e358

000d5520 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d5520:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5522:	b08d      	sub	sp, #52	; 0x34
   d5524:	ad02      	add	r5, sp, #8
   d5526:	e885 0006 	stmia.w	r5, {r1, r2}
   d552a:	4606      	mov	r6, r0
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d552c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5530:	ac05      	add	r4, sp, #20
   d5532:	e884 0005 	stmia.w	r4, {r0, r2}
   d5536:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5538:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d553a:	2300      	movs	r3, #0
   d553c:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d553e:	f7fe fdaa 	bl	d4096 <_Znwj>
   d5542:	4602      	mov	r2, r0
   d5544:	b120      	cbz	r0, d5550 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x30>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d5546:	e894 0003 	ldmia.w	r4, {r0, r1}
   d554a:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d554e:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5550:	4b0c      	ldr	r3, [pc, #48]	; (d5584 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x64>)
   d5552:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   d5554:	4b0c      	ldr	r3, [pc, #48]	; (d5588 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x68>)
   d5556:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d5558:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d555c:	9208      	str	r2, [sp, #32]
   d555e:	9300      	str	r3, [sp, #0]
   d5560:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   d5564:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   d5568:	a908      	add	r1, sp, #32
   d556a:	4630      	mov	r0, r6
   d556c:	f002 f90c 	bl	d7788 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   d5570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5572:	4604      	mov	r4, r0
   d5574:	b11b      	cbz	r3, d557e <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5576:	a908      	add	r1, sp, #32
   d5578:	2203      	movs	r2, #3
   d557a:	4608      	mov	r0, r1
   d557c:	4798      	blx	r3
}
   d557e:	4620      	mov	r0, r4
   d5580:	b00d      	add	sp, #52	; 0x34
   d5582:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5584:	000d426f 	.word	0x000d426f
   d5588:	000d4231 	.word	0x000d4231

000d558c <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   d558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5590:	4688      	mov	r8, r1
   d5592:	4604      	mov	r4, r0
   d5594:	4617      	mov	r7, r2
   d5596:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   d5598:	2102      	movs	r1, #2
   d559a:	4640      	mov	r0, r8
   d559c:	f002 fcac 	bl	d7ef8 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   d55a0:	2102      	movs	r1, #2
   d55a2:	4638      	mov	r0, r7
   d55a4:	f002 fca8 	bl	d7ef8 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d55a8:	4e53      	ldr	r6, [pc, #332]	; (d56f8 <_ZN7EncoderC1Ett+0x16c>)
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   d55aa:	60e7      	str	r7, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   d55ac:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   d55ae:	e9c4 3801 	strd	r3, r8, [r4, #4]
		ticks = 0;
   d55b2:	e9c4 3305 	strd	r3, r3, [r4, #20]
		pin1_register = PIN_TO_BASEREG(pin1);
   d55b6:	6023      	str	r3, [r4, #0]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d55b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d55bc:	f001 fb6c 	bl	d6c98 <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   d55c0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   d55c4:	7833      	ldrb	r3, [r6, #0]
   d55c6:	4d4d      	ldr	r5, [pc, #308]	; (d56fc <_ZN7EncoderC1Ett+0x170>)
   d55c8:	f3bf 8f5b 	dmb	ish
   d55cc:	f013 0f01 	tst.w	r3, #1
   d55d0:	d109      	bne.n	d55e6 <_ZN7EncoderC1Ett+0x5a>
   d55d2:	4630      	mov	r0, r6
   d55d4:	f7fe fd65 	bl	d40a2 <__cxa_guard_acquire>
   d55d8:	b128      	cbz	r0, d55e6 <_ZN7EncoderC1Ett+0x5a>
   d55da:	f001 fb7d 	bl	d6cd8 <HAL_Pin_Map>
   d55de:	6028      	str	r0, [r5, #0]
   d55e0:	4630      	mov	r0, r6
   d55e2:	f7fe fd63 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d55e6:	fa1f fb8b 	uxth.w	fp, fp
   d55ea:	682b      	ldr	r3, [r5, #0]
   d55ec:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d55f0:	f813 900b 	ldrb.w	r9, [r3, fp]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d55f4:	7833      	ldrb	r3, [r6, #0]
   d55f6:	f3bf 8f5b 	dmb	ish
   d55fa:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d55fc:	ea4f 1a49 	mov.w	sl, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d5600:	d409      	bmi.n	d5616 <_ZN7EncoderC1Ett+0x8a>
   d5602:	483d      	ldr	r0, [pc, #244]	; (d56f8 <_ZN7EncoderC1Ett+0x16c>)
   d5604:	f7fe fd4d 	bl	d40a2 <__cxa_guard_acquire>
   d5608:	b128      	cbz	r0, d5616 <_ZN7EncoderC1Ett+0x8a>
   d560a:	f001 fb65 	bl	d6cd8 <HAL_Pin_Map>
   d560e:	6028      	str	r0, [r5, #0]
   d5610:	4839      	ldr	r0, [pc, #228]	; (d56f8 <_ZN7EncoderC1Ett+0x16c>)
   d5612:	f7fe fd4b 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d5616:	682b      	ldr	r3, [r5, #0]
   d5618:	445b      	add	r3, fp
   d561a:	f893 9001 	ldrb.w	r9, [r3, #1]
   d561e:	f009 091f 	and.w	r9, r9, #31
   d5622:	ea49 090a 	orr.w	r9, r9, sl
    (void)nrf_gpio_pin_read(nrf_pin);
   d5626:	4648      	mov	r0, r9
   d5628:	f7fe fd44 	bl	d40b4 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d562c:	4648      	mov	r0, r9
   d562e:	f7fe fd41 	bl	d40b4 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d5632:	f8d4 b00c 	ldr.w	fp, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d5636:	7833      	ldrb	r3, [r6, #0]
   d5638:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   d563c:	f1b0 0900 	subs.w	r9, r0, #0
   d5640:	bf18      	it	ne
   d5642:	f04f 0901 	movne.w	r9, #1
   d5646:	07da      	lsls	r2, r3, #31
   d5648:	d409      	bmi.n	d565e <_ZN7EncoderC1Ett+0xd2>
   d564a:	482b      	ldr	r0, [pc, #172]	; (d56f8 <_ZN7EncoderC1Ett+0x16c>)
   d564c:	f7fe fd29 	bl	d40a2 <__cxa_guard_acquire>
   d5650:	b128      	cbz	r0, d565e <_ZN7EncoderC1Ett+0xd2>
   d5652:	f001 fb41 	bl	d6cd8 <HAL_Pin_Map>
   d5656:	6028      	str	r0, [r5, #0]
   d5658:	4827      	ldr	r0, [pc, #156]	; (d56f8 <_ZN7EncoderC1Ett+0x16c>)
   d565a:	f7fe fd27 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d565e:	fa1f fb8b 	uxth.w	fp, fp
   d5662:	682b      	ldr	r3, [r5, #0]
   d5664:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d5668:	f813 a00b 	ldrb.w	sl, [r3, fp]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d566c:	7833      	ldrb	r3, [r6, #0]
   d566e:	f3bf 8f5b 	dmb	ish
   d5672:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d5674:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d5678:	d409      	bmi.n	d568e <_ZN7EncoderC1Ett+0x102>
   d567a:	481f      	ldr	r0, [pc, #124]	; (d56f8 <_ZN7EncoderC1Ett+0x16c>)
   d567c:	f7fe fd11 	bl	d40a2 <__cxa_guard_acquire>
   d5680:	b128      	cbz	r0, d568e <_ZN7EncoderC1Ett+0x102>
   d5682:	f001 fb29 	bl	d6cd8 <HAL_Pin_Map>
   d5686:	6028      	str	r0, [r5, #0]
   d5688:	481b      	ldr	r0, [pc, #108]	; (d56f8 <_ZN7EncoderC1Ett+0x16c>)
   d568a:	f7fe fd0f 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d568e:	682b      	ldr	r3, [r5, #0]
   d5690:	449b      	add	fp, r3
   d5692:	f89b 5001 	ldrb.w	r5, [fp, #1]
   d5696:	f005 051f 	and.w	r5, r5, #31
   d569a:	ea45 050a 	orr.w	r5, r5, sl
    (void)nrf_gpio_pin_read(nrf_pin);
   d569e:	4628      	mov	r0, r5
   d56a0:	f7fe fd08 	bl	d40b4 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d56a4:	4628      	mov	r0, r5
   d56a6:	f7fe fd05 	bl	d40b4 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d56aa:	b108      	cbz	r0, d56b0 <_ZN7EncoderC1Ett+0x124>
   d56ac:	f049 0902 	orr.w	r9, r9, #2
		state = s;
   d56b0:	f884 9010 	strb.w	r9, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d56b4:	f8df 9048 	ldr.w	r9, [pc, #72]	; d5700 <_ZN7EncoderC1Ett+0x174>
   d56b8:	f8cd 9010 	str.w	r9, [sp, #16]
   d56bc:	2500      	movs	r5, #0
   d56be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d56c2:	4623      	mov	r3, r4
   d56c4:	462a      	mov	r2, r5
   d56c6:	4649      	mov	r1, r9
   d56c8:	e9cd 5600 	strd	r5, r6, [sp]
   d56cc:	9502      	str	r5, [sp, #8]
   d56ce:	4640      	mov	r0, r8
   d56d0:	9505      	str	r5, [sp, #20]
   d56d2:	f7ff ff25 	bl	d5520 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   d56d6:	e9cd 9506 	strd	r9, r5, [sp, #24]
   d56da:	e9cd 6501 	strd	r6, r5, [sp, #4]
   d56de:	9500      	str	r5, [sp, #0]
   d56e0:	aa08      	add	r2, sp, #32
   d56e2:	e912 0006 	ldmdb	r2, {r1, r2}
   d56e6:	4623      	mov	r3, r4
   d56e8:	4638      	mov	r0, r7
   d56ea:	f7ff ff19 	bl	d5520 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
	}
   d56ee:	4620      	mov	r0, r4
   d56f0:	b009      	add	sp, #36	; 0x24
   d56f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d56f6:	bf00      	nop
   d56f8:	2003de44 	.word	0x2003de44
   d56fc:	2003de48 	.word	0x2003de48
   d5700:	000d40ed 	.word	0x000d40ed

000d5704 <_ZN15Adafruit_BNO055D0Ev>:
   d5704:	b510      	push	{r4, lr}
   d5706:	2110      	movs	r1, #16
   d5708:	4604      	mov	r4, r0
   d570a:	f002 fc1e 	bl	d7f4a <_ZdlPvj>
   d570e:	4620      	mov	r0, r4
   d5710:	bd10      	pop	{r4, pc}
   d5712:	0000      	movs	r0, r0
   d5714:	0000      	movs	r0, r0
	...

000d5718 <_GLOBAL__sub_I_leftPower>:
}
   d5718:	b570      	push	{r4, r5, r6, lr}
   d571a:	ed2d 8b04 	vpush	{d8-d9}
PID leftPID(&leftInput, &leftOutput, &leftSetpoint, kp, ki, kd, PID::DIRECT);
   d571e:	ed9f 8b40 	vldr	d8, [pc, #256]	; d5820 <_GLOBAL__sub_I_leftPower+0x108>
   d5722:	ed9f 9b41 	vldr	d9, [pc, #260]	; d5828 <_GLOBAL__sub_I_leftPower+0x110>
   d5726:	eeb0 2a48 	vmov.f32	s4, s16
   d572a:	eef0 2a68 	vmov.f32	s5, s17
   d572e:	eeb0 1a48 	vmov.f32	s2, s16
   d5732:	eef0 1a68 	vmov.f32	s3, s17
}
   d5736:	b082      	sub	sp, #8
PID leftPID(&leftInput, &leftOutput, &leftSetpoint, kp, ki, kd, PID::DIRECT);
   d5738:	4e3d      	ldr	r6, [pc, #244]	; (d5830 <_GLOBAL__sub_I_leftPower+0x118>)
   d573a:	4d3e      	ldr	r5, [pc, #248]	; (d5834 <_GLOBAL__sub_I_leftPower+0x11c>)
        val_(val) {
   d573c:	4b3e      	ldr	r3, [pc, #248]	; (d5838 <_GLOBAL__sub_I_leftPower+0x120>)
   d573e:	eeb0 0a49 	vmov.f32	s0, s18
   d5742:	eef0 0a69 	vmov.f32	s1, s19
   d5746:	2400      	movs	r4, #0
   d5748:	601c      	str	r4, [r3, #0]
   d574a:	4632      	mov	r2, r6
   d574c:	9400      	str	r4, [sp, #0]
   d574e:	4629      	mov	r1, r5
   d5750:	4b3a      	ldr	r3, [pc, #232]	; (d583c <_GLOBAL__sub_I_leftPower+0x124>)
   d5752:	483b      	ldr	r0, [pc, #236]	; (d5840 <_GLOBAL__sub_I_leftPower+0x128>)
   d5754:	f000 fa60 	bl	d5c18 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
PID rightPID(&rightInput, &rightOutput, &rightSetpoint, kp, ki, kd, PID::DIRECT);
   d5758:	eeb0 2a48 	vmov.f32	s4, s16
   d575c:	eef0 2a68 	vmov.f32	s5, s17
   d5760:	eeb0 1a48 	vmov.f32	s2, s16
   d5764:	eef0 1a68 	vmov.f32	s3, s17
   d5768:	eeb0 0a49 	vmov.f32	s0, s18
   d576c:	eef0 0a69 	vmov.f32	s1, s19
   d5770:	4b34      	ldr	r3, [pc, #208]	; (d5844 <_GLOBAL__sub_I_leftPower+0x12c>)
   d5772:	9400      	str	r4, [sp, #0]
   d5774:	4a34      	ldr	r2, [pc, #208]	; (d5848 <_GLOBAL__sub_I_leftPower+0x130>)
   d5776:	4935      	ldr	r1, [pc, #212]	; (d584c <_GLOBAL__sub_I_leftPower+0x134>)
   d5778:	4835      	ldr	r0, [pc, #212]	; (d5850 <_GLOBAL__sub_I_leftPower+0x138>)
Adafruit_MotorShield shield = Adafruit_MotorShield();
   d577a:	4c36      	ldr	r4, [pc, #216]	; (d5854 <_GLOBAL__sub_I_leftPower+0x13c>)
PID rightPID(&rightInput, &rightOutput, &rightSetpoint, kp, ki, kd, PID::DIRECT);
   d577c:	f000 fa4c 	bl	d5c18 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
PID_ATune aTune(&leftInput, &leftOutput);
   d5780:	4632      	mov	r2, r6
   d5782:	4629      	mov	r1, r5
   d5784:	4834      	ldr	r0, [pc, #208]	; (d5858 <_GLOBAL__sub_I_leftPower+0x140>)
Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d5786:	4d35      	ldr	r5, [pc, #212]	; (d585c <_GLOBAL__sub_I_leftPower+0x144>)
PID_ATune aTune(&leftInput, &leftOutput);
   d5788:	f000 fa86 	bl	d5c98 <_ZN9PID_ATuneC1EPdS0_>
PID balancePID(&balanceInput, &balanceOutput, &balanceSetpoint, bkp, bki, bkd, PID::REVERSE);
   d578c:	2301      	movs	r3, #1
   d578e:	9300      	str	r3, [sp, #0]
   d5790:	4b33      	ldr	r3, [pc, #204]	; (d5860 <_GLOBAL__sub_I_leftPower+0x148>)
   d5792:	4a34      	ldr	r2, [pc, #208]	; (d5864 <_GLOBAL__sub_I_leftPower+0x14c>)
   d5794:	4934      	ldr	r1, [pc, #208]	; (d5868 <_GLOBAL__sub_I_leftPower+0x150>)
   d5796:	4835      	ldr	r0, [pc, #212]	; (d586c <_GLOBAL__sub_I_leftPower+0x154>)
   d5798:	ed93 2b00 	vldr	d2, [r3]
   d579c:	4b34      	ldr	r3, [pc, #208]	; (d5870 <_GLOBAL__sub_I_leftPower+0x158>)
   d579e:	ed93 1b00 	vldr	d1, [r3]
   d57a2:	4b34      	ldr	r3, [pc, #208]	; (d5874 <_GLOBAL__sub_I_leftPower+0x15c>)
   d57a4:	ed93 0b00 	vldr	d0, [r3]
   d57a8:	4b33      	ldr	r3, [pc, #204]	; (d5878 <_GLOBAL__sub_I_leftPower+0x160>)
   d57aa:	f000 fa35 	bl	d5c18 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
Encoder rightEnc(D8, D6);
   d57ae:	2206      	movs	r2, #6
   d57b0:	2108      	movs	r1, #8
   d57b2:	4832      	ldr	r0, [pc, #200]	; (d587c <_GLOBAL__sub_I_leftPower+0x164>)
   d57b4:	f7ff feea 	bl	d558c <_ZN7EncoderC1Ett>
Encoder leftEnc(D4, D5);
   d57b8:	2205      	movs	r2, #5
   d57ba:	2104      	movs	r1, #4
   d57bc:	4830      	ldr	r0, [pc, #192]	; (d5880 <_GLOBAL__sub_I_leftPower+0x168>)
   d57be:	f7ff fee5 	bl	d558c <_ZN7EncoderC1Ett>
Adafruit_MotorShield shield = Adafruit_MotorShield();
   d57c2:	2160      	movs	r1, #96	; 0x60
   d57c4:	4620      	mov	r0, r4
   d57c6:	f000 fcff 	bl	d61c8 <_ZN20Adafruit_MotorShieldC1Eh>
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d57ca:	2103      	movs	r1, #3
   d57cc:	4620      	mov	r0, r4
   d57ce:	f000 fcc2 	bl	d6156 <_ZN20Adafruit_MotorShield8getMotorEh>
   d57d2:	4b2c      	ldr	r3, [pc, #176]	; (d5884 <_GLOBAL__sub_I_leftPower+0x16c>)
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d57d4:	2104      	movs	r1, #4
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d57d6:	6018      	str	r0, [r3, #0]
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d57d8:	4620      	mov	r0, r4
   d57da:	f000 fcbc 	bl	d6156 <_ZN20Adafruit_MotorShield8getMotorEh>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d57de:	4c2a      	ldr	r4, [pc, #168]	; (d5888 <_GLOBAL__sub_I_leftPower+0x170>)
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d57e0:	4b2a      	ldr	r3, [pc, #168]	; (d588c <_GLOBAL__sub_I_leftPower+0x174>)
Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d57e2:	2228      	movs	r2, #40	; 0x28
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d57e4:	6018      	str	r0, [r3, #0]
Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d57e6:	2137      	movs	r1, #55	; 0x37
   d57e8:	4620      	mov	r0, r4
   d57ea:	f000 fee1 	bl	d65b0 <_ZN15Adafruit_BNO055C1Elh>
   d57ee:	462a      	mov	r2, r5
   d57f0:	4927      	ldr	r1, [pc, #156]	; (d5890 <_GLOBAL__sub_I_leftPower+0x178>)
   d57f2:	4620      	mov	r0, r4
   d57f4:	f002 fba4 	bl	d7f40 <__aeabi_atexit>
I2CSlave device(Wire1, 0x10, 10);
   d57f8:	f002 fb18 	bl	d7e2c <_Z20__fetch_global_Wire1v>
   d57fc:	4c25      	ldr	r4, [pc, #148]	; (d5894 <_GLOBAL__sub_I_leftPower+0x17c>)
   d57fe:	4601      	mov	r1, r0
   d5800:	230a      	movs	r3, #10
   d5802:	2210      	movs	r2, #16
   d5804:	4620      	mov	r0, r4
   d5806:	f001 f863 	bl	d68d0 <_ZN8I2CSlaveC1ER7TwoWirehj>
   d580a:	4923      	ldr	r1, [pc, #140]	; (d5898 <_GLOBAL__sub_I_leftPower+0x180>)
   d580c:	462a      	mov	r2, r5
   d580e:	4620      	mov	r0, r4
}
   d5810:	b002      	add	sp, #8
   d5812:	ecbd 8b04 	vpop	{d8-d9}
   d5816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
I2CSlave device(Wire1, 0x10, 10);
   d581a:	f002 bb91 	b.w	d7f40 <__aeabi_atexit>
   d581e:	bf00      	nop
	...
   d5828:	c779a6b5 	.word	0xc779a6b5
   d582c:	3fa23a29 	.word	0x3fa23a29
   d5830:	2003e360 	.word	0x2003e360
   d5834:	2003e350 	.word	0x2003e350
   d5838:	2003de54 	.word	0x2003de54
   d583c:	2003e3e8 	.word	0x2003e3e8
   d5840:	2003e368 	.word	0x2003e368
   d5844:	2003e4b8 	.word	0x2003e4b8
   d5848:	2003e430 	.word	0x2003e430
   d584c:	2003e420 	.word	0x2003e420
   d5850:	2003e438 	.word	0x2003e438
   d5854:	2003e4c4 	.word	0x2003e4c4
   d5858:	2003de68 	.word	0x2003de68
   d585c:	2003de40 	.word	0x2003de40
   d5860:	2003e2f0 	.word	0x2003e2f0
   d5864:	2003e268 	.word	0x2003e268
   d5868:	2003e260 	.word	0x2003e260
   d586c:	2003e270 	.word	0x2003e270
   d5870:	2003e2f8 	.word	0x2003e2f8
   d5874:	2003ddd0 	.word	0x2003ddd0
   d5878:	2003e2e8 	.word	0x2003e2e8
   d587c:	2003e400 	.word	0x2003e400
   d5880:	2003e330 	.word	0x2003e330
   d5884:	2003e358 	.word	0x2003e358
   d5888:	2003e300 	.word	0x2003e300
   d588c:	2003e428 	.word	0x2003e428
   d5890:	000d40b3 	.word	0x000d40b3
   d5894:	2003e310 	.word	0x2003e310
   d5898:	000d689d 	.word	0x000d689d

000d589c <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
   d589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58a0:	ed2d 8b02 	vpush	{d8}
   if(!inAuto) return false;
   d58a4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
{
   d58a8:	b085      	sub	sp, #20
   d58aa:	4604      	mov	r4, r0
   if(!inAuto) return false;
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	b93b      	cbnz	r3, d58c0 <_ZN3PID7ComputeEv+0x24>
   d58b0:	2300      	movs	r3, #0
   d58b2:	9301      	str	r3, [sp, #4]
      lastInput = input;
      lastTime = now;
	  return true;
   }
   else return false;
}
   d58b4:	9801      	ldr	r0, [sp, #4]
   d58b6:	b005      	add	sp, #20
   d58b8:	ecbd 8b02 	vpop	{d8}
   d58bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d58c0:	f001 f9f2 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
   unsigned long timeChange = (now - lastTime);
   d58c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   if(timeChange>=SampleTime)
   d58c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
   unsigned long timeChange = (now - lastTime);
   d58c8:	1ac3      	subs	r3, r0, r3
   if(timeChange>=SampleTime)
   d58ca:	429a      	cmp	r2, r3
   d58cc:	4605      	mov	r5, r0
   d58ce:	d8ef      	bhi.n	d58b0 <_ZN3PID7ComputeEv+0x14>
	  double input = *myInput;
   d58d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
      double error = *mySetpoint - input;
   d58d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	  double input = *myInput;
   d58d4:	e9d3 8900 	ldrd	r8, r9, [r3]
      double error = *mySetpoint - input;
   d58d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d58dc:	4642      	mov	r2, r8
   d58de:	464b      	mov	r3, r9
   d58e0:	f002 fbc2 	bl	d8068 <__aeabi_dsub>
   d58e4:	4602      	mov	r2, r0
   d58e6:	460b      	mov	r3, r1
   d58e8:	ec43 2b18 	vmov	d8, r2, r3
      ITerm+= (ki * error);
   d58ec:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d58f0:	f002 fd72 	bl	d83d8 <__aeabi_dmul>
   d58f4:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d58f8:	f002 fbb8 	bl	d806c <__adddf3>
      if(ITerm > outMax) ITerm= outMax;
   d58fc:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
      ITerm+= (ki * error);
   d5900:	4606      	mov	r6, r0
   d5902:	460f      	mov	r7, r1
   d5904:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
      if(ITerm > outMax) ITerm= outMax;
   d5908:	4652      	mov	r2, sl
   d590a:	465b      	mov	r3, fp
   d590c:	f002 fff4 	bl	d88f8 <__aeabi_dcmpgt>
   d5910:	2800      	cmp	r0, #0
   d5912:	d038      	beq.n	d5986 <_ZN3PID7ComputeEv+0xea>
   d5914:	e9c4 ab12 	strd	sl, fp, [r4, #72]	; 0x48
      double output = kp * error + ITerm- kd * dInput;
   d5918:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d591c:	ec51 0b18 	vmov	r0, r1, d8
   d5920:	f002 fd5a 	bl	d83d8 <__aeabi_dmul>
   d5924:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d5928:	f002 fba0 	bl	d806c <__adddf3>
      double dInput = (input - lastInput);
   d592c:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
      double output = kp * error + ITerm- kd * dInput;
   d5930:	4606      	mov	r6, r0
   d5932:	460f      	mov	r7, r1
      double dInput = (input - lastInput);
   d5934:	4640      	mov	r0, r8
   d5936:	4649      	mov	r1, r9
   d5938:	f002 fb96 	bl	d8068 <__aeabi_dsub>
      double output = kp * error + ITerm- kd * dInput;
   d593c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   d5940:	f002 fd4a 	bl	d83d8 <__aeabi_dmul>
   d5944:	4602      	mov	r2, r0
   d5946:	460b      	mov	r3, r1
   d5948:	4630      	mov	r0, r6
   d594a:	4639      	mov	r1, r7
   d594c:	f002 fb8c 	bl	d8068 <__aeabi_dsub>
   d5950:	4606      	mov	r6, r0
   d5952:	460f      	mov	r7, r1
	  if(output > outMax) output = outMax;
   d5954:	4602      	mov	r2, r0
   d5956:	460b      	mov	r3, r1
   d5958:	4650      	mov	r0, sl
   d595a:	4659      	mov	r1, fp
   d595c:	f002 ffae 	bl	d88bc <__aeabi_dcmplt>
   d5960:	b950      	cbnz	r0, d5978 <_ZN3PID7ComputeEv+0xdc>
      else if(output < outMin) output = outMin;
   d5962:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
   d5966:	4632      	mov	r2, r6
   d5968:	463b      	mov	r3, r7
   d596a:	4650      	mov	r0, sl
   d596c:	4659      	mov	r1, fp
   d596e:	f002 ffc3 	bl	d88f8 <__aeabi_dcmpgt>
   d5972:	b908      	cbnz	r0, d5978 <_ZN3PID7ComputeEv+0xdc>
      double output = kp * error + ITerm- kd * dInput;
   d5974:	46b2      	mov	sl, r6
   d5976:	46bb      	mov	fp, r7
	  *myOutput = output;
   d5978:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d597a:	e9c3 ab00 	strd	sl, fp, [r3]
      lastInput = input;
   d597e:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
      lastTime = now;
   d5982:	6425      	str	r5, [r4, #64]	; 0x40
	  return true;
   d5984:	e796      	b.n	d58b4 <_ZN3PID7ComputeEv+0x18>
      else if(ITerm < outMin) ITerm= outMin;
   d5986:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
   d598a:	4630      	mov	r0, r6
   d598c:	ec53 2b17 	vmov	r2, r3, d7
   d5990:	4639      	mov	r1, r7
   d5992:	ed8d 7b02 	vstr	d7, [sp, #8]
   d5996:	f002 ff91 	bl	d88bc <__aeabi_dcmplt>
   d599a:	2800      	cmp	r0, #0
   d599c:	d0bc      	beq.n	d5918 <_ZN3PID7ComputeEv+0x7c>
   d599e:	ed9d 7b02 	vldr	d7, [sp, #8]
   d59a2:	ed84 7b12 	vstr	d7, [r4, #72]	; 0x48
   d59a6:	e7b7      	b.n	d5918 <_ZN3PID7ComputeEv+0x7c>

000d59a8 <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
   d59a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d59ac:	ec55 4b10 	vmov	r4, r5, d0
   d59b0:	ed2d 8b02 	vpush	{d8}
   d59b4:	4682      	mov	sl, r0
   if (Kp<0 || Ki<0 || Kd<0) return;
   d59b6:	2200      	movs	r2, #0
   d59b8:	ee10 0a10 	vmov	r0, s0
   d59bc:	2300      	movs	r3, #0
   d59be:	4629      	mov	r1, r5
{
   d59c0:	ec57 6b11 	vmov	r6, r7, d1
   d59c4:	ec59 8b12 	vmov	r8, r9, d2
   if (Kp<0 || Ki<0 || Kd<0) return;
   d59c8:	f002 ff78 	bl	d88bc <__aeabi_dcmplt>
   d59cc:	2800      	cmp	r0, #0
   d59ce:	d151      	bne.n	d5a74 <_ZN3PID10SetTuningsEddd+0xcc>
   d59d0:	2200      	movs	r2, #0
   d59d2:	2300      	movs	r3, #0
   d59d4:	4630      	mov	r0, r6
   d59d6:	4639      	mov	r1, r7
   d59d8:	f002 ff70 	bl	d88bc <__aeabi_dcmplt>
   d59dc:	2800      	cmp	r0, #0
   d59de:	d149      	bne.n	d5a74 <_ZN3PID10SetTuningsEddd+0xcc>
   d59e0:	2200      	movs	r2, #0
   d59e2:	2300      	movs	r3, #0
   d59e4:	4640      	mov	r0, r8
   d59e6:	4649      	mov	r1, r9
   d59e8:	f002 ff68 	bl	d88bc <__aeabi_dcmplt>
   d59ec:	2800      	cmp	r0, #0
   d59ee:	d141      	bne.n	d5a74 <_ZN3PID10SetTuningsEddd+0xcc>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   d59f0:	e9ca 6702 	strd	r6, r7, [sl, #8]
   d59f4:	e9ca 8904 	strd	r8, r9, [sl, #16]
   d59f8:	e9ca 4500 	strd	r4, r5, [sl]
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d59fc:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   d5a00:	f002 fc70 	bl	d82e4 <__aeabi_ui2d>
   d5a04:	4b1d      	ldr	r3, [pc, #116]	; (d5a7c <_ZN3PID10SetTuningsEddd+0xd4>)
   d5a06:	2200      	movs	r2, #0
   d5a08:	f002 fe10 	bl	d862c <__aeabi_ddiv>
   kp = Kp;
   d5a0c:	e9ca 4506 	strd	r4, r5, [sl, #24]
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d5a10:	ec41 0b18 	vmov	d8, r0, r1
   ki = Ki * SampleTimeInSec;
   d5a14:	4602      	mov	r2, r0
   d5a16:	460b      	mov	r3, r1
   d5a18:	4630      	mov	r0, r6
   d5a1a:	4639      	mov	r1, r7
   d5a1c:	f002 fcdc 	bl	d83d8 <__aeabi_dmul>
   d5a20:	4606      	mov	r6, r0
   d5a22:	460f      	mov	r7, r1
   kd = Kd / SampleTimeInSec;
   d5a24:	ec53 2b18 	vmov	r2, r3, d8
   d5a28:	4640      	mov	r0, r8
   d5a2a:	4649      	mov	r1, r9
   ki = Ki * SampleTimeInSec;
   d5a2c:	e9ca 6708 	strd	r6, r7, [sl, #32]
   kd = Kd / SampleTimeInSec;
   d5a30:	f002 fdfc 	bl	d862c <__aeabi_ddiv>
 
  if(controllerDirection ==REVERSE)
   d5a34:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
   kd = Kd / SampleTimeInSec;
   d5a38:	4680      	mov	r8, r0
   d5a3a:	4689      	mov	r9, r1
  if(controllerDirection ==REVERSE)
   d5a3c:	2b01      	cmp	r3, #1
   kd = Kd / SampleTimeInSec;
   d5a3e:	e9ca 890a 	strd	r8, r9, [sl, #40]	; 0x28
  if(controllerDirection ==REVERSE)
   d5a42:	d117      	bne.n	d5a74 <_ZN3PID10SetTuningsEddd+0xcc>
   {
      kp = (0 - kp);
   d5a44:	4622      	mov	r2, r4
   d5a46:	462b      	mov	r3, r5
   d5a48:	2000      	movs	r0, #0
   d5a4a:	2100      	movs	r1, #0
   d5a4c:	f002 fb0c 	bl	d8068 <__aeabi_dsub>
      ki = (0 - ki);
   d5a50:	4632      	mov	r2, r6
      kp = (0 - kp);
   d5a52:	e9ca 0106 	strd	r0, r1, [sl, #24]
      ki = (0 - ki);
   d5a56:	463b      	mov	r3, r7
   d5a58:	2000      	movs	r0, #0
   d5a5a:	2100      	movs	r1, #0
   d5a5c:	f002 fb04 	bl	d8068 <__aeabi_dsub>
      kd = (0 - kd);
   d5a60:	4642      	mov	r2, r8
      ki = (0 - ki);
   d5a62:	e9ca 0108 	strd	r0, r1, [sl, #32]
      kd = (0 - kd);
   d5a66:	464b      	mov	r3, r9
   d5a68:	2000      	movs	r0, #0
   d5a6a:	2100      	movs	r1, #0
   d5a6c:	f002 fafc 	bl	d8068 <__aeabi_dsub>
   d5a70:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
   }
}
   d5a74:	ecbd 8b02 	vpop	{d8}
   d5a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5a7c:	408f4000 	.word	0x408f4000

000d5a80 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   d5a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (NewSampleTime > 0)
   d5a82:	1e0d      	subs	r5, r1, #0
{
   d5a84:	4604      	mov	r4, r0
   if (NewSampleTime > 0)
   d5a86:	dd20      	ble.n	d5aca <_ZN3PID13SetSampleTimeEi+0x4a>
   {
      double ratio  = (double)NewSampleTime
   d5a88:	4628      	mov	r0, r5
   d5a8a:	f002 fc3b 	bl	d8304 <__aeabi_i2d>
   d5a8e:	4606      	mov	r6, r0
                      / (double)SampleTime;
   d5a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
      double ratio  = (double)NewSampleTime
   d5a92:	460f      	mov	r7, r1
                      / (double)SampleTime;
   d5a94:	f002 fc26 	bl	d82e4 <__aeabi_ui2d>
   d5a98:	4602      	mov	r2, r0
   d5a9a:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
   d5a9c:	4630      	mov	r0, r6
   d5a9e:	4639      	mov	r1, r7
   d5aa0:	f002 fdc4 	bl	d862c <__aeabi_ddiv>
      ki *= ratio;
   d5aa4:	4602      	mov	r2, r0
   d5aa6:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
   d5aa8:	4606      	mov	r6, r0
   d5aaa:	460f      	mov	r7, r1
      ki *= ratio;
   d5aac:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   d5ab0:	f002 fc92 	bl	d83d8 <__aeabi_dmul>
      kd /= ratio;
   d5ab4:	4632      	mov	r2, r6
      ki *= ratio;
   d5ab6:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd /= ratio;
   d5aba:	463b      	mov	r3, r7
   d5abc:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   d5ac0:	f002 fdb4 	bl	d862c <__aeabi_ddiv>
   d5ac4:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
      SampleTime = (unsigned long)NewSampleTime;
   d5ac8:	65a5      	str	r5, [r4, #88]	; 0x58
   }
}
   d5aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5acc <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   d5acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ad0:	ec55 4b10 	vmov	r4, r5, d0
   d5ad4:	ec57 6b11 	vmov	r6, r7, d1
   d5ad8:	4682      	mov	sl, r0
   if(Min >= Max) return;
   d5ada:	ee11 2a10 	vmov	r2, s2
   d5ade:	ee10 0a10 	vmov	r0, s0
   d5ae2:	463b      	mov	r3, r7
   d5ae4:	4629      	mov	r1, r5
   d5ae6:	f002 fefd 	bl	d88e4 <__aeabi_dcmpge>
   d5aea:	2800      	cmp	r0, #0
   d5aec:	d137      	bne.n	d5b5e <_ZN3PID15SetOutputLimitsEdd+0x92>
   outMin = Min;
   outMax = Max;
 
   if(inAuto)
   d5aee:	f89a 3070 	ldrb.w	r3, [sl, #112]	; 0x70
   outMin = Min;
   d5af2:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
   outMax = Max;
   d5af6:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
   if(inAuto)
   d5afa:	2b00      	cmp	r3, #0
   d5afc:	d02f      	beq.n	d5b5e <_ZN3PID15SetOutputLimitsEdd+0x92>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   d5afe:	f8da b038 	ldr.w	fp, [sl, #56]	; 0x38
   d5b02:	e9db 8900 	ldrd	r8, r9, [fp]
   d5b06:	4630      	mov	r0, r6
   d5b08:	4642      	mov	r2, r8
   d5b0a:	464b      	mov	r3, r9
   d5b0c:	4639      	mov	r1, r7
   d5b0e:	f002 fed5 	bl	d88bc <__aeabi_dcmplt>
   d5b12:	b178      	cbz	r0, d5b34 <_ZN3PID15SetOutputLimitsEdd+0x68>
   d5b14:	e9cb 6700 	strd	r6, r7, [fp]
	   else if(*myOutput < outMin) *myOutput = outMin;
	 
	   if(ITerm > outMax) ITerm= outMax;
   d5b18:	e9da 6712 	ldrd	r6, r7, [sl, #72]	; 0x48
   d5b1c:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
   d5b20:	4630      	mov	r0, r6
   d5b22:	4622      	mov	r2, r4
   d5b24:	462b      	mov	r3, r5
   d5b26:	4639      	mov	r1, r7
   d5b28:	f002 fee6 	bl	d88f8 <__aeabi_dcmpgt>
   d5b2c:	b168      	cbz	r0, d5b4a <_ZN3PID15SetOutputLimitsEdd+0x7e>
	   else if(ITerm < outMin) ITerm= outMin;
   d5b2e:	e9ca 4512 	strd	r4, r5, [sl, #72]	; 0x48
   d5b32:	e014      	b.n	d5b5e <_ZN3PID15SetOutputLimitsEdd+0x92>
	   else if(*myOutput < outMin) *myOutput = outMin;
   d5b34:	4642      	mov	r2, r8
   d5b36:	464b      	mov	r3, r9
   d5b38:	4620      	mov	r0, r4
   d5b3a:	4629      	mov	r1, r5
   d5b3c:	f002 fedc 	bl	d88f8 <__aeabi_dcmpgt>
   d5b40:	2800      	cmp	r0, #0
   d5b42:	d0e9      	beq.n	d5b18 <_ZN3PID15SetOutputLimitsEdd+0x4c>
   d5b44:	e9cb 4500 	strd	r4, r5, [fp]
   d5b48:	e7e6      	b.n	d5b18 <_ZN3PID15SetOutputLimitsEdd+0x4c>
	   else if(ITerm < outMin) ITerm= outMin;
   d5b4a:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
   d5b4e:	4630      	mov	r0, r6
   d5b50:	4622      	mov	r2, r4
   d5b52:	462b      	mov	r3, r5
   d5b54:	4639      	mov	r1, r7
   d5b56:	f002 feb1 	bl	d88bc <__aeabi_dcmplt>
   d5b5a:	2800      	cmp	r0, #0
   d5b5c:	d1e7      	bne.n	d5b2e <_ZN3PID15SetOutputLimitsEdd+0x62>
   }
}
   d5b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b62 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   d5b62:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
   ITerm = *myOutput;
   d5b66:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5b68:	e9d3 6700 	ldrd	r6, r7, [r3]
   d5b6c:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
   lastInput = *myInput;
   d5b70:	6b43      	ldr	r3, [r0, #52]	; 0x34
   if(ITerm > outMax) ITerm = outMax;
   d5b72:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
   lastInput = *myInput;
   d5b76:	e9d3 2300 	ldrd	r2, r3, [r3]
{
   d5b7a:	4604      	mov	r4, r0
   lastInput = *myInput;
   d5b7c:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
   if(ITerm > outMax) ITerm = outMax;
   d5b80:	4639      	mov	r1, r7
   d5b82:	4642      	mov	r2, r8
   d5b84:	464b      	mov	r3, r9
   d5b86:	4630      	mov	r0, r6
   d5b88:	f002 feb6 	bl	d88f8 <__aeabi_dcmpgt>
   d5b8c:	b110      	cbz	r0, d5b94 <_ZN3PID10InitializeEv+0x32>
   else if(ITerm < outMin) ITerm = outMin;
   d5b8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
}
   d5b92:	e009      	b.n	d5ba8 <_ZN3PID10InitializeEv+0x46>
   else if(ITerm < outMin) ITerm = outMin;
   d5b94:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
   d5b98:	4630      	mov	r0, r6
   d5b9a:	4642      	mov	r2, r8
   d5b9c:	464b      	mov	r3, r9
   d5b9e:	4639      	mov	r1, r7
   d5ba0:	f002 fe8c 	bl	d88bc <__aeabi_dcmplt>
   d5ba4:	2800      	cmp	r0, #0
   d5ba6:	d1f2      	bne.n	d5b8e <_ZN3PID10InitializeEv+0x2c>
}
   d5ba8:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

000d5bac <_ZN3PID7SetModeENS_6mode_tE>:
{
   d5bac:	b538      	push	{r3, r4, r5, lr}
    bool newAuto = (Mode == AUTOMATIC);
   d5bae:	1e4b      	subs	r3, r1, #1
   d5bb0:	425d      	negs	r5, r3
   d5bb2:	415d      	adcs	r5, r3
    if(newAuto == !inAuto)
   d5bb4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   d5bb8:	f083 0301 	eor.w	r3, r3, #1
   d5bbc:	42ab      	cmp	r3, r5
{
   d5bbe:	4604      	mov	r4, r0
    if(newAuto == !inAuto)
   d5bc0:	d101      	bne.n	d5bc6 <_ZN3PID7SetModeENS_6mode_tE+0x1a>
        PID::Initialize();
   d5bc2:	f7ff ffce 	bl	d5b62 <_ZN3PID10InitializeEv>
    inAuto = newAuto;
   d5bc6:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
}
   d5bca:	bd38      	pop	{r3, r4, r5, pc}

000d5bcc <_ZN3PID22SetControllerDirectionENS_11direction_tE>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   d5bcc:	b538      	push	{r3, r4, r5, lr}
   if(inAuto && Direction !=controllerDirection)
   d5bce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
{
   d5bd2:	4604      	mov	r4, r0
   d5bd4:	460d      	mov	r5, r1
   if(inAuto && Direction !=controllerDirection)
   d5bd6:	b1d3      	cbz	r3, d5c0e <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   d5bd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d5bda:	428b      	cmp	r3, r1
   d5bdc:	d017      	beq.n	d5c0e <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   {
	  kp = (0 - kp);
   d5bde:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   d5be2:	2100      	movs	r1, #0
   d5be4:	2000      	movs	r0, #0
   d5be6:	f002 fa3f 	bl	d8068 <__aeabi_dsub>
      ki = (0 - ki);
   d5bea:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	  kp = (0 - kp);
   d5bee:	e9c4 0106 	strd	r0, r1, [r4, #24]
      ki = (0 - ki);
   d5bf2:	2000      	movs	r0, #0
   d5bf4:	2100      	movs	r1, #0
   d5bf6:	f002 fa37 	bl	d8068 <__aeabi_dsub>
      kd = (0 - kd);
   d5bfa:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
      ki = (0 - ki);
   d5bfe:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd = (0 - kd);
   d5c02:	2000      	movs	r0, #0
   d5c04:	2100      	movs	r1, #0
   d5c06:	f002 fa2f 	bl	d8068 <__aeabi_dsub>
   d5c0a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
   }   
   controllerDirection = Direction;
   d5c0e:	6325      	str	r5, [r4, #48]	; 0x30
}
   d5c10:	bd38      	pop	{r3, r4, r5, pc}
   d5c12:	0000      	movs	r0, r0
   d5c14:	0000      	movs	r0, r0
	...

000d5c18 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>:
PID::PID(double* Input, double* Output, double* Setpoint,
   d5c18:	b510      	push	{r4, lr}
    mySetpoint = Setpoint;
   d5c1a:	63c3      	str	r3, [r0, #60]	; 0x3c
	inAuto = false;
   d5c1c:	2300      	movs	r3, #0
    myInput = Input;
   d5c1e:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
	inAuto = false;
   d5c22:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
   outMin = Min;
   d5c26:	2200      	movs	r2, #0
   d5c28:	2300      	movs	r3, #0
   d5c2a:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
   outMax = Max;
   d5c2e:	a312      	add	r3, pc, #72	; (adr r3, d5c78 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE+0x60>)
   d5c30:	e9d3 2300 	ldrd	r2, r3, [r3]
PID::PID(double* Input, double* Output, double* Setpoint,
   d5c34:	b086      	sub	sp, #24
   outMax = Max;
   d5c36:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d5c3a:	2364      	movs	r3, #100	; 0x64
PID::PID(double* Input, double* Output, double* Setpoint,
   d5c3c:	4604      	mov	r4, r0
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d5c3e:	6583      	str	r3, [r0, #88]	; 0x58
    PID::SetControllerDirection(ControllerDirection);
   d5c40:	f89d 1020 	ldrb.w	r1, [sp, #32]
PID::PID(double* Input, double* Output, double* Setpoint,
   d5c44:	ed8d 0b04 	vstr	d0, [sp, #16]
   d5c48:	ed8d 1b02 	vstr	d1, [sp, #8]
   d5c4c:	ed8d 2b00 	vstr	d2, [sp]
    PID::SetControllerDirection(ControllerDirection);
   d5c50:	f7ff ffbc 	bl	d5bcc <_ZN3PID22SetControllerDirectionENS_11direction_tE>
    PID::SetTunings(Kp, Ki, Kd);
   d5c54:	ed9d 2b00 	vldr	d2, [sp]
   d5c58:	ed9d 1b02 	vldr	d1, [sp, #8]
   d5c5c:	ed9d 0b04 	vldr	d0, [sp, #16]
   d5c60:	4620      	mov	r0, r4
   d5c62:	f7ff fea1 	bl	d59a8 <_ZN3PID10SetTuningsEddd>
   d5c66:	f001 f81f 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis()-SampleTime;				
   d5c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d5c6c:	1ac0      	subs	r0, r0, r3
   d5c6e:	6420      	str	r0, [r4, #64]	; 0x40
}
   d5c70:	4620      	mov	r0, r4
   d5c72:	b006      	add	sp, #24
   d5c74:	bd10      	pop	{r4, pc}
   d5c76:	bf00      	nop
   d5c78:	00000000 	.word	0x00000000
   d5c7c:	406fe000 	.word	0x406fe000

000d5c80 <_ZN3PID5GetKpEv>:
/* Status Funcions*************************************************************
 * Just because you set the Kp=-1 doesn't mean it actually happened.  these
 * functions query the internal state of the PID.  they're here for display 
 * purposes.  this are the functions the PID Front-end uses for example
 ******************************************************************************/
double PID::GetKp(){ return  dispKp; }
   d5c80:	ed90 0b00 	vldr	d0, [r0]
   d5c84:	4770      	bx	lr

000d5c86 <_ZN3PID5GetKiEv>:
double PID::GetKi(){ return  dispKi;}
   d5c86:	ed90 0b02 	vldr	d0, [r0, #8]
   d5c8a:	4770      	bx	lr

000d5c8c <_ZN3PID5GetKdEv>:
double PID::GetKd(){ return  dispKd;}
   d5c8c:	ed90 0b04 	vldr	d0, [r0, #16]
   d5c90:	4770      	bx	lr

000d5c92 <_ZN3PID7GetModeEv>:
int PID::GetMode(){ return  inAuto ? AUTOMATIC : MANUAL;}
   d5c92:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
   d5c96:	4770      	bx	lr

000d5c98 <_ZN9PID_ATuneC1EPdS0_>:
#include <PID-AutoTune/PID-AutoTune.h>
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
   d5c98:	b510      	push	{r4, lr}
   d5c9a:	4604      	mov	r4, r0
{
	input = Input;
	output = Output;
	controlType =0 ; //default to PI
   d5c9c:	2300      	movs	r3, #0
	output = Output;
   d5c9e:	e9c0 1201 	strd	r1, r2, [r0, #4]
	controlType =0 ; //default to PI
   d5ca2:	6203      	str	r3, [r0, #32]
	noiseBand = 0.5;
	running = false;
   d5ca4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	oStep = 30;
   d5ca8:	4b08      	ldr	r3, [pc, #32]	; (d5ccc <_ZN9PID_ATuneC1EPdS0_+0x34>)
	noiseBand = 0.5;
   d5caa:	4909      	ldr	r1, [pc, #36]	; (d5cd0 <_ZN9PID_ATuneC1EPdS0_+0x38>)
	oStep = 30;
   d5cac:	2200      	movs	r2, #0
   d5cae:	e9c4 23f4 	strd	r2, r3, [r4, #976]	; 0x3d0
	noiseBand = 0.5;
   d5cb2:	2000      	movs	r0, #0
    if (value<1) value = 1;
	
	if(value<25)
	{
		nLookBack = value * 4;
		sampleTime = 250;
   d5cb4:	23fa      	movs	r3, #250	; 0xfa
   d5cb6:	2228      	movs	r2, #40	; 0x28
	noiseBand = 0.5;
   d5cb8:	e9c4 0106 	strd	r0, r1, [r4, #24]
		sampleTime = 250;
   d5cbc:	e9c4 320d 	strd	r3, r2, [r4, #52]	; 0x34
   d5cc0:	f000 fff2 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
	lastTime = millis();
   d5cc4:	6320      	str	r0, [r4, #48]	; 0x30
}
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	bd10      	pop	{r4, pc}
   d5cca:	bf00      	nop
   d5ccc:	403e0000 	.word	0x403e0000
   d5cd0:	3fe00000 	.word	0x3fe00000

000d5cd4 <_ZN9PID_ATune6CancelEv>:
	running = false;
   d5cd4:	2300      	movs	r3, #0
   d5cd6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
} 
   d5cda:	4770      	bx	lr
   d5cdc:	0000      	movs	r0, r0
	...

000d5ce0 <_ZN9PID_ATune8FinishUpEv>:
{
   d5ce0:	b5d0      	push	{r4, r6, r7, lr}
   d5ce2:	4604      	mov	r4, r0
	  *output = outputStart;
   d5ce4:	6883      	ldr	r3, [r0, #8]
   d5ce6:	e9d0 01f6 	ldrd	r0, r1, [r0, #984]	; 0x3d8
   d5cea:	e9c3 0100 	strd	r0, r1, [r3]
      Ku = 4*(2*oStep)/((absMax-absMin)*3.14159);
   d5cee:	e9d4 23f4 	ldrd	r2, r3, [r4, #976]	; 0x3d0
   d5cf2:	4610      	mov	r0, r2
   d5cf4:	4619      	mov	r1, r3
   d5cf6:	f002 f9b9 	bl	d806c <__adddf3>
   d5cfa:	4b15      	ldr	r3, [pc, #84]	; (d5d50 <_ZN9PID_ATune8FinishUpEv+0x70>)
   d5cfc:	2200      	movs	r2, #0
   d5cfe:	f002 fb6b 	bl	d83d8 <__aeabi_dmul>
   d5d02:	e9d4 23f2 	ldrd	r2, r3, [r4, #968]	; 0x3c8
   d5d06:	4606      	mov	r6, r0
   d5d08:	460f      	mov	r7, r1
   d5d0a:	e9d4 01f0 	ldrd	r0, r1, [r4, #960]	; 0x3c0
   d5d0e:	f002 f9ab 	bl	d8068 <__aeabi_dsub>
   d5d12:	a30d      	add	r3, pc, #52	; (adr r3, d5d48 <_ZN9PID_ATune8FinishUpEv+0x68>)
   d5d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d18:	f002 fb5e 	bl	d83d8 <__aeabi_dmul>
   d5d1c:	4602      	mov	r2, r0
   d5d1e:	460b      	mov	r3, r1
   d5d20:	4630      	mov	r0, r6
   d5d22:	4639      	mov	r1, r7
   d5d24:	f002 fc82 	bl	d862c <__aeabi_ddiv>
   d5d28:	e9c4 01f8 	strd	r0, r1, [r4, #992]	; 0x3e0
      Pu = (double)(peak1-peak2) / 1000;
   d5d2c:	e9d4 030a 	ldrd	r0, r3, [r4, #40]	; 0x28
   d5d30:	1ac0      	subs	r0, r0, r3
   d5d32:	f002 fad7 	bl	d82e4 <__aeabi_ui2d>
   d5d36:	4b07      	ldr	r3, [pc, #28]	; (d5d54 <_ZN9PID_ATune8FinishUpEv+0x74>)
   d5d38:	2200      	movs	r2, #0
   d5d3a:	f002 fc77 	bl	d862c <__aeabi_ddiv>
   d5d3e:	e9c4 01fa 	strd	r0, r1, [r4, #1000]	; 0x3e8
}
   d5d42:	bdd0      	pop	{r4, r6, r7, pc}
   d5d44:	f3af 8000 	nop.w
   d5d48:	f01b866e 	.word	0xf01b866e
   d5d4c:	400921f9 	.word	0x400921f9
   d5d50:	40100000 	.word	0x40100000
   d5d54:	408f4000 	.word	0x408f4000

000d5d58 <_ZN9PID_ATune7RuntimeEv>:
{
   d5d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(peakCount>9 && running)
   d5d5c:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
	justevaled=false;
   d5d60:	2300      	movs	r3, #0
	if(peakCount>9 && running)
   d5d62:	2a09      	cmp	r2, #9
{
   d5d64:	4682      	mov	sl, r0
	justevaled=false;
   d5d66:	f880 33bd 	strb.w	r3, [r0, #957]	; 0x3bd
	if(peakCount>9 && running)
   d5d6a:	dd08      	ble.n	d5d7e <_ZN9PID_ATune7RuntimeEv+0x26>
   d5d6c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   d5d70:	b12a      	cbz	r2, d5d7e <_ZN9PID_ATune7RuntimeEv+0x26>
		running = false;
   d5d72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		FinishUp();
   d5d76:	f7ff ffb3 	bl	d5ce0 <_ZN9PID_ATune8FinishUpEv>
	  return 1;
   d5d7a:	2001      	movs	r0, #1
   d5d7c:	e00a      	b.n	d5d94 <_ZN9PID_ATune7RuntimeEv+0x3c>
   d5d7e:	f000 ff93 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
	if((now-lastTime)<(unsigned long)sampleTime) return false;
   d5d82:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
   d5d86:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
   d5d8a:	1ac3      	subs	r3, r0, r3
   d5d8c:	4293      	cmp	r3, r2
   d5d8e:	4683      	mov	fp, r0
   d5d90:	d203      	bcs.n	d5d9a <_ZN9PID_ATune7RuntimeEv+0x42>
   d5d92:	2000      	movs	r0, #0
}
   d5d94:	b003      	add	sp, #12
   d5d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double refVal = *input;
   d5d9a:	f8da 3004 	ldr.w	r3, [sl, #4]
	lastTime = now;
   d5d9e:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
	double refVal = *input;
   d5da2:	e9d3 8900 	ldrd	r8, r9, [r3]
	if(!running)
   d5da6:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
	justevaled=true;
   d5daa:	2201      	movs	r2, #1
   d5dac:	f88a 23bd 	strb.w	r2, [sl, #957]	; 0x3bd
	if(!running)
   d5db0:	2b00      	cmp	r3, #0
   d5db2:	d165      	bne.n	d5e80 <_ZN9PID_ATune7RuntimeEv+0x128>
		absMax=refVal;
   d5db4:	e9ca 89f0 	strd	r8, r9, [sl, #960]	; 0x3c0
		absMin=refVal;
   d5db8:	e9ca 89f2 	strd	r8, r9, [sl, #968]	; 0x3c8
		setpoint = refVal;
   d5dbc:	e9ca 8904 	strd	r8, r9, [sl, #16]
		outputStart = *output;
   d5dc0:	f8da 4008 	ldr.w	r4, [sl, #8]
		peakType = 0;
   d5dc4:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
		peakCount=0;
   d5dc8:	f8ca 33b8 	str.w	r3, [sl, #952]	; 0x3b8
		justchanged=false;
   d5dcc:	f88a 33bc 	strb.w	r3, [sl, #956]	; 0x3bc
		running = true;
   d5dd0:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
		outputStart = *output;
   d5dd4:	e9d4 2300 	ldrd	r2, r3, [r4]
		*output = outputStart+oStep;
   d5dd8:	e9da 01f4 	ldrd	r0, r1, [sl, #976]	; 0x3d0
		outputStart = *output;
   d5ddc:	e9ca 23f6 	strd	r2, r3, [sl, #984]	; 0x3d8
		*output = outputStart+oStep;
   d5de0:	f002 f944 	bl	d806c <__adddf3>
   d5de4:	e9c4 0100 	strd	r0, r1, [r4]
	if(refVal>setpoint+noiseBand) *output = outputStart-oStep;
   d5de8:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   d5dec:	e9da 6706 	ldrd	r6, r7, [sl, #24]
   d5df0:	4620      	mov	r0, r4
   d5df2:	4632      	mov	r2, r6
   d5df4:	463b      	mov	r3, r7
   d5df6:	4629      	mov	r1, r5
   d5df8:	f002 f938 	bl	d806c <__adddf3>
   d5dfc:	4642      	mov	r2, r8
   d5dfe:	464b      	mov	r3, r9
   d5e00:	f002 fd5c 	bl	d88bc <__aeabi_dcmplt>
   d5e04:	2800      	cmp	r0, #0
   d5e06:	d04f      	beq.n	d5ea8 <_ZN9PID_ATune7RuntimeEv+0x150>
   d5e08:	e9da 23f4 	ldrd	r2, r3, [sl, #976]	; 0x3d0
   d5e0c:	e9da 01f6 	ldrd	r0, r1, [sl, #984]	; 0x3d8
   d5e10:	f8da 4008 	ldr.w	r4, [sl, #8]
   d5e14:	f002 f928 	bl	d8068 <__aeabi_dsub>
	else if (refVal<setpoint-noiseBand) *output = outputStart+oStep;
   d5e18:	e9c4 0100 	strd	r0, r1, [r4]
  for(int i=nLookBack-1;i>=0;i--)
   d5e1c:	f8da 5038 	ldr.w	r5, [sl, #56]	; 0x38
  isMax=true;isMin=true;
   d5e20:	f240 1301 	movw	r3, #257	; 0x101
   d5e24:	f8aa 3000 	strh.w	r3, [sl]
  for(int i=nLookBack-1;i>=0;i--)
   d5e28:	1e6b      	subs	r3, r5, #1
   d5e2a:	9301      	str	r3, [sp, #4]
   d5e2c:	eb0a 04c5 	add.w	r4, sl, r5, lsl #3
   d5e30:	9b01      	ldr	r3, [sp, #4]
   d5e32:	2b00      	cmp	r3, #0
   d5e34:	db4d      	blt.n	d5ed2 <_ZN9PID_ATune7RuntimeEv+0x17a>
    if(isMax) isMax = refVal>val;
   d5e36:	f89a 3000 	ldrb.w	r3, [sl]
    double val = lastInputs[i];
   d5e3a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if(isMax) isMax = refVal>val;
   d5e3e:	b153      	cbz	r3, d5e56 <_ZN9PID_ATune7RuntimeEv+0xfe>
   d5e40:	4632      	mov	r2, r6
   d5e42:	463b      	mov	r3, r7
   d5e44:	4640      	mov	r0, r8
   d5e46:	4649      	mov	r1, r9
   d5e48:	f002 fd56 	bl	d88f8 <__aeabi_dcmpgt>
   d5e4c:	3800      	subs	r0, #0
   d5e4e:	bf18      	it	ne
   d5e50:	2001      	movne	r0, #1
   d5e52:	f88a 0000 	strb.w	r0, [sl]
    if(isMin) isMin = refVal<val;
   d5e56:	f89a 3001 	ldrb.w	r3, [sl, #1]
   d5e5a:	b153      	cbz	r3, d5e72 <_ZN9PID_ATune7RuntimeEv+0x11a>
   d5e5c:	4632      	mov	r2, r6
   d5e5e:	463b      	mov	r3, r7
   d5e60:	4640      	mov	r0, r8
   d5e62:	4649      	mov	r1, r9
   d5e64:	f002 fd2a 	bl	d88bc <__aeabi_dcmplt>
   d5e68:	3800      	subs	r0, #0
   d5e6a:	bf18      	it	ne
   d5e6c:	2001      	movne	r0, #1
   d5e6e:	f88a 0001 	strb.w	r0, [sl, #1]
  for(int i=nLookBack-1;i>=0;i--)
   d5e72:	9b01      	ldr	r3, [sp, #4]
   d5e74:	3b01      	subs	r3, #1
    lastInputs[i+1] = lastInputs[i];
   d5e76:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
  for(int i=nLookBack-1;i>=0;i--)
   d5e7a:	9301      	str	r3, [sp, #4]
   d5e7c:	3c08      	subs	r4, #8
   d5e7e:	e7d7      	b.n	d5e30 <_ZN9PID_ATune7RuntimeEv+0xd8>
		if(refVal>absMax)absMax=refVal;
   d5e80:	e9da 01f0 	ldrd	r0, r1, [sl, #960]	; 0x3c0
   d5e84:	4642      	mov	r2, r8
   d5e86:	464b      	mov	r3, r9
   d5e88:	f002 fd18 	bl	d88bc <__aeabi_dcmplt>
   d5e8c:	b108      	cbz	r0, d5e92 <_ZN9PID_ATune7RuntimeEv+0x13a>
   d5e8e:	e9ca 89f0 	strd	r8, r9, [sl, #960]	; 0x3c0
		if(refVal<absMin)absMin=refVal;
   d5e92:	e9da 01f2 	ldrd	r0, r1, [sl, #968]	; 0x3c8
   d5e96:	4642      	mov	r2, r8
   d5e98:	464b      	mov	r3, r9
   d5e9a:	f002 fd2d 	bl	d88f8 <__aeabi_dcmpgt>
   d5e9e:	2800      	cmp	r0, #0
   d5ea0:	d0a2      	beq.n	d5de8 <_ZN9PID_ATune7RuntimeEv+0x90>
   d5ea2:	e9ca 89f2 	strd	r8, r9, [sl, #968]	; 0x3c8
   d5ea6:	e79f      	b.n	d5de8 <_ZN9PID_ATune7RuntimeEv+0x90>
	else if (refVal<setpoint-noiseBand) *output = outputStart+oStep;
   d5ea8:	4632      	mov	r2, r6
   d5eaa:	463b      	mov	r3, r7
   d5eac:	4620      	mov	r0, r4
   d5eae:	4629      	mov	r1, r5
   d5eb0:	f002 f8da 	bl	d8068 <__aeabi_dsub>
   d5eb4:	4642      	mov	r2, r8
   d5eb6:	464b      	mov	r3, r9
   d5eb8:	f002 fd1e 	bl	d88f8 <__aeabi_dcmpgt>
   d5ebc:	2800      	cmp	r0, #0
   d5ebe:	d0ad      	beq.n	d5e1c <_ZN9PID_ATune7RuntimeEv+0xc4>
   d5ec0:	e9da 23f4 	ldrd	r2, r3, [sl, #976]	; 0x3d0
   d5ec4:	e9da 01f6 	ldrd	r0, r1, [sl, #984]	; 0x3d8
   d5ec8:	f8da 4008 	ldr.w	r4, [sl, #8]
   d5ecc:	f002 f8ce 	bl	d806c <__adddf3>
   d5ed0:	e7a2      	b.n	d5e18 <_ZN9PID_ATune7RuntimeEv+0xc0>
  if(nLookBack<9)
   d5ed2:	2d08      	cmp	r5, #8
  lastInputs[0] = refVal;  
   d5ed4:	e9ca 8910 	strd	r8, r9, [sl, #64]	; 0x40
  if(nLookBack<9)
   d5ed8:	f77f af5b 	ble.w	d5d92 <_ZN9PID_ATune7RuntimeEv+0x3a>
  if(isMax)
   d5edc:	f89a 3000 	ldrb.w	r3, [sl]
   d5ee0:	b1d3      	cbz	r3, d5f18 <_ZN9PID_ATune7RuntimeEv+0x1c0>
    if(peakType==0)peakType=1;
   d5ee2:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5ee6:	b95b      	cbnz	r3, d5f00 <_ZN9PID_ATune7RuntimeEv+0x1a8>
   d5ee8:	2301      	movs	r3, #1
   d5eea:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
    peaks[peakCount] = refVal;
   d5eee:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
    peak1 = now;
   d5ef2:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
    if(peakCount<10)peaks[peakCount] = refVal;
   d5ef6:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   d5efa:	e9c3 89da 	strd	r8, r9, [r3, #872]	; 0x368
   d5efe:	e01a      	b.n	d5f36 <_ZN9PID_ATune7RuntimeEv+0x1de>
    if(peakType==-1)
   d5f00:	3301      	adds	r3, #1
   d5f02:	d1f4      	bne.n	d5eee <_ZN9PID_ATune7RuntimeEv+0x196>
      peakType = 1;
   d5f04:	2301      	movs	r3, #1
   d5f06:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
      justchanged=true;
   d5f0a:	f88a 33bc 	strb.w	r3, [sl, #956]	; 0x3bc
      peak2 = peak1;
   d5f0e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   d5f12:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
   d5f16:	e7ea      	b.n	d5eee <_ZN9PID_ATune7RuntimeEv+0x196>
  else if(isMin)
   d5f18:	f89a 3001 	ldrb.w	r3, [sl, #1]
   d5f1c:	b15b      	cbz	r3, d5f36 <_ZN9PID_ATune7RuntimeEv+0x1de>
    if(peakType==0)peakType=-1;
   d5f1e:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5f22:	2b00      	cmp	r3, #0
   d5f24:	d148      	bne.n	d5fb8 <_ZN9PID_ATune7RuntimeEv+0x260>
   d5f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5f2a:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
    if(peakCount<10)peaks[peakCount] = refVal;
   d5f2e:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
   d5f32:	2b09      	cmp	r3, #9
   d5f34:	dddf      	ble.n	d5ef6 <_ZN9PID_ATune7RuntimeEv+0x19e>
  if(justchanged && peakCount>2)
   d5f36:	f89a 33bc 	ldrb.w	r3, [sl, #956]	; 0x3bc
   d5f3a:	2b00      	cmp	r3, #0
   d5f3c:	d04a      	beq.n	d5fd4 <_ZN9PID_ATune7RuntimeEv+0x27c>
   d5f3e:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
   d5f42:	2b02      	cmp	r3, #2
   d5f44:	dd46      	ble.n	d5fd4 <_ZN9PID_ATune7RuntimeEv+0x27c>
    double avgSeparation = (abs(peaks[peakCount-1]-peaks[peakCount-2])+abs(peaks[peakCount-2]-peaks[peakCount-3]))/2;
   d5f46:	eb0a 0bc3 	add.w	fp, sl, r3, lsl #3
    if( avgSeparation < 0.05*(absMax-absMin))
   d5f4a:	e9da 01f0 	ldrd	r0, r1, [sl, #960]	; 0x3c0
   d5f4e:	e9da 23f2 	ldrd	r2, r3, [sl, #968]	; 0x3c8
   d5f52:	f002 f889 	bl	d8068 <__aeabi_dsub>
   d5f56:	a323      	add	r3, pc, #140	; (adr r3, d5fe4 <_ZN9PID_ATune7RuntimeEv+0x28c>)
   d5f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f5c:	f002 fa3c 	bl	d83d8 <__aeabi_dmul>
    double avgSeparation = (abs(peaks[peakCount-1]-peaks[peakCount-2])+abs(peaks[peakCount-2]-peaks[peakCount-3]))/2;
   d5f60:	e9db 89d6 	ldrd	r8, r9, [fp, #856]	; 0x358
   d5f64:	e9db 23d4 	ldrd	r2, r3, [fp, #848]	; 0x350
    if( avgSeparation < 0.05*(absMax-absMin))
   d5f68:	4604      	mov	r4, r0
   d5f6a:	460d      	mov	r5, r1
    double avgSeparation = (abs(peaks[peakCount-1]-peaks[peakCount-2])+abs(peaks[peakCount-2]-peaks[peakCount-3]))/2;
   d5f6c:	4640      	mov	r0, r8
   d5f6e:	4649      	mov	r1, r9
   d5f70:	f002 f87a 	bl	d8068 <__aeabi_dsub>
   d5f74:	4642      	mov	r2, r8
   d5f76:	4606      	mov	r6, r0
   d5f78:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   d5f7c:	464b      	mov	r3, r9
   d5f7e:	e9db 01d8 	ldrd	r0, r1, [fp, #864]	; 0x360
   d5f82:	f002 f871 	bl	d8068 <__aeabi_dsub>
   d5f86:	4602      	mov	r2, r0
   d5f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d5f8c:	4630      	mov	r0, r6
   d5f8e:	4639      	mov	r1, r7
   d5f90:	f002 f86c 	bl	d806c <__adddf3>
   d5f94:	4b12      	ldr	r3, [pc, #72]	; (d5fe0 <_ZN9PID_ATune7RuntimeEv+0x288>)
   d5f96:	2200      	movs	r2, #0
   d5f98:	f002 fa1e 	bl	d83d8 <__aeabi_dmul>
   d5f9c:	4602      	mov	r2, r0
   d5f9e:	460b      	mov	r3, r1
    if( avgSeparation < 0.05*(absMax-absMin))
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	4629      	mov	r1, r5
   d5fa4:	f002 fca8 	bl	d88f8 <__aeabi_dcmpgt>
   d5fa8:	b1a0      	cbz	r0, d5fd4 <_ZN9PID_ATune7RuntimeEv+0x27c>
		FinishUp();
   d5faa:	4650      	mov	r0, sl
   d5fac:	f7ff fe98 	bl	d5ce0 <_ZN9PID_ATune8FinishUpEv>
      running = false;
   d5fb0:	2300      	movs	r3, #0
   d5fb2:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
   d5fb6:	e6e0      	b.n	d5d7a <_ZN9PID_ATune7RuntimeEv+0x22>
    if(peakType==1)
   d5fb8:	2b01      	cmp	r3, #1
   d5fba:	d1b8      	bne.n	d5f2e <_ZN9PID_ATune7RuntimeEv+0x1d6>
   d5fbc:	f8da 23b8 	ldr.w	r2, [sl, #952]	; 0x3b8
      justchanged=true;
   d5fc0:	f88a 33bc 	strb.w	r3, [sl, #956]	; 0x3bc
      peakType=-1;
   d5fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
      peakCount++;
   d5fc8:	3201      	adds	r2, #1
      peakType=-1;
   d5fca:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
      peakCount++;
   d5fce:	f8ca 23b8 	str.w	r2, [sl, #952]	; 0x3b8
      justchanged=true;
   d5fd2:	e7ac      	b.n	d5f2e <_ZN9PID_ATune7RuntimeEv+0x1d6>
   justchanged=false;
   d5fd4:	2000      	movs	r0, #0
   d5fd6:	f88a 03bc 	strb.w	r0, [sl, #956]	; 0x3bc
	return 0;
   d5fda:	e6db      	b.n	d5d94 <_ZN9PID_ATune7RuntimeEv+0x3c>
   d5fdc:	f3af 8000 	nop.w
   d5fe0:	3fe00000 	.word	0x3fe00000
   d5fe4:	9999999a 	.word	0x9999999a
   d5fe8:	3fa99999 	.word	0x3fa99999
   d5fec:	00000000 	.word	0x00000000

000d5ff0 <_ZN9PID_ATune5GetKpEv>:
{
   d5ff0:	b508      	push	{r3, lr}
   d5ff2:	4603      	mov	r3, r0
   d5ff4:	e9d0 01f8 	ldrd	r0, r1, [r0, #992]	; 0x3e0
	return controlType==1 ? 0.6 * Ku : 0.4 * Ku;
   d5ff8:	6a1b      	ldr	r3, [r3, #32]
   d5ffa:	2b01      	cmp	r3, #1
   d5ffc:	d107      	bne.n	d600e <_ZN9PID_ATune5GetKpEv+0x1e>
   d5ffe:	a306      	add	r3, pc, #24	; (adr r3, d6018 <_ZN9PID_ATune5GetKpEv+0x28>)
   d6000:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6004:	f002 f9e8 	bl	d83d8 <__aeabi_dmul>
   d6008:	ec41 0b10 	vmov	d0, r0, r1
}
   d600c:	bd08      	pop	{r3, pc}
	return controlType==1 ? 0.6 * Ku : 0.4 * Ku;
   d600e:	a304      	add	r3, pc, #16	; (adr r3, d6020 <_ZN9PID_ATune5GetKpEv+0x30>)
   d6010:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6014:	e7f6      	b.n	d6004 <_ZN9PID_ATune5GetKpEv+0x14>
   d6016:	bf00      	nop
   d6018:	33333333 	.word	0x33333333
   d601c:	3fe33333 	.word	0x3fe33333
   d6020:	9999999a 	.word	0x9999999a
   d6024:	3fd99999 	.word	0x3fd99999

000d6028 <_ZN9PID_ATune5GetKiEv>:
{
   d6028:	b538      	push	{r3, r4, r5, lr}
   d602a:	4603      	mov	r3, r0
   d602c:	e9d3 45fa 	ldrd	r4, r5, [r3, #1000]	; 0x3e8
	return controlType==1? 1.2*Ku / Pu : 0.48 * Ku / Pu;  // Ki = Kc/Ti
   d6030:	6a1b      	ldr	r3, [r3, #32]
   d6032:	2b01      	cmp	r3, #1
   d6034:	e9d0 01f8 	ldrd	r0, r1, [r0, #992]	; 0x3e0
   d6038:	d10b      	bne.n	d6052 <_ZN9PID_ATune5GetKiEv+0x2a>
   d603a:	4b0b      	ldr	r3, [pc, #44]	; (d6068 <_ZN9PID_ATune5GetKiEv+0x40>)
   d603c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d6040:	f002 f9ca 	bl	d83d8 <__aeabi_dmul>
   d6044:	4622      	mov	r2, r4
   d6046:	462b      	mov	r3, r5
   d6048:	f002 faf0 	bl	d862c <__aeabi_ddiv>
   d604c:	ec41 0b10 	vmov	d0, r0, r1
}
   d6050:	bd38      	pop	{r3, r4, r5, pc}
	return controlType==1? 1.2*Ku / Pu : 0.48 * Ku / Pu;  // Ki = Kc/Ti
   d6052:	a303      	add	r3, pc, #12	; (adr r3, d6060 <_ZN9PID_ATune5GetKiEv+0x38>)
   d6054:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6058:	e7f2      	b.n	d6040 <_ZN9PID_ATune5GetKiEv+0x18>
   d605a:	bf00      	nop
   d605c:	f3af 8000 	nop.w
   d6060:	eb851eb8 	.word	0xeb851eb8
   d6064:	3fdeb851 	.word	0x3fdeb851
   d6068:	3ff33333 	.word	0x3ff33333
   d606c:	00000000 	.word	0x00000000

000d6070 <_ZN9PID_ATune5GetKdEv>:
{
   d6070:	b510      	push	{r4, lr}
	return controlType==1? 0.075 * Ku * Pu : 0;  //Kd = Kc * Td
   d6072:	6a03      	ldr	r3, [r0, #32]
   d6074:	2b01      	cmp	r3, #1
{
   d6076:	4604      	mov	r4, r0
	return controlType==1? 0.075 * Ku * Pu : 0;  //Kd = Kc * Td
   d6078:	d10d      	bne.n	d6096 <_ZN9PID_ATune5GetKdEv+0x26>
   d607a:	4b0b      	ldr	r3, [pc, #44]	; (d60a8 <_ZN9PID_ATune5GetKdEv+0x38>)
   d607c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d6080:	e9d0 01f8 	ldrd	r0, r1, [r0, #992]	; 0x3e0
   d6084:	f002 f9a8 	bl	d83d8 <__aeabi_dmul>
   d6088:	e9d4 23fa 	ldrd	r2, r3, [r4, #1000]	; 0x3e8
   d608c:	f002 f9a4 	bl	d83d8 <__aeabi_dmul>
   d6090:	ec41 0b10 	vmov	d0, r0, r1
}
   d6094:	bd10      	pop	{r4, pc}
	return controlType==1? 0.075 * Ku * Pu : 0;  //Kd = Kc * Td
   d6096:	ed9f 0b02 	vldr	d0, [pc, #8]	; d60a0 <_ZN9PID_ATune5GetKdEv+0x30>
   d609a:	e7fb      	b.n	d6094 <_ZN9PID_ATune5GetKdEv+0x24>
   d609c:	f3af 8000 	nop.w
	...
   d60a8:	3fb33333 	.word	0x3fb33333

000d60ac <_ZN9PID_ATune13SetOutputStepEd>:
	oStep = Step;
   d60ac:	ed80 0bf4 	vstr	d0, [r0, #976]	; 0x3d0
}
   d60b0:	4770      	bx	lr

000d60b2 <_ZN9PID_ATune12SetNoiseBandEd>:
	noiseBand = Band;
   d60b2:	ed80 0b06 	vstr	d0, [r0, #24]
}
   d60b6:	4770      	bx	lr

000d60b8 <_ZN9PID_ATune14SetLookbackSecEi>:
    if (value<1) value = 1;
   d60b8:	2900      	cmp	r1, #0
   d60ba:	dd06      	ble.n	d60ca <_ZN9PID_ATune14SetLookbackSecEi+0x12>
	if(value<25)
   d60bc:	2918      	cmp	r1, #24
   d60be:	dc06      	bgt.n	d60ce <_ZN9PID_ATune14SetLookbackSecEi+0x16>
		nLookBack = value * 4;
   d60c0:	0089      	lsls	r1, r1, #2
		sampleTime = 250;
   d60c2:	23fa      	movs	r3, #250	; 0xfa
		nLookBack = value * 4;
   d60c4:	6381      	str	r1, [r0, #56]	; 0x38
		sampleTime = 250;
   d60c6:	6343      	str	r3, [r0, #52]	; 0x34
   d60c8:	4770      	bx	lr
    if (value<1) value = 1;
   d60ca:	2101      	movs	r1, #1
   d60cc:	e7f8      	b.n	d60c0 <_ZN9PID_ATune14SetLookbackSecEi+0x8>
	}
	else
	{
		nLookBack = 100;
   d60ce:	2364      	movs	r3, #100	; 0x64
   d60d0:	6383      	str	r3, [r0, #56]	; 0x38
		sampleTime = value*10;
   d60d2:	230a      	movs	r3, #10
   d60d4:	4359      	muls	r1, r3
   d60d6:	6341      	str	r1, [r0, #52]	; 0x34
	}
}
   d60d8:	4770      	bx	lr

000d60da <_ZN20Adafruit_MotorShield6setPinEhb.part.0>:
  } else
    _pwm.setPWM(pin, 0, value);
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
   d60da:	2300      	movs	r3, #0
   d60dc:	461a      	mov	r2, r3
   d60de:	306c      	adds	r0, #108	; 0x6c
   d60e0:	f000 b8cd 	b.w	d627e <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d60e4 <_ZN20Adafruit_MotorShield5beginEt>:
void Adafruit_MotorShield::begin(uint16_t freq) {
   d60e4:	b570      	push	{r4, r5, r6, lr}
   d60e6:	4605      	mov	r5, r0
   d60e8:	460c      	mov	r4, r1
  _pwm.begin();
   d60ea:	f105 066c 	add.w	r6, r5, #108	; 0x6c
  Wire.begin();
   d60ee:	f001 fe75 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d60f2:	f001 f875 	bl	d71e0 <_ZN7TwoWire5beginEv>
  _pwm.begin();
   d60f6:	4630      	mov	r0, r6
   d60f8:	f000 f92a 	bl	d6350 <_ZN23Adafruit_PWMServoDriver5beginEv>
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d60fc:	ee07 4a90 	vmov	s15, r4
  _freq = freq;
   d6100:	806c      	strh	r4, [r5, #2]
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d6102:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d6106:	4630      	mov	r0, r6
   d6108:	f000 f92e 	bl	d6368 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>
   d610c:	2400      	movs	r4, #0
    _pwm.setPWM(i, 0, 0);
   d610e:	2300      	movs	r3, #0
   d6110:	b2e1      	uxtb	r1, r4
   d6112:	461a      	mov	r2, r3
   d6114:	4630      	mov	r0, r6
   d6116:	3401      	adds	r4, #1
   d6118:	f000 f8b1 	bl	d627e <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>
  for (uint8_t i=0; i<16; i++)
   d611c:	2c10      	cmp	r4, #16
   d611e:	d1f6      	bne.n	d610e <_ZN20Adafruit_MotorShield5beginEt+0x2a>
}
   d6120:	bd70      	pop	{r4, r5, r6, pc}

000d6122 <_ZN20Adafruit_MotorShield6setPWMEht>:
  if (value > 4095) {
   d6122:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
void Adafruit_MotorShield::setPWM(uint8_t pin, uint16_t value) {
   d6126:	4613      	mov	r3, r2
   d6128:	f100 006c 	add.w	r0, r0, #108	; 0x6c
    _pwm.setPWM(pin, 4096, 0);
   d612c:	bf26      	itte	cs
   d612e:	2300      	movcs	r3, #0
   d6130:	f44f 5280 	movcs.w	r2, #4096	; 0x1000
    _pwm.setPWM(pin, 0, value);
   d6134:	2200      	movcc	r2, #0
   d6136:	f000 b8a2 	b.w	d627e <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d613a <_ZN20Adafruit_MotorShield6setPinEhb>:
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
   d613a:	b410      	push	{r4}
  if (value == LOW)
   d613c:	b91a      	cbnz	r2, d6146 <_ZN20Adafruit_MotorShield6setPinEhb+0xc>
  else
    _pwm.setPWM(pin, 4096, 0);
}
   d613e:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6142:	f7ff bfca 	b.w	d60da <_ZN20Adafruit_MotorShield6setPinEhb.part.0>
   d6146:	f85d 4b04 	ldr.w	r4, [sp], #4
    _pwm.setPWM(pin, 4096, 0);
   d614a:	2300      	movs	r3, #0
   d614c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d6150:	306c      	adds	r0, #108	; 0x6c
   d6152:	f000 b894 	b.w	d627e <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d6156 <_ZN20Adafruit_MotorShield8getMotorEh>:

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
  if (num > 4) return NULL;
   d6156:	2904      	cmp	r1, #4
Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
   d6158:	b530      	push	{r4, r5, lr}
  if (num > 4) return NULL;
   d615a:	d82d      	bhi.n	d61b8 <_ZN20Adafruit_MotorShield8getMotorEh+0x62>

  num--;
   d615c:	3901      	subs	r1, #1
   d615e:	b2c9      	uxtb	r1, r1

  if (dcmotors[num].motornum == 0) {
   d6160:	230c      	movs	r3, #12
   d6162:	fb03 0201 	mla	r2, r3, r1, r0
   d6166:	7b14      	ldrb	r4, [r2, #12]
   d6168:	b9b4      	cbnz	r4, d6198 <_ZN20Adafruit_MotorShield8getMotorEh+0x42>
    // not init'd yet!
    dcmotors[num].motornum = num;
   d616a:	7311      	strb	r1, [r2, #12]
    dcmotors[num].MC = this;
   d616c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   d6170:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   d6174:	6090      	str	r0, [r2, #8]
    uint8_t pwm=8, in1=10, in2=9;
    if (num == 0) {
   d6176:	b1a1      	cbz	r1, d61a2 <_ZN20Adafruit_MotorShield8getMotorEh+0x4c>
      pwm = 8; in2 = 9; in1 = 10;
    } else if (num == 1) {
   d6178:	2901      	cmp	r1, #1
   d617a:	d016      	beq.n	d61aa <_ZN20Adafruit_MotorShield8getMotorEh+0x54>
      pwm = 13; in2 = 12; in1 = 11;
    } else if (num == 2) {
   d617c:	2902      	cmp	r1, #2
   d617e:	d017      	beq.n	d61b0 <_ZN20Adafruit_MotorShield8getMotorEh+0x5a>
      pwm = 2; in2 = 3; in1 = 4;
    } else if (num == 3) {
   d6180:	2903      	cmp	r1, #3
    uint8_t pwm=8, in1=10, in2=9;
   d6182:	bf0b      	itete	eq
   d6184:	2306      	moveq	r3, #6
   d6186:	2309      	movne	r3, #9
   d6188:	2405      	moveq	r4, #5
   d618a:	240a      	movne	r4, #10
   d618c:	bf0c      	ite	eq
   d618e:	2507      	moveq	r5, #7
   d6190:	2508      	movne	r5, #8
      pwm = 7; in2 = 6; in1 = 5;
    }
    dcmotors[num].PWMpin = pwm;
   d6192:	7115      	strb	r5, [r2, #4]
    dcmotors[num].IN1pin = in1;
   d6194:	7154      	strb	r4, [r2, #5]
    dcmotors[num].IN2pin = in2;
   d6196:	7193      	strb	r3, [r2, #6]
  }
  return &dcmotors[num];
   d6198:	230c      	movs	r3, #12
   d619a:	fb03 0001 	mla	r0, r3, r1, r0
   d619e:	3004      	adds	r0, #4
}
   d61a0:	bd30      	pop	{r4, r5, pc}
    uint8_t pwm=8, in1=10, in2=9;
   d61a2:	2309      	movs	r3, #9
   d61a4:	240a      	movs	r4, #10
   d61a6:	2508      	movs	r5, #8
   d61a8:	e7f3      	b.n	d6192 <_ZN20Adafruit_MotorShield8getMotorEh+0x3c>
      pwm = 13; in2 = 12; in1 = 11;
   d61aa:	240b      	movs	r4, #11
   d61ac:	250d      	movs	r5, #13
   d61ae:	e7f0      	b.n	d6192 <_ZN20Adafruit_MotorShield8getMotorEh+0x3c>
      pwm = 2; in2 = 3; in1 = 4;
   d61b0:	460d      	mov	r5, r1
   d61b2:	2303      	movs	r3, #3
   d61b4:	2404      	movs	r4, #4
   d61b6:	e7ec      	b.n	d6192 <_ZN20Adafruit_MotorShield8getMotorEh+0x3c>
  if (num > 4) return NULL;
   d61b8:	2000      	movs	r0, #0
   d61ba:	e7f1      	b.n	d61a0 <_ZN20Adafruit_MotorShield8getMotorEh+0x4a>

000d61bc <_ZN16Adafruit_DCMotorC1Ev>:
/******************************************
               MOTORS
******************************************/

Adafruit_DCMotor::Adafruit_DCMotor(void) {
  MC = NULL;
   d61bc:	2200      	movs	r2, #0
   d61be:	6042      	str	r2, [r0, #4]
  motornum = 0;
   d61c0:	7202      	strb	r2, [r0, #8]
  PWMpin = IN1pin = IN2pin = 0;
   d61c2:	8002      	strh	r2, [r0, #0]
   d61c4:	7082      	strb	r2, [r0, #2]
}
   d61c6:	4770      	bx	lr

000d61c8 <_ZN20Adafruit_MotorShieldC1Eh>:
Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d61c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d61ca:	1d03      	adds	r3, r0, #4
   d61cc:	460d      	mov	r5, r1
   d61ce:	4604      	mov	r4, r0
   d61d0:	f100 0134 	add.w	r1, r0, #52	; 0x34
   d61d4:	4618      	mov	r0, r3
   d61d6:	f7ff fff1 	bl	d61bc <_ZN16Adafruit_DCMotorC1Ev>
   d61da:	330c      	adds	r3, #12
   d61dc:	428b      	cmp	r3, r1
   d61de:	d1f9      	bne.n	d61d4 <_ZN20Adafruit_MotorShieldC1Eh+0xc>
/******************************************
               STEPPERS
******************************************/

Adafruit_StepperMotor::Adafruit_StepperMotor(void) {
  revsteps = steppernum = currentstep = 0;
   d61e0:	2300      	movs	r3, #0
   d61e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   d61e6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   d61ea:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   d61ee:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   d61f2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   d61f6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d61fa:	2140      	movs	r1, #64	; 0x40
   d61fc:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d6200:	f000 f83b 	bl	d627a <_ZN23Adafruit_PWMServoDriverC1Eh>
  _addr = addr;
   d6204:	7025      	strb	r5, [r4, #0]
  _pwm = Adafruit_PWMServoDriver(_addr);
   d6206:	4629      	mov	r1, r5
   d6208:	a801      	add	r0, sp, #4
   d620a:	f000 f836 	bl	d627a <_ZN23Adafruit_PWMServoDriverC1Eh>
   d620e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6212:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   d6216:	4620      	mov	r0, r4
   d6218:	b003      	add	sp, #12
   d621a:	bd30      	pop	{r4, r5, pc}

000d621c <_ZN16Adafruit_DCMotor3runEh>:
  switch (cmd) {
   d621c:	2902      	cmp	r1, #2
void Adafruit_DCMotor::run(uint8_t cmd) {
   d621e:	b538      	push	{r3, r4, r5, lr}
   d6220:	4604      	mov	r4, r0
   d6222:	460d      	mov	r5, r1
  switch (cmd) {
   d6224:	d00e      	beq.n	d6244 <_ZN16Adafruit_DCMotor3runEh+0x28>
   d6226:	2904      	cmp	r1, #4
   d6228:	d013      	beq.n	d6252 <_ZN16Adafruit_DCMotor3runEh+0x36>
   d622a:	2901      	cmp	r1, #1
   d622c:	d11b      	bne.n	d6266 <_ZN16Adafruit_DCMotor3runEh+0x4a>
  if (value == LOW)
   d622e:	7881      	ldrb	r1, [r0, #2]
   d6230:	6840      	ldr	r0, [r0, #4]
   d6232:	f7ff ff52 	bl	d60da <_ZN20Adafruit_MotorShield6setPinEhb.part.0>
    MC->setPin(IN1pin, HIGH);
   d6236:	7861      	ldrb	r1, [r4, #1]
   d6238:	462a      	mov	r2, r5
    MC->setPin(IN2pin, HIGH);
   d623a:	6860      	ldr	r0, [r4, #4]
}
   d623c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MC->setPin(IN2pin, HIGH);
   d6240:	f7ff bf7b 	b.w	d613a <_ZN20Adafruit_MotorShield6setPinEhb>
  if (value == LOW)
   d6244:	7841      	ldrb	r1, [r0, #1]
   d6246:	6840      	ldr	r0, [r0, #4]
   d6248:	f7ff ff47 	bl	d60da <_ZN20Adafruit_MotorShield6setPinEhb.part.0>
    MC->setPin(IN2pin, HIGH);
   d624c:	78a1      	ldrb	r1, [r4, #2]
   d624e:	2201      	movs	r2, #1
   d6250:	e7f3      	b.n	d623a <_ZN16Adafruit_DCMotor3runEh+0x1e>
  if (value == LOW)
   d6252:	7841      	ldrb	r1, [r0, #1]
   d6254:	6840      	ldr	r0, [r0, #4]
   d6256:	f7ff ff40 	bl	d60da <_ZN20Adafruit_MotorShield6setPinEhb.part.0>
   d625a:	78a1      	ldrb	r1, [r4, #2]
   d625c:	6860      	ldr	r0, [r4, #4]
}
   d625e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6262:	f7ff bf3a 	b.w	d60da <_ZN20Adafruit_MotorShield6setPinEhb.part.0>
   d6266:	bd38      	pop	{r3, r4, r5, pc}

000d6268 <_ZN16Adafruit_DCMotor8setSpeedEh>:
  MC->setPWM(PWMpin, speed*16);
   d6268:	010a      	lsls	r2, r1, #4
   d626a:	7801      	ldrb	r1, [r0, #0]
   d626c:	6840      	ldr	r0, [r0, #4]
   d626e:	f7ff bf58 	b.w	d6122 <_ZN20Adafruit_MotorShield6setPWMEht>

000d6272 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d6272:	6803      	ldr	r3, [r0, #0]
   d6274:	b2c9      	uxtb	r1, r1
   d6276:	689b      	ldr	r3, [r3, #8]
   d6278:	4718      	bx	r3

000d627a <_ZN23Adafruit_PWMServoDriverC1Eh>:
#include "Adafruit_PWMServoDriver.h"
#include "application.h"
#include "math.h"

Adafruit_PWMServoDriver::Adafruit_PWMServoDriver(uint8_t addr) {
  _i2caddr = addr;
   d627a:	7001      	strb	r1, [r0, #0]
}
   d627c:	4770      	bx	lr

000d627e <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>:
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}

void Adafruit_PWMServoDriver::setPWM(uint8_t num, uint16_t on, uint16_t off) {
   d627e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6280:	4607      	mov	r7, r0
   d6282:	4615      	mov	r5, r2
   d6284:	461c      	mov	r4, r3
   d6286:	460e      	mov	r6, r1
  //Serial.print("Setting PWM "); Serial.print(num); Serial.print(": "); Serial.print(on); Serial.print("->"); Serial.println(off);

  Wire.beginTransmission(_i2caddr);
   d6288:	f001 fda8 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d628c:	7839      	ldrb	r1, [r7, #0]
   d628e:	f000 ffdf 	bl	d7250 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(LED0_ON_L+4*num);
   d6292:	f001 fda3 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6296:	2106      	movs	r1, #6
   d6298:	eb01 0186 	add.w	r1, r1, r6, lsl #2
   d629c:	f7ff ffe9 	bl	d6272 <_ZN7TwoWire5writeEi>
  Wire.write(on);
   d62a0:	f001 fd9c 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62a4:	4629      	mov	r1, r5
   d62a6:	f7ff ffe4 	bl	d6272 <_ZN7TwoWire5writeEi>
  Wire.write(on>>8);
   d62aa:	f001 fd97 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62ae:	0a29      	lsrs	r1, r5, #8
   d62b0:	f7ff ffdf 	bl	d6272 <_ZN7TwoWire5writeEi>
  Wire.write(off);
   d62b4:	f001 fd92 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62b8:	4621      	mov	r1, r4
   d62ba:	f7ff ffda 	bl	d6272 <_ZN7TwoWire5writeEi>
  Wire.write(off>>8);
   d62be:	f001 fd8d 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62c2:	0a21      	lsrs	r1, r4, #8
   d62c4:	f7ff ffd5 	bl	d6272 <_ZN7TwoWire5writeEi>

  Wire.endTransmission();
   d62c8:	f001 fd88 	bl	d7ddc <_Z19__fetch_global_Wirev>
}
   d62cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.endTransmission();
   d62d0:	f000 bfc6 	b.w	d7260 <_ZN7TwoWire15endTransmissionEv>

000d62d4 <_ZN23Adafruit_PWMServoDriver5read8Eh>:

uint8_t Adafruit_PWMServoDriver::read8(uint8_t addr) {
   d62d4:	b538      	push	{r3, r4, r5, lr}
   d62d6:	4604      	mov	r4, r0
   d62d8:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d62da:	f001 fd7f 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62de:	7821      	ldrb	r1, [r4, #0]
   d62e0:	f000 ffb6 	bl	d7250 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d62e4:	f001 fd7a 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62e8:	6803      	ldr	r3, [r0, #0]
   d62ea:	4629      	mov	r1, r5
   d62ec:	689b      	ldr	r3, [r3, #8]
   d62ee:	4798      	blx	r3

  Wire.endTransmission();
   d62f0:	f001 fd74 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62f4:	f000 ffb4 	bl	d7260 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
   d62f8:	f001 fd70 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d62fc:	7821      	ldrb	r1, [r4, #0]
   d62fe:	2201      	movs	r2, #1
   d6300:	f000 ffa3 	bl	d724a <_ZN7TwoWire11requestFromEhj>

  return Wire.read();
   d6304:	f001 fd6a 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6308:	6803      	ldr	r3, [r0, #0]
   d630a:	695b      	ldr	r3, [r3, #20]
   d630c:	4798      	blx	r3
}
   d630e:	b2c0      	uxtb	r0, r0
   d6310:	bd38      	pop	{r3, r4, r5, pc}

000d6312 <_ZN23Adafruit_PWMServoDriver6write8Ehh>:

void Adafruit_PWMServoDriver::write8(uint8_t addr, uint8_t d) {
   d6312:	b570      	push	{r4, r5, r6, lr}
   d6314:	4606      	mov	r6, r0
   d6316:	4614      	mov	r4, r2
   d6318:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d631a:	f001 fd5f 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d631e:	7831      	ldrb	r1, [r6, #0]
   d6320:	f000 ff96 	bl	d7250 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d6324:	f001 fd5a 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6328:	6803      	ldr	r3, [r0, #0]
   d632a:	4629      	mov	r1, r5
   d632c:	689b      	ldr	r3, [r3, #8]
   d632e:	4798      	blx	r3
  Wire.write(d);
   d6330:	f001 fd54 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6334:	6803      	ldr	r3, [r0, #0]
   d6336:	4621      	mov	r1, r4
   d6338:	689b      	ldr	r3, [r3, #8]
   d633a:	4798      	blx	r3

  Wire.endTransmission();
   d633c:	f001 fd4e 	bl	d7ddc <_Z19__fetch_global_Wirev>
}
   d6340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d6344:	f000 bf8c 	b.w	d7260 <_ZN7TwoWire15endTransmissionEv>

000d6348 <_ZN23Adafruit_PWMServoDriver5resetEv>:
 write8(PCA9685_MODE1, 0x0);
   d6348:	2200      	movs	r2, #0
   d634a:	4611      	mov	r1, r2
   d634c:	f7ff bfe1 	b.w	d6312 <_ZN23Adafruit_PWMServoDriver6write8Ehh>

000d6350 <_ZN23Adafruit_PWMServoDriver5beginEv>:
void Adafruit_PWMServoDriver::begin(void) {
   d6350:	b510      	push	{r4, lr}
   d6352:	4604      	mov	r4, r0
 Wire.begin();
   d6354:	f001 fd42 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6358:	f000 ff42 	bl	d71e0 <_ZN7TwoWire5beginEv>
 reset();
   d635c:	4620      	mov	r0, r4
}
   d635e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 reset();
   d6362:	f7ff bff1 	b.w	d6348 <_ZN23Adafruit_PWMServoDriver5resetEv>
	...

000d6368 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>:
void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d6368:	b570      	push	{r4, r5, r6, lr}
  prescaleval /= freq;
   d636a:	eddf 7a2e 	vldr	s15, [pc, #184]	; d6424 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xbc>
void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d636e:	ed2d 8b02 	vpush	{d8}
  prescaleval /= freq;
   d6372:	ee87 8a80 	vdiv.f32	s16, s15, s0
void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d6376:	4604      	mov	r4, r0
  prescaleval -= 1;
   d6378:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d637c:	ee38 8a40 	vsub.f32	s16, s16, s0
  Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
   d6380:	f001 f85c 	bl	d743c <_Z16_fetch_usbserialv>
   d6384:	4928      	ldr	r1, [pc, #160]	; (d6428 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc0>)
   d6386:	f001 faa8 	bl	d78da <_ZN5Print5printEPKc>
   d638a:	f001 f857 	bl	d743c <_Z16_fetch_usbserialv>
   d638e:	eeb0 0a48 	vmov.f32	s0, s16
   d6392:	2102      	movs	r1, #2
   d6394:	f001 fba5 	bl	d7ae2 <_ZN5Print7printlnEfi>
  uint8_t prescale = floor(prescaleval + 0.5);
   d6398:	ee18 0a10 	vmov	r0, s16
   d639c:	f001 ffc4 	bl	d8328 <__aeabi_f2d>
   d63a0:	4b22      	ldr	r3, [pc, #136]	; (d642c <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc4>)
   d63a2:	2200      	movs	r2, #0
   d63a4:	f001 fe62 	bl	d806c <__adddf3>
   d63a8:	ec41 0b10 	vmov	d0, r0, r1
   d63ac:	f001 fdd4 	bl	d7f58 <floor>
   d63b0:	ec51 0b10 	vmov	r0, r1, d0
   d63b4:	f002 fae8 	bl	d8988 <__aeabi_d2uiz>
   d63b8:	b2c6      	uxtb	r6, r0
  Serial.print("Final pre-scale: "); Serial.println(prescale);
   d63ba:	f001 f83f 	bl	d743c <_Z16_fetch_usbserialv>
   d63be:	491c      	ldr	r1, [pc, #112]	; (d6430 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc8>)
   d63c0:	f001 fa8b 	bl	d78da <_ZN5Print5printEPKc>
   d63c4:	f001 f83a 	bl	d743c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d63c8:	220a      	movs	r2, #10
   d63ca:	4631      	mov	r1, r6
   d63cc:	4605      	mov	r5, r0
   d63ce:	f001 fa97 	bl	d7900 <_ZN5Print11printNumberEmh>
        n += println();
   d63d2:	4628      	mov	r0, r5
   d63d4:	f001 fa88 	bl	d78e8 <_ZN5Print7printlnEv>
  uint8_t oldmode = read8(PCA9685_MODE1);
   d63d8:	2100      	movs	r1, #0
   d63da:	4620      	mov	r0, r4
   d63dc:	f7ff ff7a 	bl	d62d4 <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
   d63e0:	f000 026f 	and.w	r2, r0, #111	; 0x6f
  uint8_t oldmode = read8(PCA9685_MODE1);
   d63e4:	4605      	mov	r5, r0
  write8(PCA9685_MODE1, newmode); // go to sleep
   d63e6:	f042 0210 	orr.w	r2, r2, #16
   d63ea:	4620      	mov	r0, r4
   d63ec:	2100      	movs	r1, #0
   d63ee:	f7ff ff90 	bl	d6312 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
   d63f2:	4632      	mov	r2, r6
   d63f4:	4620      	mov	r0, r4
   d63f6:	21fe      	movs	r1, #254	; 0xfe
   d63f8:	f7ff ff8b 	bl	d6312 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_MODE1, oldmode);
   d63fc:	462a      	mov	r2, r5
   d63fe:	2100      	movs	r1, #0
   d6400:	4620      	mov	r0, r4
   d6402:	f7ff ff86 	bl	d6312 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  delay(5);
   d6406:	2005      	movs	r0, #5
   d6408:	f001 fa3c 	bl	d7884 <delay>
}
   d640c:	ecbd 8b02 	vpop	{d8}
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d6410:	f065 025e 	orn	r2, r5, #94	; 0x5e
   d6414:	4620      	mov	r0, r4
   d6416:	b2d2      	uxtb	r2, r2
}
   d6418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d641c:	2100      	movs	r1, #0
   d641e:	f7ff bf78 	b.w	d6312 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
   d6422:	bf00      	nop
   d6424:	45bebc20 	.word	0x45bebc20
   d6428:	000d933f 	.word	0x000d933f
   d642c:	3fe00000 	.word	0x3fe00000
   d6430:	000d9355 	.word	0x000d9355

000d6434 <_ZN10FlySkyIBus5beginER6Stream>:
  serial.begin(115200);
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
   d6434:	b510      	push	{r4, lr}
  this->stream = &stream;
  this->state = DISCARD;
   d6436:	2304      	movs	r3, #4
   d6438:	7003      	strb	r3, [r0, #0]
  this->stream = &stream;
   d643a:	6041      	str	r1, [r0, #4]
{
   d643c:	4604      	mov	r4, r0
   d643e:	f000 fc33 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
  this->last = millis();
  this->last_update = 0;
   d6442:	2300      	movs	r3, #0
  this->last = millis();
   d6444:	60a0      	str	r0, [r4, #8]
  this->last_update = 0;
   d6446:	60e3      	str	r3, [r4, #12]
  this->ptr = 0;
   d6448:	8623      	strh	r3, [r4, #48]	; 0x30
  this->len = 0;
  this->chksum = 0;
   d644a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  this->lchksum = 0;
   d644e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
   d6452:	bd10      	pop	{r4, pc}

000d6454 <_ZN10FlySkyIBus5beginER11USARTSerial>:
{
   d6454:	b538      	push	{r3, r4, r5, lr}
   d6456:	460c      	mov	r4, r1
   d6458:	4605      	mov	r5, r0
  serial.begin(115200);
   d645a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d645e:	4620      	mov	r0, r4
   d6460:	f000 ff60 	bl	d7324 <_ZN11USARTSerial5beginEm>
  begin((Stream&)serial);
   d6464:	4621      	mov	r1, r4
   d6466:	4628      	mov	r0, r5
}
   d6468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  begin((Stream&)serial);
   d646c:	f7ff bfe2 	b.w	d6434 <_ZN10FlySkyIBus5beginER6Stream>

000d6470 <_ZN10FlySkyIBus4loopEv>:

void FlySkyIBus::loop(void)
{
   d6470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6472:	4604      	mov	r4, r0
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
    {
      state = GET_LENGTH;
   d6474:	2500      	movs	r5, #0
   d6476:	f100 0646 	add.w	r6, r0, #70	; 0x46
  while (stream->available() > 0)
   d647a:	6860      	ldr	r0, [r4, #4]
   d647c:	6803      	ldr	r3, [r0, #0]
   d647e:	691b      	ldr	r3, [r3, #16]
   d6480:	4798      	blx	r3
   d6482:	2800      	cmp	r0, #0
   d6484:	dd69      	ble.n	d655a <_ZN10FlySkyIBus4loopEv+0xea>
   d6486:	f000 fc0f 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
    if (now - last >= PROTOCOL_TIMEGAP)
   d648a:	68a3      	ldr	r3, [r4, #8]
    }
    last = now;
   d648c:	60a0      	str	r0, [r4, #8]
    if (now - last >= PROTOCOL_TIMEGAP)
   d648e:	1ac3      	subs	r3, r0, r3
   d6490:	2b02      	cmp	r3, #2

    uint8_t v = stream->read();
   d6492:	6860      	ldr	r0, [r4, #4]
      state = GET_LENGTH;
   d6494:	bf88      	it	hi
   d6496:	7025      	strbhi	r5, [r4, #0]
    uint8_t v = stream->read();
   d6498:	6803      	ldr	r3, [r0, #0]
   d649a:	695b      	ldr	r3, [r3, #20]
   d649c:	4798      	blx	r3
   d649e:	7822      	ldrb	r2, [r4, #0]
   d64a0:	b2c3      	uxtb	r3, r0
    switch (state)
   d64a2:	2a03      	cmp	r2, #3
   d64a4:	d8e9      	bhi.n	d647a <_ZN10FlySkyIBus4loopEv+0xa>
   d64a6:	e8df f002 	tbb	[pc, r2]
   d64aa:	0f02      	.short	0x0f02
   d64ac:	2622      	.short	0x2622
    {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH)
   d64ae:	2b20      	cmp	r3, #32
   d64b0:	d84e      	bhi.n	d6550 <_ZN10FlySkyIBus4loopEv+0xe0>
        {
          ptr = 0;
          len = v - PROTOCOL_OVERHEAD;
   d64b2:	1eda      	subs	r2, r3, #3
          chksum = 0xFFFF - v;
   d64b4:	43db      	mvns	r3, r3
   d64b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
          ptr = 0;
   d64ba:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
          len = v - PROTOCOL_OVERHEAD;
   d64be:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
          state = GET_DATA;
   d64c2:	2301      	movs	r3, #1
        }
        break;

      case GET_CHKSUML:
        lchksum = v;
        state = GET_CHKSUMH;
   d64c4:	7023      	strb	r3, [r4, #0]
        break;
   d64c6:	e7d8      	b.n	d647a <_ZN10FlySkyIBus4loopEv+0xa>
        buffer[ptr++] = v;
   d64c8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   d64cc:	1c4a      	adds	r2, r1, #1
   d64ce:	4421      	add	r1, r4
   d64d0:	b2d2      	uxtb	r2, r2
   d64d2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
   d64d6:	740b      	strb	r3, [r1, #16]
        chksum -= v;
   d64d8:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   d64dc:	1acb      	subs	r3, r1, r3
   d64de:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (ptr == len)
   d64e2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   d64e6:	4293      	cmp	r3, r2
   d64e8:	d1c7      	bne.n	d647a <_ZN10FlySkyIBus4loopEv+0xa>
          state = GET_CHKSUML;
   d64ea:	2302      	movs	r3, #2
   d64ec:	e7ea      	b.n	d64c4 <_ZN10FlySkyIBus4loopEv+0x54>
        lchksum = v;
   d64ee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        state = GET_CHKSUMH;
   d64f2:	2303      	movs	r3, #3
   d64f4:	e7e6      	b.n	d64c4 <_ZN10FlySkyIBus4loopEv+0x54>

      case GET_CHKSUMH:
        // Validate checksum
        if (chksum == (v << 8) + lchksum)
   d64f6:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   d64fa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   d64fe:	0200      	lsls	r0, r0, #8
   d6500:	b280      	uxth	r0, r0
   d6502:	4410      	add	r0, r2
   d6504:	4283      	cmp	r3, r0
   d6506:	d123      	bne.n	d6550 <_ZN10FlySkyIBus4loopEv+0xe0>
        {
          // Execute command - we only know command 0x40
          //Serial.printlnf("FlySky command=%d", buffer[0] );

          switch (buffer[0])
   d6508:	7c23      	ldrb	r3, [r4, #16]
   d650a:	2b40      	cmp	r3, #64	; 0x40
   d650c:	d120      	bne.n	d6550 <_ZN10FlySkyIBus4loopEv+0xe0>
   d650e:	f104 0332 	add.w	r3, r4, #50	; 0x32
   d6512:	4621      	mov	r1, r4
   d6514:	461a      	mov	r2, r3
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i=0;i<PROTOCOL_CHANNELS;i++)
              {
                previous_channel[i]=channel[i];
   d6516:	f832 0b02 	ldrh.w	r0, [r2], #2
   d651a:	8250      	strh	r0, [r2, #18]
              for (uint8_t i=0;i<PROTOCOL_CHANNELS;i++)
   d651c:	42b2      	cmp	r2, r6
   d651e:	d1fa      	bne.n	d6516 <_ZN10FlySkyIBus4loopEv+0xa6>
   d6520:	2201      	movs	r2, #1
              }

              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d6522:	f891 c012 	ldrb.w	ip, [r1, #18]
   d6526:	7c4f      	ldrb	r7, [r1, #17]
   d6528:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   d652c:	4420      	add	r0, r4
   d652e:	3202      	adds	r2, #2
   d6530:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6534:	2a15      	cmp	r2, #21
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d6536:	8647      	strh	r7, [r0, #50]	; 0x32
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6538:	f101 0102 	add.w	r1, r1, #2
   d653c:	d1f1      	bne.n	d6522 <_ZN10FlySkyIBus4loopEv+0xb2>
              }

              for (uint8_t i=0;i<PROTOCOL_CHANNELS;i++)
              {
                if ( previous_channel[i]!=channel[i] ) 
   d653e:	461a      	mov	r2, r3
   d6540:	8a99      	ldrh	r1, [r3, #20]
   d6542:	8812      	ldrh	r2, [r2, #0]
   d6544:	4291      	cmp	r1, r2
   d6546:	f103 0302 	add.w	r3, r3, #2
   d654a:	d003      	beq.n	d6554 <_ZN10FlySkyIBus4loopEv+0xe4>
                {
                  last_update=last;
   d654c:	68a3      	ldr	r3, [r4, #8]
   d654e:	60e3      	str	r3, [r4, #12]
          state = DISCARD;
   d6550:	2304      	movs	r3, #4
   d6552:	e7b7      	b.n	d64c4 <_ZN10FlySkyIBus4loopEv+0x54>
              for (uint8_t i=0;i<PROTOCOL_CHANNELS;i++)
   d6554:	42b3      	cmp	r3, r6
   d6556:	d1f2      	bne.n	d653e <_ZN10FlySkyIBus4loopEv+0xce>
   d6558:	e7fa      	b.n	d6550 <_ZN10FlySkyIBus4loopEv+0xe0>
      case DISCARD:
      default:
        break;
    }
  }
}
   d655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d655c <_ZN10FlySkyIBus11readChannelEh>:

uint16_t FlySkyIBus::readChannel(uint8_t channelNr)
{
  if (channelNr < PROTOCOL_CHANNELS)
   d655c:	2909      	cmp	r1, #9
  {
    return channel[channelNr];
   d655e:	bf9a      	itte	ls
   d6560:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
   d6564:	8e48      	ldrhls	r0, [r1, #50]	; 0x32
  }
  else
  {
    return 0;
   d6566:	2000      	movhi	r0, #0
  }
}
   d6568:	4770      	bx	lr

000d656a <_ZN10FlySkyIBus10lastUpdateEv>:

uint32_t FlySkyIBus::lastUpdate(void)
{
  return last_update;

   d656a:	68c0      	ldr	r0, [r0, #12]
   d656c:	4770      	bx	lr

000d656e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  virtual void enableAutoRange(bool enabled) {};
   d656e:	4770      	bx	lr

000d6570 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
   d6570:	460b      	mov	r3, r1
   d6572:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d6574:	2228      	movs	r2, #40	; 0x28
{
   d6576:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d6578:	2100      	movs	r1, #0
   d657a:	4618      	mov	r0, r3
   d657c:	f002 fa90 	bl	d8aa0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d6580:	4909      	ldr	r1, [pc, #36]	; (d65a8 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d6582:	220b      	movs	r2, #11
   d6584:	f002 fac0 	bl	d8b08 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d6588:	2200      	movs	r2, #0
  sensor->version     = 1;
   d658a:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d658c:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d658e:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id   = _sensorID;
   d6590:	68a1      	ldr	r1, [r4, #8]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay   = 0;
   d6592:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value   = 0.0F;
   d6594:	2200      	movs	r2, #0
  sensor->sensor_id   = _sensorID;
   d6596:	6101      	str	r1, [r0, #16]
  sensor->max_value   = 0.0F;
   d6598:	6182      	str	r2, [r0, #24]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d659a:	2103      	movs	r1, #3
  sensor->min_value   = 0.0F;
   d659c:	61c2      	str	r2, [r0, #28]
  sensor->resolution  = 0.01F;
   d659e:	4a03      	ldr	r2, [pc, #12]	; (d65ac <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d65a0:	6141      	str	r1, [r0, #20]
  sensor->resolution  = 0.01F;
   d65a2:	6202      	str	r2, [r0, #32]
}
   d65a4:	bd10      	pop	{r4, pc}
   d65a6:	bf00      	nop
   d65a8:	000d9367 	.word	0x000d9367
   d65ac:	3c23d70a 	.word	0x3c23d70a

000d65b0 <_ZN15Adafruit_BNO055C1Elh>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
   d65b0:	b510      	push	{r4, lr}
   d65b2:	4c02      	ldr	r4, [pc, #8]	; (d65bc <_ZN15Adafruit_BNO055C1Elh+0xc>)
   d65b4:	6004      	str	r4, [r0, #0]
  _sensorID = sensorID;
   d65b6:	6081      	str	r1, [r0, #8]
  _address = address;
   d65b8:	7142      	strb	r2, [r0, #5]
}
   d65ba:	bd10      	pop	{r4, pc}
   d65bc:	000d9378 	.word	0x000d9378

000d65c0 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
/*!
    @brief  Writes an 8 bit value over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value)
{
   d65c0:	b570      	push	{r4, r5, r6, lr}
   d65c2:	4606      	mov	r6, r0
   d65c4:	4614      	mov	r4, r2
   d65c6:	460d      	mov	r5, r1
  Wire.beginTransmission(_address);
   d65c8:	f001 fc08 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d65cc:	7971      	ldrb	r1, [r6, #5]
   d65ce:	f000 fe3f 	bl	d7250 <_ZN7TwoWire17beginTransmissionEh>

    Wire.write((uint8_t)reg);
   d65d2:	f001 fc03 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d65d6:	6803      	ldr	r3, [r0, #0]
   d65d8:	4629      	mov	r1, r5
   d65da:	689b      	ldr	r3, [r3, #8]
   d65dc:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d65de:	f001 fbfd 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d65e2:	6803      	ldr	r3, [r0, #0]
   d65e4:	4621      	mov	r1, r4
   d65e6:	689b      	ldr	r3, [r3, #8]
   d65e8:	4798      	blx	r3

  Wire.endTransmission();
   d65ea:	f001 fbf7 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d65ee:	f000 fe37 	bl	d7260 <_ZN7TwoWire15endTransmissionEv>

  /* ToDo: Check for error! */
  return true;
}
   d65f2:	2001      	movs	r0, #1
   d65f4:	bd70      	pop	{r4, r5, r6, pc}

000d65f6 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
{
   d65f6:	b508      	push	{r3, lr}
   d65f8:	460a      	mov	r2, r1
  _mode = mode;
   d65fa:	7301      	strb	r1, [r0, #12]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d65fc:	213d      	movs	r1, #61	; 0x3d
   d65fe:	f7ff ffdf 	bl	d65c0 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
}
   d6602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(30);
   d6606:	201e      	movs	r0, #30
   d6608:	f001 b93c 	b.w	d7884 <delay>

000d660c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg )
{
   d660c:	b538      	push	{r3, r4, r5, lr}
   d660e:	4604      	mov	r4, r0
   d6610:	460d      	mov	r5, r1
  byte value = 0;

  Wire.beginTransmission(_address);
   d6612:	f001 fbe3 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6616:	7961      	ldrb	r1, [r4, #5]
   d6618:	f000 fe1a 	bl	d7250 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d661c:	f001 fbde 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6620:	6803      	ldr	r3, [r0, #0]
   d6622:	4629      	mov	r1, r5
   d6624:	689b      	ldr	r3, [r3, #8]
   d6626:	4798      	blx	r3
  Wire.endTransmission();
   d6628:	f001 fbd8 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d662c:	f000 fe18 	bl	d7260 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)1);
   d6630:	f001 fbd4 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6634:	7961      	ldrb	r1, [r4, #5]
   d6636:	2201      	movs	r2, #1
   d6638:	f000 fe07 	bl	d724a <_ZN7TwoWire11requestFromEhj>
  value = Wire.read();
   d663c:	f001 fbce 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6640:	6803      	ldr	r3, [r0, #0]
   d6642:	695b      	ldr	r3, [r3, #20]
   d6644:	4798      	blx	r3

  return value;
}
   d6646:	b2c0      	uxtb	r0, r0
   d6648:	bd38      	pop	{r3, r4, r5, pc}

000d664a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
{
   d664a:	b538      	push	{r3, r4, r5, lr}
   d664c:	460d      	mov	r5, r1
   d664e:	4604      	mov	r4, r0
  Wire.begin();
   d6650:	f001 fbc4 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6654:	f000 fdc4 	bl	d71e0 <_ZN7TwoWire5beginEv>
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6658:	2100      	movs	r1, #0
   d665a:	4620      	mov	r0, r4
   d665c:	f7ff ffd6 	bl	d660c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if(id != BNO055_ID)
   d6660:	28a0      	cmp	r0, #160	; 0xa0
   d6662:	d112      	bne.n	d668a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x40>
  setMode(OPERATION_MODE_CONFIG);
   d6664:	2100      	movs	r1, #0
   d6666:	4620      	mov	r0, r4
   d6668:	f7ff ffc5 	bl	d65f6 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d666c:	2220      	movs	r2, #32
   d666e:	213f      	movs	r1, #63	; 0x3f
   d6670:	4620      	mov	r0, r4
   d6672:	f7ff ffa5 	bl	d65c0 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d6676:	2100      	movs	r1, #0
   d6678:	4620      	mov	r0, r4
   d667a:	f7ff ffc7 	bl	d660c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d667e:	28a0      	cmp	r0, #160	; 0xa0
   d6680:	d00f      	beq.n	d66a2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
    delay(10);
   d6682:	200a      	movs	r0, #10
   d6684:	f001 f8fe 	bl	d7884 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d6688:	e7f5      	b.n	d6676 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
    delay(1000); // hold on for boot
   d668a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d668e:	f001 f8f9 	bl	d7884 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d6692:	2100      	movs	r1, #0
   d6694:	4620      	mov	r0, r4
   d6696:	f7ff ffb9 	bl	d660c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if(id != BNO055_ID) {
   d669a:	28a0      	cmp	r0, #160	; 0xa0
   d669c:	d0e2      	beq.n	d6664 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x1a>
      return false;  // still not? ok bail
   d669e:	2000      	movs	r0, #0
   d66a0:	e01f      	b.n	d66e2 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x98>
  delay(50);
   d66a2:	2032      	movs	r0, #50	; 0x32
   d66a4:	f001 f8ee 	bl	d7884 <delay>
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d66a8:	2200      	movs	r2, #0
   d66aa:	213e      	movs	r1, #62	; 0x3e
   d66ac:	4620      	mov	r0, r4
   d66ae:	f7ff ff87 	bl	d65c0 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d66b2:	200a      	movs	r0, #10
   d66b4:	f001 f8e6 	bl	d7884 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d66b8:	2200      	movs	r2, #0
   d66ba:	2107      	movs	r1, #7
   d66bc:	4620      	mov	r0, r4
   d66be:	f7ff ff7f 	bl	d65c0 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d66c2:	2200      	movs	r2, #0
   d66c4:	213f      	movs	r1, #63	; 0x3f
   d66c6:	4620      	mov	r0, r4
   d66c8:	f7ff ff7a 	bl	d65c0 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d66cc:	200a      	movs	r0, #10
   d66ce:	f001 f8d9 	bl	d7884 <delay>
  setMode(mode);
   d66d2:	4629      	mov	r1, r5
   d66d4:	4620      	mov	r0, r4
   d66d6:	f7ff ff8e 	bl	d65f6 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d66da:	2014      	movs	r0, #20
   d66dc:	f001 f8d2 	bl	d7884 <delay>
  return true;
   d66e0:	2001      	movs	r0, #1
}
   d66e2:	bd38      	pop	{r3, r4, r5, pc}

000d66e4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
   d66e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66e6:	4606      	mov	r6, r0
   d66e8:	4614      	mov	r4, r2
   d66ea:	461d      	mov	r5, r3
   d66ec:	460f      	mov	r7, r1
  Wire.beginTransmission(_address);
   d66ee:	f001 fb75 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d66f2:	7971      	ldrb	r1, [r6, #5]
   d66f4:	f000 fdac 	bl	d7250 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d66f8:	f001 fb70 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d66fc:	6803      	ldr	r3, [r0, #0]
   d66fe:	4639      	mov	r1, r7
   d6700:	689b      	ldr	r3, [r3, #8]
   d6702:	4798      	blx	r3
  Wire.endTransmission();
   d6704:	f001 fb6a 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6708:	f000 fdaa 	bl	d7260 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)len);
   d670c:	f001 fb66 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6710:	462a      	mov	r2, r5
   d6712:	7971      	ldrb	r1, [r6, #5]
   d6714:	f000 fd99 	bl	d724a <_ZN7TwoWire11requestFromEhj>

  for (uint8_t i = 0; i < len; i++)
   d6718:	4425      	add	r5, r4
   d671a:	42ac      	cmp	r4, r5
   d671c:	d007      	beq.n	d672e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x4a>
  {
      buffer[i] = Wire.read();
   d671e:	f001 fb5d 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d6722:	6803      	ldr	r3, [r0, #0]
   d6724:	695b      	ldr	r3, [r3, #20]
   d6726:	4798      	blx	r3
   d6728:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint8_t i = 0; i < len; i++)
   d672c:	e7f5      	b.n	d671a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x36>
  }

  /* ToDo: Check for errors! */
  return true;
}
   d672e:	2001      	movs	r0, #1
   d6730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6734 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
{
   d6734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6736:	460e      	mov	r6, r1
   d6738:	4615      	mov	r5, r2
        memset(p_vec, 0, sizeof(double)*N);
   d673a:	2100      	movs	r1, #0
   d673c:	2218      	movs	r2, #24
   d673e:	4604      	mov	r4, r0
   d6740:	f002 f9ae 	bl	d8aa0 <memset>
  memset (buffer, 0, 6);
   d6744:	2300      	movs	r3, #0
   d6746:	9300      	str	r3, [sp, #0]
   d6748:	f8ad 3004 	strh.w	r3, [sp, #4]
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d674c:	4630      	mov	r0, r6
   d674e:	2306      	movs	r3, #6
   d6750:	466a      	mov	r2, sp
   d6752:	4629      	mov	r1, r5
   d6754:	f7ff ffc6 	bl	d66e4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6758:	f89d 3001 	ldrb.w	r3, [sp, #1]
   d675c:	f89d 0000 	ldrb.w	r0, [sp]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6760:	f89d 7002 	ldrb.w	r7, [sp, #2]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6764:	f89d 6004 	ldrb.w	r6, [sp, #4]
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6768:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d676c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d6770:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6774:	f89d 3005 	ldrb.w	r3, [sp, #5]
  switch(vector_type)
   d6778:	2d14      	cmp	r5, #20
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d677a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d677e:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6780:	b23f      	sxth	r7, r7
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6782:	b236      	sxth	r6, r6
  switch(vector_type)
   d6784:	d026      	beq.n	d67d4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xa0>
   d6786:	d806      	bhi.n	d6796 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x62>
   d6788:	2d08      	cmp	r5, #8
   d678a:	d00c      	beq.n	d67a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x72>
   d678c:	2d0e      	cmp	r5, #14
   d678e:	d03a      	beq.n	d6806 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd2>
}
   d6790:	4620      	mov	r0, r4
   d6792:	b003      	add	sp, #12
   d6794:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch(vector_type)
   d6796:	2d1a      	cmp	r5, #26
   d6798:	d035      	beq.n	d6806 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd2>
   d679a:	2d19      	cmp	r5, #25
   d679c:	d9f8      	bls.n	d6790 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5c>
   d679e:	2d28      	cmp	r5, #40	; 0x28
   d67a0:	d001      	beq.n	d67a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x72>
   d67a2:	2d2e      	cmp	r5, #46	; 0x2e
   d67a4:	d1f4      	bne.n	d6790 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5c>
      xyz[0] = ((double)x)/100.0;
   d67a6:	f001 fdad 	bl	d8304 <__aeabi_i2d>
   d67aa:	4b24      	ldr	r3, [pc, #144]	; (d683c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d67ac:	2200      	movs	r2, #0
   d67ae:	f001 ff3d 	bl	d862c <__aeabi_ddiv>
   d67b2:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/100.0;
   d67b6:	4638      	mov	r0, r7
   d67b8:	f001 fda4 	bl	d8304 <__aeabi_i2d>
   d67bc:	4b1f      	ldr	r3, [pc, #124]	; (d683c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d67be:	2200      	movs	r2, #0
   d67c0:	f001 ff34 	bl	d862c <__aeabi_ddiv>
   d67c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/100.0;
   d67c8:	4630      	mov	r0, r6
   d67ca:	f001 fd9b 	bl	d8304 <__aeabi_i2d>
   d67ce:	4b1b      	ldr	r3, [pc, #108]	; (d683c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d67d0:	2200      	movs	r2, #0
   d67d2:	e015      	b.n	d6800 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xcc>
      xyz[0] = ((double)x)/900.0;
   d67d4:	f001 fd96 	bl	d8304 <__aeabi_i2d>
   d67d8:	4b19      	ldr	r3, [pc, #100]	; (d6840 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d67da:	2200      	movs	r2, #0
   d67dc:	f001 ff26 	bl	d862c <__aeabi_ddiv>
   d67e0:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/900.0;
   d67e4:	4638      	mov	r0, r7
   d67e6:	f001 fd8d 	bl	d8304 <__aeabi_i2d>
   d67ea:	4b15      	ldr	r3, [pc, #84]	; (d6840 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d67ec:	2200      	movs	r2, #0
   d67ee:	f001 ff1d 	bl	d862c <__aeabi_ddiv>
   d67f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/900.0;
   d67f6:	4630      	mov	r0, r6
   d67f8:	f001 fd84 	bl	d8304 <__aeabi_i2d>
   d67fc:	4b10      	ldr	r3, [pc, #64]	; (d6840 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d67fe:	2200      	movs	r2, #0
      xyz[2] = ((double)z)/100.0;
   d6800:	f001 ff14 	bl	d862c <__aeabi_ddiv>
   d6804:	e017      	b.n	d6836 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x102>
      xyz[0] = ((double)x)/16.0;
   d6806:	f001 fd7d 	bl	d8304 <__aeabi_i2d>
   d680a:	4b0e      	ldr	r3, [pc, #56]	; (d6844 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x110>)
   d680c:	2200      	movs	r2, #0
   d680e:	f001 fde3 	bl	d83d8 <__aeabi_dmul>
   d6812:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/16.0;
   d6816:	4638      	mov	r0, r7
   d6818:	f001 fd74 	bl	d8304 <__aeabi_i2d>
   d681c:	4b09      	ldr	r3, [pc, #36]	; (d6844 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x110>)
   d681e:	2200      	movs	r2, #0
   d6820:	f001 fdda 	bl	d83d8 <__aeabi_dmul>
   d6824:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/16.0;
   d6828:	4630      	mov	r0, r6
   d682a:	f001 fd6b 	bl	d8304 <__aeabi_i2d>
   d682e:	4b05      	ldr	r3, [pc, #20]	; (d6844 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x110>)
   d6830:	2200      	movs	r2, #0
   d6832:	f001 fdd1 	bl	d83d8 <__aeabi_dmul>
      xyz[2] = ((double)z)/100.0;
   d6836:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return xyz;
   d683a:	e7a9      	b.n	d6790 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5c>
   d683c:	40590000 	.word	0x40590000
   d6840:	408c2000 	.word	0x408c2000
   d6844:	3fb00000 	.word	0x3fb00000

000d6848 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
{
   d6848:	b530      	push	{r4, r5, lr}
   d684a:	460c      	mov	r4, r1
   d684c:	b087      	sub	sp, #28
   d684e:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6850:	2220      	movs	r2, #32
   d6852:	2100      	movs	r1, #0
   d6854:	1d20      	adds	r0, r4, #4
   d6856:	f002 f923 	bl	d8aa0 <memset>
  event->version   = sizeof(sensors_event_t);
   d685a:	2324      	movs	r3, #36	; 0x24
   d685c:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d685e:	68ab      	ldr	r3, [r5, #8]
   d6860:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
   d6862:	2303      	movs	r3, #3
   d6864:	60a3      	str	r3, [r4, #8]
   d6866:	f000 fa1f 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d686a:	221a      	movs	r2, #26
  event->timestamp = millis();
   d686c:	6120      	str	r0, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d686e:	4629      	mov	r1, r5
   d6870:	4668      	mov	r0, sp
   d6872:	f7ff ff5f 	bl	d6734 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6876:	e9dd 0100 	ldrd	r0, r1, [sp]
   d687a:	f002 f8a5 	bl	d89c8 <__aeabi_d2f>
   d687e:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6884:	f002 f8a0 	bl	d89c8 <__aeabi_d2f>
   d6888:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d688a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d688e:	f002 f89b 	bl	d89c8 <__aeabi_d2f>
   d6892:	61e0      	str	r0, [r4, #28]
}
   d6894:	2001      	movs	r0, #1
   d6896:	b007      	add	sp, #28
   d6898:	bd30      	pop	{r4, r5, pc}
	...

000d689c <_ZN8I2CSlaveD1Ev>:
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
	globalObj = this;
}

I2CSlave::~I2CSlave() {
   d689c:	b510      	push	{r4, lr}
   d689e:	4b05      	ldr	r3, [pc, #20]	; (d68b4 <_ZN8I2CSlaveD1Ev+0x18>)
   d68a0:	6003      	str	r3, [r0, #0]
   d68a2:	4604      	mov	r4, r0
	free(registers);
   d68a4:	6900      	ldr	r0, [r0, #16]
   d68a6:	f000 fb4d 	bl	d6f44 <free>
	globalObj = 0;
   d68aa:	4b03      	ldr	r3, [pc, #12]	; (d68b8 <_ZN8I2CSlaveD1Ev+0x1c>)
   d68ac:	2200      	movs	r2, #0
   d68ae:	601a      	str	r2, [r3, #0]
}
   d68b0:	4620      	mov	r0, r4
   d68b2:	bd10      	pop	{r4, pc}
   d68b4:	000d9394 	.word	0x000d9394
   d68b8:	2003e59c 	.word	0x2003e59c

000d68bc <_ZN8I2CSlaveD0Ev>:
I2CSlave::~I2CSlave() {
   d68bc:	b510      	push	{r4, lr}
   d68be:	4604      	mov	r4, r0
}
   d68c0:	f7ff ffec 	bl	d689c <_ZN8I2CSlaveD1Ev>
   d68c4:	4620      	mov	r0, r4
   d68c6:	211c      	movs	r1, #28
   d68c8:	f001 fb3f 	bl	d7f4a <_ZdlPvj>
   d68cc:	4620      	mov	r0, r4
   d68ce:	bd10      	pop	{r4, pc}

000d68d0 <_ZN8I2CSlaveC1ER7TwoWirehj>:
I2CSlave::I2CSlave(TwoWire &wire, uint8_t addr, size_t numRegisters) :
   d68d0:	b510      	push	{r4, lr}
   d68d2:	4604      	mov	r4, r0
		nextReadAddr(0), registerSetFlags(0) {
   d68d4:	4807      	ldr	r0, [pc, #28]	; (d68f4 <_ZN8I2CSlaveC1ER7TwoWirehj+0x24>)
   d68d6:	7222      	strb	r2, [r4, #8]
   d68d8:	2200      	movs	r2, #0
   d68da:	e9c4 0100 	strd	r0, r1, [r4]
   d68de:	60e3      	str	r3, [r4, #12]
   d68e0:	82a2      	strh	r2, [r4, #20]
   d68e2:	61a2      	str	r2, [r4, #24]
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d68e4:	0098      	lsls	r0, r3, #2
   d68e6:	f000 fb25 	bl	d6f34 <malloc>
	globalObj = this;
   d68ea:	4b03      	ldr	r3, [pc, #12]	; (d68f8 <_ZN8I2CSlaveC1ER7TwoWirehj+0x28>)
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d68ec:	6120      	str	r0, [r4, #16]
	globalObj = this;
   d68ee:	601c      	str	r4, [r3, #0]
}
   d68f0:	4620      	mov	r0, r4
   d68f2:	bd10      	pop	{r4, pc}
   d68f4:	000d9394 	.word	0x000d9394
   d68f8:	2003e59c 	.word	0x2003e59c

000d68fc <_ZN8I2CSlave5beginEv>:

void I2CSlave::begin() {
   d68fc:	b510      	push	{r4, lr}
   d68fe:	4604      	mov	r4, r0

	wire.begin(addr);
   d6900:	7a01      	ldrb	r1, [r0, #8]
   d6902:	6840      	ldr	r0, [r0, #4]
   d6904:	f000 fc72 	bl	d71ec <_ZN7TwoWire5beginEh>
	wire.onReceive(receiveEventStatic);
   d6908:	6860      	ldr	r0, [r4, #4]
   d690a:	4904      	ldr	r1, [pc, #16]	; (d691c <_ZN8I2CSlave5beginEv+0x20>)
   d690c:	f000 fcab 	bl	d7266 <_ZN7TwoWire9onReceiveEPFviE>
	wire.onRequest(requestEventStatic);
   d6910:	6860      	ldr	r0, [r4, #4]
   d6912:	4903      	ldr	r1, [pc, #12]	; (d6920 <_ZN8I2CSlave5beginEv+0x24>)
}
   d6914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wire.onRequest(requestEventStatic);
   d6918:	f000 bca9 	b.w	d726e <_ZN7TwoWire9onRequestEPFvvE>
   d691c:	000d6a19 	.word	0x000d6a19
   d6920:	000d6a59 	.word	0x000d6a59

000d6924 <_ZNK8I2CSlave11getRegisterEt>:

uint32_t I2CSlave::getRegister(uint16_t regAddr) const {
	if (regAddr < numRegisters) {
   d6924:	68c3      	ldr	r3, [r0, #12]
   d6926:	4299      	cmp	r1, r3
		return registers[regAddr];
   d6928:	bf3a      	itte	cc
   d692a:	6903      	ldrcc	r3, [r0, #16]
   d692c:	f853 0021 	ldrcc.w	r0, [r3, r1, lsl #2]
	}
	else {
		return 0;
   d6930:	2000      	movcs	r0, #0
	}
}
   d6932:	4770      	bx	lr

000d6934 <_ZN8I2CSlave11setRegisterEtm>:

void I2CSlave::setRegister(uint16_t regAddr, uint32_t value) {
	if (regAddr < numRegisters) {
   d6934:	68c3      	ldr	r3, [r0, #12]
   d6936:	4299      	cmp	r1, r3
		registers[regAddr] = value;
   d6938:	bf3c      	itt	cc
   d693a:	6903      	ldrcc	r3, [r0, #16]
   d693c:	f843 2021 	strcc.w	r2, [r3, r1, lsl #2]
	}
}
   d6940:	4770      	bx	lr

000d6942 <_ZN8I2CSlave14getRegisterSetERt>:

bool I2CSlave::getRegisterSet(uint16_t &regAddr) {
   d6942:	b570      	push	{r4, r5, r6, lr}
	if (registerSetFlags) {
   d6944:	6983      	ldr	r3, [r0, #24]
   d6946:	b18b      	cbz	r3, d696c <_ZN8I2CSlave14getRegisterSetERt+0x2a>
   d6948:	2200      	movs	r2, #0
		for(uint16_t ii = 0; ii < 32; ii++) {
			if (registerSetFlags & (1 << ii)) {
   d694a:	2501      	movs	r5, #1
   d694c:	6983      	ldr	r3, [r0, #24]
   d694e:	fa05 f402 	lsl.w	r4, r5, r2
   d6952:	4023      	ands	r3, r4
   d6954:	b296      	uxth	r6, r2
   d6956:	d006      	beq.n	d6966 <_ZN8I2CSlave14getRegisterSetERt+0x24>
				// Bit is set, return the address and clear the flag
				regAddr = ii;
   d6958:	800e      	strh	r6, [r1, #0]
				registerSetFlags &= ~(1 << ii);
   d695a:	6983      	ldr	r3, [r0, #24]
   d695c:	ea23 0304 	bic.w	r3, r3, r4
   d6960:	6183      	str	r3, [r0, #24]
				return true;
   d6962:	2001      	movs	r0, #1
		return false;
	}
	else {
		return false;
	}
}
   d6964:	bd70      	pop	{r4, r5, r6, pc}
		for(uint16_t ii = 0; ii < 32; ii++) {
   d6966:	3201      	adds	r2, #1
   d6968:	2a20      	cmp	r2, #32
   d696a:	d1ef      	bne.n	d694c <_ZN8I2CSlave14getRegisterSetERt+0xa>
		return false;
   d696c:	4618      	mov	r0, r3
   d696e:	e7f9      	b.n	d6964 <_ZN8I2CSlave14getRegisterSetERt+0x22>

000d6970 <_ZN8I2CSlave12receiveEventEi>:


void I2CSlave::receiveEvent(int numBytes) {

	if (numBytes == sizeof(uint16_t)) {
   d6970:	2902      	cmp	r1, #2
void I2CSlave::receiveEvent(int numBytes) {
   d6972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6976:	4604      	mov	r4, r0
	if (numBytes == sizeof(uint16_t)) {
   d6978:	d10f      	bne.n	d699a <_ZN8I2CSlave12receiveEventEi+0x2a>
		// This is just an  address to read the register. Save for requestEvent.
		nextReadAddr = (wire.read() & 0xff);
   d697a:	6840      	ldr	r0, [r0, #4]
   d697c:	6803      	ldr	r3, [r0, #0]
   d697e:	695b      	ldr	r3, [r3, #20]
   d6980:	4798      	blx	r3
   d6982:	b2c0      	uxtb	r0, r0
   d6984:	82a0      	strh	r0, [r4, #20]
		nextReadAddr |= (wire.read() & 0xff) << 8;
   d6986:	6860      	ldr	r0, [r4, #4]
   d6988:	6803      	ldr	r3, [r0, #0]
   d698a:	695b      	ldr	r3, [r3, #20]
   d698c:	4798      	blx	r3
   d698e:	8aa3      	ldrh	r3, [r4, #20]
   d6990:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d6994:	82a0      	strh	r0, [r4, #20]
				registerSetFlags |= 1 << writeAddr;
			}
		}
	}

}
   d6996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (numBytes == (sizeof(uint16_t) + sizeof(uint32_t))) {
   d699a:	2906      	cmp	r1, #6
   d699c:	d1fb      	bne.n	d6996 <_ZN8I2CSlave12receiveEventEi+0x26>
		uint16_t writeAddr = (wire.read() & 0xff);
   d699e:	6840      	ldr	r0, [r0, #4]
   d69a0:	6803      	ldr	r3, [r0, #0]
   d69a2:	695b      	ldr	r3, [r3, #20]
   d69a4:	4798      	blx	r3
   d69a6:	4606      	mov	r6, r0
		writeAddr |= (wire.read() & 0xff) << 8;
   d69a8:	6860      	ldr	r0, [r4, #4]
   d69aa:	6803      	ldr	r3, [r0, #0]
   d69ac:	695b      	ldr	r3, [r3, #20]
   d69ae:	4798      	blx	r3
		uint16_t writeAddr = (wire.read() & 0xff);
   d69b0:	b2f6      	uxtb	r6, r6
		writeAddr |= (wire.read() & 0xff) << 8;
   d69b2:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
   d69b6:	b285      	uxth	r5, r0
		uint32_t value = (wire.read() & 0xff);
   d69b8:	6860      	ldr	r0, [r4, #4]
   d69ba:	6803      	ldr	r3, [r0, #0]
   d69bc:	695b      	ldr	r3, [r3, #20]
   d69be:	4798      	blx	r3
   d69c0:	4607      	mov	r7, r0
		value |= (wire.read() & 0xff) << 8;
   d69c2:	6860      	ldr	r0, [r4, #4]
   d69c4:	6803      	ldr	r3, [r0, #0]
   d69c6:	695b      	ldr	r3, [r3, #20]
   d69c8:	4798      	blx	r3
   d69ca:	4680      	mov	r8, r0
		value |= (wire.read() & 0xff) << 16;
   d69cc:	6860      	ldr	r0, [r4, #4]
   d69ce:	6803      	ldr	r3, [r0, #0]
   d69d0:	695b      	ldr	r3, [r3, #20]
   d69d2:	4798      	blx	r3
   d69d4:	4606      	mov	r6, r0
		value |= (wire.read() & 0xff) << 24;
   d69d6:	6860      	ldr	r0, [r4, #4]
   d69d8:	6803      	ldr	r3, [r0, #0]
   d69da:	695b      	ldr	r3, [r3, #20]
   d69dc:	4798      	blx	r3
		if (writeAddr < numRegisters) {
   d69de:	68e3      	ldr	r3, [r4, #12]
   d69e0:	429d      	cmp	r5, r3
   d69e2:	d2d8      	bcs.n	d6996 <_ZN8I2CSlave12receiveEventEi+0x26>
		uint32_t value = (wire.read() & 0xff);
   d69e4:	b2fb      	uxtb	r3, r7
		value |= (wire.read() & 0xff) << 8;
   d69e6:	ea4f 2808 	mov.w	r8, r8, lsl #8
   d69ea:	ea43 6700 	orr.w	r7, r3, r0, lsl #24
   d69ee:	fa1f f888 	uxth.w	r8, r8
		value |= (wire.read() & 0xff) << 16;
   d69f2:	0436      	lsls	r6, r6, #16
			registers[writeAddr] = value;
   d69f4:	6923      	ldr	r3, [r4, #16]
   d69f6:	ea47 0708 	orr.w	r7, r7, r8
		value |= (wire.read() & 0xff) << 16;
   d69fa:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
		value |= (wire.read() & 0xff) << 24;
   d69fe:	433e      	orrs	r6, r7
			if (writeAddr < 32) {
   d6a00:	2d1f      	cmp	r5, #31
			registers[writeAddr] = value;
   d6a02:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
			if (writeAddr < 32) {
   d6a06:	d8c6      	bhi.n	d6996 <_ZN8I2CSlave12receiveEventEi+0x26>
				registerSetFlags |= 1 << writeAddr;
   d6a08:	69a3      	ldr	r3, [r4, #24]
   d6a0a:	2001      	movs	r0, #1
   d6a0c:	fa00 f505 	lsl.w	r5, r0, r5
   d6a10:	431d      	orrs	r5, r3
   d6a12:	61a5      	str	r5, [r4, #24]
}
   d6a14:	e7bf      	b.n	d6996 <_ZN8I2CSlave12receiveEventEi+0x26>
	...

000d6a18 <_ZN8I2CSlave18receiveEventStaticEi>:
	wire.write((const uint8_t *)&value, sizeof(value));
}

// [static]
void I2CSlave::receiveEventStatic(int numBytes) {
	if (globalObj) {
   d6a18:	4b03      	ldr	r3, [pc, #12]	; (d6a28 <_ZN8I2CSlave18receiveEventStaticEi+0x10>)
void I2CSlave::receiveEventStatic(int numBytes) {
   d6a1a:	4601      	mov	r1, r0
	if (globalObj) {
   d6a1c:	6818      	ldr	r0, [r3, #0]
   d6a1e:	b108      	cbz	r0, d6a24 <_ZN8I2CSlave18receiveEventStaticEi+0xc>
		globalObj->receiveEvent(numBytes);
   d6a20:	f7ff bfa6 	b.w	d6970 <_ZN8I2CSlave12receiveEventEi>
	}
}
   d6a24:	4770      	bx	lr
   d6a26:	bf00      	nop
   d6a28:	2003e59c 	.word	0x2003e59c

000d6a2c <_ZN8I2CSlave12requestEventEv>:
void I2CSlave::requestEvent() {
   d6a2c:	b507      	push	{r0, r1, r2, lr}
	uint32_t value = 0;
   d6a2e:	2300      	movs	r3, #0
	if (nextReadAddr < numRegisters) {
   d6a30:	68c2      	ldr	r2, [r0, #12]
	uint32_t value = 0;
   d6a32:	9301      	str	r3, [sp, #4]
	if (nextReadAddr < numRegisters) {
   d6a34:	8a83      	ldrh	r3, [r0, #20]
   d6a36:	4293      	cmp	r3, r2
		value = registers[nextReadAddr];
   d6a38:	bf38      	it	cc
   d6a3a:	6902      	ldrcc	r2, [r0, #16]
	wire.write((const uint8_t *)&value, sizeof(value));
   d6a3c:	6840      	ldr	r0, [r0, #4]
		value = registers[nextReadAddr];
   d6a3e:	bf3c      	itt	cc
   d6a40:	f852 3023 	ldrcc.w	r3, [r2, r3, lsl #2]
   d6a44:	9301      	strcc	r3, [sp, #4]
	wire.write((const uint8_t *)&value, sizeof(value));
   d6a46:	6803      	ldr	r3, [r0, #0]
   d6a48:	2204      	movs	r2, #4
   d6a4a:	68db      	ldr	r3, [r3, #12]
   d6a4c:	eb0d 0102 	add.w	r1, sp, r2
   d6a50:	4798      	blx	r3
}
   d6a52:	b003      	add	sp, #12
   d6a54:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a58 <_ZN8I2CSlave18requestEventStaticEv>:

// [static]
void I2CSlave::requestEventStatic() {
	if (globalObj) {
   d6a58:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <_ZN8I2CSlave18requestEventStaticEv+0xc>)
   d6a5a:	6818      	ldr	r0, [r3, #0]
   d6a5c:	b108      	cbz	r0, d6a62 <_ZN8I2CSlave18requestEventStaticEv+0xa>
		globalObj->requestEvent();
   d6a5e:	f7ff bfe5 	b.w	d6a2c <_ZN8I2CSlave12requestEventEv>
	}
}
   d6a62:	4770      	bx	lr
   d6a64:	2003e59c 	.word	0x2003e59c

000d6a68 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <HAL_USB_USART_Init+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	681b      	ldr	r3, [r3, #0]
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	0003024c 	.word	0x0003024c

000d6a78 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <HAL_USB_USART_Begin+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	685b      	ldr	r3, [r3, #4]
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	0003024c 	.word	0x0003024c

000d6a88 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <HAL_USB_USART_Available_Data+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	691b      	ldr	r3, [r3, #16]
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	0003024c 	.word	0x0003024c

000d6a98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	695b      	ldr	r3, [r3, #20]
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	0003024c 	.word	0x0003024c

000d6aa8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <HAL_USB_USART_Receive_Data+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	699b      	ldr	r3, [r3, #24]
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	0003024c 	.word	0x0003024c

000d6ab8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <HAL_USB_USART_Send_Data+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	69db      	ldr	r3, [r3, #28]
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	0003024c 	.word	0x0003024c

000d6ac8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <HAL_USB_USART_Flush_Data+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	6a1b      	ldr	r3, [r3, #32]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003024c 	.word	0x0003024c

000d6ad8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <hal_spi_init+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	69db      	ldr	r3, [r3, #28]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	00030230 	.word	0x00030230

000d6ae8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <hal_spi_is_enabled+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	6a1b      	ldr	r3, [r3, #32]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	00030230 	.word	0x00030230

000d6af8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <hal_i2c_begin+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	68db      	ldr	r3, [r3, #12]
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	00030228 	.word	0x00030228

000d6b08 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <hal_i2c_begin_transmission+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	699b      	ldr	r3, [r3, #24]
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	00030228 	.word	0x00030228

000d6b18 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <hal_i2c_end_transmission+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	69db      	ldr	r3, [r3, #28]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	00030228 	.word	0x00030228

000d6b28 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <hal_i2c_write+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	6a1b      	ldr	r3, [r3, #32]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	00030228 	.word	0x00030228

000d6b38 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <hal_i2c_available+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	00030228 	.word	0x00030228

000d6b48 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <hal_i2c_read+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	00030228 	.word	0x00030228

000d6b58 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <hal_i2c_peek+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	00030228 	.word	0x00030228

000d6b68 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <hal_i2c_flush+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	00030228 	.word	0x00030228

000d6b78 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <hal_i2c_is_enabled+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	00030228 	.word	0x00030228

000d6b88 <hal_i2c_set_callback_on_received>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <hal_i2c_set_callback_on_received+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	00030228 	.word	0x00030228

000d6b98 <hal_i2c_set_callback_on_requested>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <hal_i2c_set_callback_on_requested+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	00030228 	.word	0x00030228

000d6ba8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <hal_i2c_init+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	00030228 	.word	0x00030228

000d6bb8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <hal_i2c_request_ex+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	00030228 	.word	0x00030228

000d6bc8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <hal_usart_init+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	681b      	ldr	r3, [r3, #0]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	0003023c 	.word	0x0003023c

000d6bd8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <hal_usart_write+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	68db      	ldr	r3, [r3, #12]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	0003023c 	.word	0x0003023c

000d6be8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <hal_usart_available+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	691b      	ldr	r3, [r3, #16]
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	0003023c 	.word	0x0003023c

000d6bf8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <hal_usart_read+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	695b      	ldr	r3, [r3, #20]
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	0003023c 	.word	0x0003023c

000d6c08 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <hal_usart_peek+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	699b      	ldr	r3, [r3, #24]
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	0003023c 	.word	0x0003023c

000d6c18 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <hal_usart_flush+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	69db      	ldr	r3, [r3, #28]
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	0003023c 	.word	0x0003023c

000d6c28 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <hal_usart_is_enabled+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	6a1b      	ldr	r3, [r3, #32]
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	0003023c 	.word	0x0003023c

000d6c38 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <hal_usart_available_data_for_write+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	0003023c 	.word	0x0003023c

000d6c48 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <hal_usart_begin_config+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	0003023c 	.word	0x0003023c

000d6c58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <inet_inet_ntop+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	695b      	ldr	r3, [r3, #20]
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	00030264 	.word	0x00030264

000d6c68 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <os_mutex_recursive_create+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	00030248 	.word	0x00030248

000d6c78 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <os_mutex_recursive_destroy+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	00030248 	.word	0x00030248

000d6c88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <HAL_RNG_GetRandomNumber+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	685b      	ldr	r3, [r3, #4]
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	00030218 	.word	0x00030218

000d6c98 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <HAL_Delay_Microseconds+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	68db      	ldr	r3, [r3, #12]
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	00030218 	.word	0x00030218

000d6ca8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	695b      	ldr	r3, [r3, #20]
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	00030218 	.word	0x00030218

000d6cb8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <hal_rtc_time_is_valid+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	00030218 	.word	0x00030218

000d6cc8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <hal_rtc_get_time+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	00030218 	.word	0x00030218

000d6cd8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <HAL_Pin_Map+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	681b      	ldr	r3, [r3, #0]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	0003022c 	.word	0x0003022c

000d6ce8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <HAL_Pin_Mode+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	689b      	ldr	r3, [r3, #8]
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	0003022c 	.word	0x0003022c

000d6cf8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <HAL_Get_Pin_Mode+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	68db      	ldr	r3, [r3, #12]
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	0003022c 	.word	0x0003022c

000d6d08 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <HAL_GPIO_Read+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	695b      	ldr	r3, [r3, #20]
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	0003022c 	.word	0x0003022c

000d6d18 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <HAL_Interrupts_Attach+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	699b      	ldr	r3, [r3, #24]
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	0003022c 	.word	0x0003022c

000d6d28 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <HAL_Interrupts_Detach+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	69db      	ldr	r3, [r3, #28]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	0003022c 	.word	0x0003022c

000d6d38 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <HAL_Interrupts_Enable_All+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	6a1b      	ldr	r3, [r3, #32]
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	0003022c 	.word	0x0003022c

000d6d48 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <HAL_Interrupts_Disable_All+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	0003022c 	.word	0x0003022c

000d6d58 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <netdb_freeaddrinfo+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	689b      	ldr	r3, [r3, #8]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	00030268 	.word	0x00030268

000d6d68 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <netdb_getaddrinfo+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	68db      	ldr	r3, [r3, #12]
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	00030268 	.word	0x00030268

000d6d78 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <LED_SetSignalingColor+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	685b      	ldr	r3, [r3, #4]
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	00030260 	.word	0x00030260

000d6d88 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <LED_Signaling_Start+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	689b      	ldr	r3, [r3, #8]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030260 	.word	0x00030260

000d6d98 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <LED_Signaling_Stop+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	68db      	ldr	r3, [r3, #12]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030260 	.word	0x00030260

000d6da8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <LED_RGB_IsOverRidden+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	699b      	ldr	r3, [r3, #24]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030260 	.word	0x00030260

000d6db8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <LED_On+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	69db      	ldr	r3, [r3, #28]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030260 	.word	0x00030260

000d6dc8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <panic_+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030260 	.word	0x00030260

000d6dd8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <spark_process+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	689b      	ldr	r3, [r3, #8]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030244 	.word	0x00030244

000d6de8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <spark_cloud_flag_connected+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	695b      	ldr	r3, [r3, #20]
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030244 	.word	0x00030244

000d6df8 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <spark_sync_time_pending+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030244 	.word	0x00030244

000d6e08 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030244 	.word	0x00030244

000d6e18 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <network_connect+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	685b      	ldr	r3, [r3, #4]
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030240 	.word	0x00030240

000d6e28 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <network_connecting+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	689b      	ldr	r3, [r3, #8]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030240 	.word	0x00030240

000d6e38 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <network_disconnect+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	68db      	ldr	r3, [r3, #12]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030240 	.word	0x00030240

000d6e48 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <network_ready+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	691b      	ldr	r3, [r3, #16]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030240 	.word	0x00030240

000d6e58 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <network_on+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	695b      	ldr	r3, [r3, #20]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030240 	.word	0x00030240

000d6e68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <network_off+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	699b      	ldr	r3, [r3, #24]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	00030240 	.word	0x00030240

000d6e78 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <network_listen+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	69db      	ldr	r3, [r3, #28]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	00030240 	.word	0x00030240

000d6e88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <network_listening+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6a1b      	ldr	r3, [r3, #32]
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	00030240 	.word	0x00030240

000d6e98 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <network_set_listen_timeout+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030240 	.word	0x00030240

000d6ea8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <network_get_listen_timeout+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	00030240 	.word	0x00030240

000d6eb8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <system_mode+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	681b      	ldr	r3, [r3, #0]
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	00030220 	.word	0x00030220

000d6ec8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <set_system_mode+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	685b      	ldr	r3, [r3, #4]
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	00030220 	.word	0x00030220

000d6ed8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <system_delay_ms+0xc>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	695b      	ldr	r3, [r3, #20]
   d6ee0:	9301      	str	r3, [sp, #4]
   d6ee2:	bd08      	pop	{r3, pc}
   d6ee4:	00030220 	.word	0x00030220

000d6ee8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6ee8:	b508      	push	{r3, lr}
   d6eea:	4b02      	ldr	r3, [pc, #8]	; (d6ef4 <system_thread_get_state+0xc>)
   d6eec:	681b      	ldr	r3, [r3, #0]
   d6eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	bd08      	pop	{r3, pc}
   d6ef4:	00030220 	.word	0x00030220

000d6ef8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6ef8:	b508      	push	{r3, lr}
   d6efa:	4b03      	ldr	r3, [pc, #12]	; (d6f08 <system_ctrl_set_app_request_handler+0x10>)
   d6efc:	681b      	ldr	r3, [r3, #0]
   d6efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6f02:	9301      	str	r3, [sp, #4]
   d6f04:	bd08      	pop	{r3, pc}
   d6f06:	0000      	.short	0x0000
   d6f08:	00030220 	.word	0x00030220

000d6f0c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b03      	ldr	r3, [pc, #12]	; (d6f1c <system_ctrl_set_result+0x10>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6f16:	9301      	str	r3, [sp, #4]
   d6f18:	bd08      	pop	{r3, pc}
   d6f1a:	0000      	.short	0x0000
   d6f1c:	00030220 	.word	0x00030220

000d6f20 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d6f20:	b508      	push	{r3, lr}
   d6f22:	4b03      	ldr	r3, [pc, #12]	; (d6f30 <system_sleep_pins+0x10>)
   d6f24:	681b      	ldr	r3, [r3, #0]
   d6f26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d6f2a:	9301      	str	r3, [sp, #4]
   d6f2c:	bd08      	pop	{r3, pc}
   d6f2e:	0000      	.short	0x0000
   d6f30:	00030220 	.word	0x00030220

000d6f34 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6f34:	b508      	push	{r3, lr}
   d6f36:	4b02      	ldr	r3, [pc, #8]	; (d6f40 <malloc+0xc>)
   d6f38:	681b      	ldr	r3, [r3, #0]
   d6f3a:	681b      	ldr	r3, [r3, #0]
   d6f3c:	9301      	str	r3, [sp, #4]
   d6f3e:	bd08      	pop	{r3, pc}
   d6f40:	0003021c 	.word	0x0003021c

000d6f44 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6f44:	b508      	push	{r3, lr}
   d6f46:	4b02      	ldr	r3, [pc, #8]	; (d6f50 <free+0xc>)
   d6f48:	681b      	ldr	r3, [r3, #0]
   d6f4a:	685b      	ldr	r3, [r3, #4]
   d6f4c:	9301      	str	r3, [sp, #4]
   d6f4e:	bd08      	pop	{r3, pc}
   d6f50:	0003021c 	.word	0x0003021c

000d6f54 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6f54:	b508      	push	{r3, lr}
   d6f56:	4b02      	ldr	r3, [pc, #8]	; (d6f60 <vsnprintf+0xc>)
   d6f58:	681b      	ldr	r3, [r3, #0]
   d6f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f5c:	9301      	str	r3, [sp, #4]
   d6f5e:	bd08      	pop	{r3, pc}
   d6f60:	0003021c 	.word	0x0003021c

000d6f64 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6f64:	b508      	push	{r3, lr}
   d6f66:	4b02      	ldr	r3, [pc, #8]	; (d6f70 <abort+0xc>)
   d6f68:	681b      	ldr	r3, [r3, #0]
   d6f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f6c:	9301      	str	r3, [sp, #4]
   d6f6e:	bd08      	pop	{r3, pc}
   d6f70:	0003021c 	.word	0x0003021c

000d6f74 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6f74:	b508      	push	{r3, lr}
   d6f76:	4b02      	ldr	r3, [pc, #8]	; (d6f80 <newlib_impure_ptr_callback+0xc>)
   d6f78:	681b      	ldr	r3, [r3, #0]
   d6f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6f7c:	9301      	str	r3, [sp, #4]
   d6f7e:	bd08      	pop	{r3, pc}
   d6f80:	0003021c 	.word	0x0003021c

000d6f84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6f84:	2300      	movs	r3, #0
   d6f86:	6840      	ldr	r0, [r0, #4]
   d6f88:	461a      	mov	r2, r3
   d6f8a:	f7ff bf45 	b.w	d6e18 <network_connect>

000d6f8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6f8e:	6840      	ldr	r0, [r0, #4]
   d6f90:	2200      	movs	r2, #0
   d6f92:	2102      	movs	r1, #2
   d6f94:	f7ff bf50 	b.w	d6e38 <network_disconnect>

000d6f98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6f98:	2200      	movs	r2, #0
   d6f9a:	6840      	ldr	r0, [r0, #4]
   d6f9c:	4611      	mov	r1, r2
   d6f9e:	f7ff bf43 	b.w	d6e28 <network_connecting>

000d6fa2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6fa2:	2200      	movs	r2, #0
   d6fa4:	6840      	ldr	r0, [r0, #4]
   d6fa6:	4611      	mov	r1, r2
   d6fa8:	f7ff bf4e 	b.w	d6e48 <network_ready>

000d6fac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6fac:	2300      	movs	r3, #0
   d6fae:	6840      	ldr	r0, [r0, #4]
   d6fb0:	461a      	mov	r2, r3
   d6fb2:	4619      	mov	r1, r3
   d6fb4:	f7ff bf50 	b.w	d6e58 <network_on>

000d6fb8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6fb8:	2300      	movs	r3, #0
   d6fba:	6840      	ldr	r0, [r0, #4]
   d6fbc:	461a      	mov	r2, r3
   d6fbe:	4619      	mov	r1, r3
   d6fc0:	f7ff bf52 	b.w	d6e68 <network_off>

000d6fc4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6fc4:	6840      	ldr	r0, [r0, #4]
   d6fc6:	2200      	movs	r2, #0
   d6fc8:	f081 0101 	eor.w	r1, r1, #1
   d6fcc:	f7ff bf54 	b.w	d6e78 <network_listen>

000d6fd0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6fd0:	6840      	ldr	r0, [r0, #4]
   d6fd2:	2200      	movs	r2, #0
   d6fd4:	f7ff bf60 	b.w	d6e98 <network_set_listen_timeout>

000d6fd8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6fd8:	2200      	movs	r2, #0
   d6fda:	6840      	ldr	r0, [r0, #4]
   d6fdc:	4611      	mov	r1, r2
   d6fde:	f7ff bf63 	b.w	d6ea8 <network_get_listen_timeout>

000d6fe2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6fe2:	2200      	movs	r2, #0
   d6fe4:	6840      	ldr	r0, [r0, #4]
   d6fe6:	4611      	mov	r1, r2
   d6fe8:	f7ff bf4e 	b.w	d6e88 <network_listening>

000d6fec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ff0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6ff2:	b095      	sub	sp, #84	; 0x54
   d6ff4:	4616      	mov	r6, r2
   d6ff6:	460d      	mov	r5, r1
   d6ff8:	4607      	mov	r7, r0
    IPAddress addr;
   d6ffa:	f000 fa83 	bl	d7504 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6ffe:	4621      	mov	r1, r4
   d7000:	2218      	movs	r2, #24
   d7002:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7004:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7006:	f001 fd4b 	bl	d8aa0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d700a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d700c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7010:	4621      	mov	r1, r4
   d7012:	466b      	mov	r3, sp
   d7014:	aa0c      	add	r2, sp, #48	; 0x30
   d7016:	4630      	mov	r0, r6
   d7018:	f7ff fea6 	bl	d6d68 <netdb_getaddrinfo>
    if (!r) {
   d701c:	4604      	mov	r4, r0
   d701e:	2800      	cmp	r0, #0
   d7020:	d146      	bne.n	d70b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7022:	4602      	mov	r2, r0
   d7024:	2101      	movs	r1, #1
   d7026:	6868      	ldr	r0, [r5, #4]
   d7028:	f7ff ff0e 	bl	d6e48 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d702c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d702e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7030:	4622      	mov	r2, r4
   d7032:	6868      	ldr	r0, [r5, #4]
   d7034:	f7ff ff08 	bl	d6e48 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7038:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d703a:	4681      	mov	r9, r0
        bool ok = false;
   d703c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d703e:	2e00      	cmp	r6, #0
   d7040:	d036      	beq.n	d70b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7042:	2900      	cmp	r1, #0
   d7044:	d134      	bne.n	d70b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7046:	6873      	ldr	r3, [r6, #4]
   d7048:	2b02      	cmp	r3, #2
   d704a:	d003      	beq.n	d7054 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d704c:	2b0a      	cmp	r3, #10
   d704e:	d00b      	beq.n	d7068 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7050:	69f6      	ldr	r6, [r6, #28]
   d7052:	e7f4      	b.n	d703e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7054:	f1b8 0f00 	cmp.w	r8, #0
   d7058:	d004      	beq.n	d7064 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d705a:	6971      	ldr	r1, [r6, #20]
   d705c:	4638      	mov	r0, r7
   d705e:	3104      	adds	r1, #4
   d7060:	f000 fa7d 	bl	d755e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7064:	4641      	mov	r1, r8
   d7066:	e7f3      	b.n	d7050 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7068:	f1b9 0f00 	cmp.w	r9, #0
   d706c:	d101      	bne.n	d7072 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d706e:	4649      	mov	r1, r9
   d7070:	e7ee      	b.n	d7050 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7072:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7074:	2210      	movs	r2, #16
   d7076:	a801      	add	r0, sp, #4
   d7078:	f001 fd12 	bl	d8aa0 <memset>
                    a.v = 6;
   d707c:	2306      	movs	r3, #6
   d707e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7082:	ad01      	add	r5, sp, #4
   d7084:	f104 0308 	add.w	r3, r4, #8
   d7088:	3418      	adds	r4, #24
   d708a:	6818      	ldr	r0, [r3, #0]
   d708c:	6859      	ldr	r1, [r3, #4]
   d708e:	462a      	mov	r2, r5
   d7090:	c203      	stmia	r2!, {r0, r1}
   d7092:	3308      	adds	r3, #8
   d7094:	42a3      	cmp	r3, r4
   d7096:	4615      	mov	r5, r2
   d7098:	d1f7      	bne.n	d708a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d709a:	a901      	add	r1, sp, #4
   d709c:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d709e:	ad07      	add	r5, sp, #28
   d70a0:	f000 fa3e 	bl	d7520 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d70a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70a6:	1d3c      	adds	r4, r7, #4
   d70a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70aa:	682b      	ldr	r3, [r5, #0]
   d70ac:	7023      	strb	r3, [r4, #0]
   d70ae:	e7de      	b.n	d706e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d70b0:	9800      	ldr	r0, [sp, #0]
   d70b2:	f7ff fe51 	bl	d6d58 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d70b6:	4638      	mov	r0, r7
   d70b8:	b015      	add	sp, #84	; 0x54
   d70ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d70c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d70c0:	4b02      	ldr	r3, [pc, #8]	; (d70cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d70c2:	4a03      	ldr	r2, [pc, #12]	; (d70d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d70c4:	601a      	str	r2, [r3, #0]
   d70c6:	2200      	movs	r2, #0
   d70c8:	605a      	str	r2, [r3, #4]

} // spark
   d70ca:	4770      	bx	lr
   d70cc:	2003e5a0 	.word	0x2003e5a0
   d70d0:	000d93a4 	.word	0x000d93a4

000d70d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d70d4:	b510      	push	{r4, lr}
   d70d6:	4604      	mov	r4, r0
   d70d8:	4608      	mov	r0, r1
{
    _spi = spi;
   d70da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d70dc:	f7ff fcfc 	bl	d6ad8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d70e0:	2300      	movs	r3, #0
   d70e2:	6063      	str	r3, [r4, #4]
}
   d70e4:	4620      	mov	r0, r4
   d70e6:	bd10      	pop	{r4, pc}

000d70e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d70e8:	2200      	movs	r2, #0
   d70ea:	6840      	ldr	r0, [r0, #4]
   d70ec:	4611      	mov	r1, r2
   d70ee:	f7ff beab 	b.w	d6e48 <network_ready>

000d70f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70f2:	2200      	movs	r2, #0
   d70f4:	6840      	ldr	r0, [r0, #4]
   d70f6:	4611      	mov	r1, r2
   d70f8:	f7ff bec6 	b.w	d6e88 <network_listening>

000d70fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d70fc:	2200      	movs	r2, #0
   d70fe:	6840      	ldr	r0, [r0, #4]
   d7100:	4611      	mov	r1, r2
   d7102:	f7ff bed1 	b.w	d6ea8 <network_get_listen_timeout>

000d7106 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7106:	6840      	ldr	r0, [r0, #4]
   d7108:	2200      	movs	r2, #0
   d710a:	f7ff bec5 	b.w	d6e98 <network_set_listen_timeout>

000d710e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d710e:	6840      	ldr	r0, [r0, #4]
   d7110:	2200      	movs	r2, #0
   d7112:	f081 0101 	eor.w	r1, r1, #1
   d7116:	f7ff beaf 	b.w	d6e78 <network_listen>

000d711a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d711a:	2300      	movs	r3, #0
   d711c:	6840      	ldr	r0, [r0, #4]
   d711e:	461a      	mov	r2, r3
   d7120:	4619      	mov	r1, r3
   d7122:	f7ff bea1 	b.w	d6e68 <network_off>

000d7126 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7126:	2300      	movs	r3, #0
   d7128:	6840      	ldr	r0, [r0, #4]
   d712a:	461a      	mov	r2, r3
   d712c:	4619      	mov	r1, r3
   d712e:	f7ff be93 	b.w	d6e58 <network_on>

000d7132 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7132:	2200      	movs	r2, #0
   d7134:	6840      	ldr	r0, [r0, #4]
   d7136:	4611      	mov	r1, r2
   d7138:	f7ff be76 	b.w	d6e28 <network_connecting>

000d713c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d713c:	6840      	ldr	r0, [r0, #4]
   d713e:	2200      	movs	r2, #0
   d7140:	2102      	movs	r1, #2
   d7142:	f7ff be79 	b.w	d6e38 <network_disconnect>

000d7146 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7146:	2300      	movs	r3, #0
   d7148:	6840      	ldr	r0, [r0, #4]
   d714a:	461a      	mov	r2, r3
   d714c:	f7ff be64 	b.w	d6e18 <network_connect>

000d7150 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7150:	4b02      	ldr	r3, [pc, #8]	; (d715c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7152:	2204      	movs	r2, #4
   d7154:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7156:	4a02      	ldr	r2, [pc, #8]	; (d7160 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7158:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d715a:	4770      	bx	lr
   d715c:	2003e5a8 	.word	0x2003e5a8
   d7160:	000d93d8 	.word	0x000d93d8

000d7164 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7164:	4770      	bx	lr

000d7166 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7168:	4606      	mov	r6, r0
   d716a:	4615      	mov	r5, r2
   d716c:	460c      	mov	r4, r1
   d716e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7170:	42bc      	cmp	r4, r7
   d7172:	d006      	beq.n	d7182 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7174:	6833      	ldr	r3, [r6, #0]
   d7176:	f814 1b01 	ldrb.w	r1, [r4], #1
   d717a:	689b      	ldr	r3, [r3, #8]
   d717c:	4630      	mov	r0, r6
   d717e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7180:	e7f6      	b.n	d7170 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7182:	4628      	mov	r0, r5
   d7184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7186 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7186:	7c00      	ldrb	r0, [r0, #16]
   d7188:	2200      	movs	r2, #0
   d718a:	f7ff bccd 	b.w	d6b28 <hal_i2c_write>

000d718e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d718e:	7c00      	ldrb	r0, [r0, #16]
   d7190:	2100      	movs	r1, #0
   d7192:	f7ff bcd1 	b.w	d6b38 <hal_i2c_available>

000d7196 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7196:	7c00      	ldrb	r0, [r0, #16]
   d7198:	2100      	movs	r1, #0
   d719a:	f7ff bcd5 	b.w	d6b48 <hal_i2c_read>

000d719e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d719e:	7c00      	ldrb	r0, [r0, #16]
   d71a0:	2100      	movs	r1, #0
   d71a2:	f7ff bcd9 	b.w	d6b58 <hal_i2c_peek>

000d71a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d71a6:	7c00      	ldrb	r0, [r0, #16]
   d71a8:	2100      	movs	r1, #0
   d71aa:	f7ff bcdd 	b.w	d6b68 <hal_i2c_flush>

000d71ae <_ZN7TwoWireD0Ev>:
   d71ae:	b510      	push	{r4, lr}
   d71b0:	2114      	movs	r1, #20
   d71b2:	4604      	mov	r4, r0
   d71b4:	f000 fec9 	bl	d7f4a <_ZdlPvj>
   d71b8:	4620      	mov	r0, r4
   d71ba:	bd10      	pop	{r4, pc}

000d71bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d71bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d71be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d71c2:	4604      	mov	r4, r0
   d71c4:	4608      	mov	r0, r1
   d71c6:	2100      	movs	r1, #0
   d71c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d71cc:	4b03      	ldr	r3, [pc, #12]	; (d71dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d71ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d71d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d71d2:	4611      	mov	r1, r2
   d71d4:	f7ff fce8 	bl	d6ba8 <hal_i2c_init>
}
   d71d8:	4620      	mov	r0, r4
   d71da:	bd10      	pop	{r4, pc}
   d71dc:	000d940c 	.word	0x000d940c

000d71e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d71e0:	2300      	movs	r3, #0
   d71e2:	7c00      	ldrb	r0, [r0, #16]
   d71e4:	461a      	mov	r2, r3
   d71e6:	4619      	mov	r1, r3
   d71e8:	f7ff bc86 	b.w	d6af8 <hal_i2c_begin>

000d71ec <_ZN7TwoWire5beginEh>:
{
   d71ec:	460a      	mov	r2, r1
	hal_i2c_begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d71ee:	7c00      	ldrb	r0, [r0, #16]
   d71f0:	2300      	movs	r3, #0
   d71f2:	2101      	movs	r1, #1
   d71f4:	f7ff bc80 	b.w	d6af8 <hal_i2c_begin>

000d71f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d71f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d71fa:	2200      	movs	r2, #0
   d71fc:	2314      	movs	r3, #20
   d71fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7202:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7206:	780b      	ldrb	r3, [r1, #0]
   d7208:	f88d 3008 	strb.w	r3, [sp, #8]
   d720c:	684b      	ldr	r3, [r1, #4]
   d720e:	9303      	str	r3, [sp, #12]
   d7210:	68cb      	ldr	r3, [r1, #12]
   d7212:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7214:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7216:	7a0b      	ldrb	r3, [r1, #8]
   d7218:	9305      	str	r3, [sp, #20]
   d721a:	a901      	add	r1, sp, #4
   d721c:	f7ff fccc 	bl	d6bb8 <hal_i2c_request_ex>
}
   d7220:	b007      	add	sp, #28
   d7222:	f85d fb04 	ldr.w	pc, [sp], #4

000d7226 <_ZN7TwoWire11requestFromEhjh>:
{
   d7226:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7228:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d722a:	f88d 1000 	strb.w	r1, [sp]
   d722e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7232:	9103      	str	r1, [sp, #12]
   d7234:	bf18      	it	ne
   d7236:	2301      	movne	r3, #1
   d7238:	4669      	mov	r1, sp
    size_ = size;
   d723a:	9201      	str	r2, [sp, #4]
   d723c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7240:	f7ff ffda 	bl	d71f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7244:	b005      	add	sp, #20
   d7246:	f85d fb04 	ldr.w	pc, [sp], #4

000d724a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d724a:	2301      	movs	r3, #1
   d724c:	f7ff bfeb 	b.w	d7226 <_ZN7TwoWire11requestFromEhjh>

000d7250 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7250:	7c00      	ldrb	r0, [r0, #16]
   d7252:	2200      	movs	r2, #0
   d7254:	f7ff bc58 	b.w	d6b08 <hal_i2c_begin_transmission>

000d7258 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7258:	7c00      	ldrb	r0, [r0, #16]
   d725a:	2200      	movs	r2, #0
   d725c:	f7ff bc5c 	b.w	d6b18 <hal_i2c_end_transmission>

000d7260 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7260:	2101      	movs	r1, #1
   d7262:	f7ff bff9 	b.w	d7258 <_ZN7TwoWire15endTransmissionEh>

000d7266 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  hal_i2c_set_callback_on_received(_i2c, function, NULL);
   d7266:	7c00      	ldrb	r0, [r0, #16]
   d7268:	2200      	movs	r2, #0
   d726a:	f7ff bc8d 	b.w	d6b88 <hal_i2c_set_callback_on_received>

000d726e <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
   d726e:	7c00      	ldrb	r0, [r0, #16]
   d7270:	2200      	movs	r2, #0
   d7272:	f7ff bc91 	b.w	d6b98 <hal_i2c_set_callback_on_requested>

000d7276 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7276:	4770      	bx	lr

000d7278 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7278:	7441      	strb	r1, [r0, #17]
}
   d727a:	4770      	bx	lr

000d727c <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d727c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d727e:	7c00      	ldrb	r0, [r0, #16]
   d7280:	f7ff fcda 	bl	d6c38 <hal_usart_available_data_for_write>
}
   d7284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7288:	bd08      	pop	{r3, pc}

000d728a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d728a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d728c:	7c00      	ldrb	r0, [r0, #16]
   d728e:	f7ff fcab 	bl	d6be8 <hal_usart_available>
}
   d7292:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7296:	bd08      	pop	{r3, pc}

000d7298 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7298:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d729a:	7c00      	ldrb	r0, [r0, #16]
   d729c:	f7ff fcb4 	bl	d6c08 <hal_usart_peek>
}
   d72a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d72a4:	bd08      	pop	{r3, pc}

000d72a6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d72a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d72a8:	7c00      	ldrb	r0, [r0, #16]
   d72aa:	f7ff fca5 	bl	d6bf8 <hal_usart_read>
}
   d72ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d72b2:	bd08      	pop	{r3, pc}

000d72b4 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d72b4:	7c00      	ldrb	r0, [r0, #16]
   d72b6:	f7ff bcaf 	b.w	d6c18 <hal_usart_flush>

000d72ba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d72ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72bc:	7c45      	ldrb	r5, [r0, #17]
{
   d72be:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72c0:	b12d      	cbz	r5, d72ce <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d72c2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d72c4:	b003      	add	sp, #12
   d72c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d72ca:	f7ff bc85 	b.w	d6bd8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72ce:	7c00      	ldrb	r0, [r0, #16]
   d72d0:	9101      	str	r1, [sp, #4]
   d72d2:	f7ff fcb1 	bl	d6c38 <hal_usart_available_data_for_write>
   d72d6:	2800      	cmp	r0, #0
   d72d8:	9901      	ldr	r1, [sp, #4]
   d72da:	dcf2      	bgt.n	d72c2 <_ZN11USARTSerial5writeEh+0x8>
}
   d72dc:	4628      	mov	r0, r5
   d72de:	b003      	add	sp, #12
   d72e0:	bd30      	pop	{r4, r5, pc}

000d72e2 <_ZN11USARTSerialD0Ev>:
   d72e2:	b510      	push	{r4, lr}
   d72e4:	2114      	movs	r1, #20
   d72e6:	4604      	mov	r4, r0
   d72e8:	f000 fe2f 	bl	d7f4a <_ZdlPvj>
   d72ec:	4620      	mov	r0, r4
   d72ee:	bd10      	pop	{r4, pc}

000d72f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d72f0:	b510      	push	{r4, lr}
   d72f2:	f04f 0c00 	mov.w	ip, #0
   d72f6:	4604      	mov	r4, r0
   d72f8:	4608      	mov	r0, r1
   d72fa:	4611      	mov	r1, r2
   d72fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7300:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7304:	4a04      	ldr	r2, [pc, #16]	; (d7318 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7306:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7308:	2201      	movs	r2, #1
  _serial = serial;
   d730a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d730c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d730e:	461a      	mov	r2, r3
   d7310:	f7ff fc5a 	bl	d6bc8 <hal_usart_init>
}
   d7314:	4620      	mov	r0, r4
   d7316:	bd10      	pop	{r4, pc}
   d7318:	000d9434 	.word	0x000d9434

000d731c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d731c:	7c00      	ldrb	r0, [r0, #16]
   d731e:	2300      	movs	r3, #0
   d7320:	f7ff bc92 	b.w	d6c48 <hal_usart_begin_config>

000d7324 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d7324:	2200      	movs	r2, #0
   d7326:	f7ff bff9 	b.w	d731c <_ZN11USARTSerial5beginEmm>
	...

000d732c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d732c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d732e:	4c0e      	ldr	r4, [pc, #56]	; (d7368 <_Z22__fetch_global_Serial1v+0x3c>)
   d7330:	7821      	ldrb	r1, [r4, #0]
   d7332:	f3bf 8f5b 	dmb	ish
   d7336:	f011 0101 	ands.w	r1, r1, #1
   d733a:	d112      	bne.n	d7362 <_Z22__fetch_global_Serial1v+0x36>
   d733c:	4620      	mov	r0, r4
   d733e:	9101      	str	r1, [sp, #4]
   d7340:	f7fc feaf 	bl	d40a2 <__cxa_guard_acquire>
   d7344:	9901      	ldr	r1, [sp, #4]
   d7346:	b160      	cbz	r0, d7362 <_Z22__fetch_global_Serial1v+0x36>
   d7348:	4a08      	ldr	r2, [pc, #32]	; (d736c <_Z22__fetch_global_Serial1v+0x40>)
   d734a:	4b09      	ldr	r3, [pc, #36]	; (d7370 <_Z22__fetch_global_Serial1v+0x44>)
   d734c:	4809      	ldr	r0, [pc, #36]	; (d7374 <_Z22__fetch_global_Serial1v+0x48>)
   d734e:	f7ff ffcf 	bl	d72f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7352:	4620      	mov	r0, r4
   d7354:	f7fc feaa 	bl	d40ac <__cxa_guard_release>
   d7358:	4a07      	ldr	r2, [pc, #28]	; (d7378 <_Z22__fetch_global_Serial1v+0x4c>)
   d735a:	4908      	ldr	r1, [pc, #32]	; (d737c <_Z22__fetch_global_Serial1v+0x50>)
   d735c:	4805      	ldr	r0, [pc, #20]	; (d7374 <_Z22__fetch_global_Serial1v+0x48>)
   d735e:	f000 fdef 	bl	d7f40 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7362:	4804      	ldr	r0, [pc, #16]	; (d7374 <_Z22__fetch_global_Serial1v+0x48>)
   d7364:	b002      	add	sp, #8
   d7366:	bd10      	pop	{r4, pc}
   d7368:	2003e5b0 	.word	0x2003e5b0
   d736c:	2003e5b4 	.word	0x2003e5b4
   d7370:	2003e638 	.word	0x2003e638
   d7374:	2003e6bc 	.word	0x2003e6bc
   d7378:	2003de40 	.word	0x2003de40
   d737c:	000d7277 	.word	0x000d7277

000d7380 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7380:	7441      	strb	r1, [r0, #17]
}
   d7382:	4770      	bx	lr

000d7384 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7384:	4770      	bx	lr

000d7386 <_ZN9USBSerial4readEv>:
{
   d7386:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7388:	2100      	movs	r1, #0
   d738a:	7c00      	ldrb	r0, [r0, #16]
   d738c:	f7ff fb8c 	bl	d6aa8 <HAL_USB_USART_Receive_Data>
}
   d7390:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7394:	bd08      	pop	{r3, pc}

000d7396 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7396:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7398:	2101      	movs	r1, #1
   d739a:	7c00      	ldrb	r0, [r0, #16]
   d739c:	f7ff fb84 	bl	d6aa8 <HAL_USB_USART_Receive_Data>
}
   d73a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d73a4:	bd08      	pop	{r3, pc}

000d73a6 <_ZN9USBSerial17availableForWriteEv>:
{
   d73a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d73a8:	7c00      	ldrb	r0, [r0, #16]
   d73aa:	f7ff fb75 	bl	d6a98 <HAL_USB_USART_Available_Data_For_Write>
}
   d73ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d73b2:	bd08      	pop	{r3, pc}

000d73b4 <_ZN9USBSerial9availableEv>:
{
   d73b4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d73b6:	7c00      	ldrb	r0, [r0, #16]
   d73b8:	f7ff fb66 	bl	d6a88 <HAL_USB_USART_Available_Data>
}
   d73bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d73c0:	bd08      	pop	{r3, pc}

000d73c2 <_ZN9USBSerial5writeEh>:
{
   d73c2:	b513      	push	{r0, r1, r4, lr}
   d73c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d73c6:	7c00      	ldrb	r0, [r0, #16]
{
   d73c8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d73ca:	f7ff fb65 	bl	d6a98 <HAL_USB_USART_Available_Data_For_Write>
   d73ce:	2800      	cmp	r0, #0
   d73d0:	9901      	ldr	r1, [sp, #4]
   d73d2:	dc01      	bgt.n	d73d8 <_ZN9USBSerial5writeEh+0x16>
   d73d4:	7c60      	ldrb	r0, [r4, #17]
   d73d6:	b120      	cbz	r0, d73e2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d73d8:	7c20      	ldrb	r0, [r4, #16]
   d73da:	f7ff fb6d 	bl	d6ab8 <HAL_USB_USART_Send_Data>
   d73de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d73e2:	b002      	add	sp, #8
   d73e4:	bd10      	pop	{r4, pc}

000d73e6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d73e6:	7c00      	ldrb	r0, [r0, #16]
   d73e8:	f7ff bb6e 	b.w	d6ac8 <HAL_USB_USART_Flush_Data>

000d73ec <_ZN9USBSerialD0Ev>:
   d73ec:	b510      	push	{r4, lr}
   d73ee:	2114      	movs	r1, #20
   d73f0:	4604      	mov	r4, r0
   d73f2:	f000 fdaa 	bl	d7f4a <_ZdlPvj>
   d73f6:	4620      	mov	r0, r4
   d73f8:	bd10      	pop	{r4, pc}
	...

000d73fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d73fc:	b510      	push	{r4, lr}
   d73fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7402:	4604      	mov	r4, r0
   d7404:	4608      	mov	r0, r1
   d7406:	2100      	movs	r1, #0
   d7408:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d740c:	4b04      	ldr	r3, [pc, #16]	; (d7420 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d740e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7410:	2301      	movs	r3, #1
  _serial = serial;
   d7412:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7414:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7416:	4611      	mov	r1, r2
   d7418:	f7ff fb26 	bl	d6a68 <HAL_USB_USART_Init>
}
   d741c:	4620      	mov	r0, r4
   d741e:	bd10      	pop	{r4, pc}
   d7420:	000d9464 	.word	0x000d9464

000d7424 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7424:	7c00      	ldrb	r0, [r0, #16]
   d7426:	2200      	movs	r2, #0
   d7428:	f7ff bb26 	b.w	d6a78 <HAL_USB_USART_Begin>

000d742c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d742c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d742e:	2214      	movs	r2, #20
{
   d7430:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7432:	2100      	movs	r1, #0
   d7434:	f001 fb34 	bl	d8aa0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7438:	4620      	mov	r0, r4
   d743a:	bd10      	pop	{r4, pc}

000d743c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d743c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d743e:	4c10      	ldr	r4, [pc, #64]	; (d7480 <_Z16_fetch_usbserialv+0x44>)
{
   d7440:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7442:	a803      	add	r0, sp, #12
   d7444:	f7ff fff2 	bl	d742c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7448:	7821      	ldrb	r1, [r4, #0]
   d744a:	f3bf 8f5b 	dmb	ish
   d744e:	f011 0101 	ands.w	r1, r1, #1
   d7452:	d111      	bne.n	d7478 <_Z16_fetch_usbserialv+0x3c>
   d7454:	4620      	mov	r0, r4
   d7456:	9101      	str	r1, [sp, #4]
   d7458:	f7fc fe23 	bl	d40a2 <__cxa_guard_acquire>
   d745c:	9901      	ldr	r1, [sp, #4]
   d745e:	b158      	cbz	r0, d7478 <_Z16_fetch_usbserialv+0x3c>
   d7460:	aa03      	add	r2, sp, #12
   d7462:	4808      	ldr	r0, [pc, #32]	; (d7484 <_Z16_fetch_usbserialv+0x48>)
   d7464:	f7ff ffca 	bl	d73fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7468:	4620      	mov	r0, r4
   d746a:	f7fc fe1f 	bl	d40ac <__cxa_guard_release>
   d746e:	4a06      	ldr	r2, [pc, #24]	; (d7488 <_Z16_fetch_usbserialv+0x4c>)
   d7470:	4906      	ldr	r1, [pc, #24]	; (d748c <_Z16_fetch_usbserialv+0x50>)
   d7472:	4804      	ldr	r0, [pc, #16]	; (d7484 <_Z16_fetch_usbserialv+0x48>)
   d7474:	f000 fd64 	bl	d7f40 <__aeabi_atexit>
	return _usbserial;
}
   d7478:	4802      	ldr	r0, [pc, #8]	; (d7484 <_Z16_fetch_usbserialv+0x48>)
   d747a:	b008      	add	sp, #32
   d747c:	bd10      	pop	{r4, pc}
   d747e:	bf00      	nop
   d7480:	2003e6d0 	.word	0x2003e6d0
   d7484:	2003e6d4 	.word	0x2003e6d4
   d7488:	2003de40 	.word	0x2003de40
   d748c:	000d7385 	.word	0x000d7385

000d7490 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7490:	4770      	bx	lr

000d7492 <_ZN9IPAddressD0Ev>:
   d7492:	b510      	push	{r4, lr}
   d7494:	2118      	movs	r1, #24
   d7496:	4604      	mov	r4, r0
   d7498:	f000 fd57 	bl	d7f4a <_ZdlPvj>
   d749c:	4620      	mov	r0, r4
   d749e:	bd10      	pop	{r4, pc}

000d74a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d74a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d74a2:	7d03      	ldrb	r3, [r0, #20]
   d74a4:	2b06      	cmp	r3, #6
{
   d74a6:	b08d      	sub	sp, #52	; 0x34
   d74a8:	460e      	mov	r6, r1
   d74aa:	f100 0704 	add.w	r7, r0, #4
   d74ae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d74b2:	d012      	beq.n	d74da <_ZNK9IPAddress7printToER5Print+0x3a>
   d74b4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d74b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d74bc:	220a      	movs	r2, #10
   d74be:	4630      	mov	r0, r6
   d74c0:	f000 fa1e 	bl	d7900 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d74c4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d74c6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d74c8:	d019      	beq.n	d74fe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d74ca:	2c00      	cmp	r4, #0
   d74cc:	d0f4      	beq.n	d74b8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d74ce:	212e      	movs	r1, #46	; 0x2e
   d74d0:	4630      	mov	r0, r6
   d74d2:	f000 fa06 	bl	d78e2 <_ZN5Print5printEc>
   d74d6:	4404      	add	r4, r0
   d74d8:	e7ee      	b.n	d74b8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d74da:	232f      	movs	r3, #47	; 0x2f
   d74dc:	466a      	mov	r2, sp
   d74de:	4639      	mov	r1, r7
   d74e0:	200a      	movs	r0, #10
		buf[0] = 0;
   d74e2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d74e6:	f7ff fbb7 	bl	d6c58 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d74ea:	4668      	mov	r0, sp
   d74ec:	f001 fb04 	bl	d8af8 <strlen>
   d74f0:	6833      	ldr	r3, [r6, #0]
   d74f2:	4602      	mov	r2, r0
   d74f4:	68db      	ldr	r3, [r3, #12]
   d74f6:	4669      	mov	r1, sp
   d74f8:	4630      	mov	r0, r6
   d74fa:	4798      	blx	r3
   d74fc:	4604      	mov	r4, r0
    }
    return n;
}
   d74fe:	4620      	mov	r0, r4
   d7500:	b00d      	add	sp, #52	; 0x34
   d7502:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7504 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7504:	b510      	push	{r4, lr}
   d7506:	4b05      	ldr	r3, [pc, #20]	; (d751c <_ZN9IPAddressC1Ev+0x18>)
   d7508:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d750a:	2211      	movs	r2, #17
   d750c:	f840 3b04 	str.w	r3, [r0], #4
   d7510:	2100      	movs	r1, #0
   d7512:	f001 fac5 	bl	d8aa0 <memset>
}
   d7516:	4620      	mov	r0, r4
   d7518:	bd10      	pop	{r4, pc}
   d751a:	bf00      	nop
   d751c:	000d9494 	.word	0x000d9494

000d7520 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7520:	4603      	mov	r3, r0
   d7522:	4a07      	ldr	r2, [pc, #28]	; (d7540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7524:	b510      	push	{r4, lr}
   d7526:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d752a:	f101 0210 	add.w	r2, r1, #16
   d752e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7532:	f843 4b04 	str.w	r4, [r3], #4
   d7536:	4291      	cmp	r1, r2
   d7538:	d1f9      	bne.n	d752e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d753a:	780a      	ldrb	r2, [r1, #0]
   d753c:	701a      	strb	r2, [r3, #0]
}
   d753e:	bd10      	pop	{r4, pc}
   d7540:	000d9494 	.word	0x000d9494

000d7544 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7544:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7546:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d754a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d754e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7552:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7556:	2304      	movs	r3, #4
   d7558:	6041      	str	r1, [r0, #4]
   d755a:	7503      	strb	r3, [r0, #20]
}
   d755c:	bd10      	pop	{r4, pc}

000d755e <_ZN9IPAddressaSEPKh>:
{
   d755e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7560:	78cb      	ldrb	r3, [r1, #3]
   d7562:	9300      	str	r3, [sp, #0]
   d7564:	788b      	ldrb	r3, [r1, #2]
   d7566:	784a      	ldrb	r2, [r1, #1]
   d7568:	7809      	ldrb	r1, [r1, #0]
   d756a:	f7ff ffeb 	bl	d7544 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d756e:	b002      	add	sp, #8
   d7570:	bd10      	pop	{r4, pc}

000d7572 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d7572:	b510      	push	{r4, lr}
      if (_M_manager)
   d7574:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7576:	4604      	mov	r4, r0
      if (_M_manager)
   d7578:	b113      	cbz	r3, d7580 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d757a:	2203      	movs	r2, #3
   d757c:	4601      	mov	r1, r0
   d757e:	4798      	blx	r3
    }
   d7580:	4620      	mov	r0, r4
   d7582:	bd10      	pop	{r4, pc}

000d7584 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7584:	4b01      	ldr	r3, [pc, #4]	; (d758c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7586:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7588:	4770      	bx	lr
   d758a:	bf00      	nop
   d758c:	2003dddc 	.word	0x2003dddc

000d7590 <serialEventRun>:
{
   d7590:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7592:	4b0b      	ldr	r3, [pc, #44]	; (d75c0 <serialEventRun+0x30>)
   d7594:	b143      	cbz	r3, d75a8 <serialEventRun+0x18>
   d7596:	f7ff ff51 	bl	d743c <_Z16_fetch_usbserialv>
   d759a:	6803      	ldr	r3, [r0, #0]
   d759c:	691b      	ldr	r3, [r3, #16]
   d759e:	4798      	blx	r3
   d75a0:	2800      	cmp	r0, #0
   d75a2:	dd01      	ble.n	d75a8 <serialEventRun+0x18>
        serialEvent();
   d75a4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d75a8:	4b06      	ldr	r3, [pc, #24]	; (d75c4 <serialEventRun+0x34>)
   d75aa:	b143      	cbz	r3, d75be <serialEventRun+0x2e>
   d75ac:	f7ff febe 	bl	d732c <_Z22__fetch_global_Serial1v>
   d75b0:	6803      	ldr	r3, [r0, #0]
   d75b2:	691b      	ldr	r3, [r3, #16]
   d75b4:	4798      	blx	r3
   d75b6:	2800      	cmp	r0, #0
   d75b8:	dd01      	ble.n	d75be <serialEventRun+0x2e>
        serialEvent1();
   d75ba:	f3af 8000 	nop.w
}
   d75be:	bd08      	pop	{r3, pc}
	...

000d75c8 <_post_loop>:
{
   d75c8:	b508      	push	{r3, lr}
	serialEventRun();
   d75ca:	f7ff ffe1 	bl	d7590 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d75ce:	f7ff fb6b 	bl	d6ca8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d75d2:	4b01      	ldr	r3, [pc, #4]	; (d75d8 <_post_loop+0x10>)
   d75d4:	6018      	str	r0, [r3, #0]
}
   d75d6:	bd08      	pop	{r3, pc}
   d75d8:	2003e7e4 	.word	0x2003e7e4

000d75dc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d75dc:	4802      	ldr	r0, [pc, #8]	; (d75e8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d75de:	4a03      	ldr	r2, [pc, #12]	; (d75ec <_Z33system_initialize_user_backup_ramv+0x10>)
   d75e0:	4903      	ldr	r1, [pc, #12]	; (d75f0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d75e2:	1a12      	subs	r2, r2, r0
   d75e4:	f001 ba4e 	b.w	d8a84 <memcpy>
   d75e8:	2003f400 	.word	0x2003f400
   d75ec:	2003f404 	.word	0x2003f404
   d75f0:	000d9530 	.word	0x000d9530

000d75f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d75f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d75f6:	2300      	movs	r3, #0
   d75f8:	9300      	str	r3, [sp, #0]
   d75fa:	461a      	mov	r2, r3
   d75fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7600:	f7ff fc84 	bl	d6f0c <system_ctrl_set_result>
}
   d7604:	b003      	add	sp, #12
   d7606:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d760c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d760c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d760e:	8843      	ldrh	r3, [r0, #2]
   d7610:	2b0a      	cmp	r3, #10
   d7612:	d008      	beq.n	d7626 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7614:	2b50      	cmp	r3, #80	; 0x50
   d7616:	d10b      	bne.n	d7630 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7618:	4b09      	ldr	r3, [pc, #36]	; (d7640 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d761a:	681b      	ldr	r3, [r3, #0]
   d761c:	b14b      	cbz	r3, d7632 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d761e:	b003      	add	sp, #12
   d7620:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7624:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7626:	f7ff ffe5 	bl	d75f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d762a:	b003      	add	sp, #12
   d762c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7630:	2300      	movs	r3, #0
   d7632:	9300      	str	r3, [sp, #0]
   d7634:	461a      	mov	r2, r3
   d7636:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d763a:	f7ff fc67 	bl	d6f0c <system_ctrl_set_result>
}
   d763e:	e7f4      	b.n	d762a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7640:	2003e6ec 	.word	0x2003e6ec

000d7644 <module_user_init_hook>:
{
   d7644:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7646:	4c12      	ldr	r4, [pc, #72]	; (d7690 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7648:	4812      	ldr	r0, [pc, #72]	; (d7694 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d764a:	4d13      	ldr	r5, [pc, #76]	; (d7698 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d764c:	2100      	movs	r1, #0
   d764e:	f7ff fc91 	bl	d6f74 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7652:	6823      	ldr	r3, [r4, #0]
   d7654:	42ab      	cmp	r3, r5
   d7656:	4b11      	ldr	r3, [pc, #68]	; (d769c <module_user_init_hook+0x58>)
   d7658:	bf0c      	ite	eq
   d765a:	2201      	moveq	r2, #1
   d765c:	2200      	movne	r2, #0
   d765e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7660:	d002      	beq.n	d7668 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7662:	f7ff ffbb 	bl	d75dc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7666:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7668:	f7ff fb0e 	bl	d6c88 <HAL_RNG_GetRandomNumber>
   d766c:	4604      	mov	r4, r0
    srand(seed);
   d766e:	f001 fa1f 	bl	d8ab0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7672:	4b0b      	ldr	r3, [pc, #44]	; (d76a0 <module_user_init_hook+0x5c>)
   d7674:	b113      	cbz	r3, d767c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7676:	4620      	mov	r0, r4
   d7678:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d767c:	2100      	movs	r1, #0
   d767e:	4808      	ldr	r0, [pc, #32]	; (d76a0 <module_user_init_hook+0x5c>)
   d7680:	f7ff fbc2 	bl	d6e08 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7688:	4806      	ldr	r0, [pc, #24]	; (d76a4 <module_user_init_hook+0x60>)
   d768a:	2100      	movs	r1, #0
   d768c:	f7ff bc34 	b.w	d6ef8 <system_ctrl_set_app_request_handler>
   d7690:	2003f400 	.word	0x2003f400
   d7694:	000d7585 	.word	0x000d7585
   d7698:	9a271c1e 	.word	0x9a271c1e
   d769c:	2003e6e8 	.word	0x2003e6e8
   d76a0:	00000000 	.word	0x00000000
   d76a4:	000d760d 	.word	0x000d760d

000d76a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d76a8:	b510      	push	{r4, lr}
   d76aa:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d76ac:	f7ff ff61 	bl	d7572 <_ZNSt14_Function_baseD1Ev>
   d76b0:	4620      	mov	r0, r4
   d76b2:	bd10      	pop	{r4, pc}

000d76b4 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d76b4:	b510      	push	{r4, lr}
   d76b6:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d76b8:	f7ff fb76 	bl	d6da8 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d76bc:	4284      	cmp	r4, r0
   d76be:	d008      	beq.n	d76d2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d76c0:	b11c      	cbz	r4, d76ca <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d76c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d76c6:	f7ff bb5f 	b.w	d6d88 <LED_Signaling_Start>
}
   d76ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d76ce:	f7ff bb63 	b.w	d6d98 <LED_Signaling_Stop>
}
   d76d2:	bd10      	pop	{r4, pc}

000d76d4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d76d4:	b570      	push	{r4, r5, r6, lr}
   d76d6:	4605      	mov	r5, r0
   d76d8:	460e      	mov	r6, r1
   d76da:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d76dc:	f7ff fb64 	bl	d6da8 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d76e0:	b150      	cbz	r0, d76f8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d76e2:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d76e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d76ea:	f7ff fb45 	bl	d6d78 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d76ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d76f2:	20e7      	movs	r0, #231	; 0xe7
   d76f4:	f7ff bb60 	b.w	d6db8 <LED_On>
}
   d76f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76fc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d76fc:	4803      	ldr	r0, [pc, #12]	; (d770c <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
   d76fe:	4a04      	ldr	r2, [pc, #16]	; (d7710 <_GLOBAL__sub_I_RGB+0x14>)
   d7700:	4904      	ldr	r1, [pc, #16]	; (d7714 <_GLOBAL__sub_I_RGB+0x18>)
   d7702:	2300      	movs	r3, #0
   d7704:	6083      	str	r3, [r0, #8]
   d7706:	f000 bc1b 	b.w	d7f40 <__aeabi_atexit>
   d770a:	bf00      	nop
   d770c:	2003e6f0 	.word	0x2003e6f0
   d7710:	2003de40 	.word	0x2003de40
   d7714:	000d76a9 	.word	0x000d76a9

000d7718 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7718:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   d771a:	b510      	push	{r4, lr}
   d771c:	b90a      	cbnz	r2, d7722 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   d771e:	f000 fc18 	bl	d7f52 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   d7722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7726:	68c3      	ldr	r3, [r0, #12]
   d7728:	4718      	bx	r3

000d772a <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d772a:	f7ff bb0d 	b.w	d6d48 <HAL_Interrupts_Disable_All>

000d772e <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d772e:	f7ff bb03 	b.w	d6d38 <HAL_Interrupts_Enable_All>

000d7732 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d7732:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7734:	2300      	movs	r3, #0
   d7736:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7738:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d773a:	4604      	mov	r4, r0
   d773c:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d773e:	b12b      	cbz	r3, d774c <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7740:	2202      	movs	r2, #2
   d7742:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7744:	68eb      	ldr	r3, [r5, #12]
   d7746:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7748:	68ab      	ldr	r3, [r5, #8]
   d774a:	60a3      	str	r3, [r4, #8]
    }
   d774c:	4620      	mov	r0, r4
   d774e:	bd38      	pop	{r3, r4, r5, pc}

000d7750 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   d7750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   d7752:	4d0c      	ldr	r5, [pc, #48]	; (d7784 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
   d7754:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
{
   d7758:	4606      	mov	r6, r0
   d775a:	460f      	mov	r7, r1
    delete handlers[pin];
   d775c:	b134      	cbz	r4, d776c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   d775e:	4620      	mov	r0, r4
   d7760:	f7ff ff07 	bl	d7572 <_ZNSt14_Function_baseD1Ev>
   d7764:	2110      	movs	r1, #16
   d7766:	4620      	mov	r0, r4
   d7768:	f000 fbef 	bl	d7f4a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   d776c:	2010      	movs	r0, #16
   d776e:	f7fc fc92 	bl	d4096 <_Znwj>
   d7772:	4604      	mov	r4, r0
   d7774:	b110      	cbz	r0, d777c <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
   d7776:	4639      	mov	r1, r7
   d7778:	f7ff ffdb 	bl	d7732 <_ZNSt8functionIFvvEEC1ERKS1_>
   d777c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
}
   d7780:	4620      	mov	r0, r4
   d7782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7784:	2003e700 	.word	0x2003e700

000d7788 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
{
   d7788:	b5f0      	push	{r4, r5, r6, r7, lr}
   d778a:	b087      	sub	sp, #28
   d778c:	4605      	mov	r5, r0
   d778e:	9103      	str	r1, [sp, #12]
   d7790:	4617      	mov	r7, r2
   d7792:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   d7794:	f7ff fac8 	bl	d6d28 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   d7798:	9903      	ldr	r1, [sp, #12]
   d779a:	4628      	mov	r0, r5
   d779c:	f7ff ffd8 	bl	d7750 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   d77a0:	4604      	mov	r4, r0
   d77a2:	b1e8      	cbz	r0, d77e0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {0};
   d77a4:	2100      	movs	r1, #0
  if (priority >= 0) {
   d77a6:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d77a8:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {0};
   d77ac:	f8ad 1015 	strh.w	r1, [sp, #21]
   d77b0:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d77b4:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   d77b8:	bfa2      	ittt	ge
   d77ba:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   d77bc:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   d77c0:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d77c4:	9100      	str	r1, [sp, #0]
   d77c6:	4602      	mov	r2, r0
   d77c8:	4907      	ldr	r1, [pc, #28]	; (d77e8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d77ca:	bfa8      	it	ge
   d77cc:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d77d0:	463b      	mov	r3, r7
   d77d2:	4628      	mov	r0, r5
   d77d4:	f7ff faa0 	bl	d6d18 <HAL_Interrupts_Attach>
   d77d8:	b110      	cbz	r0, d77e0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   d77da:	2000      	movs	r0, #0
}
   d77dc:	b007      	add	sp, #28
   d77de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   d77e0:	1e20      	subs	r0, r4, #0
   d77e2:	bf18      	it	ne
   d77e4:	2001      	movne	r0, #1
   d77e6:	e7f9      	b.n	d77dc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   d77e8:	000d7719 	.word	0x000d7719

000d77ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d77ec:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77ee:	2000      	movs	r0, #0
   d77f0:	f7ff fb02 	bl	d6df8 <spark_sync_time_pending>
   d77f4:	b128      	cbz	r0, d7802 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d77f6:	f7ff faf7 	bl	d6de8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77fa:	f080 0001 	eor.w	r0, r0, #1
   d77fe:	b2c0      	uxtb	r0, r0
    }
   d7800:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7802:	2001      	movs	r0, #1
   d7804:	e7fc      	b.n	d7800 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7806 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7806:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7808:	2000      	movs	r0, #0
   d780a:	f7ff fa55 	bl	d6cb8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d780e:	4604      	mov	r4, r0
   d7810:	b9a0      	cbnz	r0, d783c <_ZN9TimeClass7isValidEv+0x36>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7812:	f7ff fb51 	bl	d6eb8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7816:	2801      	cmp	r0, #1
   d7818:	d110      	bne.n	d783c <_ZN9TimeClass7isValidEv+0x36>
   d781a:	4620      	mov	r0, r4
   d781c:	f7ff fb64 	bl	d6ee8 <system_thread_get_state>
   d7820:	b960      	cbnz	r0, d783c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7822:	f7ff ffe3 	bl	d77ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7826:	b910      	cbnz	r0, d782e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7828:	f7ff fad6 	bl	d6dd8 <spark_process>
        while (_while() && !_condition()) {
   d782c:	e7f9      	b.n	d7822 <_ZN9TimeClass7isValidEv+0x1c>
   d782e:	f7ff ffdd 	bl	d77ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7836:	2000      	movs	r0, #0
   d7838:	f7ff ba3e 	b.w	d6cb8 <hal_rtc_time_is_valid>
}
   d783c:	4620      	mov	r0, r4
   d783e:	bd10      	pop	{r4, pc}

000d7840 <_ZN9TimeClass3nowEv>:
{
   d7840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7842:	f7ff ffe0 	bl	d7806 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7846:	2210      	movs	r2, #16
   d7848:	2100      	movs	r1, #0
   d784a:	4668      	mov	r0, sp
   d784c:	f001 f928 	bl	d8aa0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7850:	2100      	movs	r1, #0
   d7852:	4668      	mov	r0, sp
   d7854:	f7ff fa38 	bl	d6cc8 <hal_rtc_get_time>
}
   d7858:	9800      	ldr	r0, [sp, #0]
   d785a:	b005      	add	sp, #20
   d785c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7860 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7860:	4b02      	ldr	r3, [pc, #8]	; (d786c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7862:	681a      	ldr	r2, [r3, #0]
   d7864:	4b02      	ldr	r3, [pc, #8]	; (d7870 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7866:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7868:	4770      	bx	lr
   d786a:	bf00      	nop
   d786c:	2003ddd8 	.word	0x2003ddd8
   d7870:	2003e790 	.word	0x2003e790

000d7874 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7874:	4b01      	ldr	r3, [pc, #4]	; (d787c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7876:	4a02      	ldr	r2, [pc, #8]	; (d7880 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7878:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d787a:	4770      	bx	lr
   d787c:	2003e794 	.word	0x2003e794
   d7880:	000d94bc 	.word	0x000d94bc

000d7884 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7884:	2100      	movs	r1, #0
   d7886:	f7ff bb27 	b.w	d6ed8 <system_delay_ms>

000d788a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d788a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d788c:	4606      	mov	r6, r0
   d788e:	460d      	mov	r5, r1
  size_t n = 0;
   d7890:	188f      	adds	r7, r1, r2
   d7892:	2400      	movs	r4, #0
  while (size--) {
   d7894:	42bd      	cmp	r5, r7
   d7896:	d00c      	beq.n	d78b2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7898:	6833      	ldr	r3, [r6, #0]
   d789a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d789e:	689b      	ldr	r3, [r3, #8]
   d78a0:	4630      	mov	r0, r6
   d78a2:	4798      	blx	r3
     if (chunk>=0)
   d78a4:	1e03      	subs	r3, r0, #0
   d78a6:	db01      	blt.n	d78ac <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d78a8:	441c      	add	r4, r3
  while (size--) {
   d78aa:	e7f3      	b.n	d7894 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d78ac:	2c00      	cmp	r4, #0
   d78ae:	bf08      	it	eq
   d78b0:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d78b2:	4620      	mov	r0, r4
   d78b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78b6 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d78b6:	b513      	push	{r0, r1, r4, lr}
   d78b8:	4604      	mov	r4, r0
    }
   d78ba:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d78bc:	b159      	cbz	r1, d78d6 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d78be:	9101      	str	r1, [sp, #4]
   d78c0:	f001 f91a 	bl	d8af8 <strlen>
   d78c4:	6823      	ldr	r3, [r4, #0]
   d78c6:	9901      	ldr	r1, [sp, #4]
   d78c8:	68db      	ldr	r3, [r3, #12]
   d78ca:	4602      	mov	r2, r0
   d78cc:	4620      	mov	r0, r4
    }
   d78ce:	b002      	add	sp, #8
   d78d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d78d4:	4718      	bx	r3
    }
   d78d6:	b002      	add	sp, #8
   d78d8:	bd10      	pop	{r4, pc}

000d78da <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d78da:	b508      	push	{r3, lr}
  return write(str);
   d78dc:	f7ff ffeb 	bl	d78b6 <_ZN5Print5writeEPKc>
}
   d78e0:	bd08      	pop	{r3, pc}

000d78e2 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d78e2:	6803      	ldr	r3, [r0, #0]
   d78e4:	689b      	ldr	r3, [r3, #8]
   d78e6:	4718      	bx	r3

000d78e8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d78e8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d78ea:	210d      	movs	r1, #13
{
   d78ec:	4605      	mov	r5, r0
  size_t n = print('\r');
   d78ee:	f7ff fff8 	bl	d78e2 <_ZN5Print5printEc>
  n += print('\n');
   d78f2:	210a      	movs	r1, #10
  size_t n = print('\r');
   d78f4:	4604      	mov	r4, r0
  n += print('\n');
   d78f6:	4628      	mov	r0, r5
   d78f8:	f7ff fff3 	bl	d78e2 <_ZN5Print5printEc>
  return n;
}
   d78fc:	4420      	add	r0, r4
   d78fe:	bd38      	pop	{r3, r4, r5, pc}

000d7900 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7900:	b530      	push	{r4, r5, lr}
   d7902:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7904:	2300      	movs	r3, #0
   d7906:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d790a:	2a01      	cmp	r2, #1
   d790c:	bf98      	it	ls
   d790e:	220a      	movls	r2, #10
   d7910:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7912:	460d      	mov	r5, r1
   d7914:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7918:	fb01 5312 	mls	r3, r1, r2, r5
   d791c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7920:	2b09      	cmp	r3, #9
   d7922:	bf94      	ite	ls
   d7924:	3330      	addls	r3, #48	; 0x30
   d7926:	3337      	addhi	r3, #55	; 0x37
   d7928:	b2db      	uxtb	r3, r3
  } while(n);
   d792a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d792c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7930:	d9ef      	bls.n	d7912 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7932:	4621      	mov	r1, r4
   d7934:	f7ff ffbf 	bl	d78b6 <_ZN5Print5writeEPKc>
}
   d7938:	b00b      	add	sp, #44	; 0x2c
   d793a:	bd30      	pop	{r4, r5, pc}

000d793c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d793c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7940:	ec55 4b10 	vmov	r4, r5, d0
   d7944:	4606      	mov	r6, r0
   d7946:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7948:	ee10 2a10 	vmov	r2, s0
   d794c:	ee10 0a10 	vmov	r0, s0
   d7950:	462b      	mov	r3, r5
   d7952:	4629      	mov	r1, r5
   d7954:	f000 ffda 	bl	d890c <__aeabi_dcmpun>
   d7958:	b140      	cbz	r0, d796c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d795a:	4953      	ldr	r1, [pc, #332]	; (d7aa8 <_ZN5Print10printFloatEdh+0x16c>)
   d795c:	4630      	mov	r0, r6
   d795e:	f7ff ffaa 	bl	d78b6 <_ZN5Print5writeEPKc>
   d7962:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7964:	4650      	mov	r0, sl
   d7966:	b003      	add	sp, #12
   d7968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d796c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7970:	4b4e      	ldr	r3, [pc, #312]	; (d7aac <_ZN5Print10printFloatEdh+0x170>)
   d7972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7976:	4620      	mov	r0, r4
   d7978:	4649      	mov	r1, r9
   d797a:	f000 ffc7 	bl	d890c <__aeabi_dcmpun>
   d797e:	b948      	cbnz	r0, d7994 <_ZN5Print10printFloatEdh+0x58>
   d7980:	4b4a      	ldr	r3, [pc, #296]	; (d7aac <_ZN5Print10printFloatEdh+0x170>)
   d7982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7986:	4620      	mov	r0, r4
   d7988:	4649      	mov	r1, r9
   d798a:	f000 ffa1 	bl	d88d0 <__aeabi_dcmple>
   d798e:	b908      	cbnz	r0, d7994 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7990:	4947      	ldr	r1, [pc, #284]	; (d7ab0 <_ZN5Print10printFloatEdh+0x174>)
   d7992:	e7e3      	b.n	d795c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7994:	4b47      	ldr	r3, [pc, #284]	; (d7ab4 <_ZN5Print10printFloatEdh+0x178>)
   d7996:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d799a:	4620      	mov	r0, r4
   d799c:	4629      	mov	r1, r5
   d799e:	f000 ffab 	bl	d88f8 <__aeabi_dcmpgt>
   d79a2:	b108      	cbz	r0, d79a8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d79a4:	4944      	ldr	r1, [pc, #272]	; (d7ab8 <_ZN5Print10printFloatEdh+0x17c>)
   d79a6:	e7d9      	b.n	d795c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d79a8:	4b44      	ldr	r3, [pc, #272]	; (d7abc <_ZN5Print10printFloatEdh+0x180>)
   d79aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d79ae:	4620      	mov	r0, r4
   d79b0:	4629      	mov	r1, r5
   d79b2:	f000 ff83 	bl	d88bc <__aeabi_dcmplt>
   d79b6:	2800      	cmp	r0, #0
   d79b8:	d1f4      	bne.n	d79a4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d79ba:	2200      	movs	r2, #0
   d79bc:	2300      	movs	r3, #0
   d79be:	4620      	mov	r0, r4
   d79c0:	4629      	mov	r1, r5
   d79c2:	f000 ff7b 	bl	d88bc <__aeabi_dcmplt>
   d79c6:	b1d0      	cbz	r0, d79fe <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d79c8:	212d      	movs	r1, #45	; 0x2d
   d79ca:	4630      	mov	r0, r6
   d79cc:	f7ff ff89 	bl	d78e2 <_ZN5Print5printEc>
     number = -number;
   d79d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d79d4:	4682      	mov	sl, r0
     number = -number;
   d79d6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d79d8:	4939      	ldr	r1, [pc, #228]	; (d7ac0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d79da:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7ac8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d79de:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d79e2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d79e4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d79e8:	fa5f f38b 	uxtb.w	r3, fp
   d79ec:	429f      	cmp	r7, r3
   d79ee:	d908      	bls.n	d7a02 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d79f0:	4642      	mov	r2, r8
   d79f2:	464b      	mov	r3, r9
   d79f4:	f000 fe1a 	bl	d862c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d79f8:	f10b 0b01 	add.w	fp, fp, #1
   d79fc:	e7f4      	b.n	d79e8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d79fe:	4682      	mov	sl, r0
   d7a00:	e7ea      	b.n	d79d8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7a02:	4622      	mov	r2, r4
   d7a04:	462b      	mov	r3, r5
   d7a06:	f000 fb31 	bl	d806c <__adddf3>
   d7a0a:	460d      	mov	r5, r1
   d7a0c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7a0e:	f000 ffbb 	bl	d8988 <__aeabi_d2uiz>
   d7a12:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7a14:	f000 fc66 	bl	d82e4 <__aeabi_ui2d>
   d7a18:	4602      	mov	r2, r0
   d7a1a:	460b      	mov	r3, r1
   d7a1c:	4620      	mov	r0, r4
   d7a1e:	4629      	mov	r1, r5
   d7a20:	f000 fb22 	bl	d8068 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d7a24:	220a      	movs	r2, #10
   d7a26:	4604      	mov	r4, r0
   d7a28:	460d      	mov	r5, r1
   d7a2a:	4630      	mov	r0, r6
   d7a2c:	4641      	mov	r1, r8
   d7a2e:	f7ff ff67 	bl	d7900 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7a32:	4482      	add	sl, r0
  if (digits > 0) {
   d7a34:	b127      	cbz	r7, d7a40 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7a36:	4923      	ldr	r1, [pc, #140]	; (d7ac4 <_ZN5Print10printFloatEdh+0x188>)
   d7a38:	4630      	mov	r0, r6
   d7a3a:	f7ff ff3c 	bl	d78b6 <_ZN5Print5writeEPKc>
    n += print(".");
   d7a3e:	4482      	add	sl, r0
    remainder *= 10.0;
   d7a40:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7ac8 <_ZN5Print10printFloatEdh+0x18c>
   d7a44:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7a48:	3f01      	subs	r7, #1
   d7a4a:	b2ff      	uxtb	r7, r7
   d7a4c:	2fff      	cmp	r7, #255	; 0xff
   d7a4e:	d089      	beq.n	d7964 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7a50:	4642      	mov	r2, r8
   d7a52:	464b      	mov	r3, r9
   d7a54:	4620      	mov	r0, r4
   d7a56:	4629      	mov	r1, r5
   d7a58:	f000 fcbe 	bl	d83d8 <__aeabi_dmul>
   d7a5c:	4604      	mov	r4, r0
   d7a5e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7a60:	f000 ff6a 	bl	d8938 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7a64:	f1b0 0b00 	subs.w	fp, r0, #0
   d7a68:	da1a      	bge.n	d7aa0 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7a6a:	212d      	movs	r1, #45	; 0x2d
   d7a6c:	4630      	mov	r0, r6
   d7a6e:	f7ff ff38 	bl	d78e2 <_ZN5Print5printEc>
            val = -n;
   d7a72:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7a76:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7a78:	220a      	movs	r2, #10
   d7a7a:	4630      	mov	r0, r6
   d7a7c:	9301      	str	r3, [sp, #4]
   d7a7e:	f7ff ff3f 	bl	d7900 <_ZN5Print11printNumberEmh>
   d7a82:	9b01      	ldr	r3, [sp, #4]
   d7a84:	4418      	add	r0, r3
    n += print(toPrint);
   d7a86:	4482      	add	sl, r0
    remainder -= toPrint;
   d7a88:	4658      	mov	r0, fp
   d7a8a:	f000 fc3b 	bl	d8304 <__aeabi_i2d>
   d7a8e:	4602      	mov	r2, r0
   d7a90:	460b      	mov	r3, r1
   d7a92:	4620      	mov	r0, r4
   d7a94:	4629      	mov	r1, r5
   d7a96:	f000 fae7 	bl	d8068 <__aeabi_dsub>
   d7a9a:	4604      	mov	r4, r0
   d7a9c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7a9e:	e7d3      	b.n	d7a48 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7aa0:	4659      	mov	r1, fp
        size_t t = 0;
   d7aa2:	2300      	movs	r3, #0
   d7aa4:	e7e8      	b.n	d7a78 <_ZN5Print10printFloatEdh+0x13c>
   d7aa6:	bf00      	nop
   d7aa8:	000d94c0 	.word	0x000d94c0
   d7aac:	7fefffff 	.word	0x7fefffff
   d7ab0:	000d94c4 	.word	0x000d94c4
   d7ab4:	41efffff 	.word	0x41efffff
   d7ab8:	000d94c8 	.word	0x000d94c8
   d7abc:	c1efffff 	.word	0xc1efffff
   d7ac0:	3fe00000 	.word	0x3fe00000
   d7ac4:	000d94cc 	.word	0x000d94cc
   d7ac8:	40240000 	.word	0x40240000

000d7acc <_ZN5Print7printlnEdi>:
{
   d7acc:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d7ace:	b2c9      	uxtb	r1, r1
{
   d7ad0:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d7ad2:	f7ff ff33 	bl	d793c <_ZN5Print10printFloatEdh>
   d7ad6:	4604      	mov	r4, r0
  n += println();
   d7ad8:	4628      	mov	r0, r5
   d7ada:	f7ff ff05 	bl	d78e8 <_ZN5Print7printlnEv>
}
   d7ade:	4420      	add	r0, r4
   d7ae0:	bd38      	pop	{r3, r4, r5, pc}

000d7ae2 <_ZN5Print7printlnEfi>:
{
   d7ae2:	b538      	push	{r3, r4, r5, lr}
   d7ae4:	4604      	mov	r4, r0
   d7ae6:	ee10 0a10 	vmov	r0, s0
   d7aea:	460d      	mov	r5, r1
    return println((double)num, digits);
   d7aec:	f000 fc1c 	bl	d8328 <__aeabi_f2d>
   d7af0:	ec41 0b10 	vmov	d0, r0, r1
   d7af4:	4629      	mov	r1, r5
   d7af6:	4620      	mov	r0, r4
}
   d7af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d7afc:	f7ff bfe6 	b.w	d7acc <_ZN5Print7printlnEdi>

000d7b00 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b04:	b086      	sub	sp, #24
   d7b06:	af00      	add	r7, sp, #0
   d7b08:	4605      	mov	r5, r0
   d7b0a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7b0c:	1d38      	adds	r0, r7, #4
   d7b0e:	2114      	movs	r1, #20
{
   d7b10:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7b12:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7b14:	f7ff fa1e 	bl	d6f54 <vsnprintf>

    if (n<bufsize)
   d7b18:	2813      	cmp	r0, #19
   d7b1a:	d80e      	bhi.n	d7b3a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7b1c:	1d39      	adds	r1, r7, #4
   d7b1e:	4628      	mov	r0, r5
   d7b20:	f7ff fec9 	bl	d78b6 <_ZN5Print5writeEPKc>
   d7b24:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7b26:	b11e      	cbz	r6, d7b30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7b28:	4628      	mov	r0, r5
   d7b2a:	f7ff fedd 	bl	d78e8 <_ZN5Print7printlnEv>
   d7b2e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7b30:	4620      	mov	r0, r4
   d7b32:	3718      	adds	r7, #24
   d7b34:	46bd      	mov	sp, r7
   d7b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7b3a:	f100 0308 	add.w	r3, r0, #8
   d7b3e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7b42:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7b44:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7b48:	4622      	mov	r2, r4
   d7b4a:	1c41      	adds	r1, r0, #1
   d7b4c:	683b      	ldr	r3, [r7, #0]
   d7b4e:	4668      	mov	r0, sp
   d7b50:	f7ff fa00 	bl	d6f54 <vsnprintf>
  return write(str);
   d7b54:	4669      	mov	r1, sp
   d7b56:	4628      	mov	r0, r5
   d7b58:	f7ff fead 	bl	d78b6 <_ZN5Print5writeEPKc>
   d7b5c:	4604      	mov	r4, r0
   d7b5e:	46c5      	mov	sp, r8
   d7b60:	e7e1      	b.n	d7b26 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7b62 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7b62:	b510      	push	{r4, lr}
   d7b64:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7b66:	6800      	ldr	r0, [r0, #0]
   d7b68:	b108      	cbz	r0, d7b6e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7b6a:	f7ff f885 	bl	d6c78 <os_mutex_recursive_destroy>
    }
   d7b6e:	4620      	mov	r0, r4
   d7b70:	bd10      	pop	{r4, pc}
	...

000d7b74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7b74:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7b76:	4c06      	ldr	r4, [pc, #24]	; (d7b90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7b78:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7b7a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7b7c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7b7e:	f7ff f873 	bl	d6c68 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7b82:	4620      	mov	r0, r4
   d7b84:	4a03      	ldr	r2, [pc, #12]	; (d7b94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7b86:	4904      	ldr	r1, [pc, #16]	; (d7b98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7b8c:	f000 b9d8 	b.w	d7f40 <__aeabi_atexit>
   d7b90:	2003e798 	.word	0x2003e798
   d7b94:	2003de40 	.word	0x2003de40
   d7b98:	000d7b63 	.word	0x000d7b63

000d7b9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    void freeWakeupSourceMemory() {
   d7b9c:	b510      	push	{r4, lr}
   d7b9e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7ba0:	6800      	ldr	r0, [r0, #0]
   d7ba2:	b118      	cbz	r0, d7bac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7ba4:	f7ff f9ce 	bl	d6f44 <free>
            wakeupSource_ = nullptr;
   d7ba8:	2300      	movs	r3, #0
   d7baa:	6023      	str	r3, [r4, #0]
    }
   d7bac:	bd10      	pop	{r4, pc}

000d7bae <_ZN11SystemClassD1Ev>:
class SystemClass {
   d7bae:	b510      	push	{r4, lr}
   d7bb0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7bb2:	f7ff fff3 	bl	d7b9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d7bb6:	4620      	mov	r0, r4
   d7bb8:	bd10      	pop	{r4, pc}

000d7bba <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7bba:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7bbc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7bc0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7bc2:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7bc4:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d7bc6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7bca:	f8c0 2006 	str.w	r2, [r0, #6]
   d7bce:	889b      	ldrh	r3, [r3, #4]
   d7bd0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7bd2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7bd4:	f7ff ffe2 	bl	d7b9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d7bd8:	682b      	ldr	r3, [r5, #0]
   d7bda:	b113      	cbz	r3, d7be2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7bdc:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7bde:	2300      	movs	r3, #0
   d7be0:	602b      	str	r3, [r5, #0]
    }
   d7be2:	4620      	mov	r0, r4
   d7be4:	bd38      	pop	{r3, r4, r5, pc}

000d7be6 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   d7be6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7bea:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   d7bec:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d7bee:	b933      	cbnz	r3, d7bfe <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   d7bf0:	b932      	cbnz	r2, d7c00 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   d7bf2:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d7bf6:	6003      	str	r3, [r0, #0]
   d7bf8:	888b      	ldrh	r3, [r1, #4]
   d7bfa:	8083      	strh	r3, [r0, #4]
    }
   d7bfc:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   d7bfe:	b122      	cbz	r2, d7c0a <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d7c00:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   d7c02:	2c01      	cmp	r4, #1
   d7c04:	d003      	beq.n	d7c0e <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   d7c06:	2c04      	cmp	r4, #4
   d7c08:	d006      	beq.n	d7c18 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7c0a:	2204      	movs	r2, #4
   d7c0c:	e005      	b.n	d7c1a <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d7c0e:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d7c10:	814a      	strh	r2, [r1, #10]
   d7c12:	718c      	strb	r4, [r1, #6]
   d7c14:	810b      	strh	r3, [r1, #8]
                    break;
   d7c16:	e7ec      	b.n	d7bf2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d7c18:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7c1a:	810b      	strh	r3, [r1, #8]
   d7c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7c20:	718a      	strb	r2, [r1, #6]
   d7c22:	814b      	strh	r3, [r1, #10]
                    break;
   d7c24:	e7e5      	b.n	d7bf2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

000d7c26 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7c26:	b510      	push	{r4, lr}
   d7c28:	2400      	movs	r4, #0
   d7c2a:	7004      	strb	r4, [r0, #0]
   d7c2c:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d7c2e:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7c30:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d7c34:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d7c36:	dd08      	ble.n	d7c4a <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
   d7c38:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
   d7c3a:	428b      	cmp	r3, r1
   d7c3c:	d904      	bls.n	d7c48 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
   d7c3e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d7c42:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d7c44:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
   d7c46:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
   d7c48:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
   d7c4a:	d101      	bne.n	d7c50 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d7c4c:	2302      	movs	r3, #2
   d7c4e:	e7fa      	b.n	d7c46 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
   d7c50:	8041      	strh	r1, [r0, #2]
   d7c52:	e7f9      	b.n	d7c48 <_ZN11SleepResultC1EiPKtj+0x22>

000d7c54 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c56:	b08b      	sub	sp, #44	; 0x2c
   d7c58:	4616      	mov	r6, r2
   d7c5a:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7c5e:	9301      	str	r3, [sp, #4]
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7c60:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7c64:	9300      	str	r3, [sp, #0]
   d7c66:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7c68:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7c6c:	9702      	str	r7, [sp, #8]
   d7c6e:	4631      	mov	r1, r6
   d7c70:	4628      	mov	r0, r5
   d7c72:	f7ff f955 	bl	d6f20 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d7c76:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7c78:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d7c7a:	462a      	mov	r2, r5
   d7c7c:	a805      	add	r0, sp, #20
   d7c7e:	4d10      	ldr	r5, [pc, #64]	; (d7cc0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d7c80:	f7ff ffd1 	bl	d7c26 <_ZN11SleepResultC1EiPKtj>
   d7c84:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d7c88:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d7c8c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
   d7c90:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d7c94:	4628      	mov	r0, r5
   d7c96:	a907      	add	r1, sp, #28
   d7c98:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d7c9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d7ca0:	9707      	str	r7, [sp, #28]
   d7ca2:	f8ad 7020 	strh.w	r7, [sp, #32]
   d7ca6:	f7ff ff88 	bl	d7bba <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   d7caa:	a807      	add	r0, sp, #28
   d7cac:	f7ff ff76 	bl	d7b9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   d7cb0:	4620      	mov	r0, r4
   d7cb2:	4629      	mov	r1, r5
   d7cb4:	f7ff ff97 	bl	d7be6 <_ZN17SystemSleepResult13toSleepResultEv>
}
   d7cb8:	4620      	mov	r0, r4
   d7cba:	b00b      	add	sp, #44	; 0x2c
   d7cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7cbe:	bf00      	nop
   d7cc0:	2003e79c 	.word	0x2003e79c

000d7cc4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7cc4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7cc6:	4b09      	ldr	r3, [pc, #36]	; (d7cec <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d7cc8:	4c09      	ldr	r4, [pc, #36]	; (d7cf0 <_GLOBAL__sub_I_System+0x2c>)
   d7cca:	2202      	movs	r2, #2
   d7ccc:	2000      	movs	r0, #0
   d7cce:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7cd0:	4b08      	ldr	r3, [pc, #32]	; (d7cf4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7cd2:	6020      	str	r0, [r4, #0]
   d7cd4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7cd6:	71a0      	strb	r0, [r4, #6]
   d7cd8:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d7cda:	f7ff f8f5 	bl	d6ec8 <set_system_mode>
SystemClass System;
   d7cde:	4620      	mov	r0, r4
   d7ce0:	4a05      	ldr	r2, [pc, #20]	; (d7cf8 <_GLOBAL__sub_I_System+0x34>)
   d7ce2:	4906      	ldr	r1, [pc, #24]	; (d7cfc <_GLOBAL__sub_I_System+0x38>)
   d7ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7ce8:	f000 b92a 	b.w	d7f40 <__aeabi_atexit>
   d7cec:	2003e7a8 	.word	0x2003e7a8
   d7cf0:	2003e79c 	.word	0x2003e79c
   d7cf4:	ffff0000 	.word	0xffff0000
   d7cf8:	2003de40 	.word	0x2003de40
   d7cfc:	000d7baf 	.word	0x000d7baf

000d7d00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d00:	2200      	movs	r2, #0
   d7d02:	6840      	ldr	r0, [r0, #4]
   d7d04:	4611      	mov	r1, r2
   d7d06:	f7ff b8bf 	b.w	d6e88 <network_listening>

000d7d0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7d0a:	2200      	movs	r2, #0
   d7d0c:	6840      	ldr	r0, [r0, #4]
   d7d0e:	4611      	mov	r1, r2
   d7d10:	f7ff b8ca 	b.w	d6ea8 <network_get_listen_timeout>

000d7d14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7d14:	6840      	ldr	r0, [r0, #4]
   d7d16:	2200      	movs	r2, #0
   d7d18:	f7ff b8be 	b.w	d6e98 <network_set_listen_timeout>

000d7d1c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d1c:	6840      	ldr	r0, [r0, #4]
   d7d1e:	2200      	movs	r2, #0
   d7d20:	f081 0101 	eor.w	r1, r1, #1
   d7d24:	f7ff b8a8 	b.w	d6e78 <network_listen>

000d7d28 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7d28:	2300      	movs	r3, #0
   d7d2a:	6840      	ldr	r0, [r0, #4]
   d7d2c:	461a      	mov	r2, r3
   d7d2e:	4619      	mov	r1, r3
   d7d30:	f7ff b89a 	b.w	d6e68 <network_off>

000d7d34 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7d34:	2300      	movs	r3, #0
   d7d36:	6840      	ldr	r0, [r0, #4]
   d7d38:	461a      	mov	r2, r3
   d7d3a:	4619      	mov	r1, r3
   d7d3c:	f7ff b88c 	b.w	d6e58 <network_on>

000d7d40 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7d40:	2200      	movs	r2, #0
   d7d42:	6840      	ldr	r0, [r0, #4]
   d7d44:	4611      	mov	r1, r2
   d7d46:	f7ff b87f 	b.w	d6e48 <network_ready>

000d7d4a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7d4a:	2200      	movs	r2, #0
   d7d4c:	6840      	ldr	r0, [r0, #4]
   d7d4e:	4611      	mov	r1, r2
   d7d50:	f7ff b86a 	b.w	d6e28 <network_connecting>

000d7d54 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d54:	6840      	ldr	r0, [r0, #4]
   d7d56:	2200      	movs	r2, #0
   d7d58:	2102      	movs	r1, #2
   d7d5a:	f7ff b86d 	b.w	d6e38 <network_disconnect>

000d7d5e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7d5e:	2300      	movs	r3, #0
   d7d60:	6840      	ldr	r0, [r0, #4]
   d7d62:	461a      	mov	r2, r3
   d7d64:	f7ff b858 	b.w	d6e18 <network_connect>

000d7d68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7d68:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7d6a:	2203      	movs	r2, #3
   d7d6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7d6e:	4a02      	ldr	r2, [pc, #8]	; (d7d78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7d70:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7d72:	4770      	bx	lr
   d7d74:	2003e7ac 	.word	0x2003e7ac
   d7d78:	000d94d8 	.word	0x000d94d8

000d7d7c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7d7c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7d7e:	2300      	movs	r3, #0
   d7d80:	2520      	movs	r5, #32
   d7d82:	8043      	strh	r3, [r0, #2]
   d7d84:	2314      	movs	r3, #20
{
   d7d86:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7d88:	8003      	strh	r3, [r0, #0]
   d7d8a:	6085      	str	r5, [r0, #8]
   d7d8c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d8e:	4906      	ldr	r1, [pc, #24]	; (d7da8 <_Z17acquireWireBufferv+0x2c>)
   d7d90:	4628      	mov	r0, r5
   d7d92:	f000 f8dc 	bl	d7f4e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d96:	4904      	ldr	r1, [pc, #16]	; (d7da8 <_Z17acquireWireBufferv+0x2c>)
	};
   d7d98:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d9a:	4628      	mov	r0, r5
   d7d9c:	f000 f8d7 	bl	d7f4e <_ZnajRKSt9nothrow_t>
	};
   d7da0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7da2:	4620      	mov	r0, r4
   d7da4:	bd38      	pop	{r3, r4, r5, pc}
   d7da6:	bf00      	nop
   d7da8:	000d9504 	.word	0x000d9504

000d7dac <_Z18acquireWire1Bufferv>:
   d7dac:	b538      	push	{r3, r4, r5, lr}
   d7dae:	2300      	movs	r3, #0
   d7db0:	2520      	movs	r5, #32
   d7db2:	8043      	strh	r3, [r0, #2]
   d7db4:	2314      	movs	r3, #20
   d7db6:	4604      	mov	r4, r0
   d7db8:	8003      	strh	r3, [r0, #0]
   d7dba:	6085      	str	r5, [r0, #8]
   d7dbc:	6105      	str	r5, [r0, #16]
   d7dbe:	4906      	ldr	r1, [pc, #24]	; (d7dd8 <_Z18acquireWire1Bufferv+0x2c>)
   d7dc0:	4628      	mov	r0, r5
   d7dc2:	f000 f8c4 	bl	d7f4e <_ZnajRKSt9nothrow_t>
   d7dc6:	4904      	ldr	r1, [pc, #16]	; (d7dd8 <_Z18acquireWire1Bufferv+0x2c>)
   d7dc8:	6060      	str	r0, [r4, #4]
   d7dca:	4628      	mov	r0, r5
   d7dcc:	f000 f8bf 	bl	d7f4e <_ZnajRKSt9nothrow_t>
   d7dd0:	60e0      	str	r0, [r4, #12]
   d7dd2:	4620      	mov	r0, r4
   d7dd4:	bd38      	pop	{r3, r4, r5, pc}
   d7dd6:	bf00      	nop
   d7dd8:	000d9504 	.word	0x000d9504

000d7ddc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7ddc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7dde:	4d0f      	ldr	r5, [pc, #60]	; (d7e1c <_Z19__fetch_global_Wirev+0x40>)
   d7de0:	7829      	ldrb	r1, [r5, #0]
   d7de2:	f3bf 8f5b 	dmb	ish
   d7de6:	f011 0401 	ands.w	r4, r1, #1
{
   d7dea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7dec:	d113      	bne.n	d7e16 <_Z19__fetch_global_Wirev+0x3a>
   d7dee:	4628      	mov	r0, r5
   d7df0:	f7fc f957 	bl	d40a2 <__cxa_guard_acquire>
   d7df4:	b178      	cbz	r0, d7e16 <_Z19__fetch_global_Wirev+0x3a>
   d7df6:	a801      	add	r0, sp, #4
   d7df8:	f7ff ffc0 	bl	d7d7c <_Z17acquireWireBufferv>
   d7dfc:	aa01      	add	r2, sp, #4
   d7dfe:	4621      	mov	r1, r4
   d7e00:	4807      	ldr	r0, [pc, #28]	; (d7e20 <_Z19__fetch_global_Wirev+0x44>)
   d7e02:	f7ff f9db 	bl	d71bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7e06:	4628      	mov	r0, r5
   d7e08:	f7fc f950 	bl	d40ac <__cxa_guard_release>
   d7e0c:	4a05      	ldr	r2, [pc, #20]	; (d7e24 <_Z19__fetch_global_Wirev+0x48>)
   d7e0e:	4906      	ldr	r1, [pc, #24]	; (d7e28 <_Z19__fetch_global_Wirev+0x4c>)
   d7e10:	4803      	ldr	r0, [pc, #12]	; (d7e20 <_Z19__fetch_global_Wirev+0x44>)
   d7e12:	f000 f895 	bl	d7f40 <__aeabi_atexit>
	return wire;
}
   d7e16:	4802      	ldr	r0, [pc, #8]	; (d7e20 <_Z19__fetch_global_Wirev+0x44>)
   d7e18:	b007      	add	sp, #28
   d7e1a:	bd30      	pop	{r4, r5, pc}
   d7e1c:	2003e7b4 	.word	0x2003e7b4
   d7e20:	2003e7bc 	.word	0x2003e7bc
   d7e24:	2003de40 	.word	0x2003de40
   d7e28:	000d7165 	.word	0x000d7165

000d7e2c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7e2c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7e2e:	4c0f      	ldr	r4, [pc, #60]	; (d7e6c <_Z20__fetch_global_Wire1v+0x40>)
   d7e30:	7823      	ldrb	r3, [r4, #0]
   d7e32:	f3bf 8f5b 	dmb	ish
   d7e36:	07db      	lsls	r3, r3, #31
{
   d7e38:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7e3a:	d413      	bmi.n	d7e64 <_Z20__fetch_global_Wire1v+0x38>
   d7e3c:	4620      	mov	r0, r4
   d7e3e:	f7fc f930 	bl	d40a2 <__cxa_guard_acquire>
   d7e42:	b178      	cbz	r0, d7e64 <_Z20__fetch_global_Wire1v+0x38>
   d7e44:	a801      	add	r0, sp, #4
   d7e46:	f7ff ffb1 	bl	d7dac <_Z18acquireWire1Bufferv>
   d7e4a:	aa01      	add	r2, sp, #4
   d7e4c:	2101      	movs	r1, #1
   d7e4e:	4808      	ldr	r0, [pc, #32]	; (d7e70 <_Z20__fetch_global_Wire1v+0x44>)
   d7e50:	f7ff f9b4 	bl	d71bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7e54:	4620      	mov	r0, r4
   d7e56:	f7fc f929 	bl	d40ac <__cxa_guard_release>
   d7e5a:	4a06      	ldr	r2, [pc, #24]	; (d7e74 <_Z20__fetch_global_Wire1v+0x48>)
   d7e5c:	4906      	ldr	r1, [pc, #24]	; (d7e78 <_Z20__fetch_global_Wire1v+0x4c>)
   d7e5e:	4804      	ldr	r0, [pc, #16]	; (d7e70 <_Z20__fetch_global_Wire1v+0x44>)
   d7e60:	f000 f86e 	bl	d7f40 <__aeabi_atexit>
	return wire;
}
   d7e64:	4802      	ldr	r0, [pc, #8]	; (d7e70 <_Z20__fetch_global_Wire1v+0x44>)
   d7e66:	b006      	add	sp, #24
   d7e68:	bd10      	pop	{r4, pc}
   d7e6a:	bf00      	nop
   d7e6c:	2003e7b8 	.word	0x2003e7b8
   d7e70:	2003e7d0 	.word	0x2003e7d0
   d7e74:	2003de40 	.word	0x2003de40
   d7e78:	000d7165 	.word	0x000d7165

000d7e7c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7e7c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7e7e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7e80:	d902      	bls.n	d7e88 <pinAvailable+0xc>
    return false;
   d7e82:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7e84:	b002      	add	sp, #8
   d7e86:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7e88:	f1a0 030b 	sub.w	r3, r0, #11
   d7e8c:	2b02      	cmp	r3, #2
   d7e8e:	d81a      	bhi.n	d7ec6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7e90:	4c17      	ldr	r4, [pc, #92]	; (d7ef0 <pinAvailable+0x74>)
   d7e92:	7821      	ldrb	r1, [r4, #0]
   d7e94:	f3bf 8f5b 	dmb	ish
   d7e98:	f011 0101 	ands.w	r1, r1, #1
   d7e9c:	d10b      	bne.n	d7eb6 <pinAvailable+0x3a>
   d7e9e:	4620      	mov	r0, r4
   d7ea0:	9101      	str	r1, [sp, #4]
   d7ea2:	f7fc f8fe 	bl	d40a2 <__cxa_guard_acquire>
   d7ea6:	9901      	ldr	r1, [sp, #4]
   d7ea8:	b128      	cbz	r0, d7eb6 <pinAvailable+0x3a>
   d7eaa:	4812      	ldr	r0, [pc, #72]	; (d7ef4 <pinAvailable+0x78>)
   d7eac:	f7ff f912 	bl	d70d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7eb0:	4620      	mov	r0, r4
   d7eb2:	f7fc f8fb 	bl	d40ac <__cxa_guard_release>
   d7eb6:	4b0f      	ldr	r3, [pc, #60]	; (d7ef4 <pinAvailable+0x78>)
   d7eb8:	7818      	ldrb	r0, [r3, #0]
   d7eba:	f7fe fe15 	bl	d6ae8 <hal_spi_is_enabled>
   d7ebe:	2800      	cmp	r0, #0
   d7ec0:	d1df      	bne.n	d7e82 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7ec2:	2001      	movs	r0, #1
   d7ec4:	e7de      	b.n	d7e84 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7ec6:	2801      	cmp	r0, #1
   d7ec8:	d809      	bhi.n	d7ede <pinAvailable+0x62>
   d7eca:	f7ff ff87 	bl	d7ddc <_Z19__fetch_global_Wirev>
   d7ece:	2100      	movs	r1, #0
   d7ed0:	7c00      	ldrb	r0, [r0, #16]
   d7ed2:	f7fe fe51 	bl	d6b78 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7ed6:	f080 0001 	eor.w	r0, r0, #1
   d7eda:	b2c0      	uxtb	r0, r0
   d7edc:	e7d2      	b.n	d7e84 <pinAvailable+0x8>
   d7ede:	3809      	subs	r0, #9
   d7ee0:	2801      	cmp	r0, #1
   d7ee2:	d8ee      	bhi.n	d7ec2 <pinAvailable+0x46>
   d7ee4:	f7ff fa22 	bl	d732c <_Z22__fetch_global_Serial1v>
   d7ee8:	7c00      	ldrb	r0, [r0, #16]
   d7eea:	f7fe fe9d 	bl	d6c28 <hal_usart_is_enabled>
   d7eee:	e7f2      	b.n	d7ed6 <pinAvailable+0x5a>
   d7ef0:	2003e7e8 	.word	0x2003e7e8
   d7ef4:	2003e7ec 	.word	0x2003e7ec

000d7ef8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ef8:	2823      	cmp	r0, #35	; 0x23
{
   d7efa:	b538      	push	{r3, r4, r5, lr}
   d7efc:	4604      	mov	r4, r0
   d7efe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f00:	d80a      	bhi.n	d7f18 <pinMode+0x20>
   d7f02:	29ff      	cmp	r1, #255	; 0xff
   d7f04:	d008      	beq.n	d7f18 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7f06:	f7ff ffb9 	bl	d7e7c <pinAvailable>
   d7f0a:	b128      	cbz	r0, d7f18 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7f0c:	4629      	mov	r1, r5
   d7f0e:	4620      	mov	r0, r4
}
   d7f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7f14:	f7fe bee8 	b.w	d6ce8 <HAL_Pin_Mode>
}
   d7f18:	bd38      	pop	{r3, r4, r5, pc}

000d7f1a <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7f1a:	b510      	push	{r4, lr}
   d7f1c:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7f1e:	f7fe feeb 	bl	d6cf8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7f22:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7f24:	b2db      	uxtb	r3, r3
   d7f26:	2b01      	cmp	r3, #1
   d7f28:	d908      	bls.n	d7f3c <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7f2a:	4620      	mov	r0, r4
   d7f2c:	f7ff ffa6 	bl	d7e7c <pinAvailable>
   d7f30:	b120      	cbz	r0, d7f3c <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7f32:	4620      	mov	r0, r4
}
   d7f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7f38:	f7fe bee6 	b.w	d6d08 <HAL_GPIO_Read>
}
   d7f3c:	2000      	movs	r0, #0
   d7f3e:	bd10      	pop	{r4, pc}

000d7f40 <__aeabi_atexit>:
   d7f40:	460b      	mov	r3, r1
   d7f42:	4601      	mov	r1, r0
   d7f44:	4618      	mov	r0, r3
   d7f46:	f000 bd8f 	b.w	d8a68 <__cxa_atexit>

000d7f4a <_ZdlPvj>:
   d7f4a:	f7fc b8a8 	b.w	d409e <_ZdlPv>

000d7f4e <_ZnajRKSt9nothrow_t>:
   d7f4e:	f7fc b8a4 	b.w	d409a <_Znaj>

000d7f52 <_ZSt25__throw_bad_function_callv>:
   d7f52:	b508      	push	{r3, lr}
   d7f54:	f7ff f806 	bl	d6f64 <abort>

000d7f58 <floor>:
   d7f58:	ec51 0b10 	vmov	r0, r1, d0
   d7f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   d7f62:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   d7f66:	2d13      	cmp	r5, #19
   d7f68:	ee10 6a10 	vmov	r6, s0
   d7f6c:	460c      	mov	r4, r1
   d7f6e:	dc20      	bgt.n	d7fb2 <floor+0x5a>
   d7f70:	2d00      	cmp	r5, #0
   d7f72:	db3d      	blt.n	d7ff0 <floor+0x98>
   d7f74:	4f38      	ldr	r7, [pc, #224]	; (d8058 <floor+0x100>)
   d7f76:	412f      	asrs	r7, r5
   d7f78:	ea01 0307 	and.w	r3, r1, r7
   d7f7c:	4303      	orrs	r3, r0
   d7f7e:	d01d      	beq.n	d7fbc <floor+0x64>
   d7f80:	a333      	add	r3, pc, #204	; (adr r3, d8050 <floor+0xf8>)
   d7f82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f86:	f000 f871 	bl	d806c <__adddf3>
   d7f8a:	2200      	movs	r2, #0
   d7f8c:	2300      	movs	r3, #0
   d7f8e:	f000 fcb3 	bl	d88f8 <__aeabi_dcmpgt>
   d7f92:	b148      	cbz	r0, d7fa8 <floor+0x50>
   d7f94:	2c00      	cmp	r4, #0
   d7f96:	da04      	bge.n	d7fa2 <floor+0x4a>
   d7f98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   d7f9c:	fa43 f505 	asr.w	r5, r3, r5
   d7fa0:	442c      	add	r4, r5
   d7fa2:	ea24 0407 	bic.w	r4, r4, r7
   d7fa6:	2600      	movs	r6, #0
   d7fa8:	4623      	mov	r3, r4
   d7faa:	4632      	mov	r2, r6
   d7fac:	ec43 2b10 	vmov	d0, r2, r3
   d7fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7fb2:	2d33      	cmp	r5, #51	; 0x33
   d7fb4:	dd05      	ble.n	d7fc2 <floor+0x6a>
   d7fb6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d7fba:	d029      	beq.n	d8010 <floor+0xb8>
   d7fbc:	ec41 0b10 	vmov	d0, r0, r1
   d7fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7fc2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   d7fc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7fca:	40df      	lsrs	r7, r3
   d7fcc:	4207      	tst	r7, r0
   d7fce:	d0f5      	beq.n	d7fbc <floor+0x64>
   d7fd0:	a31f      	add	r3, pc, #124	; (adr r3, d8050 <floor+0xf8>)
   d7fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fd6:	f000 f849 	bl	d806c <__adddf3>
   d7fda:	2200      	movs	r2, #0
   d7fdc:	2300      	movs	r3, #0
   d7fde:	f000 fc8b 	bl	d88f8 <__aeabi_dcmpgt>
   d7fe2:	2800      	cmp	r0, #0
   d7fe4:	d0e0      	beq.n	d7fa8 <floor+0x50>
   d7fe6:	2c00      	cmp	r4, #0
   d7fe8:	db23      	blt.n	d8032 <floor+0xda>
   d7fea:	ea26 0607 	bic.w	r6, r6, r7
   d7fee:	e7db      	b.n	d7fa8 <floor+0x50>
   d7ff0:	a317      	add	r3, pc, #92	; (adr r3, d8050 <floor+0xf8>)
   d7ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ff6:	f000 f839 	bl	d806c <__adddf3>
   d7ffa:	2200      	movs	r2, #0
   d7ffc:	2300      	movs	r3, #0
   d7ffe:	f000 fc7b 	bl	d88f8 <__aeabi_dcmpgt>
   d8002:	2800      	cmp	r0, #0
   d8004:	d0d0      	beq.n	d7fa8 <floor+0x50>
   d8006:	2c00      	cmp	r4, #0
   d8008:	db0a      	blt.n	d8020 <floor+0xc8>
   d800a:	2600      	movs	r6, #0
   d800c:	4634      	mov	r4, r6
   d800e:	e7cb      	b.n	d7fa8 <floor+0x50>
   d8010:	ee10 2a10 	vmov	r2, s0
   d8014:	460b      	mov	r3, r1
   d8016:	f000 f829 	bl	d806c <__adddf3>
   d801a:	ec41 0b10 	vmov	d0, r0, r1
   d801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8020:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   d8024:	4a0d      	ldr	r2, [pc, #52]	; (d805c <floor+0x104>)
   d8026:	431e      	orrs	r6, r3
   d8028:	2e00      	cmp	r6, #0
   d802a:	bf18      	it	ne
   d802c:	4614      	movne	r4, r2
   d802e:	2600      	movs	r6, #0
   d8030:	e7ba      	b.n	d7fa8 <floor+0x50>
   d8032:	2d14      	cmp	r5, #20
   d8034:	d008      	beq.n	d8048 <floor+0xf0>
   d8036:	2301      	movs	r3, #1
   d8038:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   d803c:	fa03 f505 	lsl.w	r5, r3, r5
   d8040:	19ae      	adds	r6, r5, r6
   d8042:	bf28      	it	cs
   d8044:	18e4      	addcs	r4, r4, r3
   d8046:	e7d0      	b.n	d7fea <floor+0x92>
   d8048:	3401      	adds	r4, #1
   d804a:	e7ce      	b.n	d7fea <floor+0x92>
   d804c:	f3af 8000 	nop.w
   d8050:	8800759c 	.word	0x8800759c
   d8054:	7e37e43c 	.word	0x7e37e43c
   d8058:	000fffff 	.word	0x000fffff
   d805c:	bff00000 	.word	0xbff00000

000d8060 <__aeabi_drsub>:
   d8060:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8064:	e002      	b.n	d806c <__adddf3>
   d8066:	bf00      	nop

000d8068 <__aeabi_dsub>:
   d8068:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d806c <__adddf3>:
   d806c:	b530      	push	{r4, r5, lr}
   d806e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8072:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8076:	ea94 0f05 	teq	r4, r5
   d807a:	bf08      	it	eq
   d807c:	ea90 0f02 	teqeq	r0, r2
   d8080:	bf1f      	itttt	ne
   d8082:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8086:	ea55 0c02 	orrsne.w	ip, r5, r2
   d808a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d808e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8092:	f000 80e2 	beq.w	d825a <__adddf3+0x1ee>
   d8096:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d809a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d809e:	bfb8      	it	lt
   d80a0:	426d      	neglt	r5, r5
   d80a2:	dd0c      	ble.n	d80be <__adddf3+0x52>
   d80a4:	442c      	add	r4, r5
   d80a6:	ea80 0202 	eor.w	r2, r0, r2
   d80aa:	ea81 0303 	eor.w	r3, r1, r3
   d80ae:	ea82 0000 	eor.w	r0, r2, r0
   d80b2:	ea83 0101 	eor.w	r1, r3, r1
   d80b6:	ea80 0202 	eor.w	r2, r0, r2
   d80ba:	ea81 0303 	eor.w	r3, r1, r3
   d80be:	2d36      	cmp	r5, #54	; 0x36
   d80c0:	bf88      	it	hi
   d80c2:	bd30      	pophi	{r4, r5, pc}
   d80c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d80c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d80cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d80d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d80d4:	d002      	beq.n	d80dc <__adddf3+0x70>
   d80d6:	4240      	negs	r0, r0
   d80d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d80dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d80e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d80e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d80e8:	d002      	beq.n	d80f0 <__adddf3+0x84>
   d80ea:	4252      	negs	r2, r2
   d80ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d80f0:	ea94 0f05 	teq	r4, r5
   d80f4:	f000 80a7 	beq.w	d8246 <__adddf3+0x1da>
   d80f8:	f1a4 0401 	sub.w	r4, r4, #1
   d80fc:	f1d5 0e20 	rsbs	lr, r5, #32
   d8100:	db0d      	blt.n	d811e <__adddf3+0xb2>
   d8102:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8106:	fa22 f205 	lsr.w	r2, r2, r5
   d810a:	1880      	adds	r0, r0, r2
   d810c:	f141 0100 	adc.w	r1, r1, #0
   d8110:	fa03 f20e 	lsl.w	r2, r3, lr
   d8114:	1880      	adds	r0, r0, r2
   d8116:	fa43 f305 	asr.w	r3, r3, r5
   d811a:	4159      	adcs	r1, r3
   d811c:	e00e      	b.n	d813c <__adddf3+0xd0>
   d811e:	f1a5 0520 	sub.w	r5, r5, #32
   d8122:	f10e 0e20 	add.w	lr, lr, #32
   d8126:	2a01      	cmp	r2, #1
   d8128:	fa03 fc0e 	lsl.w	ip, r3, lr
   d812c:	bf28      	it	cs
   d812e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8132:	fa43 f305 	asr.w	r3, r3, r5
   d8136:	18c0      	adds	r0, r0, r3
   d8138:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d813c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8140:	d507      	bpl.n	d8152 <__adddf3+0xe6>
   d8142:	f04f 0e00 	mov.w	lr, #0
   d8146:	f1dc 0c00 	rsbs	ip, ip, #0
   d814a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d814e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8152:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8156:	d31b      	bcc.n	d8190 <__adddf3+0x124>
   d8158:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d815c:	d30c      	bcc.n	d8178 <__adddf3+0x10c>
   d815e:	0849      	lsrs	r1, r1, #1
   d8160:	ea5f 0030 	movs.w	r0, r0, rrx
   d8164:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8168:	f104 0401 	add.w	r4, r4, #1
   d816c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8170:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8174:	f080 809a 	bcs.w	d82ac <__adddf3+0x240>
   d8178:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d817c:	bf08      	it	eq
   d817e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8182:	f150 0000 	adcs.w	r0, r0, #0
   d8186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d818a:	ea41 0105 	orr.w	r1, r1, r5
   d818e:	bd30      	pop	{r4, r5, pc}
   d8190:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8194:	4140      	adcs	r0, r0
   d8196:	eb41 0101 	adc.w	r1, r1, r1
   d819a:	3c01      	subs	r4, #1
   d819c:	bf28      	it	cs
   d819e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d81a2:	d2e9      	bcs.n	d8178 <__adddf3+0x10c>
   d81a4:	f091 0f00 	teq	r1, #0
   d81a8:	bf04      	itt	eq
   d81aa:	4601      	moveq	r1, r0
   d81ac:	2000      	moveq	r0, #0
   d81ae:	fab1 f381 	clz	r3, r1
   d81b2:	bf08      	it	eq
   d81b4:	3320      	addeq	r3, #32
   d81b6:	f1a3 030b 	sub.w	r3, r3, #11
   d81ba:	f1b3 0220 	subs.w	r2, r3, #32
   d81be:	da0c      	bge.n	d81da <__adddf3+0x16e>
   d81c0:	320c      	adds	r2, #12
   d81c2:	dd08      	ble.n	d81d6 <__adddf3+0x16a>
   d81c4:	f102 0c14 	add.w	ip, r2, #20
   d81c8:	f1c2 020c 	rsb	r2, r2, #12
   d81cc:	fa01 f00c 	lsl.w	r0, r1, ip
   d81d0:	fa21 f102 	lsr.w	r1, r1, r2
   d81d4:	e00c      	b.n	d81f0 <__adddf3+0x184>
   d81d6:	f102 0214 	add.w	r2, r2, #20
   d81da:	bfd8      	it	le
   d81dc:	f1c2 0c20 	rsble	ip, r2, #32
   d81e0:	fa01 f102 	lsl.w	r1, r1, r2
   d81e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d81e8:	bfdc      	itt	le
   d81ea:	ea41 010c 	orrle.w	r1, r1, ip
   d81ee:	4090      	lslle	r0, r2
   d81f0:	1ae4      	subs	r4, r4, r3
   d81f2:	bfa2      	ittt	ge
   d81f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d81f8:	4329      	orrge	r1, r5
   d81fa:	bd30      	popge	{r4, r5, pc}
   d81fc:	ea6f 0404 	mvn.w	r4, r4
   d8200:	3c1f      	subs	r4, #31
   d8202:	da1c      	bge.n	d823e <__adddf3+0x1d2>
   d8204:	340c      	adds	r4, #12
   d8206:	dc0e      	bgt.n	d8226 <__adddf3+0x1ba>
   d8208:	f104 0414 	add.w	r4, r4, #20
   d820c:	f1c4 0220 	rsb	r2, r4, #32
   d8210:	fa20 f004 	lsr.w	r0, r0, r4
   d8214:	fa01 f302 	lsl.w	r3, r1, r2
   d8218:	ea40 0003 	orr.w	r0, r0, r3
   d821c:	fa21 f304 	lsr.w	r3, r1, r4
   d8220:	ea45 0103 	orr.w	r1, r5, r3
   d8224:	bd30      	pop	{r4, r5, pc}
   d8226:	f1c4 040c 	rsb	r4, r4, #12
   d822a:	f1c4 0220 	rsb	r2, r4, #32
   d822e:	fa20 f002 	lsr.w	r0, r0, r2
   d8232:	fa01 f304 	lsl.w	r3, r1, r4
   d8236:	ea40 0003 	orr.w	r0, r0, r3
   d823a:	4629      	mov	r1, r5
   d823c:	bd30      	pop	{r4, r5, pc}
   d823e:	fa21 f004 	lsr.w	r0, r1, r4
   d8242:	4629      	mov	r1, r5
   d8244:	bd30      	pop	{r4, r5, pc}
   d8246:	f094 0f00 	teq	r4, #0
   d824a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d824e:	bf06      	itte	eq
   d8250:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8254:	3401      	addeq	r4, #1
   d8256:	3d01      	subne	r5, #1
   d8258:	e74e      	b.n	d80f8 <__adddf3+0x8c>
   d825a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d825e:	bf18      	it	ne
   d8260:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8264:	d029      	beq.n	d82ba <__adddf3+0x24e>
   d8266:	ea94 0f05 	teq	r4, r5
   d826a:	bf08      	it	eq
   d826c:	ea90 0f02 	teqeq	r0, r2
   d8270:	d005      	beq.n	d827e <__adddf3+0x212>
   d8272:	ea54 0c00 	orrs.w	ip, r4, r0
   d8276:	bf04      	itt	eq
   d8278:	4619      	moveq	r1, r3
   d827a:	4610      	moveq	r0, r2
   d827c:	bd30      	pop	{r4, r5, pc}
   d827e:	ea91 0f03 	teq	r1, r3
   d8282:	bf1e      	ittt	ne
   d8284:	2100      	movne	r1, #0
   d8286:	2000      	movne	r0, #0
   d8288:	bd30      	popne	{r4, r5, pc}
   d828a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d828e:	d105      	bne.n	d829c <__adddf3+0x230>
   d8290:	0040      	lsls	r0, r0, #1
   d8292:	4149      	adcs	r1, r1
   d8294:	bf28      	it	cs
   d8296:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d829a:	bd30      	pop	{r4, r5, pc}
   d829c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d82a0:	bf3c      	itt	cc
   d82a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d82a6:	bd30      	popcc	{r4, r5, pc}
   d82a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d82b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d82b4:	f04f 0000 	mov.w	r0, #0
   d82b8:	bd30      	pop	{r4, r5, pc}
   d82ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d82be:	bf1a      	itte	ne
   d82c0:	4619      	movne	r1, r3
   d82c2:	4610      	movne	r0, r2
   d82c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d82c8:	bf1c      	itt	ne
   d82ca:	460b      	movne	r3, r1
   d82cc:	4602      	movne	r2, r0
   d82ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d82d2:	bf06      	itte	eq
   d82d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d82d8:	ea91 0f03 	teqeq	r1, r3
   d82dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d82e0:	bd30      	pop	{r4, r5, pc}
   d82e2:	bf00      	nop

000d82e4 <__aeabi_ui2d>:
   d82e4:	f090 0f00 	teq	r0, #0
   d82e8:	bf04      	itt	eq
   d82ea:	2100      	moveq	r1, #0
   d82ec:	4770      	bxeq	lr
   d82ee:	b530      	push	{r4, r5, lr}
   d82f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82f8:	f04f 0500 	mov.w	r5, #0
   d82fc:	f04f 0100 	mov.w	r1, #0
   d8300:	e750      	b.n	d81a4 <__adddf3+0x138>
   d8302:	bf00      	nop

000d8304 <__aeabi_i2d>:
   d8304:	f090 0f00 	teq	r0, #0
   d8308:	bf04      	itt	eq
   d830a:	2100      	moveq	r1, #0
   d830c:	4770      	bxeq	lr
   d830e:	b530      	push	{r4, r5, lr}
   d8310:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8314:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8318:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d831c:	bf48      	it	mi
   d831e:	4240      	negmi	r0, r0
   d8320:	f04f 0100 	mov.w	r1, #0
   d8324:	e73e      	b.n	d81a4 <__adddf3+0x138>
   d8326:	bf00      	nop

000d8328 <__aeabi_f2d>:
   d8328:	0042      	lsls	r2, r0, #1
   d832a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d832e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8332:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8336:	bf1f      	itttt	ne
   d8338:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d833c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8340:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8344:	4770      	bxne	lr
   d8346:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d834a:	bf08      	it	eq
   d834c:	4770      	bxeq	lr
   d834e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8352:	bf04      	itt	eq
   d8354:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8358:	4770      	bxeq	lr
   d835a:	b530      	push	{r4, r5, lr}
   d835c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8360:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8364:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8368:	e71c      	b.n	d81a4 <__adddf3+0x138>
   d836a:	bf00      	nop

000d836c <__aeabi_ul2d>:
   d836c:	ea50 0201 	orrs.w	r2, r0, r1
   d8370:	bf08      	it	eq
   d8372:	4770      	bxeq	lr
   d8374:	b530      	push	{r4, r5, lr}
   d8376:	f04f 0500 	mov.w	r5, #0
   d837a:	e00a      	b.n	d8392 <__aeabi_l2d+0x16>

000d837c <__aeabi_l2d>:
   d837c:	ea50 0201 	orrs.w	r2, r0, r1
   d8380:	bf08      	it	eq
   d8382:	4770      	bxeq	lr
   d8384:	b530      	push	{r4, r5, lr}
   d8386:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d838a:	d502      	bpl.n	d8392 <__aeabi_l2d+0x16>
   d838c:	4240      	negs	r0, r0
   d838e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8392:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8396:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d839a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d839e:	f43f aed8 	beq.w	d8152 <__adddf3+0xe6>
   d83a2:	f04f 0203 	mov.w	r2, #3
   d83a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83aa:	bf18      	it	ne
   d83ac:	3203      	addne	r2, #3
   d83ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83b2:	bf18      	it	ne
   d83b4:	3203      	addne	r2, #3
   d83b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d83ba:	f1c2 0320 	rsb	r3, r2, #32
   d83be:	fa00 fc03 	lsl.w	ip, r0, r3
   d83c2:	fa20 f002 	lsr.w	r0, r0, r2
   d83c6:	fa01 fe03 	lsl.w	lr, r1, r3
   d83ca:	ea40 000e 	orr.w	r0, r0, lr
   d83ce:	fa21 f102 	lsr.w	r1, r1, r2
   d83d2:	4414      	add	r4, r2
   d83d4:	e6bd      	b.n	d8152 <__adddf3+0xe6>
   d83d6:	bf00      	nop

000d83d8 <__aeabi_dmul>:
   d83d8:	b570      	push	{r4, r5, r6, lr}
   d83da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d83de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d83e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d83e6:	bf1d      	ittte	ne
   d83e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d83ec:	ea94 0f0c 	teqne	r4, ip
   d83f0:	ea95 0f0c 	teqne	r5, ip
   d83f4:	f000 f8de 	bleq	d85b4 <__aeabi_dmul+0x1dc>
   d83f8:	442c      	add	r4, r5
   d83fa:	ea81 0603 	eor.w	r6, r1, r3
   d83fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8402:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8406:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d840a:	bf18      	it	ne
   d840c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8418:	d038      	beq.n	d848c <__aeabi_dmul+0xb4>
   d841a:	fba0 ce02 	umull	ip, lr, r0, r2
   d841e:	f04f 0500 	mov.w	r5, #0
   d8422:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8426:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d842a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d842e:	f04f 0600 	mov.w	r6, #0
   d8432:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8436:	f09c 0f00 	teq	ip, #0
   d843a:	bf18      	it	ne
   d843c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8440:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8444:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8448:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d844c:	d204      	bcs.n	d8458 <__aeabi_dmul+0x80>
   d844e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8452:	416d      	adcs	r5, r5
   d8454:	eb46 0606 	adc.w	r6, r6, r6
   d8458:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d845c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8460:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8464:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8468:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d846c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8470:	bf88      	it	hi
   d8472:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8476:	d81e      	bhi.n	d84b6 <__aeabi_dmul+0xde>
   d8478:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d847c:	bf08      	it	eq
   d847e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8482:	f150 0000 	adcs.w	r0, r0, #0
   d8486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d848a:	bd70      	pop	{r4, r5, r6, pc}
   d848c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8490:	ea46 0101 	orr.w	r1, r6, r1
   d8494:	ea40 0002 	orr.w	r0, r0, r2
   d8498:	ea81 0103 	eor.w	r1, r1, r3
   d849c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d84a0:	bfc2      	ittt	gt
   d84a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d84a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d84aa:	bd70      	popgt	{r4, r5, r6, pc}
   d84ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84b0:	f04f 0e00 	mov.w	lr, #0
   d84b4:	3c01      	subs	r4, #1
   d84b6:	f300 80ab 	bgt.w	d8610 <__aeabi_dmul+0x238>
   d84ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d84be:	bfde      	ittt	le
   d84c0:	2000      	movle	r0, #0
   d84c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d84c6:	bd70      	pople	{r4, r5, r6, pc}
   d84c8:	f1c4 0400 	rsb	r4, r4, #0
   d84cc:	3c20      	subs	r4, #32
   d84ce:	da35      	bge.n	d853c <__aeabi_dmul+0x164>
   d84d0:	340c      	adds	r4, #12
   d84d2:	dc1b      	bgt.n	d850c <__aeabi_dmul+0x134>
   d84d4:	f104 0414 	add.w	r4, r4, #20
   d84d8:	f1c4 0520 	rsb	r5, r4, #32
   d84dc:	fa00 f305 	lsl.w	r3, r0, r5
   d84e0:	fa20 f004 	lsr.w	r0, r0, r4
   d84e4:	fa01 f205 	lsl.w	r2, r1, r5
   d84e8:	ea40 0002 	orr.w	r0, r0, r2
   d84ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d84f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d84f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84f8:	fa21 f604 	lsr.w	r6, r1, r4
   d84fc:	eb42 0106 	adc.w	r1, r2, r6
   d8500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8504:	bf08      	it	eq
   d8506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d850a:	bd70      	pop	{r4, r5, r6, pc}
   d850c:	f1c4 040c 	rsb	r4, r4, #12
   d8510:	f1c4 0520 	rsb	r5, r4, #32
   d8514:	fa00 f304 	lsl.w	r3, r0, r4
   d8518:	fa20 f005 	lsr.w	r0, r0, r5
   d851c:	fa01 f204 	lsl.w	r2, r1, r4
   d8520:	ea40 0002 	orr.w	r0, r0, r2
   d8524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d852c:	f141 0100 	adc.w	r1, r1, #0
   d8530:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8534:	bf08      	it	eq
   d8536:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d853a:	bd70      	pop	{r4, r5, r6, pc}
   d853c:	f1c4 0520 	rsb	r5, r4, #32
   d8540:	fa00 f205 	lsl.w	r2, r0, r5
   d8544:	ea4e 0e02 	orr.w	lr, lr, r2
   d8548:	fa20 f304 	lsr.w	r3, r0, r4
   d854c:	fa01 f205 	lsl.w	r2, r1, r5
   d8550:	ea43 0302 	orr.w	r3, r3, r2
   d8554:	fa21 f004 	lsr.w	r0, r1, r4
   d8558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d855c:	fa21 f204 	lsr.w	r2, r1, r4
   d8560:	ea20 0002 	bic.w	r0, r0, r2
   d8564:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8568:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d856c:	bf08      	it	eq
   d856e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8572:	bd70      	pop	{r4, r5, r6, pc}
   d8574:	f094 0f00 	teq	r4, #0
   d8578:	d10f      	bne.n	d859a <__aeabi_dmul+0x1c2>
   d857a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d857e:	0040      	lsls	r0, r0, #1
   d8580:	eb41 0101 	adc.w	r1, r1, r1
   d8584:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8588:	bf08      	it	eq
   d858a:	3c01      	subeq	r4, #1
   d858c:	d0f7      	beq.n	d857e <__aeabi_dmul+0x1a6>
   d858e:	ea41 0106 	orr.w	r1, r1, r6
   d8592:	f095 0f00 	teq	r5, #0
   d8596:	bf18      	it	ne
   d8598:	4770      	bxne	lr
   d859a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d859e:	0052      	lsls	r2, r2, #1
   d85a0:	eb43 0303 	adc.w	r3, r3, r3
   d85a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d85a8:	bf08      	it	eq
   d85aa:	3d01      	subeq	r5, #1
   d85ac:	d0f7      	beq.n	d859e <__aeabi_dmul+0x1c6>
   d85ae:	ea43 0306 	orr.w	r3, r3, r6
   d85b2:	4770      	bx	lr
   d85b4:	ea94 0f0c 	teq	r4, ip
   d85b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85bc:	bf18      	it	ne
   d85be:	ea95 0f0c 	teqne	r5, ip
   d85c2:	d00c      	beq.n	d85de <__aeabi_dmul+0x206>
   d85c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85c8:	bf18      	it	ne
   d85ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d85ce:	d1d1      	bne.n	d8574 <__aeabi_dmul+0x19c>
   d85d0:	ea81 0103 	eor.w	r1, r1, r3
   d85d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85d8:	f04f 0000 	mov.w	r0, #0
   d85dc:	bd70      	pop	{r4, r5, r6, pc}
   d85de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85e2:	bf06      	itte	eq
   d85e4:	4610      	moveq	r0, r2
   d85e6:	4619      	moveq	r1, r3
   d85e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d85ec:	d019      	beq.n	d8622 <__aeabi_dmul+0x24a>
   d85ee:	ea94 0f0c 	teq	r4, ip
   d85f2:	d102      	bne.n	d85fa <__aeabi_dmul+0x222>
   d85f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d85f8:	d113      	bne.n	d8622 <__aeabi_dmul+0x24a>
   d85fa:	ea95 0f0c 	teq	r5, ip
   d85fe:	d105      	bne.n	d860c <__aeabi_dmul+0x234>
   d8600:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8604:	bf1c      	itt	ne
   d8606:	4610      	movne	r0, r2
   d8608:	4619      	movne	r1, r3
   d860a:	d10a      	bne.n	d8622 <__aeabi_dmul+0x24a>
   d860c:	ea81 0103 	eor.w	r1, r1, r3
   d8610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8614:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8618:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d861c:	f04f 0000 	mov.w	r0, #0
   d8620:	bd70      	pop	{r4, r5, r6, pc}
   d8622:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8626:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d862a:	bd70      	pop	{r4, r5, r6, pc}

000d862c <__aeabi_ddiv>:
   d862c:	b570      	push	{r4, r5, r6, lr}
   d862e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d863a:	bf1d      	ittte	ne
   d863c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8640:	ea94 0f0c 	teqne	r4, ip
   d8644:	ea95 0f0c 	teqne	r5, ip
   d8648:	f000 f8a7 	bleq	d879a <__aeabi_ddiv+0x16e>
   d864c:	eba4 0405 	sub.w	r4, r4, r5
   d8650:	ea81 0e03 	eor.w	lr, r1, r3
   d8654:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8658:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d865c:	f000 8088 	beq.w	d8770 <__aeabi_ddiv+0x144>
   d8660:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8664:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8668:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d866c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8670:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8674:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8678:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d867c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8680:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8684:	429d      	cmp	r5, r3
   d8686:	bf08      	it	eq
   d8688:	4296      	cmpeq	r6, r2
   d868a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d868e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8692:	d202      	bcs.n	d869a <__aeabi_ddiv+0x6e>
   d8694:	085b      	lsrs	r3, r3, #1
   d8696:	ea4f 0232 	mov.w	r2, r2, rrx
   d869a:	1ab6      	subs	r6, r6, r2
   d869c:	eb65 0503 	sbc.w	r5, r5, r3
   d86a0:	085b      	lsrs	r3, r3, #1
   d86a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d86a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d86aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d86ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d86b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86b6:	bf22      	ittt	cs
   d86b8:	1ab6      	subcs	r6, r6, r2
   d86ba:	4675      	movcs	r5, lr
   d86bc:	ea40 000c 	orrcs.w	r0, r0, ip
   d86c0:	085b      	lsrs	r3, r3, #1
   d86c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d86c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d86ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86ce:	bf22      	ittt	cs
   d86d0:	1ab6      	subcs	r6, r6, r2
   d86d2:	4675      	movcs	r5, lr
   d86d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d86d8:	085b      	lsrs	r3, r3, #1
   d86da:	ea4f 0232 	mov.w	r2, r2, rrx
   d86de:	ebb6 0e02 	subs.w	lr, r6, r2
   d86e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86e6:	bf22      	ittt	cs
   d86e8:	1ab6      	subcs	r6, r6, r2
   d86ea:	4675      	movcs	r5, lr
   d86ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d86f0:	085b      	lsrs	r3, r3, #1
   d86f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d86f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d86fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86fe:	bf22      	ittt	cs
   d8700:	1ab6      	subcs	r6, r6, r2
   d8702:	4675      	movcs	r5, lr
   d8704:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8708:	ea55 0e06 	orrs.w	lr, r5, r6
   d870c:	d018      	beq.n	d8740 <__aeabi_ddiv+0x114>
   d870e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8712:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8716:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d871a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d871e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8722:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8726:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d872a:	d1c0      	bne.n	d86ae <__aeabi_ddiv+0x82>
   d872c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8730:	d10b      	bne.n	d874a <__aeabi_ddiv+0x11e>
   d8732:	ea41 0100 	orr.w	r1, r1, r0
   d8736:	f04f 0000 	mov.w	r0, #0
   d873a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d873e:	e7b6      	b.n	d86ae <__aeabi_ddiv+0x82>
   d8740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8744:	bf04      	itt	eq
   d8746:	4301      	orreq	r1, r0
   d8748:	2000      	moveq	r0, #0
   d874a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d874e:	bf88      	it	hi
   d8750:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8754:	f63f aeaf 	bhi.w	d84b6 <__aeabi_dmul+0xde>
   d8758:	ebb5 0c03 	subs.w	ip, r5, r3
   d875c:	bf04      	itt	eq
   d875e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8762:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8766:	f150 0000 	adcs.w	r0, r0, #0
   d876a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d876e:	bd70      	pop	{r4, r5, r6, pc}
   d8770:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8774:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8778:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d877c:	bfc2      	ittt	gt
   d877e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8782:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8786:	bd70      	popgt	{r4, r5, r6, pc}
   d8788:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d878c:	f04f 0e00 	mov.w	lr, #0
   d8790:	3c01      	subs	r4, #1
   d8792:	e690      	b.n	d84b6 <__aeabi_dmul+0xde>
   d8794:	ea45 0e06 	orr.w	lr, r5, r6
   d8798:	e68d      	b.n	d84b6 <__aeabi_dmul+0xde>
   d879a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d879e:	ea94 0f0c 	teq	r4, ip
   d87a2:	bf08      	it	eq
   d87a4:	ea95 0f0c 	teqeq	r5, ip
   d87a8:	f43f af3b 	beq.w	d8622 <__aeabi_dmul+0x24a>
   d87ac:	ea94 0f0c 	teq	r4, ip
   d87b0:	d10a      	bne.n	d87c8 <__aeabi_ddiv+0x19c>
   d87b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d87b6:	f47f af34 	bne.w	d8622 <__aeabi_dmul+0x24a>
   d87ba:	ea95 0f0c 	teq	r5, ip
   d87be:	f47f af25 	bne.w	d860c <__aeabi_dmul+0x234>
   d87c2:	4610      	mov	r0, r2
   d87c4:	4619      	mov	r1, r3
   d87c6:	e72c      	b.n	d8622 <__aeabi_dmul+0x24a>
   d87c8:	ea95 0f0c 	teq	r5, ip
   d87cc:	d106      	bne.n	d87dc <__aeabi_ddiv+0x1b0>
   d87ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d87d2:	f43f aefd 	beq.w	d85d0 <__aeabi_dmul+0x1f8>
   d87d6:	4610      	mov	r0, r2
   d87d8:	4619      	mov	r1, r3
   d87da:	e722      	b.n	d8622 <__aeabi_dmul+0x24a>
   d87dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87e0:	bf18      	it	ne
   d87e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87e6:	f47f aec5 	bne.w	d8574 <__aeabi_dmul+0x19c>
   d87ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d87ee:	f47f af0d 	bne.w	d860c <__aeabi_dmul+0x234>
   d87f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d87f6:	f47f aeeb 	bne.w	d85d0 <__aeabi_dmul+0x1f8>
   d87fa:	e712      	b.n	d8622 <__aeabi_dmul+0x24a>

000d87fc <__gedf2>:
   d87fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8800:	e006      	b.n	d8810 <__cmpdf2+0x4>
   d8802:	bf00      	nop

000d8804 <__ledf2>:
   d8804:	f04f 0c01 	mov.w	ip, #1
   d8808:	e002      	b.n	d8810 <__cmpdf2+0x4>
   d880a:	bf00      	nop

000d880c <__cmpdf2>:
   d880c:	f04f 0c01 	mov.w	ip, #1
   d8810:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d881c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8820:	bf18      	it	ne
   d8822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8826:	d01b      	beq.n	d8860 <__cmpdf2+0x54>
   d8828:	b001      	add	sp, #4
   d882a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d882e:	bf0c      	ite	eq
   d8830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8834:	ea91 0f03 	teqne	r1, r3
   d8838:	bf02      	ittt	eq
   d883a:	ea90 0f02 	teqeq	r0, r2
   d883e:	2000      	moveq	r0, #0
   d8840:	4770      	bxeq	lr
   d8842:	f110 0f00 	cmn.w	r0, #0
   d8846:	ea91 0f03 	teq	r1, r3
   d884a:	bf58      	it	pl
   d884c:	4299      	cmppl	r1, r3
   d884e:	bf08      	it	eq
   d8850:	4290      	cmpeq	r0, r2
   d8852:	bf2c      	ite	cs
   d8854:	17d8      	asrcs	r0, r3, #31
   d8856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d885a:	f040 0001 	orr.w	r0, r0, #1
   d885e:	4770      	bx	lr
   d8860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8868:	d102      	bne.n	d8870 <__cmpdf2+0x64>
   d886a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d886e:	d107      	bne.n	d8880 <__cmpdf2+0x74>
   d8870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8878:	d1d6      	bne.n	d8828 <__cmpdf2+0x1c>
   d887a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d887e:	d0d3      	beq.n	d8828 <__cmpdf2+0x1c>
   d8880:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8884:	4770      	bx	lr
   d8886:	bf00      	nop

000d8888 <__aeabi_cdrcmple>:
   d8888:	4684      	mov	ip, r0
   d888a:	4610      	mov	r0, r2
   d888c:	4662      	mov	r2, ip
   d888e:	468c      	mov	ip, r1
   d8890:	4619      	mov	r1, r3
   d8892:	4663      	mov	r3, ip
   d8894:	e000      	b.n	d8898 <__aeabi_cdcmpeq>
   d8896:	bf00      	nop

000d8898 <__aeabi_cdcmpeq>:
   d8898:	b501      	push	{r0, lr}
   d889a:	f7ff ffb7 	bl	d880c <__cmpdf2>
   d889e:	2800      	cmp	r0, #0
   d88a0:	bf48      	it	mi
   d88a2:	f110 0f00 	cmnmi.w	r0, #0
   d88a6:	bd01      	pop	{r0, pc}

000d88a8 <__aeabi_dcmpeq>:
   d88a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88ac:	f7ff fff4 	bl	d8898 <__aeabi_cdcmpeq>
   d88b0:	bf0c      	ite	eq
   d88b2:	2001      	moveq	r0, #1
   d88b4:	2000      	movne	r0, #0
   d88b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d88ba:	bf00      	nop

000d88bc <__aeabi_dcmplt>:
   d88bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88c0:	f7ff ffea 	bl	d8898 <__aeabi_cdcmpeq>
   d88c4:	bf34      	ite	cc
   d88c6:	2001      	movcc	r0, #1
   d88c8:	2000      	movcs	r0, #0
   d88ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d88ce:	bf00      	nop

000d88d0 <__aeabi_dcmple>:
   d88d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88d4:	f7ff ffe0 	bl	d8898 <__aeabi_cdcmpeq>
   d88d8:	bf94      	ite	ls
   d88da:	2001      	movls	r0, #1
   d88dc:	2000      	movhi	r0, #0
   d88de:	f85d fb08 	ldr.w	pc, [sp], #8
   d88e2:	bf00      	nop

000d88e4 <__aeabi_dcmpge>:
   d88e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88e8:	f7ff ffce 	bl	d8888 <__aeabi_cdrcmple>
   d88ec:	bf94      	ite	ls
   d88ee:	2001      	movls	r0, #1
   d88f0:	2000      	movhi	r0, #0
   d88f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d88f6:	bf00      	nop

000d88f8 <__aeabi_dcmpgt>:
   d88f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88fc:	f7ff ffc4 	bl	d8888 <__aeabi_cdrcmple>
   d8900:	bf34      	ite	cc
   d8902:	2001      	movcc	r0, #1
   d8904:	2000      	movcs	r0, #0
   d8906:	f85d fb08 	ldr.w	pc, [sp], #8
   d890a:	bf00      	nop

000d890c <__aeabi_dcmpun>:
   d890c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8914:	d102      	bne.n	d891c <__aeabi_dcmpun+0x10>
   d8916:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d891a:	d10a      	bne.n	d8932 <__aeabi_dcmpun+0x26>
   d891c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8924:	d102      	bne.n	d892c <__aeabi_dcmpun+0x20>
   d8926:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d892a:	d102      	bne.n	d8932 <__aeabi_dcmpun+0x26>
   d892c:	f04f 0000 	mov.w	r0, #0
   d8930:	4770      	bx	lr
   d8932:	f04f 0001 	mov.w	r0, #1
   d8936:	4770      	bx	lr

000d8938 <__aeabi_d2iz>:
   d8938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d893c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8940:	d215      	bcs.n	d896e <__aeabi_d2iz+0x36>
   d8942:	d511      	bpl.n	d8968 <__aeabi_d2iz+0x30>
   d8944:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8948:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d894c:	d912      	bls.n	d8974 <__aeabi_d2iz+0x3c>
   d894e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8956:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d895a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d895e:	fa23 f002 	lsr.w	r0, r3, r2
   d8962:	bf18      	it	ne
   d8964:	4240      	negne	r0, r0
   d8966:	4770      	bx	lr
   d8968:	f04f 0000 	mov.w	r0, #0
   d896c:	4770      	bx	lr
   d896e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8972:	d105      	bne.n	d8980 <__aeabi_d2iz+0x48>
   d8974:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8978:	bf08      	it	eq
   d897a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d897e:	4770      	bx	lr
   d8980:	f04f 0000 	mov.w	r0, #0
   d8984:	4770      	bx	lr
   d8986:	bf00      	nop

000d8988 <__aeabi_d2uiz>:
   d8988:	004a      	lsls	r2, r1, #1
   d898a:	d211      	bcs.n	d89b0 <__aeabi_d2uiz+0x28>
   d898c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8990:	d211      	bcs.n	d89b6 <__aeabi_d2uiz+0x2e>
   d8992:	d50d      	bpl.n	d89b0 <__aeabi_d2uiz+0x28>
   d8994:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d899c:	d40e      	bmi.n	d89bc <__aeabi_d2uiz+0x34>
   d899e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d89a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d89a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d89aa:	fa23 f002 	lsr.w	r0, r3, r2
   d89ae:	4770      	bx	lr
   d89b0:	f04f 0000 	mov.w	r0, #0
   d89b4:	4770      	bx	lr
   d89b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d89ba:	d102      	bne.n	d89c2 <__aeabi_d2uiz+0x3a>
   d89bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d89c0:	4770      	bx	lr
   d89c2:	f04f 0000 	mov.w	r0, #0
   d89c6:	4770      	bx	lr

000d89c8 <__aeabi_d2f>:
   d89c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d89cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d89d0:	bf24      	itt	cs
   d89d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d89d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d89da:	d90d      	bls.n	d89f8 <__aeabi_d2f+0x30>
   d89dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d89e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d89e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d89e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d89ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d89f0:	bf08      	it	eq
   d89f2:	f020 0001 	biceq.w	r0, r0, #1
   d89f6:	4770      	bx	lr
   d89f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d89fc:	d121      	bne.n	d8a42 <__aeabi_d2f+0x7a>
   d89fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8a02:	bfbc      	itt	lt
   d8a04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8a08:	4770      	bxlt	lr
   d8a0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8a12:	f1c2 0218 	rsb	r2, r2, #24
   d8a16:	f1c2 0c20 	rsb	ip, r2, #32
   d8a1a:	fa10 f30c 	lsls.w	r3, r0, ip
   d8a1e:	fa20 f002 	lsr.w	r0, r0, r2
   d8a22:	bf18      	it	ne
   d8a24:	f040 0001 	orrne.w	r0, r0, #1
   d8a28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8a30:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8a34:	ea40 000c 	orr.w	r0, r0, ip
   d8a38:	fa23 f302 	lsr.w	r3, r3, r2
   d8a3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8a40:	e7cc      	b.n	d89dc <__aeabi_d2f+0x14>
   d8a42:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8a46:	d107      	bne.n	d8a58 <__aeabi_d2f+0x90>
   d8a48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8a4c:	bf1e      	ittt	ne
   d8a4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8a52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8a56:	4770      	bxne	lr
   d8a58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8a5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8a64:	4770      	bx	lr
   d8a66:	bf00      	nop

000d8a68 <__cxa_atexit>:
   d8a68:	b510      	push	{r4, lr}
   d8a6a:	4c05      	ldr	r4, [pc, #20]	; (d8a80 <__cxa_atexit+0x18>)
   d8a6c:	4613      	mov	r3, r2
   d8a6e:	b12c      	cbz	r4, d8a7c <__cxa_atexit+0x14>
   d8a70:	460a      	mov	r2, r1
   d8a72:	4601      	mov	r1, r0
   d8a74:	2002      	movs	r0, #2
   d8a76:	f3af 8000 	nop.w
   d8a7a:	bd10      	pop	{r4, pc}
   d8a7c:	4620      	mov	r0, r4
   d8a7e:	e7fc      	b.n	d8a7a <__cxa_atexit+0x12>
   d8a80:	00000000 	.word	0x00000000

000d8a84 <memcpy>:
   d8a84:	440a      	add	r2, r1
   d8a86:	4291      	cmp	r1, r2
   d8a88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8a8c:	d100      	bne.n	d8a90 <memcpy+0xc>
   d8a8e:	4770      	bx	lr
   d8a90:	b510      	push	{r4, lr}
   d8a92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8a96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8a9a:	4291      	cmp	r1, r2
   d8a9c:	d1f9      	bne.n	d8a92 <memcpy+0xe>
   d8a9e:	bd10      	pop	{r4, pc}

000d8aa0 <memset>:
   d8aa0:	4402      	add	r2, r0
   d8aa2:	4603      	mov	r3, r0
   d8aa4:	4293      	cmp	r3, r2
   d8aa6:	d100      	bne.n	d8aaa <memset+0xa>
   d8aa8:	4770      	bx	lr
   d8aaa:	f803 1b01 	strb.w	r1, [r3], #1
   d8aae:	e7f9      	b.n	d8aa4 <memset+0x4>

000d8ab0 <srand>:
   d8ab0:	b538      	push	{r3, r4, r5, lr}
   d8ab2:	4b0d      	ldr	r3, [pc, #52]	; (d8ae8 <srand+0x38>)
   d8ab4:	681d      	ldr	r5, [r3, #0]
   d8ab6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8ab8:	4604      	mov	r4, r0
   d8aba:	b97b      	cbnz	r3, d8adc <srand+0x2c>
   d8abc:	2018      	movs	r0, #24
   d8abe:	f7fe fa39 	bl	d6f34 <malloc>
   d8ac2:	4a0a      	ldr	r2, [pc, #40]	; (d8aec <srand+0x3c>)
   d8ac4:	4b0a      	ldr	r3, [pc, #40]	; (d8af0 <srand+0x40>)
   d8ac6:	63a8      	str	r0, [r5, #56]	; 0x38
   d8ac8:	e9c0 2300 	strd	r2, r3, [r0]
   d8acc:	4b09      	ldr	r3, [pc, #36]	; (d8af4 <srand+0x44>)
   d8ace:	6083      	str	r3, [r0, #8]
   d8ad0:	230b      	movs	r3, #11
   d8ad2:	8183      	strh	r3, [r0, #12]
   d8ad4:	2201      	movs	r2, #1
   d8ad6:	2300      	movs	r3, #0
   d8ad8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8adc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8ade:	2200      	movs	r2, #0
   d8ae0:	611c      	str	r4, [r3, #16]
   d8ae2:	615a      	str	r2, [r3, #20]
   d8ae4:	bd38      	pop	{r3, r4, r5, pc}
   d8ae6:	bf00      	nop
   d8ae8:	2003dddc 	.word	0x2003dddc
   d8aec:	abcd330e 	.word	0xabcd330e
   d8af0:	e66d1234 	.word	0xe66d1234
   d8af4:	0005deec 	.word	0x0005deec

000d8af8 <strlen>:
   d8af8:	4603      	mov	r3, r0
   d8afa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8afe:	2a00      	cmp	r2, #0
   d8b00:	d1fb      	bne.n	d8afa <strlen+0x2>
   d8b02:	1a18      	subs	r0, r3, r0
   d8b04:	3801      	subs	r0, #1
   d8b06:	4770      	bx	lr

000d8b08 <strncpy>:
   d8b08:	b510      	push	{r4, lr}
   d8b0a:	3901      	subs	r1, #1
   d8b0c:	4603      	mov	r3, r0
   d8b0e:	b132      	cbz	r2, d8b1e <strncpy+0x16>
   d8b10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8b14:	f803 4b01 	strb.w	r4, [r3], #1
   d8b18:	3a01      	subs	r2, #1
   d8b1a:	2c00      	cmp	r4, #0
   d8b1c:	d1f7      	bne.n	d8b0e <strncpy+0x6>
   d8b1e:	441a      	add	r2, r3
   d8b20:	2100      	movs	r1, #0
   d8b22:	4293      	cmp	r3, r2
   d8b24:	d100      	bne.n	d8b28 <strncpy+0x20>
   d8b26:	bd10      	pop	{r4, pc}
   d8b28:	f803 1b01 	strb.w	r1, [r3], #1
   d8b2c:	e7f9      	b.n	d8b22 <strncpy+0x1a>

000d8b2e <link_code_end>:
	...

000d8b30 <dynalib_user>:
   d8b30:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8b40:	0000 0000 4e55 4e4b 574f 004e 5741 4b41     ....UNKNOWN.AWAK
   d8b50:	0045 5341 454c 5045 5300 656c 7065 7453     E.ASLEEP.SleepSt
   d8b60:	7461 5465 676f 6c67 0065 255b 5d73 2520     ateToggle.[%s] %
   d8b70:	756c 2d20 203e 6564 6f62 6e75 6563 0020     lu -> debounce .
   d8b80:	255b 5d73 2520 756c 6520 746e 7265 7320     [%s] %lu enter s
   d8b90:	656c 7065 6d20 646f 2065 6f66 2072 3036     leep mode for 60
   d8ba0:	7320 6365 6e6f 7364 6f20 2072 3041 6620      seconds or A0 f
   d8bb0:	6c61 696c 676e 5b00 7325 205d 6c25 2075     alling.[%s] %lu 
   d8bc0:	3e2d 7325 0020 6c53 6565 5370 6174 6574     ->%s .SleepState
   d8bd0:	6843 6365 006b 255b 5d73 2520 756c 7320     Check.[%s] %lu s
   d8be0:	656c 7065 7453 7461 3d65 7325 2820 6c25     leepState=%s (%l
   d8bf0:	2964 0020 6c53 6565 5370 6174 6574 6e49     d) .SleepStateIn
   d8c00:	7469 5b00 7325 005d 6573 7574 2870 0a29     it.[%s].setup().
   d8c10:	4f00 6f6f 7370 202c 6f6e 4220 4f4e 3530     .Ooops, no BNO05
   d8c20:	2035 6564 6574 7463 6465 2e20 2e2e 4320     5 detected ... C
   d8c30:	6568 6b63 7920 756f 2072 6977 6972 676e     heck your wiring
   d8c40:	6f20 2072 3249 2043 4441 5244 0021 6573      or I2C ADDR!.se
   d8c50:	7574 0070 255b 5d73 6e62 206f 6572 6461     tup.[%s]bno read
   d8c60:	0079 255b 5d73 6772 2062 6572 6461 0079     y.[%s]rgb ready.
   d8c70:	255b 5d73 3269 2063 6c73 7661 2065 6572     [%s]i2c slave re
   d8c80:	6461 0079 255b 5d73 6f6c 2077 6f70 6577     ady.[%s]low powe
   d8c90:	2072 6572 6461 0079 255b 5d73 6269 7375     r ready.[%s]ibus
   d8ca0:	7220 6165 7964 5b00 7325 705d 6469 2073      ready.[%s]pids 
   d8cb0:	6572 6461 0079 6573 7574 2870 6320 6d6f     ready.setup( com
   d8cc0:	6c70 7465 2065 0a29 7300 7465 6154 6772     plete )..setTarg
   d8cd0:	7465 7053 6565 0064 255b 5d73 2520 756c     etSpeed.[%s] %lu
   d8ce0:	2d20 203e 6425 2020 4100 5455 4d4f 5441      -> %d  .AUTOMAT
   d8cf0:	4349 4d00 4e41 4155 004c 616d 7473 7265     IC.MANUAL.master
   d8d00:	7520 6470 7461 6465 2520 2075 6f74 2520      updated %u to %
   d8d10:	756c 2800 6c25 2975 5a20 203a 6625 7b00     lu.(%lu) Z: %f.{
   d8d20:	2220 6974 656d 7473 6d61 2270 203a 6c25      "timestamp": %l
   d8d30:	2c75 2220 696d 6c6c 7369 3a22 2520 756c     u, "millis": %lu
   d8d40:	202c 2220 616e 656d 3a22 6922 756d 2c22     ,  "name":"imu",
   d8d50:	2220 7974 6570 3a22 2520 756c 202c 6922      "type": %lu, "i
   d8d60:	756d 6974 656d 3a22 6c25 2c75 2220 2258     mutime":%lu, "X"
   d8d70:	203a 6625 202c 5922 3a22 6625 202c 5a22     : %f, "Y":%f, "Z
   d8d80:	2022 203a 6625 7d20 7200 626f 746f 692f     " : %f }.robot/i
   d8d90:	756d 2800 6c25 2975 6220 6c61 6e61 6563     mu.(%lu) balance
   d8da0:	6e49 7570 3a74 2520 0066 207b 7422 6d69     Input: %f.{ "tim
   d8db0:	7365 6174 706d 3a22 2520 756c 202c 6d22     estamp": %lu, "m
   d8dc0:	6c69 696c 2273 203a 6c25 2c75 2220 7974     illis": %lu, "ty
   d8dd0:	6570 3a22 6922 7542 2273 202c 6e22 6d61     pe":"iBus", "nam
   d8de0:	2265 223a 4269 7375 2c22 2220 3043 3a22     e":"iBus", "C0":
   d8df0:	6425 222c 3143 3a22 6425 222c 3243 3a22     %d,"C1":%d,"C2":
   d8e00:	6425 222c 3343 3a22 6425 222c 3443 3a22     %d,"C3":%d,"C4":
   d8e10:	6425 222c 3543 3a22 6425 222c 3643 3a22     %d,"C5":%d,"C6":
   d8e20:	6425 222c 3743 3a22 6425 222c 3843 3a22     %d,"C7":%d,"C8":
   d8e30:	6425 222c 3943 3a22 6425 7d20 7200 626f     %d,"C9":%d }.rob
   d8e40:	746f 692f 7542 0073 5453 504f 6220 6c61     ot/iBus.STOP bal
   d8e50:	6e61 6563 6e49 7570 2074 7266 6d6f 5220     anceInput from R
   d8e60:	2058 203d 6625 5300 4154 5452 6220 6c61     X = %f.START bal
   d8e70:	6e61 6563 6e49 7570 2074 7266 6d6f 5220     anceInput from R
   d8e80:	2058 203d 6625 7400 7268 746f 6c74 3d65     X = %f.throttle=
   d8e90:	6425 202c 7473 6565 6972 676e 253d 0064     %d, steering=%d.
   d8ea0:	6972 6867 5374 7465 6f70 6e69 2074 7266     rightSetpoint fr
   d8eb0:	6d6f 5220 2058 203d 6625 6c00 6665 5374     om RX = %f.leftS
   d8ec0:	7465 6f70 6e69 2074 7266 6d6f 5220 2058     etpoint from RX 
   d8ed0:	203d 6625 6c00 6f6f 0070 255b 5d73 2520     = %f.loop.[%s] %
   d8ee0:	756c 4220 4c41 4e41 4543 5020 4449 4220     lu BALANCE PID B
   d8ef0:	704b 3e2d 2520 2066 5b00 7325 205d 6c25     Kp-> %f .[%s] %l
   d8f00:	2075 3e2d 4220 4c41 4e41 4543 495f 494e     u -> BALANCE_INI
   d8f10:	2054 0020 255b 5d73 2520 756c 2d20 203e     T  .[%s] %lu -> 
   d8f20:	514d 5454 545f 5345 2054 0020 207b 7422     MQTT_TEST  .{ "t
   d8f30:	6d69 7365 6174 706d 3a22 2520 756c 202c     imestamp": %lu, 
   d8f40:	6d22 6c69 696c 2273 203a 6c25 2c75 2220     "millis": %lu, "
   d8f50:	7974 6570 3a22 2220 6574 7473 2022 007d     type": "test" }.
   d8f60:	6f72 6f62 2f74 6574 7473 6200 6c61 6e61     robot/test.balan
   d8f70:	6563 6720 656f 2073 6361 6974 6576 203a     ce goes active: 
   d8f80:	2520 756c 202c 6625 6200 6c61 6e61 6563      %lu, %f.balance
   d8f90:	6720 656f 2073 6469 656c 203a 6c25 2c75      goes idle: %lu,
   d8fa0:	2520 0066 6162 616c 636e 5065 6469 7b20      %f.balancePid {
   d8fb0:	2220 6974 656d 7473 6d61 2270 203a 2522      "timestamp": "%
   d8fc0:	756c 2c22 2220 6e49 7570 2274 3a20 2220     lu", "Input" : "
   d8fd0:	6625 2c22 2220 6553 7074 696f 746e 2022     %f", "Setpoint" 
   d8fe0:	3a20 2220 6625 2c22 2220 754f 7074 7475      : "%f", "Output
   d8ff0:	2022 203a 2522 2266 7d20 7b00 2220 6974     " : "%f" }.{ "ti
   d9000:	656d 7473 6d61 2270 203a 6c25 2c75 2220     mestamp": %lu, "
   d9010:	696d 6c6c 7369 3a22 2520 756c 202c 7422     millis": %lu, "t
   d9020:	7079 2265 223a 6970 2264 202c 6e22 6d61     ype":"pid", "nam
   d9030:	2265 223a 6162 616c 636e 5065 6469 2c22     e":"balancePid",
   d9040:	2220 6e49 7570 2274 3a20 2520 2c66 2220      "Input" : %f, "
   d9050:	6553 7074 696f 746e 2022 3a20 2520 2c66     Setpoint"  : %f,
   d9060:	2220 754f 7074 7475 2022 203a 6625 202c      "Output" : %f, 
   d9070:	4b22 2270 253a 2c66 2220 694b 3a22 6625     "Kp":%f, "Ki":%f
   d9080:	202c 4b22 2264 253a 2c66 2220 6f6d 6564     , "Kd":%f, "mode
   d9090:	3a22 2522 2273 2020 007d 6f72 6f62 2f74     ":"%s"  }.robot/
   d90a0:	6162 616c 636e 5065 6469 5b00 7325 205d     balancePid.[%s] 
   d90b0:	6425 2d20 6c20 6665 2074 6970 2064 6e69     %d - left pid in
   d90c0:	7570 3d74 6625 202c 6573 7074 696f 746e     put=%f, setpoint
   d90d0:	253d 2c66 6f20 7475 7570 3d74 6625 5b00     =%f, output=%f.[
   d90e0:	7325 205d 6425 2d20 6c20 6665 2074 6f70     %s] %d - left po
   d90f0:	6577 3d72 6625 7b00 2220 6974 656d 7473     wer=%f.{ "timest
   d9100:	6d61 2270 203a 6c25 2c75 2220 696d 6c6c     amp": %lu, "mill
   d9110:	7369 3a22 6c25 2c75 2220 7974 6570 3a22     is":%lu, "type":
   d9120:	7022 6469 2c22 2220 616e 656d 3a22 7222     "pid", "name":"r
   d9130:	6769 7468 6950 2264 202c 4922 706e 7475     ightPid", "Input
   d9140:	2022 203a 6625 202c 5322 7465 6f70 6e69     " : %f, "Setpoin
   d9150:	2274 2020 203a 6625 202c 4f22 7475 7570     t"  : %f, "Outpu
   d9160:	2274 3a20 2520 2c66 2220 704b 3a22 6625     t" : %f, "Kp":%f
   d9170:	202c 4b22 2269 253a 2c66 2220 644b 3a22     , "Ki":%f, "Kd":
   d9180:	6625 202c 6d22 646f 2265 223a 7325 2022     %f, "mode":"%s" 
   d9190:	7d20 7200 626f 746f 722f 6769 7468 6950      }.robot/rightPi
   d91a0:	0064 207b 7422 6d69 7365 6174 706d 3a22     d.{ "timestamp":
   d91b0:	2520 756c 202c 6d22 6c69 696c 2273 203a      %lu, "millis": 
   d91c0:	6c25 2c75 2220 7974 6570 3a22 7022 776f     %lu, "type":"pow
   d91d0:	7265 2c22 2220 616e 656d 3a22 7222 6769     er", "name":"rig
   d91e0:	7468 6f50 6577 2272 202c 7022 776f 7265     htPower", "power
   d91f0:	2022 203a 6625 2020 007d 6f72 6f62 2f74     " : %f  }.robot/
   d9200:	6972 6867 5074 776f 7265 5b00 7325 205d     rightPower.[%s] 
   d9210:	6425 2d20 7220 6769 7468 7020 6469 6920     %d - right pid i
   d9220:	706e 7475 253d 2c66 7320 7465 6f70 6e69     nput=%f, setpoin
   d9230:	3d74 6625 202c 756f 7074 7475 253d 0066     t=%f, output=%f.
   d9240:	255b 5d73 2520 2064 202d 6972 6867 2074     [%s] %d - right 
   d9250:	6f70 6577 3d72 6625 5b00 7325 205d 6425     power=%f.[%s] %d
   d9260:	2d20 6c20 6665 2074 6970 2064 5541 4f54      - left pid AUTO
   d9270:	5554 454e 4320 4d4f 4c50 5445 2045 704b     TUNE COMPLETE Kp
   d9280:	253d 2c66 4b20 3d69 6625 202c 644b 253d     =%f, Ki=%f, Kd=%
   d9290:	0066 255b 5d73 2520 2064 202d 656c 7466     f.[%s] %d - left
   d92a0:	7020 6469 4120 5455 544f 4e55 2045 5552      pid AUTOTUNE RU
   d92b0:	4e4e 4e49 2047 6e69 7570 3d74 6625 202c     NNING input=%f, 
   d92c0:	6573 7074 696f 746e 253d 2c66 6f20 7475     setpoint=%f, out
   d92d0:	7570 3d74 6625 7b00 2220 6974 656d 7473     put=%f.{ "timest
   d92e0:	6d61 2270 203a 6c25 2c75 2220 696d 6c6c     amp": %lu, "mill
   d92f0:	7369 3a22 2520 756c 202c 2220 7974 6570     is": %lu,  "type
   d9300:	3a22 7022 776f 7265 2c22 2220 616e 656d     ":"power", "name
   d9310:	3a22 6c22 6665 5074 776f 7265 2c22 2220     ":"leftPower", "
   d9320:	6f70 6577 2272 3a20 2520 2066 7d20 7200     power" : %f  }.r
   d9330:	626f 746f 6c2f 6665 5074 776f 7265 4500     obot/leftPower.E
   d9340:	7473 6d69 7461 6465 7020 6572 732d 6163     stimated pre-sca
   d9350:	656c 203a 4600 6e69 6c61 7020 6572 732d     le: .Final pre-s
   d9360:	6163 656c 203a 4200 4f4e 3530 0035 0000     cale: .BNO055...

000d9370 <_ZTV15Adafruit_BNO055>:
	...
   d9378:	40b3 000d 5705 000d 656f 000d 6849 000d     .@...W..oe..Ih..
   d9388:	6571 000d                                   qe..

000d938c <_ZTV8I2CSlave>:
	...
   d9394:	689d 000d 68bd 000d                         .h...h..

000d939c <_ZTVN5spark12NetworkClassE>:
	...
   d93a4:	6f85 000d 6f8f 000d 6f99 000d 6fa3 000d     .o...o...o...o..
   d93b4:	6fad 000d 6fb9 000d 6fc5 000d 6fd1 000d     .o...o...o...o..
   d93c4:	6fd9 000d 6fe3 000d 6fed 000d               .o...o...o..

000d93d0 <_ZTVN5spark9WiFiClassE>:
	...
   d93d8:	7147 000d 713d 000d 7133 000d 70e9 000d     Gq..=q..3q...p..
   d93e8:	7127 000d 711b 000d 710f 000d 7107 000d     'q...q...q...q..
   d93f8:	70fd 000d 70f3 000d 6fed 000d               .p...p...o..

000d9404 <_ZTV7TwoWire>:
	...
   d940c:	7165 000d 71af 000d 7187 000d 7167 000d     eq...q...q..gq..
   d941c:	718f 000d 7197 000d 719f 000d 71a7 000d     .q...q...q...q..

000d942c <_ZTV11USARTSerial>:
	...
   d9434:	7277 000d 72e3 000d 72bb 000d 788b 000d     wr...r...r...x..
   d9444:	728b 000d 72a7 000d 7299 000d 72b5 000d     .r...r...r...r..
   d9454:	7279 000d 727d 000d                         yr..}r..

000d945c <_ZTV9USBSerial>:
	...
   d9464:	7385 000d 73ed 000d 73c3 000d 788b 000d     .s...s...s...x..
   d9474:	73b5 000d 7387 000d 7397 000d 73e7 000d     .s...s...s...s..
   d9484:	73a7 000d 7381 000d                         .s...s..

000d948c <_ZTV9IPAddress>:
	...
   d9494:	74a1 000d 7491 000d 7493 000d 5925 252d     .t...t...t..%Y-%
   d94a4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d94b4:	7361 7463 6d69 0065 7061 0070 616e 006e     asctime.app.nan.
   d94c4:	6e69 0066 766f 0066 002e 0000               inf.ovf.....

000d94d0 <_ZTVN5spark13EthernetClassE>:
	...
   d94d8:	7d5f 000d 7d55 000d 7d4b 000d 7d41 000d     _}..U}..K}..A}..
   d94e8:	7d35 000d 7d29 000d 7d1d 000d 7d15 000d     5}..)}...}...}..
   d94f8:	7d0b 000d 7d01 000d 6fed 000d               .}...}...o..

000d9504 <_ZSt7nothrow>:
	...

000d9505 <link_const_variable_data_end>:
   d9505:	00          	.byte	0x00
	...

000d9508 <link_constructors_location>:
   d9508:	000d5719 	.word	0x000d5719
   d950c:	000d70c1 	.word	0x000d70c1
   d9510:	000d7151 	.word	0x000d7151
   d9514:	000d76fd 	.word	0x000d76fd
   d9518:	000d7861 	.word	0x000d7861
   d951c:	000d7875 	.word	0x000d7875
   d9520:	000d7b75 	.word	0x000d7b75
   d9524:	000d7cc5 	.word	0x000d7cc5
   d9528:	000d7d69 	.word	0x000d7d69

000d952c <link_constructors_end>:
   d952c:	00000000 	.word	0x00000000
