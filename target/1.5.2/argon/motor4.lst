
/home/joliver/photon3/motor4/target/1.5.2/argon/motor4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000073a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db3c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000e8  2003db80  000db3c4  0001db80  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b88  2003dc68  2003dc68  0002dc68  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000db4ac  000db4ac  0002b4ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db4d4  000db4d4  0002b4d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00146cbd  00000000  00000000  0002b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001b0e9  00000000  00000000  00172195  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003298  00000000  00000000  0018d27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00044c0d  00000000  00000000  00190516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00046912  00000000  00000000  001d5123  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00112482  00000000  00000000  0021ba35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002a8e6  00000000  00000000  0032deb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005de8  00000000  00000000  0035879d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f95c  00000000  00000000  0035e588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fedf 	bl	d9df4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fee4 	bl	d9e0a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003db80 	.word	0x2003db80
   d404c:	000db3c4 	.word	0x000db3c4
   d4050:	2003dc68 	.word	0x2003dc68
   d4054:	2003dc68 	.word	0x2003dc68
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 f98b 	bl	d8378 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db3c0 	.word	0x000db3c0
   d4084:	000db358 	.word	0x000db358

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 ba16 	b.w	d44b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb9b 	bl	d47c8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 b931 	b.w	d82fc <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 b9fd 	b.w	d7498 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f003 b9fb 	b.w	d7498 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f003 ba01 	b.w	d74a8 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f003 b9ff 	b.w	d74a8 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40ba:	4770      	bx	lr

000d40bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40bc:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40be:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40c0:	6898      	ldr	r0, [r3, #8]
   d40c2:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40c4:	f012 0f01 	tst.w	r2, #1
   d40c8:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40cc:	bf18      	it	ne
   d40ce:	5881      	ldrne	r1, [r0, r2]
   d40d0:	4410      	add	r0, r2
   d40d2:	bf18      	it	ne
   d40d4:	58cb      	ldrne	r3, [r1, r3]
   d40d6:	4718      	bx	r3

000d40d8 <_ZN15Adafruit_BNO055D1Ev>:

    uint16_t accel_radius;
    uint16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
   d40d8:	4770      	bx	lr
	...

000d40dc <_Z12MQTTcallbackPcPhj>:
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, 60, MQTTcallback, 512);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    char p[length + 1];
   d40de:	f102 0308 	add.w	r3, r2, #8
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, 60, MQTTcallback, 512);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40e2:	b083      	sub	sp, #12
    char p[length + 1];
   d40e4:	f023 0307 	bic.w	r3, r3, #7
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, 60, MQTTcallback, 512);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40e8:	af02      	add	r7, sp, #8
    char p[length + 1];
   d40ea:	ebad 0d03 	sub.w	sp, sp, r3
   d40ee:	ac02      	add	r4, sp, #8
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, 60, MQTTcallback, 512);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40f0:	4615      	mov	r5, r2
    char p[length + 1];
    memcpy(p, payload, length);
   d40f2:	4620      	mov	r0, r4
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, 60, MQTTcallback, 512);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40f4:	460e      	mov	r6, r1
    char p[length + 1];
    memcpy(p, payload, length);
   d40f6:	f005 fe7d 	bl	d9df4 <memcpy>
    p[length] = 0;
   d40fa:	2300      	movs	r3, #0
   d40fc:	5563      	strb	r3, [r4, r5]
    Serial.printlnf("[%s]%.*s",__FUNCTION__,length, payload);
   d40fe:	f004 f81d 	bl	d813c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4102:	4a14      	ldr	r2, [pc, #80]	; (d4154 <_Z12MQTTcallbackPcPhj+0x78>)
   d4104:	4b14      	ldr	r3, [pc, #80]	; (d4158 <_Z12MQTTcallbackPcPhj+0x7c>)
   d4106:	2101      	movs	r1, #1
   d4108:	e88d 0060 	stmia.w	sp, {r5, r6}
   d410c:	f004 fbaa 	bl	d8864 <_ZN5Print11printf_implEbPKcz>

    if (!strcmp(p, "RED"))
   d4110:	4912      	ldr	r1, [pc, #72]	; (d415c <_Z12MQTTcallbackPcPhj+0x80>)
   d4112:	4620      	mov	r0, r4
   d4114:	f005 feaa 	bl	d9e6c <strcmp>
   d4118:	4602      	mov	r2, r0
   d411a:	b910      	cbnz	r0, d4122 <_Z12MQTTcallbackPcPhj+0x46>
        RGB.color(255, 0, 0);
   d411c:	4601      	mov	r1, r0
   d411e:	20ff      	movs	r0, #255	; 0xff
   d4120:	e010      	b.n	d4144 <_Z12MQTTcallbackPcPhj+0x68>
    else if (!strcmp(p, "GREEN"))
   d4122:	490f      	ldr	r1, [pc, #60]	; (d4160 <_Z12MQTTcallbackPcPhj+0x84>)
   d4124:	4620      	mov	r0, r4
   d4126:	f005 fea1 	bl	d9e6c <strcmp>
   d412a:	4602      	mov	r2, r0
   d412c:	b908      	cbnz	r0, d4132 <_Z12MQTTcallbackPcPhj+0x56>
        RGB.color(0, 255, 0);
   d412e:	21ff      	movs	r1, #255	; 0xff
   d4130:	e008      	b.n	d4144 <_Z12MQTTcallbackPcPhj+0x68>
    else if (!strcmp(p, "BLUE"))
   d4132:	490c      	ldr	r1, [pc, #48]	; (d4164 <_Z12MQTTcallbackPcPhj+0x88>)
   d4134:	4620      	mov	r0, r4
   d4136:	f005 fe99 	bl	d9e6c <strcmp>
        RGB.color(0, 0, 255);
   d413a:	22ff      	movs	r2, #255	; 0xff

    if (!strcmp(p, "RED"))
        RGB.color(255, 0, 0);
    else if (!strcmp(p, "GREEN"))
        RGB.color(0, 255, 0);
    else if (!strcmp(p, "BLUE"))
   d413c:	4601      	mov	r1, r0
   d413e:	b108      	cbz	r0, d4144 <_Z12MQTTcallbackPcPhj+0x68>
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
   d4140:	4611      	mov	r1, r2
   d4142:	4610      	mov	r0, r2
   d4144:	f004 f95a 	bl	d83fc <_ZN8RGBClass5colorEiii>
    delay(100);
   d4148:	2064      	movs	r0, #100	; 0x64
   d414a:	f004 fa4d 	bl	d85e8 <delay>
}
   d414e:	3704      	adds	r7, #4
   d4150:	46bd      	mov	sp, r7
   d4152:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4154:	000da65e 	.word	0x000da65e
   d4158:	000da64c 	.word	0x000da64c
   d415c:	000da667 	.word	0x000da667
   d4160:	000da66b 	.word	0x000da66b
   d4164:	000da671 	.word	0x000da671

000d4168 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4168:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d416a:	b510      	push	{r4, lr}
   d416c:	4604      	mov	r4, r0
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d416e:	d905      	bls.n	d417c <nrf_gpio_pin_read+0x14>
   d4170:	4a09      	ldr	r2, [pc, #36]	; (d4198 <nrf_gpio_pin_read+0x30>)
   d4172:	2100      	movs	r1, #0
   d4174:	200a      	movs	r0, #10
   d4176:	f003 f8c9 	bl	d730c <panic_>
   d417a:	e001      	b.n	d4180 <nrf_gpio_pin_read+0x18>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d417c:	281f      	cmp	r0, #31
   d417e:	d903      	bls.n	d4188 <nrf_gpio_pin_read+0x20>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4180:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
   d4184:	4b05      	ldr	r3, [pc, #20]	; (d419c <nrf_gpio_pin_read+0x34>)
   d4186:	e001      	b.n	d418c <nrf_gpio_pin_read+0x24>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4188:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d418c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4190:	40e0      	lsrs	r0, r4
}
   d4192:	f000 0001 	and.w	r0, r0, #1
   d4196:	bd10      	pop	{r4, pc}
   d4198:	000d71ad 	.word	0x000d71ad
   d419c:	50000300 	.word	0x50000300

000d41a0 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d41a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d41a2:	4b26      	ldr	r3, [pc, #152]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x9c>)
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d41a4:	4e26      	ldr	r6, [pc, #152]	; (d4240 <_ZN7Encoder16interruptHandlerEv+0xa0>)
   d41a6:	685b      	ldr	r3, [r3, #4]
		ticks=System.ticks();
   d41a8:	6183      	str	r3, [r0, #24]
   d41aa:	8903      	ldrh	r3, [r0, #8]
   d41ac:	6832      	ldr	r2, [r6, #0]
   d41ae:	011b      	lsls	r3, r3, #4
   d41b0:	18d1      	adds	r1, r2, r3
   d41b2:	5cd5      	ldrb	r5, [r2, r3]
   d41b4:	784b      	ldrb	r3, [r1, #1]
   d41b6:	f003 031f 	and.w	r3, r3, #31
   d41ba:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d41be:	4604      	mov	r4, r0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d41c0:	4628      	mov	r0, r5
   d41c2:	f7ff ffd1 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41c6:	4628      	mov	r0, r5
   d41c8:	f7ff ffce 	bl	d4168 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d41cc:	89a3      	ldrh	r3, [r4, #12]
   d41ce:	6832      	ldr	r2, [r6, #0]
   d41d0:	011b      	lsls	r3, r3, #4
   d41d2:	18d1      	adds	r1, r2, r3
   d41d4:	5cd5      	ldrb	r5, [r2, r3]
   d41d6:	784b      	ldrb	r3, [r1, #1]
   d41d8:	f003 031f 	and.w	r3, r3, #31
   d41dc:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d41e0:	4607      	mov	r7, r0

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d41e2:	4628      	mov	r0, r5
   d41e4:	f7ff ffc0 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41e8:	4628      	mov	r0, r5
   d41ea:	f7ff ffbd 	bl	d4168 <nrf_gpio_pin_read>
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d41ee:	7c23      	ldrb	r3, [r4, #16]
		if (p1val) newState |= 4;
   d41f0:	f017 0fff 	tst.w	r7, #255	; 0xff
private:
	void interruptHandler() {
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d41f4:	f003 0303 	and.w	r3, r3, #3

private:
	void interruptHandler() {
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d41f8:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
   d41fa:	bf18      	it	ne
   d41fc:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) newState |= 8;
   d4200:	b108      	cbz	r0, d4206 <_ZN7Encoder16interruptHandlerEv+0x66>
   d4202:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   d4206:	109a      	asrs	r2, r3, #2
		switch (newState) {
   d4208:	3b01      	subs	r3, #1
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
		if (p2val) newState |= 8;
		state = (newState >> 2);
   d420a:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   d420c:	2b0d      	cmp	r3, #13
   d420e:	d814      	bhi.n	d423a <_ZN7Encoder16interruptHandlerEv+0x9a>
   d4210:	e8df f003 	tbb	[pc, r3]
   d4214:	0a0d0a07 	.word	0x0a0d0a07
   d4218:	07071013 	.word	0x07071013
   d421c:	0d0a1310 	.word	0x0d0a1310
   d4220:	070a      	.short	0x070a
			case 1: case 7: case 8: case 14:
				position++;
   d4222:	6963      	ldr	r3, [r4, #20]
   d4224:	3301      	adds	r3, #1
   d4226:	e007      	b.n	d4238 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 2: case 4: case 11: case 13:
				position--;
   d4228:	6963      	ldr	r3, [r4, #20]
   d422a:	3b01      	subs	r3, #1
   d422c:	e004      	b.n	d4238 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 3: case 12:
				position += 2;
   d422e:	6963      	ldr	r3, [r4, #20]
   d4230:	3302      	adds	r3, #2
   d4232:	e001      	b.n	d4238 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 6: case 9:
				position -= 2;
   d4234:	6963      	ldr	r3, [r4, #20]
   d4236:	3b02      	subs	r3, #2
   d4238:	6163      	str	r3, [r4, #20]
   d423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d423c:	e0001000 	.word	0xe0001000
   d4240:	2003de70 	.word	0x2003de70

000d4244 <_Z6setPwmP16Adafruit_DCMotori.part.3>:
/******************************************
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
   d4244:	b510      	push	{r4, lr}
{  
  if( power==0 ) {
    motor->setSpeed(abs(power));
   d4246:	2900      	cmp	r1, #0
   d4248:	bfb8      	it	lt
   d424a:	4249      	neglt	r1, r1
/******************************************
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
   d424c:	4604      	mov	r4, r0
{  
  if( power==0 ) {
    motor->setSpeed(abs(power));
   d424e:	b2c9      	uxtb	r1, r1
   d4250:	f001 fe28 	bl	d5ea4 <_ZN16Adafruit_DCMotor8setSpeedEh>
#if 1
    motor->run(FORWARD);
   d4254:	4620      	mov	r0, r4
   d4256:	2101      	movs	r1, #1
   d4258:	f001 fdfe 	bl	d5e58 <_ZN16Adafruit_DCMotor3runEh>
  {
    motor->run(BACKWARD);
    motor->setSpeed(abs(power));      
  }
  return power;
}
   d425c:	bd10      	pop	{r4, pc}

000d425e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d425e:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4260:	b538      	push	{r3, r4, r5, lr}
   d4262:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4264:	d005      	beq.n	d4272 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4266:	2a03      	cmp	r2, #3
   d4268:	d00f      	beq.n	d428a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d426a:	2a01      	cmp	r2, #1
   d426c:	d111      	bne.n	d4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d426e:	680b      	ldr	r3, [r1, #0]
   d4270:	e009      	b.n	d4286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4272:	200c      	movs	r0, #12
   d4274:	680d      	ldr	r5, [r1, #0]
   d4276:	f7ff ff10 	bl	d409a <_Znwj>
   d427a:	4603      	mov	r3, r0
   d427c:	b118      	cbz	r0, d4286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d427e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4286:	6023      	str	r3, [r4, #0]
   d4288:	e003      	b.n	d4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d428a:	210c      	movs	r1, #12
   d428c:	6800      	ldr	r0, [r0, #0]
   d428e:	f004 fd7f 	bl	d8d90 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4292:	2000      	movs	r0, #0
   d4294:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4298 <_Z16SleepStateTogglev>:




void SleepStateToggle()
{
   d4298:	b510      	push	{r4, lr}
  // debounce
  if ( millis()-sleepStateTime < 1000 )
   d429a:	4c16      	ldr	r4, [pc, #88]	; (d42f4 <_Z16SleepStateTogglev+0x5c>)




void SleepStateToggle()
{
   d429c:	b088      	sub	sp, #32

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d429e:	f002 ff8d 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  // debounce
  if ( millis()-sleepStateTime < 1000 )
   d42a2:	6823      	ldr	r3, [r4, #0]
   d42a4:	1ac0      	subs	r0, r0, r3
   d42a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d42aa:	d320      	bcc.n	d42ee <_Z16SleepStateTogglev+0x56>
   d42ac:	f002 ff86 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
    // ignore this
    VERBOSE(  Serial.printlnf( "[%s] %d -> debounce ", __FUNCTION__, millis()) ) ;
    return;
  }

  sleepStateTime=millis();
   d42b0:	6020      	str	r0, [r4, #0]
  

  if ( sleepState==AWAKE )
   d42b2:	4c11      	ldr	r4, [pc, #68]	; (d42f8 <_Z16SleepStateTogglev+0x60>)
   d42b4:	7823      	ldrb	r3, [r4, #0]
   d42b6:	b9c3      	cbnz	r3, d42ea <_Z16SleepStateTogglev+0x52>
  {

    VERBOSE( Serial.printlnf( "[%s] %d enter sleep mode for 60 seconds or A0 falling", __FUNCTION__, millis() ) );

    delay(100);
   d42b8:	2064      	movs	r0, #100	; 0x64
   d42ba:	f004 f995 	bl	d85e8 <delay>
   d42be:	4b0f      	ldr	r3, [pc, #60]	; (d42fc <_Z16SleepStateTogglev+0x64>)
    sleepState=ASLEEP;
   d42c0:	2201      	movs	r2, #1
   d42c2:	681b      	ldr	r3, [r3, #0]
   d42c4:	7022      	strb	r2, [r4, #0]
   d42c6:	2113      	movs	r1, #19
   d42c8:	f8ad 1016 	strh.w	r1, [sp, #22]
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d42cc:	9302      	str	r3, [sp, #8]
   d42ce:	2102      	movs	r1, #2
   d42d0:	233c      	movs	r3, #60	; 0x3c
   d42d2:	f88d 1015 	strb.w	r1, [sp, #21]
   d42d6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d42da:	f10d 0116 	add.w	r1, sp, #22
   d42de:	f10d 0315 	add.w	r3, sp, #21
   d42e2:	a806      	add	r0, sp, #24
   d42e4:	f004 fbdc 	bl	d8aa0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d42e8:	e001      	b.n	d42ee <_Z16SleepStateTogglev+0x56>
    System.sleep(SLEEPSTATE_PIN, FALLING, 60 );
  } 
  else
  {
    /* this is the default when woken from System.sleep() by timer or interrupt from pin */
    sleepState=AWAKE;
   d42ea:	2300      	movs	r3, #0
   d42ec:	7023      	strb	r3, [r4, #0]
  }

  VERBOSE(  Serial.printlnf( "[%s] %d ->%s ", __FUNCTION__, millis(), SleepStateStr(sleepState)) ) ;
}
   d42ee:	b008      	add	sp, #32
   d42f0:	bd10      	pop	{r4, pc}
   d42f2:	bf00      	nop
   d42f4:	2003dcf8 	.word	0x2003dcf8
   d42f8:	2003dea0 	.word	0x2003dea0
   d42fc:	2003dde8 	.word	0x2003dde8

000d4300 <_Z15SleepStateCheckv>:

void SleepStateCheck(void)
{
   d4300:	b508      	push	{r3, lr}
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
   d4302:	2013      	movs	r0, #19
   d4304:	f004 fd23 	bl	d8d4e <digitalRead>
   d4308:	b918      	cbnz	r0, d4312 <_Z15SleepStateCheckv+0x12>
  {
    VERBOSE(  Serial.printlnf( "[%s] %d sleepState=%s (%d) ", __FUNCTION__, millis(), SleepStateStr(sleepState), digitalRead(SLEEPSTATE_PIN) ) );
    SleepStateToggle();  
  }
}
   d430a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void SleepStateCheck(void)
{
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
  {
    VERBOSE(  Serial.printlnf( "[%s] %d sleepState=%s (%d) ", __FUNCTION__, millis(), SleepStateStr(sleepState), digitalRead(SLEEPSTATE_PIN) ) );
    SleepStateToggle();  
   d430e:	f7ff bfc3 	b.w	d4298 <_Z16SleepStateTogglev>
   d4312:	bd08      	pop	{r3, pc}

000d4314 <_Z14SleepStateInitv>:
}

void SleepStateInit()
{
  VERBOSE( Serial.printlnf( "[%s]", __FUNCTION__ ) );
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
   d4314:	2102      	movs	r1, #2
   d4316:	2013      	movs	r0, #19
   d4318:	f004 bd08 	b.w	d8d2c <pinMode>

000d431c <_Z6setPwmP16Adafruit_DCMotori>:
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
{  
   d431c:	b538      	push	{r3, r4, r5, lr}
  if( power==0 ) {
   d431e:	1e0c      	subs	r4, r1, #0
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
{  
   d4320:	4605      	mov	r5, r0
  if( power==0 ) {
   d4322:	d102      	bne.n	d432a <_Z6setPwmP16Adafruit_DCMotori+0xe>
   d4324:	f7ff ff8e 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.3>
   d4328:	e00d      	b.n	d4346 <_Z6setPwmP16Adafruit_DCMotori+0x2a>
    motor->run(FORWARD);
#else
    motor->run(RELEASE);
#endif
  }
  else if( power>0 ) {
   d432a:	dd04      	ble.n	d4336 <_Z6setPwmP16Adafruit_DCMotori+0x1a>
    motor->run(FORWARD);
   d432c:	2101      	movs	r1, #1
   d432e:	f001 fd93 	bl	d5e58 <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(power));
   d4332:	b2e1      	uxtb	r1, r4
   d4334:	e004      	b.n	d4340 <_Z6setPwmP16Adafruit_DCMotori+0x24>
  }
  else
  {
    motor->run(BACKWARD);
   d4336:	2102      	movs	r1, #2
   d4338:	f001 fd8e 	bl	d5e58 <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(power));      
   d433c:	4261      	negs	r1, r4
   d433e:	b2c9      	uxtb	r1, r1
   d4340:	4628      	mov	r0, r5
   d4342:	f001 fdaf 	bl	d5ea4 <_ZN16Adafruit_DCMotor8setSpeedEh>
  }
  return power;
}
   d4346:	4620      	mov	r0, r4
   d4348:	bd38      	pop	{r3, r4, r5, pc}
	...

000d434c <_Z14setTargetSpeedi>:

int setTargetSpeed( int speed )
{  
   d434c:	b510      	push	{r4, lr}
   d434e:	4604      	mov	r4, r0
  VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), speed) ) ;
  leftSetpoint=rightSetpoint=speed;
   d4350:	f005 f860 	bl	d9414 <__aeabi_i2d>
   d4354:	4b03      	ldr	r3, [pc, #12]	; (d4364 <_Z14setTargetSpeedi+0x18>)
   d4356:	e9c3 0100 	strd	r0, r1, [r3]
   d435a:	4b03      	ldr	r3, [pc, #12]	; (d4368 <_Z14setTargetSpeedi+0x1c>)
   d435c:	e9c3 0100 	strd	r0, r1, [r3]
  return speed;
}
   d4360:	4620      	mov	r0, r4
   d4362:	bd10      	pop	{r4, pc}
   d4364:	2003de78 	.word	0x2003de78
   d4368:	2003dd90 	.word	0x2003dd90

000d436c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d436c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d436e:	b089      	sub	sp, #36	; 0x24
   d4370:	4604      	mov	r4, r0
   d4372:	a802      	add	r0, sp, #8
   d4374:	e880 0006 	stmia.w	r0, {r1, r2}
   d4378:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d437a:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d437c:	2300      	movs	r3, #0
   d437e:	460f      	mov	r7, r1
   d4380:	9e03      	ldr	r6, [sp, #12]
   d4382:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4384:	f7ff fe89 	bl	d409a <_Znwj>
   d4388:	b110      	cbz	r0, d4390 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d438a:	6007      	str	r7, [r0, #0]
   d438c:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d438e:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4390:	4b0c      	ldr	r3, [pc, #48]	; (d43c4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d4392:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d4394:	4b0c      	ldr	r3, [pc, #48]	; (d43c8 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x5c>)
   d4396:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4398:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d439c:	9004      	str	r0, [sp, #16]
   d439e:	9300      	str	r3, [sp, #0]
   d43a0:	4620      	mov	r0, r4
   d43a2:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d43a6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d43aa:	a904      	add	r1, sp, #16
   d43ac:	f004 f882 	bl	d84b4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d43b0:	9b06      	ldr	r3, [sp, #24]
   d43b2:	4604      	mov	r4, r0
   d43b4:	b11b      	cbz	r3, d43be <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d43b6:	a904      	add	r1, sp, #16
   d43b8:	2203      	movs	r2, #3
   d43ba:	4608      	mov	r0, r1
   d43bc:	4798      	blx	r3
}
   d43be:	4620      	mov	r0, r4
   d43c0:	b009      	add	sp, #36	; 0x24
   d43c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43c4:	000d40bd 	.word	0x000d40bd
   d43c8:	000d425f 	.word	0x000d425f

000d43cc <_ZN7EncoderC1Ett>:
#endif

class Encoder
{
public:
	Encoder(pin_t pin1, pin_t pin2) {
   d43cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d43d0:	460f      	mov	r7, r1
   d43d2:	4604      	mov	r4, r0
   d43d4:	b089      	sub	sp, #36	; 0x24
   d43d6:	4616      	mov	r6, r2
		pinMode(pin1, INPUT_PULLUP);
   d43d8:	2102      	movs	r1, #2
   d43da:	4638      	mov	r0, r7
   d43dc:	f004 fca6 	bl	d8d2c <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   d43e0:	2102      	movs	r1, #2
   d43e2:	4630      	mov	r0, r6
   d43e4:	f004 fca2 	bl	d8d2c <pinMode>

		pin1_register = PIN_TO_BASEREG(pin1);
   d43e8:	2300      	movs	r3, #0
   d43ea:	6023      	str	r3, [r4, #0]
		pin1_bitmask = PIN_TO_BITMASK(pin1);
		pin2_register = PIN_TO_BASEREG(pin2);
   d43ec:	6063      	str	r3, [r4, #4]
		pin2_bitmask = PIN_TO_BITMASK(pin2);
		position = 0;
   d43ee:	6163      	str	r3, [r4, #20]
		ticks = 0;
   d43f0:	61a3      	str	r3, [r4, #24]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d43f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43f6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d44a4 <_ZN7EncoderC1Ett+0xd8>
	Encoder(pin_t pin1, pin_t pin2) {
		pinMode(pin1, INPUT_PULLUP);
		pinMode(pin2, INPUT_PULLUP);

		pin1_register = PIN_TO_BASEREG(pin1);
		pin1_bitmask = PIN_TO_BITMASK(pin1);
   d43fa:	60a7      	str	r7, [r4, #8]
		pin2_register = PIN_TO_BASEREG(pin2);
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   d43fc:	60e6      	str	r6, [r4, #12]
   d43fe:	f002 fed5 	bl	d71ac <HAL_Delay_Microseconds>
   d4402:	8923      	ldrh	r3, [r4, #8]
   d4404:	f8d9 2000 	ldr.w	r2, [r9]
   d4408:	011b      	lsls	r3, r3, #4
   d440a:	18d1      	adds	r1, r2, r3
   d440c:	5cd5      	ldrb	r5, [r2, r3]
   d440e:	784b      	ldrb	r3, [r1, #1]
   d4410:	f003 031f 	and.w	r3, r3, #31
   d4414:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4418:	4628      	mov	r0, r5
   d441a:	f7ff fea5 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d441e:	4628      	mov	r0, r5
   d4420:	f7ff fea2 	bl	d4168 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4424:	89a3      	ldrh	r3, [r4, #12]
   d4426:	f8d9 2000 	ldr.w	r2, [r9]
   d442a:	011b      	lsls	r3, r3, #4
   d442c:	18d1      	adds	r1, r2, r3
   d442e:	5cd5      	ldrb	r5, [r2, r3]
   d4430:	784b      	ldrb	r3, [r1, #1]
   d4432:	f003 031f 	and.w	r3, r3, #31
   d4436:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
		ticks = 0;
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
   d443a:	f110 0800 	adds.w	r8, r0, #0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d443e:	4628      	mov	r0, r5
   d4440:	bf18      	it	ne
   d4442:	f04f 0801 	movne.w	r8, #1
   d4446:	f7ff fe8f 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d444a:	4628      	mov	r0, r5
   d444c:	f7ff fe8c 	bl	d4168 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d4450:	b118      	cbz	r0, d445a <_ZN7EncoderC1Ett+0x8e>
   d4452:	f048 0802 	orr.w	r8, r8, #2
   d4456:	fa5f f888 	uxtb.w	r8, r8
		state = s;
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d445a:	2500      	movs	r5, #0
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
		state = s;
   d445c:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d4460:	f04f 38ff 	mov.w	r8, #4294967295
   d4464:	e88d 0120 	stmia.w	sp, {r5, r8}
   d4468:	f8df 903c 	ldr.w	r9, [pc, #60]	; d44a8 <_ZN7EncoderC1Ett+0xdc>
   d446c:	f8cd 9010 	str.w	r9, [sp, #16]
   d4470:	9505      	str	r5, [sp, #20]
   d4472:	9502      	str	r5, [sp, #8]
   d4474:	aa04      	add	r2, sp, #16
   d4476:	4623      	mov	r3, r4
   d4478:	ca06      	ldmia	r2, {r1, r2}
   d447a:	4638      	mov	r0, r7
   d447c:	f7ff ff76 	bl	d436c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   d4480:	e88d 0120 	stmia.w	sp, {r5, r8}
   d4484:	f8cd 9018 	str.w	r9, [sp, #24]
   d4488:	9507      	str	r5, [sp, #28]
   d448a:	9502      	str	r5, [sp, #8]
   d448c:	aa08      	add	r2, sp, #32
   d448e:	4623      	mov	r3, r4
   d4490:	e912 0006 	ldmdb	r2, {r1, r2}
   d4494:	4630      	mov	r0, r6
   d4496:	f7ff ff69 	bl	d436c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
	}
   d449a:	4620      	mov	r0, r4
   d449c:	b009      	add	sp, #36	; 0x24
   d449e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44a2:	bf00      	nop
   d44a4:	2003de70 	.word	0x2003de70
   d44a8:	000d41a1 	.word	0x000d41a1

000d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>:
   d44ac:	4613      	mov	r3, r2
   d44ae:	460a      	mov	r2, r1
   d44b0:	2101      	movs	r1, #1
   d44b2:	f004 b9d7 	b.w	d8864 <_ZN5Print11printf_implEbPKcz>
	...

000d44b8 <setup>:
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
}



void setup() {
   d44b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Serial.begin(115200);
   d44ba:	f003 fe3f 	bl	d813c <_Z16_fetch_usbserialv>
   d44be:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d44c2:	f003 fe2f 	bl	d8124 <_ZN9USBSerial5beginEl>

  Serial.printlnf("setup()\n");
   d44c6:	f003 fe39 	bl	d813c <_Z16_fetch_usbserialv>
   d44ca:	2101      	movs	r1, #1
   d44cc:	4a68      	ldr	r2, [pc, #416]	; (d4670 <setup+0x1b8>)
   d44ce:	f004 f9c9 	bl	d8864 <_ZN5Print11printf_implEbPKcz>

  //Serial.printlnf("[%s]wating for wifi",__FUNCTION__);    
  //waitUntil(WiFi.ready);
  //Serial.printlnf("[%s]wating for wifi ready",__FUNCTION__);    

  if(!bno.begin())
   d44d2:	210c      	movs	r1, #12
   d44d4:	4867      	ldr	r0, [pc, #412]	; (d4674 <setup+0x1bc>)
   d44d6:	f002 fae8 	bl	d6aaa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d44da:	b928      	cbnz	r0, d44e8 <setup+0x30>
  //if(!bno.begin(Adafruit_BNO055::OPERATION_MODE_IMUPLUS))
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d44dc:	f003 fe2e 	bl	d813c <_Z16_fetch_usbserialv>
   d44e0:	4965      	ldr	r1, [pc, #404]	; (d4678 <setup+0x1c0>)
   d44e2:	f004 f8aa 	bl	d863a <_ZN5Print5printEPKc>
   d44e6:	e7fe      	b.n	d44e6 <setup+0x2e>
    while(1) ;
  }
  //bno.setExtCrystalUse(true);

  delay(100);
   d44e8:	2064      	movs	r0, #100	; 0x64
   d44ea:	f004 f87d 	bl	d85e8 <delay>
  Serial.printlnf("[%s]bno ready",__FUNCTION__);    
   d44ee:	f003 fe25 	bl	d813c <_Z16_fetch_usbserialv>
   d44f2:	4a62      	ldr	r2, [pc, #392]	; (d467c <setup+0x1c4>)
   d44f4:	4962      	ldr	r1, [pc, #392]	; (d4680 <setup+0x1c8>)
   d44f6:	f7ff ffd9 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  RGB.control(true);
   d44fa:	2001      	movs	r0, #1
   d44fc:	f003 ff6e 	bl	d83dc <_ZN8RGBClass7controlEb>
  Serial.printlnf("[%s]rgb ready",__FUNCTION__);    
   d4500:	f003 fe1c 	bl	d813c <_Z16_fetch_usbserialv>
   d4504:	4a5d      	ldr	r2, [pc, #372]	; (d467c <setup+0x1c4>)
   d4506:	495f      	ldr	r1, [pc, #380]	; (d4684 <setup+0x1cc>)
   d4508:	f7ff ffd0 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d450c:	4668      	mov	r0, sp
   d450e:	f002 ff1d 	bl	d734c <spark_deviceID>

#ifdef MQTT_ENABLE
  // connect to the server
  MQTTclient.connect(System.deviceID());
   d4512:	9900      	ldr	r1, [sp, #0]
   d4514:	485c      	ldr	r0, [pc, #368]	; (d4688 <setup+0x1d0>)
   d4516:	f002 f84d 	bl	d65b4 <_ZN4MQTT7connectEPKc>
   d451a:	4668      	mov	r0, sp
   d451c:	f004 f9f8 	bl	d8910 <_ZN6StringD1Ev>
  Serial.printlnf("[%s]mqtt ready",__FUNCTION__);    
   d4520:	f003 fe0c 	bl	d813c <_Z16_fetch_usbserialv>
   d4524:	4a55      	ldr	r2, [pc, #340]	; (d467c <setup+0x1c4>)
   d4526:	4959      	ldr	r1, [pc, #356]	; (d468c <setup+0x1d4>)
   d4528:	f7ff ffc0 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  // publish/subscribe
  if (MQTTclient.isConnected()) {
   d452c:	4856      	ldr	r0, [pc, #344]	; (d4688 <setup+0x1d0>)
   d452e:	f001 ff5d 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d4532:	b168      	cbz	r0, d4550 <setup+0x98>
    MQTTclient.subscribe("color");//color is the topic that photon is subscribed
   d4534:	4956      	ldr	r1, [pc, #344]	; (d4690 <setup+0x1d8>)
   d4536:	4854      	ldr	r0, [pc, #336]	; (d4688 <setup+0x1d0>)
   d4538:	f002 fa2f 	bl	d699a <_ZN4MQTT9subscribeEPKc>
    MQTTclient.publish("fun", "hello");//publishing a data "hello" to the topic "fun"
   d453c:	4a55      	ldr	r2, [pc, #340]	; (d4694 <setup+0x1dc>)
   d453e:	4956      	ldr	r1, [pc, #344]	; (d4698 <setup+0x1e0>)
   d4540:	4851      	ldr	r0, [pc, #324]	; (d4688 <setup+0x1d0>)
   d4542:	f002 f8b7 	bl	d66b4 <_ZN4MQTT7publishEPKcS1_>
    Serial.printlnf("[%s] publish hello",__FUNCTION__);
   d4546:	f003 fdf9 	bl	d813c <_Z16_fetch_usbserialv>
   d454a:	4a4c      	ldr	r2, [pc, #304]	; (d467c <setup+0x1c4>)
   d454c:	4953      	ldr	r1, [pc, #332]	; (d469c <setup+0x1e4>)
   d454e:	e003      	b.n	d4558 <setup+0xa0>
  }
  else
  {
    Serial.printlnf("[%s] MQTT FAILED to connect",__FUNCTION__);    
   d4550:	f003 fdf4 	bl	d813c <_Z16_fetch_usbserialv>
   d4554:	4a49      	ldr	r2, [pc, #292]	; (d467c <setup+0x1c4>)
   d4556:	4952      	ldr	r1, [pc, #328]	; (d46a0 <setup+0x1e8>)
   d4558:	f7ff ffa8 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  }
#endif


	device.begin();
   d455c:	4851      	ldr	r0, [pc, #324]	; (d46a4 <setup+0x1ec>)
   d455e:	f002 fc09 	bl	d6d74 <_ZN8I2CSlave5beginEv>
  Serial.printlnf("[%s]i2c slave ready",__FUNCTION__);    
   d4562:	f003 fdeb 	bl	d813c <_Z16_fetch_usbserialv>
   d4566:	4a45      	ldr	r2, [pc, #276]	; (d467c <setup+0x1c4>)
   d4568:	494f      	ldr	r1, [pc, #316]	; (d46a8 <setup+0x1f0>)
   d456a:	f7ff ff9f 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  SleepStateInit();
   d456e:	f7ff fed1 	bl	d4314 <_Z14SleepStateInitv>
  Serial.printlnf("[%s]low power ready",__FUNCTION__);    
   d4572:	f003 fde3 	bl	d813c <_Z16_fetch_usbserialv>
   d4576:	4a41      	ldr	r2, [pc, #260]	; (d467c <setup+0x1c4>)
   d4578:	494c      	ldr	r1, [pc, #304]	; (d46ac <setup+0x1f4>)
   d457a:	f7ff ff97 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  IBus.begin(Serial1);
   d457e:	f003 fd3b 	bl	d7ff8 <_Z22__fetch_global_Serial1v>
   d4582:	4601      	mov	r1, r0
   d4584:	484a      	ldr	r0, [pc, #296]	; (d46b0 <setup+0x1f8>)
   d4586:	f001 fd89 	bl	d609c <_ZN10FlySkyIBus5beginER11USARTSerial>
  Serial.printlnf("[%s]ibus ready",__FUNCTION__);    
   d458a:	f003 fdd7 	bl	d813c <_Z16_fetch_usbserialv>
   d458e:	4a3b      	ldr	r2, [pc, #236]	; (d467c <setup+0x1c4>)
   d4590:	4948      	ldr	r1, [pc, #288]	; (d46b4 <setup+0x1fc>)
   d4592:	f7ff ff8b 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  Serial.printlnf(__FUNCTION__);
   d4596:	f003 fdd1 	bl	d813c <_Z16_fetch_usbserialv>
   d459a:	4a38      	ldr	r2, [pc, #224]	; (d467c <setup+0x1c4>)
   d459c:	2101      	movs	r1, #1
   d459e:	f004 f961 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
  
  shield.begin();
   d45a2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   d45a6:	4844      	ldr	r0, [pc, #272]	; (d46b8 <setup+0x200>)
   d45a8:	f001 fbb9 	bl	d5d1e <_ZN20Adafruit_MotorShield5beginEt>

  balanceSetpoint=0;
   d45ac:	4b43      	ldr	r3, [pc, #268]	; (d46bc <setup+0x204>)
  balancePID.SetMode(PID::AUTOMATIC);
   d45ae:	4844      	ldr	r0, [pc, #272]	; (d46c0 <setup+0x208>)

  Serial.printlnf(__FUNCTION__);
  
  shield.begin();

  balanceSetpoint=0;
   d45b0:	2400      	movs	r4, #0
   d45b2:	2500      	movs	r5, #0
  balancePID.SetMode(PID::AUTOMATIC);
   d45b4:	2101      	movs	r1, #1

  Serial.printlnf(__FUNCTION__);
  
  shield.begin();

  balanceSetpoint=0;
   d45b6:	e9c3 4500 	strd	r4, r5, [r3]
  balancePID.SetMode(PID::AUTOMATIC);
   d45ba:	f001 f95b 	bl	d5874 <_ZN3PID7SetModeENS_6mode_tE>
  balancePID.SetOutputLimits(-255, 255);
   d45be:	ed9f 1b28 	vldr	d1, [pc, #160]	; d4660 <setup+0x1a8>
   d45c2:	ed9f 0b29 	vldr	d0, [pc, #164]	; d4668 <setup+0x1b0>
   d45c6:	483e      	ldr	r0, [pc, #248]	; (d46c0 <setup+0x208>)
   d45c8:	f001 f8ea 	bl	d57a0 <_ZN3PID15SetOutputLimitsEdd>
  balancePID.SetSampleTime(50);
   d45cc:	2132      	movs	r1, #50	; 0x32
   d45ce:	483c      	ldr	r0, [pc, #240]	; (d46c0 <setup+0x208>)
   d45d0:	f001 f8c0 	bl	d5754 <_ZN3PID13SetSampleTimeEi>

  leftSetpoint=0;
   d45d4:	4b3b      	ldr	r3, [pc, #236]	; (d46c4 <setup+0x20c>)
   d45d6:	e9c3 4500 	strd	r4, r5, [r3]
  rightSetpoint=0;
   d45da:	4b3b      	ldr	r3, [pc, #236]	; (d46c8 <setup+0x210>)
   d45dc:	e9c3 4500 	strd	r4, r5, [r3]

  speed=0;
   d45e0:	4b3a      	ldr	r3, [pc, #232]	; (d46cc <setup+0x214>)
   d45e2:	2600      	movs	r6, #0
   d45e4:	601e      	str	r6, [r3, #0]
   d45e6:	4b3a      	ldr	r3, [pc, #232]	; (d46d0 <setup+0x218>)
   d45e8:	4631      	mov	r1, r6
   d45ea:	6818      	ldr	r0, [r3, #0]
   d45ec:	f7ff fe2a 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.3>
  leftPower=setPwm( leftMotor, 0);
   d45f0:	4b38      	ldr	r3, [pc, #224]	; (d46d4 <setup+0x21c>)
   d45f2:	e9c3 4500 	strd	r4, r5, [r3]
   d45f6:	4b38      	ldr	r3, [pc, #224]	; (d46d8 <setup+0x220>)
   d45f8:	4631      	mov	r1, r6
   d45fa:	6818      	ldr	r0, [r3, #0]
   d45fc:	f7ff fe22 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.3>
  rightPower=setPwm( rightMotor, 0);
   d4600:	4b36      	ldr	r3, [pc, #216]	; (d46dc <setup+0x224>)

  leftPID.SetMode(PID::AUTOMATIC);
   d4602:	4837      	ldr	r0, [pc, #220]	; (d46e0 <setup+0x228>)
   d4604:	2101      	movs	r1, #1
  leftSetpoint=0;
  rightSetpoint=0;

  speed=0;
  leftPower=setPwm( leftMotor, 0);
  rightPower=setPwm( rightMotor, 0);
   d4606:	e9c3 4500 	strd	r4, r5, [r3]

  leftPID.SetMode(PID::AUTOMATIC);
   d460a:	f001 f933 	bl	d5874 <_ZN3PID7SetModeENS_6mode_tE>
  leftPID.SetOutputLimits(-255, 255);
   d460e:	ed9f 1b14 	vldr	d1, [pc, #80]	; d4660 <setup+0x1a8>
   d4612:	ed9f 0b15 	vldr	d0, [pc, #84]	; d4668 <setup+0x1b0>
   d4616:	4832      	ldr	r0, [pc, #200]	; (d46e0 <setup+0x228>)
   d4618:	f001 f8c2 	bl	d57a0 <_ZN3PID15SetOutputLimitsEdd>
  leftPID.SetSampleTime(100);
   d461c:	2164      	movs	r1, #100	; 0x64
   d461e:	4830      	ldr	r0, [pc, #192]	; (d46e0 <setup+0x228>)
   d4620:	f001 f898 	bl	d5754 <_ZN3PID13SetSampleTimeEi>

  rightPID.SetMode(PID::AUTOMATIC);
   d4624:	2101      	movs	r1, #1
   d4626:	482f      	ldr	r0, [pc, #188]	; (d46e4 <setup+0x22c>)
   d4628:	f001 f924 	bl	d5874 <_ZN3PID7SetModeENS_6mode_tE>
  rightPID.SetOutputLimits(-255, 255);
   d462c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; d4660 <setup+0x1a8>
   d4630:	ed9f 0b0d 	vldr	d0, [pc, #52]	; d4668 <setup+0x1b0>
   d4634:	482b      	ldr	r0, [pc, #172]	; (d46e4 <setup+0x22c>)
   d4636:	f001 f8b3 	bl	d57a0 <_ZN3PID15SetOutputLimitsEdd>
  rightPID.SetSampleTime(100);
   d463a:	2164      	movs	r1, #100	; 0x64
   d463c:	4829      	ldr	r0, [pc, #164]	; (d46e4 <setup+0x22c>)
   d463e:	f001 f889 	bl	d5754 <_ZN3PID13SetSampleTimeEi>
  Serial.printlnf("[%s]pids ready",__FUNCTION__);    
   d4642:	f003 fd7b 	bl	d813c <_Z16_fetch_usbserialv>
   d4646:	4a0d      	ldr	r2, [pc, #52]	; (d467c <setup+0x1c4>)
   d4648:	4927      	ldr	r1, [pc, #156]	; (d46e8 <setup+0x230>)
   d464a:	f7ff ff2f 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  
  Serial.printlnf("setup( complete )\n");
   d464e:	f003 fd75 	bl	d813c <_Z16_fetch_usbserialv>
   d4652:	4a26      	ldr	r2, [pc, #152]	; (d46ec <setup+0x234>)
   d4654:	2101      	movs	r1, #1
   d4656:	f004 f905 	bl	d8864 <_ZN5Print11printf_implEbPKcz>

}
   d465a:	b004      	add	sp, #16
   d465c:	bd70      	pop	{r4, r5, r6, pc}
   d465e:	bf00      	nop
   d4660:	00000000 	.word	0x00000000
   d4664:	406fe000 	.word	0x406fe000
   d4668:	00000000 	.word	0x00000000
   d466c:	c06fe000 	.word	0xc06fe000
   d4670:	000da68b 	.word	0x000da68b
   d4674:	2003dda8 	.word	0x2003dda8
   d4678:	000da694 	.word	0x000da694
   d467c:	000da646 	.word	0x000da646
   d4680:	000da6d1 	.word	0x000da6d1
   d4684:	000da6df 	.word	0x000da6df
   d4688:	2003dc90 	.word	0x2003dc90
   d468c:	000da6ed 	.word	0x000da6ed
   d4690:	000da6fc 	.word	0x000da6fc
   d4694:	000da713 	.word	0x000da713
   d4698:	000da702 	.word	0x000da702
   d469c:	000da706 	.word	0x000da706
   d46a0:	000da719 	.word	0x000da719
   d46a4:	2003dc6c 	.word	0x2003dc6c
   d46a8:	000da735 	.word	0x000da735
   d46ac:	000da749 	.word	0x000da749
   d46b0:	2003e3a8 	.word	0x2003e3a8
   d46b4:	000da75d 	.word	0x000da75d
   d46b8:	2003dea8 	.word	0x2003dea8
   d46bc:	2003dda0 	.word	0x2003dda0
   d46c0:	2003dd08 	.word	0x2003dd08
   d46c4:	2003dd90 	.word	0x2003dd90
   d46c8:	2003de78 	.word	0x2003de78
   d46cc:	2003df20 	.word	0x2003df20
   d46d0:	2003dde4 	.word	0x2003dde4
   d46d4:	2003dc88 	.word	0x2003dc88
   d46d8:	2003dce8 	.word	0x2003dce8
   d46dc:	2003de68 	.word	0x2003de68
   d46e0:	2003df40 	.word	0x2003df40
   d46e4:	2003ddf0 	.word	0x2003ddf0
   d46e8:	000da76c 	.word	0x000da76c
   d46ec:	000da77b 	.word	0x000da77b

000d46f0 <_Z13telemetrySendPKcS0_z>:
  leftSetpoint=rightSetpoint=speed;
  return speed;
}

void telemetrySend( const char *name, const char *format, ...)
{
   d46f0:	b40e      	push	{r1, r2, r3}
   d46f2:	b510      	push	{r4, lr}
   d46f4:	b0c7      	sub	sp, #284	; 0x11c
   d46f6:	ab49      	add	r3, sp, #292	; 0x124
   d46f8:	4604      	mov	r4, r0
   d46fa:	f853 2b04 	ldr.w	r2, [r3], #4
  char buffer[256];
  va_list args;
  va_start (args, format);
   d46fe:	9301      	str	r3, [sp, #4]
  vsnprintf (buffer, sizeof(buffer), format, args);
   d4700:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4704:	a806      	add	r0, sp, #24
   d4706:	f002 feef 	bl	d74e8 <vsnprintf>
  va_end (args);

#ifdef MQTT_ENABLE
      if (MQTTclient.isConnected())
   d470a:	4825      	ldr	r0, [pc, #148]	; (d47a0 <_Z13telemetrySendPKcS0_z+0xb0>)
   d470c:	f001 fe6e 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d4710:	b128      	cbz	r0, d471e <_Z13telemetrySendPKcS0_z+0x2e>
      {
#if 1
        MQTTclient.publish( name, buffer );
   d4712:	aa06      	add	r2, sp, #24
   d4714:	4621      	mov	r1, r4
   d4716:	4822      	ldr	r0, [pc, #136]	; (d47a0 <_Z13telemetrySendPKcS0_z+0xb0>)
   d4718:	f001 ffcc 	bl	d66b4 <_ZN4MQTT7publishEPKcS1_>
   d471c:	e03a      	b.n	d4794 <_Z13telemetrySendPKcS0_z+0xa4>
#endif
      }
      else 
      {
        Serial.printlnf("[%lu]client failed to connect",Time.now());
   d471e:	f003 fd0d 	bl	d813c <_Z16_fetch_usbserialv>
   d4722:	4604      	mov	r4, r0
   d4724:	f003 ff47 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4728:	4a1e      	ldr	r2, [pc, #120]	; (d47a4 <_Z13telemetrySendPKcS0_z+0xb4>)
   d472a:	4603      	mov	r3, r0
   d472c:	2101      	movs	r1, #1
   d472e:	4620      	mov	r0, r4
   d4730:	f004 f898 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
   d4734:	a802      	add	r0, sp, #8
   d4736:	f002 fe09 	bl	d734c <spark_deviceID>
        // connect to the server
        MQTTclient.connect(System.deviceID());
   d473a:	9902      	ldr	r1, [sp, #8]
   d473c:	4818      	ldr	r0, [pc, #96]	; (d47a0 <_Z13telemetrySendPKcS0_z+0xb0>)
   d473e:	f001 ff39 	bl	d65b4 <_ZN4MQTT7connectEPKc>
   d4742:	a802      	add	r0, sp, #8
   d4744:	f004 f8e4 	bl	d8910 <_ZN6StringD1Ev>
        Serial.printlnf("[%s]mqtt ready",__FUNCTION__);    
   d4748:	f003 fcf8 	bl	d813c <_Z16_fetch_usbserialv>
   d474c:	4a16      	ldr	r2, [pc, #88]	; (d47a8 <_Z13telemetrySendPKcS0_z+0xb8>)
   d474e:	4917      	ldr	r1, [pc, #92]	; (d47ac <_Z13telemetrySendPKcS0_z+0xbc>)
   d4750:	f7ff feac 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

        // publish/subscribe
        if (MQTTclient.isConnected()) {
   d4754:	4812      	ldr	r0, [pc, #72]	; (d47a0 <_Z13telemetrySendPKcS0_z+0xb0>)
   d4756:	f001 fe49 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d475a:	b180      	cbz	r0, d477e <_Z13telemetrySendPKcS0_z+0x8e>
          MQTTclient.subscribe("color");//color is the topic that photon is subscribed
   d475c:	4914      	ldr	r1, [pc, #80]	; (d47b0 <_Z13telemetrySendPKcS0_z+0xc0>)
   d475e:	4810      	ldr	r0, [pc, #64]	; (d47a0 <_Z13telemetrySendPKcS0_z+0xb0>)
   d4760:	f002 f91b 	bl	d699a <_ZN4MQTT9subscribeEPKc>
          MQTTclient.publish("fun", "hello");//publishing a data "hello" to the topic "fun"
   d4764:	4a13      	ldr	r2, [pc, #76]	; (d47b4 <_Z13telemetrySendPKcS0_z+0xc4>)
   d4766:	4914      	ldr	r1, [pc, #80]	; (d47b8 <_Z13telemetrySendPKcS0_z+0xc8>)
   d4768:	480d      	ldr	r0, [pc, #52]	; (d47a0 <_Z13telemetrySendPKcS0_z+0xb0>)
   d476a:	f001 ffa3 	bl	d66b4 <_ZN4MQTT7publishEPKcS1_>
          Serial.printlnf("[%lu] publish hello",Time.now());
   d476e:	f003 fce5 	bl	d813c <_Z16_fetch_usbserialv>
   d4772:	4604      	mov	r4, r0
   d4774:	f003 ff1f 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4778:	4a10      	ldr	r2, [pc, #64]	; (d47bc <_Z13telemetrySendPKcS0_z+0xcc>)
   d477a:	4603      	mov	r3, r0
   d477c:	e006      	b.n	d478c <_Z13telemetrySendPKcS0_z+0x9c>
        }
        else
        {
          Serial.printlnf("[%lu] MQTT FAILED to connect",Time.now());    
   d477e:	f003 fcdd 	bl	d813c <_Z16_fetch_usbserialv>
   d4782:	4604      	mov	r4, r0
   d4784:	f003 ff17 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4788:	4a0d      	ldr	r2, [pc, #52]	; (d47c0 <_Z13telemetrySendPKcS0_z+0xd0>)
   d478a:	4603      	mov	r3, r0
   d478c:	2101      	movs	r1, #1
   d478e:	4620      	mov	r0, r4
   d4790:	f004 f868 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
#if 0
      {
        Serial.printlnf(buffer);
      }
#endif 
}
   d4794:	b047      	add	sp, #284	; 0x11c
   d4796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d479a:	b003      	add	sp, #12
   d479c:	4770      	bx	lr
   d479e:	bf00      	nop
   d47a0:	2003dc90 	.word	0x2003dc90
   d47a4:	000da78e 	.word	0x000da78e
   d47a8:	000da638 	.word	0x000da638
   d47ac:	000da6ed 	.word	0x000da6ed
   d47b0:	000da6fc 	.word	0x000da6fc
   d47b4:	000da713 	.word	0x000da713
   d47b8:	000da702 	.word	0x000da702
   d47bc:	000da7ac 	.word	0x000da7ac
   d47c0:	000da7c0 	.word	0x000da7c0
   d47c4:	00000000 	.word	0x00000000

000d47c8 <loop>:



void loop() 
{
   d47c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47cc:	ed2d 8b0a 	vpush	{d8-d12}
   d47d0:	b0a5      	sub	sp, #148	; 0x94
  static bool TxOn=false;

  SleepStateCheck();
   d47d2:	f7ff fd95 	bl	d4300 <_Z15SleepStateCheckv>

	uint16_t regAddr;
	while(device.getRegisterSet(regAddr)) {
   d47d6:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
   d47da:	48b3      	ldr	r0, [pc, #716]	; (d4aa8 <loop+0x2e0>)
   d47dc:	f002 faed 	bl	d6dba <_ZN8I2CSlave14getRegisterSetERt>
   d47e0:	b180      	cbz	r0, d4804 <loop+0x3c>
		// regAddr was updated from the I2C master
		Serial.printlnf("master updated %u to %u", regAddr, device.getRegister(regAddr));
   d47e2:	f003 fcab 	bl	d813c <_Z16_fetch_usbserialv>
   d47e6:	f8bd 404e 	ldrh.w	r4, [sp, #78]	; 0x4e
   d47ea:	4605      	mov	r5, r0
   d47ec:	4621      	mov	r1, r4
   d47ee:	48ae      	ldr	r0, [pc, #696]	; (d4aa8 <loop+0x2e0>)
   d47f0:	f002 fad4 	bl	d6d9c <_ZNK8I2CSlave11getRegisterEt>
   d47f4:	4623      	mov	r3, r4
   d47f6:	9000      	str	r0, [sp, #0]
   d47f8:	4aac      	ldr	r2, [pc, #688]	; (d4aac <loop+0x2e4>)
   d47fa:	2101      	movs	r1, #1
   d47fc:	4628      	mov	r0, r5
   d47fe:	f004 f831 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
   d4802:	e7e8      	b.n	d47d6 <loop+0xe>




#ifdef MQTT_ENABLE
  if (MQTTclient.isConnected())
   d4804:	48aa      	ldr	r0, [pc, #680]	; (d4ab0 <loop+0x2e8>)
   d4806:	f001 fdf1 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d480a:	b118      	cbz	r0, d4814 <loop+0x4c>
  {
    MQTTclient.loop();
   d480c:	48a8      	ldr	r0, [pc, #672]	; (d4ab0 <loop+0x2e8>)
   d480e:	f001 ff98 	bl	d6742 <_ZN4MQTT4loopEv>
   d4812:	e02d      	b.n	d4870 <loop+0xa8>
  }
  else
  {
    Serial.printlnf("[%s]client failed to connect",__FUNCTION__);
   d4814:	f003 fc92 	bl	d813c <_Z16_fetch_usbserialv>
   d4818:	4aa6      	ldr	r2, [pc, #664]	; (d4ab4 <loop+0x2ec>)
   d481a:	49a7      	ldr	r1, [pc, #668]	; (d4ab8 <loop+0x2f0>)
   d481c:	f7ff fe46 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d4820:	a81b      	add	r0, sp, #108	; 0x6c
   d4822:	f002 fd93 	bl	d734c <spark_deviceID>
  #ifdef MQTT_ENABLE
    // connect to the server
    MQTTclient.connect(System.deviceID());
   d4826:	991b      	ldr	r1, [sp, #108]	; 0x6c
   d4828:	48a1      	ldr	r0, [pc, #644]	; (d4ab0 <loop+0x2e8>)
   d482a:	f001 fec3 	bl	d65b4 <_ZN4MQTT7connectEPKc>
   d482e:	a81b      	add	r0, sp, #108	; 0x6c
   d4830:	f004 f86e 	bl	d8910 <_ZN6StringD1Ev>
    Serial.printlnf("[%s]mqtt ready",__FUNCTION__);    
   d4834:	f003 fc82 	bl	d813c <_Z16_fetch_usbserialv>
   d4838:	4a9e      	ldr	r2, [pc, #632]	; (d4ab4 <loop+0x2ec>)
   d483a:	49a0      	ldr	r1, [pc, #640]	; (d4abc <loop+0x2f4>)
   d483c:	f7ff fe36 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

    // publish/subscribe
    if (MQTTclient.isConnected()) {
   d4840:	489b      	ldr	r0, [pc, #620]	; (d4ab0 <loop+0x2e8>)
   d4842:	f001 fdd3 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d4846:	b168      	cbz	r0, d4864 <loop+0x9c>
      MQTTclient.subscribe("color");//color is the topic that photon is subscribed
   d4848:	499d      	ldr	r1, [pc, #628]	; (d4ac0 <loop+0x2f8>)
   d484a:	4899      	ldr	r0, [pc, #612]	; (d4ab0 <loop+0x2e8>)
   d484c:	f002 f8a5 	bl	d699a <_ZN4MQTT9subscribeEPKc>
      MQTTclient.publish("fun", "hello");//publishing a data "hello" to the topic "fun"
   d4850:	4a9c      	ldr	r2, [pc, #624]	; (d4ac4 <loop+0x2fc>)
   d4852:	499d      	ldr	r1, [pc, #628]	; (d4ac8 <loop+0x300>)
   d4854:	4896      	ldr	r0, [pc, #600]	; (d4ab0 <loop+0x2e8>)
   d4856:	f001 ff2d 	bl	d66b4 <_ZN4MQTT7publishEPKcS1_>
      Serial.printlnf("[%s] publish hello",__FUNCTION__);
   d485a:	f003 fc6f 	bl	d813c <_Z16_fetch_usbserialv>
   d485e:	4a95      	ldr	r2, [pc, #596]	; (d4ab4 <loop+0x2ec>)
   d4860:	499a      	ldr	r1, [pc, #616]	; (d4acc <loop+0x304>)
   d4862:	e003      	b.n	d486c <loop+0xa4>
    }
    else
    {
      Serial.printlnf("[%s] MQTT FAILED to connect",__FUNCTION__);    
   d4864:	f003 fc6a 	bl	d813c <_Z16_fetch_usbserialv>
   d4868:	4a92      	ldr	r2, [pc, #584]	; (d4ab4 <loop+0x2ec>)
   d486a:	4999      	ldr	r1, [pc, #612]	; (d4ad0 <loop+0x308>)
   d486c:	f7ff fe1e 	bl	d44ac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
#endif


  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d4870:	a91b      	add	r1, sp, #108	; 0x6c
   d4872:	4898      	ldr	r0, [pc, #608]	; (d4ad4 <loop+0x30c>)
   d4874:	f002 fa18 	bl	d6ca8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
    Serial.printlnf("X: %f\tY: %f\tZ: %f", euler.x(), euler.y(), euler.z() );
#else
    VERBOSE( Serial.printlnf("(%d) Z: %f", millis(), event.orientation.z ) );

    //VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));
   d4878:	ed9f 7a97 	vldr	s14, [pc, #604]	; d4ad8 <loop+0x310>
   d487c:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
   d4880:	4889      	ldr	r0, [pc, #548]	; (d4aa8 <loop+0x2e0>)
   d4882:	ee67 7a87 	vmul.f32	s15, s15, s14
   d4886:	2100      	movs	r1, #0
   d4888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d488c:	ee17 2a90 	vmov	r2, s15
   d4890:	f002 fa8c 	bl	d6dac <_ZN8I2CSlave11setRegisterEtm>

    telemetrySend( "robot/imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": %lu, \"imutime\":%lu, \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), event.type, event.timestamp, event.orientation.x, event.orientation.y, event.orientation.z );
   d4894:	f003 fe8f 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4898:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d489a:	f002 fc8f 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d489e:	4605      	mov	r5, r0
   d48a0:	9822      	ldr	r0, [sp, #136]	; 0x88
   d48a2:	f004 fdc9 	bl	d9438 <__aeabi_f2d>
   d48a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d48aa:	9821      	ldr	r0, [sp, #132]	; 0x84
   d48ac:	f004 fdc4 	bl	d9438 <__aeabi_f2d>
   d48b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d48b4:	9820      	ldr	r0, [sp, #128]	; 0x80
   d48b6:	f004 fdbf 	bl	d9438 <__aeabi_f2d>
   d48ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d48c0:	9300      	str	r3, [sp, #0]
   d48c2:	4622      	mov	r2, r4
   d48c4:	462b      	mov	r3, r5
   d48c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d48ca:	4984      	ldr	r1, [pc, #528]	; (d4adc <loop+0x314>)
   d48cc:	4884      	ldr	r0, [pc, #528]	; (d4ae0 <loop+0x318>)
    balanceInput=balanceCorrection( event.orientation.z );
   d48ce:	4c85      	ldr	r4, [pc, #532]	; (d4ae4 <loop+0x31c>)
    VERBOSE( Serial.printlnf("(%d) Z: %f", millis(), event.orientation.z ) );

    //VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));

    telemetrySend( "robot/imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": %lu, \"imutime\":%lu, \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), event.type, event.timestamp, event.orientation.x, event.orientation.y, event.orientation.z );
   d48d0:	f7ff ff0e 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
    balanceInput=balanceCorrection( event.orientation.z );
   d48d4:	9822      	ldr	r0, [sp, #136]	; 0x88
   d48d6:	f004 fdaf 	bl	d9438 <__aeabi_f2d>
   d48da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d48de:	2200      	movs	r2, #0
   d48e0:	f004 fc4a 	bl	d9178 <__aeabi_dsub>
#if 0
    imu::Vector<3> la = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
    telemetrySend( "imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": \"VECTOR_LINEARACCEL\", \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), la.x(), la.y(), la.z() );
#endif

    imu::Vector<3> gs = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d48e4:	2214      	movs	r2, #20

    //VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));

    telemetrySend( "robot/imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": %lu, \"imutime\":%lu, \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), event.type, event.timestamp, event.orientation.x, event.orientation.y, event.orientation.z );
    balanceInput=balanceCorrection( event.orientation.z );
   d48e6:	e9c4 0100 	strd	r0, r1, [r4]
#if 0
    imu::Vector<3> la = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
    telemetrySend( "imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": \"VECTOR_LINEARACCEL\", \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), la.x(), la.y(), la.z() );
#endif

    imu::Vector<3> gs = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
   d48ea:	497a      	ldr	r1, [pc, #488]	; (d4ad4 <loop+0x30c>)
   d48ec:	a814      	add	r0, sp, #80	; 0x50
   d48ee:	f002 f953 	bl	d6b98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
    //telemetrySend( "imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": \"VECTOR_GYROSCOPE\", \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), int(gs.x()*57.2958), int(gs.y()*57.2958), int(gs.z()*57.2958) );
    telemetrySend( "robot/imu", "{ \"timestamp\": %lu, \"millis\": %lu,  \"name\":\"imu\", \"type\": \"VECTOR_GYROSCOPE\", \"X\": %f, \"Y\":%f, \"Z\" : %f }",Time.now(), millis(), gs.x()*57.2958, gs.y()*57.2958, gs.z()*57.2958 );
   d48f2:	f003 fe60 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d48f6:	4605      	mov	r5, r0
   d48f8:	f002 fc60 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d48fc:	a368      	add	r3, pc, #416	; (adr r3, d4aa0 <loop+0x2d8>)
   d48fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4902:	4606      	mov	r6, r0
   d4904:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   d4908:	f004 fdea 	bl	d94e0 <__aeabi_dmul>
   d490c:	a364      	add	r3, pc, #400	; (adr r3, d4aa0 <loop+0x2d8>)
   d490e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4912:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4916:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   d491a:	f004 fde1 	bl	d94e0 <__aeabi_dmul>
   d491e:	a360      	add	r3, pc, #384	; (adr r3, d4aa0 <loop+0x2d8>)
   d4920:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4924:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4928:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   d492c:	f004 fdd8 	bl	d94e0 <__aeabi_dmul>
   d4930:	4633      	mov	r3, r6
   d4932:	462a      	mov	r2, r5
   d4934:	e9cd 0100 	strd	r0, r1, [sp]
   d4938:	496b      	ldr	r1, [pc, #428]	; (d4ae8 <loop+0x320>)
   d493a:	4869      	ldr	r0, [pc, #420]	; (d4ae0 <loop+0x318>)
   d493c:	f7ff fed8 	bl	d46f0 <_Z13telemetrySendPKcS0_z>

#endif

  //if ( digitalRead(RX_ENABLE) ) 
  { 
    IBus.loop();
   d4940:	486a      	ldr	r0, [pc, #424]	; (d4aec <loop+0x324>)
   d4942:	f001 fbb9 	bl	d60b8 <_ZN10FlySkyIBus4loopEv>

    // TX ON ( top left switch )
    //telemetrySend( "iBus", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"iBus\", \"name\":\"iBus\", \"Channels\" : [ %d,%d,%d,%d,%d,%d,%d,%d,%d,%d ] }", Time.now(), millis(), IBus.readChannel(0),IBus.readChannel(1),IBus.readChannel(2),IBus.readChannel(3),IBus.readChannel(4),IBus.readChannel(5),IBus.readChannel(6),IBus.readChannel(7),IBus.readChannel(8),IBus.readChannel(9) );
    telemetrySend( "robot/iBus", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"iBus\", \"name\":\"iBus\", \"C0\":%d,\"C1\":%d,\"C2\":%d,\"C3\":%d,\"C4\":%d,\"C5\":%d,\"C6\":%d,\"C7\":%d,\"C8\":%d,\"C9\":%d }", Time.now(), millis(), IBus.readChannel(0),IBus.readChannel(1),IBus.readChannel(2),IBus.readChannel(3),IBus.readChannel(4),IBus.readChannel(5),IBus.readChannel(6),IBus.readChannel(7),IBus.readChannel(8),IBus.readChannel(9) );
   d4946:	f003 fe36 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d494a:	9011      	str	r0, [sp, #68]	; 0x44
   d494c:	f002 fc36 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d4950:	2100      	movs	r1, #0
   d4952:	9010      	str	r0, [sp, #64]	; 0x40
   d4954:	4865      	ldr	r0, [pc, #404]	; (d4aec <loop+0x324>)
   d4956:	f001 fc11 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d495a:	2101      	movs	r1, #1
   d495c:	4605      	mov	r5, r0
   d495e:	4863      	ldr	r0, [pc, #396]	; (d4aec <loop+0x324>)
   d4960:	f001 fc0c 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4964:	2102      	movs	r1, #2
   d4966:	4606      	mov	r6, r0
   d4968:	4860      	ldr	r0, [pc, #384]	; (d4aec <loop+0x324>)
   d496a:	f001 fc07 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d496e:	2103      	movs	r1, #3
   d4970:	4607      	mov	r7, r0
   d4972:	485e      	ldr	r0, [pc, #376]	; (d4aec <loop+0x324>)
   d4974:	f001 fc02 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4978:	2104      	movs	r1, #4
   d497a:	4680      	mov	r8, r0
   d497c:	485b      	ldr	r0, [pc, #364]	; (d4aec <loop+0x324>)
   d497e:	f001 fbfd 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4982:	2105      	movs	r1, #5
   d4984:	4681      	mov	r9, r0
   d4986:	4859      	ldr	r0, [pc, #356]	; (d4aec <loop+0x324>)
   d4988:	f001 fbf8 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d498c:	2106      	movs	r1, #6
   d498e:	4682      	mov	sl, r0
   d4990:	4856      	ldr	r0, [pc, #344]	; (d4aec <loop+0x324>)
   d4992:	f001 fbf3 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4996:	2107      	movs	r1, #7
   d4998:	4683      	mov	fp, r0
   d499a:	4854      	ldr	r0, [pc, #336]	; (d4aec <loop+0x324>)
   d499c:	f001 fbee 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d49a0:	2108      	movs	r1, #8
   d49a2:	900e      	str	r0, [sp, #56]	; 0x38
   d49a4:	4851      	ldr	r0, [pc, #324]	; (d4aec <loop+0x324>)
   d49a6:	f001 fbe9 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d49aa:	2109      	movs	r1, #9
   d49ac:	900f      	str	r0, [sp, #60]	; 0x3c
   d49ae:	484f      	ldr	r0, [pc, #316]	; (d4aec <loop+0x324>)
   d49b0:	f001 fbe4 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d49b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d49b6:	9308      	str	r3, [sp, #32]
   d49b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d49ba:	9009      	str	r0, [sp, #36]	; 0x24
   d49bc:	e88d 01e0 	stmia.w	sp, {r5, r6, r7, r8}
   d49c0:	9307      	str	r3, [sp, #28]
   d49c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d49c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d49c6:	494a      	ldr	r1, [pc, #296]	; (d4af0 <loop+0x328>)
   d49c8:	484a      	ldr	r0, [pc, #296]	; (d4af4 <loop+0x32c>)
   d49ca:	f8cd b018 	str.w	fp, [sp, #24]
   d49ce:	f8cd a014 	str.w	sl, [sp, #20]
   d49d2:	f8cd 9010 	str.w	r9, [sp, #16]
   d49d6:	f7ff fe8b 	bl	d46f0 <_Z13telemetrySendPKcS0_z>

    if ( IBus.readChannel(5)==0x7d0 )
   d49da:	2105      	movs	r1, #5
   d49dc:	4843      	ldr	r0, [pc, #268]	; (d4aec <loop+0x324>)
   d49de:	4f46      	ldr	r7, [pc, #280]	; (d4af8 <loop+0x330>)
   d49e0:	4d46      	ldr	r5, [pc, #280]	; (d4afc <loop+0x334>)
   d49e2:	f001 fbcb 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d49e6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d49ea:	f040 8097 	bne.w	d4b1c <loop+0x354>
    {
      static double prevLeftSetpoint=-1;
      static double prevRightSetpoint=-1;
      
      TxOn=true;
   d49ee:	2101      	movs	r1, #1
      mode=DRIVE;

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d49f0:	483e      	ldr	r0, [pc, #248]	; (d4aec <loop+0x324>)
    if ( IBus.readChannel(5)==0x7d0 )
    {
      static double prevLeftSetpoint=-1;
      static double prevRightSetpoint=-1;
      
      TxOn=true;
   d49f2:	7039      	strb	r1, [r7, #0]
      mode=DRIVE;
   d49f4:	7029      	strb	r1, [r5, #0]

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d49f6:	f001 fbc1 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d49fa:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d49fe:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4a02:	da04      	bge.n	d4a0e <loop+0x246>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d4a04:	4b3e      	ldr	r3, [pc, #248]	; (d4b00 <loop+0x338>)
   d4a06:	4298      	cmp	r0, r3
   d4a08:	bfb8      	it	lt
   d4a0a:	4618      	movlt	r0, r3
   d4a0c:	e001      	b.n	d4a12 <loop+0x24a>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4a12:	f004 fcff 	bl	d9414 <__aeabi_i2d>
   d4a16:	4e3b      	ldr	r6, [pc, #236]	; (d4b04 <loop+0x33c>)
      if ( rightSetpoint != prevRightSetpoint ) {
   d4a18:	4f3b      	ldr	r7, [pc, #236]	; (d4b08 <loop+0x340>)
      
      TxOn=true;
      mode=DRIVE;

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d4a1a:	e9c6 0100 	strd	r0, r1, [r6]
      if ( rightSetpoint != prevRightSetpoint ) {
   d4a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4a22:	f004 ffc5 	bl	d99b0 <__aeabi_dcmpeq>
   d4a26:	b968      	cbnz	r0, d4a44 <loop+0x27c>
        Serial.printlnf("rightSetpoint from RX = %f", rightSetpoint );
   d4a28:	f003 fb88 	bl	d813c <_Z16_fetch_usbserialv>
   d4a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4a30:	2101      	movs	r1, #1
   d4a32:	e9cd 2300 	strd	r2, r3, [sp]
   d4a36:	4a35      	ldr	r2, [pc, #212]	; (d4b0c <loop+0x344>)
   d4a38:	f003 ff14 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
        prevRightSetpoint=rightSetpoint;
   d4a3c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4a40:	e9c7 2300 	strd	r2, r3, [r7]
      }

      // left
      leftSetpoint=double(max( min( IBus.readChannel(2)-0x5dc, SPEED_MAX ), SPEED_MIN ));
   d4a44:	2102      	movs	r1, #2
   d4a46:	4829      	ldr	r0, [pc, #164]	; (d4aec <loop+0x324>)
   d4a48:	f001 fb98 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4a4c:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
   d4a50:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4a54:	da04      	bge.n	d4a60 <loop+0x298>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d4a56:	4b2a      	ldr	r3, [pc, #168]	; (d4b00 <loop+0x338>)
   d4a58:	4298      	cmp	r0, r3
   d4a5a:	bfb8      	it	lt
   d4a5c:	4618      	movlt	r0, r3
   d4a5e:	e001      	b.n	d4a64 <loop+0x29c>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4a64:	f004 fcd6 	bl	d9414 <__aeabi_i2d>
   d4a68:	4e29      	ldr	r6, [pc, #164]	; (d4b10 <loop+0x348>)
      if ( leftSetpoint != prevLeftSetpoint ){
   d4a6a:	4f2a      	ldr	r7, [pc, #168]	; (d4b14 <loop+0x34c>)
        Serial.printlnf("rightSetpoint from RX = %f", rightSetpoint );
        prevRightSetpoint=rightSetpoint;
      }

      // left
      leftSetpoint=double(max( min( IBus.readChannel(2)-0x5dc, SPEED_MAX ), SPEED_MIN ));
   d4a6c:	e9c6 0100 	strd	r0, r1, [r6]
      if ( leftSetpoint != prevLeftSetpoint ){
   d4a70:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4a74:	f004 ff9c 	bl	d99b0 <__aeabi_dcmpeq>
   d4a78:	2800      	cmp	r0, #0
   d4a7a:	d159      	bne.n	d4b30 <loop+0x368>
        Serial.printlnf("leftSetpoint from RX = %f", leftSetpoint );
   d4a7c:	f003 fb5e 	bl	d813c <_Z16_fetch_usbserialv>
   d4a80:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4a84:	2101      	movs	r1, #1
   d4a86:	e9cd 2300 	strd	r2, r3, [sp]
   d4a8a:	4a23      	ldr	r2, [pc, #140]	; (d4b18 <loop+0x350>)
   d4a8c:	f003 feea 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
        prevLeftSetpoint=leftSetpoint;
   d4a90:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4a94:	e9c7 2300 	strd	r2, r3, [r7]
   d4a98:	e04a      	b.n	d4b30 <loop+0x368>
   d4a9a:	bf00      	nop
   d4a9c:	f3af 8000 	nop.w
   d4aa0:	c63f1412 	.word	0xc63f1412
   d4aa4:	404ca5dc 	.word	0x404ca5dc
   d4aa8:	2003dc6c 	.word	0x2003dc6c
   d4aac:	000da7ee 	.word	0x000da7ee
   d4ab0:	2003dc90 	.word	0x2003dc90
   d4ab4:	000da659 	.word	0x000da659
   d4ab8:	000da806 	.word	0x000da806
   d4abc:	000da6ed 	.word	0x000da6ed
   d4ac0:	000da6fc 	.word	0x000da6fc
   d4ac4:	000da713 	.word	0x000da713
   d4ac8:	000da702 	.word	0x000da702
   d4acc:	000da706 	.word	0x000da706
   d4ad0:	000da719 	.word	0x000da719
   d4ad4:	2003dda8 	.word	0x2003dda8
   d4ad8:	42c80000 	.word	0x42c80000
   d4adc:	000da823 	.word	0x000da823
   d4ae0:	000da88d 	.word	0x000da88d
   d4ae4:	2003ddc0 	.word	0x2003ddc0
   d4ae8:	000da897 	.word	0x000da897
   d4aec:	2003e3a8 	.word	0x2003e3a8
   d4af0:	000da901 	.word	0x000da901
   d4af4:	000da994 	.word	0x000da994
   d4af8:	2003dd80 	.word	0x2003dd80
   d4afc:	2003ddb8 	.word	0x2003ddb8
   d4b00:	fffffe0c 	.word	0xfffffe0c
   d4b04:	2003de78 	.word	0x2003de78
   d4b08:	2003db98 	.word	0x2003db98
   d4b0c:	000da99f 	.word	0x000da99f
   d4b10:	2003dd90 	.word	0x2003dd90
   d4b14:	2003db88 	.word	0x2003db88
   d4b18:	000da9ba 	.word	0x000da9ba
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
   d4b1c:	783b      	ldrb	r3, [r7, #0]
   d4b1e:	b13b      	cbz	r3, d4b30 <loop+0x368>
   d4b20:	2105      	movs	r1, #5
   d4b22:	4888      	ldr	r0, [pc, #544]	; (d4d44 <loop+0x57c>)
   d4b24:	f001 fb2a 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4b28:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4b2c:	f040 83ec 	bne.w	d5308 <loop+0xb40>
      TxOn=false;
      speed=setTargetSpeed(0);
      mode=IDLE;
    }

    if ( IBus.readChannel(8)==0x7d0 )
   d4b30:	2108      	movs	r1, #8
   d4b32:	4884      	ldr	r0, [pc, #528]	; (d4d44 <loop+0x57c>)
   d4b34:	f001 fb22 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4b38:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4b3c:	d12c      	bne.n	d4b98 <loop+0x3d0>
    {
      if( (mode!=BALANCE_INIT) && (mode!=BALANCE_ACTIVE) )
   d4b3e:	782b      	ldrb	r3, [r5, #0]
   d4b40:	3b02      	subs	r3, #2
   d4b42:	2b01      	cmp	r3, #1
   d4b44:	d90c      	bls.n	d4b60 <loop+0x398>
      {
        mode=BALANCE_INIT;
   d4b46:	4b80      	ldr	r3, [pc, #512]	; (d4d48 <loop+0x580>)
   d4b48:	2202      	movs	r2, #2
   d4b4a:	701a      	strb	r2, [r3, #0]
        Serial.printlnf("START balanceInput from RX = %f", balanceInput );
   d4b4c:	f003 faf6 	bl	d813c <_Z16_fetch_usbserialv>
   d4b50:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4b54:	2101      	movs	r1, #1
   d4b56:	e9cd 2300 	strd	r2, r3, [sp]
   d4b5a:	4a7c      	ldr	r2, [pc, #496]	; (d4d4c <loop+0x584>)
   d4b5c:	f003 fe82 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
      }
      // OK use RC input for balance target angle
      balanceInput=(90.0*(IBus.readChannel(1)-0x5dc))/500.0;
   d4b60:	2101      	movs	r1, #1
   d4b62:	4878      	ldr	r0, [pc, #480]	; (d4d44 <loop+0x57c>)
   d4b64:	f001 fb0a 	bl	d617c <_ZN10FlySkyIBus11readChannelEh>
   d4b68:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
   d4b6c:	f004 fc52 	bl	d9414 <__aeabi_i2d>
   d4b70:	2200      	movs	r2, #0
   d4b72:	4b77      	ldr	r3, [pc, #476]	; (d4d50 <loop+0x588>)
   d4b74:	f004 fcb4 	bl	d94e0 <__aeabi_dmul>
   d4b78:	2200      	movs	r2, #0
   d4b7a:	4b76      	ldr	r3, [pc, #472]	; (d4d54 <loop+0x58c>)
   d4b7c:	f004 fdda 	bl	d9734 <__aeabi_ddiv>
   d4b80:	e9c4 0100 	strd	r0, r1, [r4]
      Serial.printlnf("balanceInput from RX = %f", balanceInput );
   d4b84:	f003 fada 	bl	d813c <_Z16_fetch_usbserialv>
   d4b88:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4b8c:	2101      	movs	r1, #1
   d4b8e:	e9cd 2300 	strd	r2, r3, [sp]
   d4b92:	4a71      	ldr	r2, [pc, #452]	; (d4d58 <loop+0x590>)
   d4b94:	f003 fe66 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
    }
  }



  if (Serial.available())
   d4b98:	f003 fad0 	bl	d813c <_Z16_fetch_usbserialv>
   d4b9c:	6803      	ldr	r3, [r0, #0]
   d4b9e:	691b      	ldr	r3, [r3, #16]
   d4ba0:	4798      	blx	r3
   d4ba2:	2800      	cmp	r0, #0
   d4ba4:	f000 8087 	beq.w	d4cb6 <loop+0x4ee>
  {
    int inByte = Serial.read();
   d4ba8:	f003 fac8 	bl	d813c <_Z16_fetch_usbserialv>
   d4bac:	6803      	ldr	r3, [r0, #0]
   d4bae:	695b      	ldr	r3, [r3, #20]
   d4bb0:	4798      	blx	r3
    VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), inByte) ) ;
    switch (inByte)
   d4bb2:	2833      	cmp	r0, #51	; 0x33
   d4bb4:	d04a      	beq.n	d4c4c <loop+0x484>
   d4bb6:	dc33      	bgt.n	d4c20 <loop+0x458>
   d4bb8:	2831      	cmp	r0, #49	; 0x31
   d4bba:	d03f      	beq.n	d4c3c <loop+0x474>
   d4bbc:	dc42      	bgt.n	d4c44 <loop+0x47c>
   d4bbe:	2820      	cmp	r0, #32
   d4bc0:	d179      	bne.n	d4cb6 <loop+0x4ee>
    {
        case ' ':
          // reset PID
          leftPID.SetMode(PID::MANUAL);
   d4bc2:	2100      	movs	r1, #0
   d4bc4:	4865      	ldr	r0, [pc, #404]	; (d4d5c <loop+0x594>)
   d4bc6:	f000 fe55 	bl	d5874 <_ZN3PID7SetModeENS_6mode_tE>
          leftOutput=0;
   d4bca:	4b65      	ldr	r3, [pc, #404]	; (d4d60 <loop+0x598>)
   d4bcc:	2600      	movs	r6, #0
   d4bce:	2700      	movs	r7, #0
   d4bd0:	e9c3 6700 	strd	r6, r7, [r3]
          leftPower=0;
   d4bd4:	4b63      	ldr	r3, [pc, #396]	; (d4d64 <loop+0x59c>)
   d4bd6:	e9c3 6700 	strd	r6, r7, [r3]
   d4bda:	4b63      	ldr	r3, [pc, #396]	; (d4d68 <loop+0x5a0>)
   d4bdc:	2100      	movs	r1, #0
   d4bde:	6818      	ldr	r0, [r3, #0]
   d4be0:	f7ff fb30 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.3>
          setPwm( leftMotor, leftOutput);

          rightPID.SetMode(PID::MANUAL);
   d4be4:	2100      	movs	r1, #0
   d4be6:	4861      	ldr	r0, [pc, #388]	; (d4d6c <loop+0x5a4>)
   d4be8:	f000 fe44 	bl	d5874 <_ZN3PID7SetModeENS_6mode_tE>
          rightOutput=0;
   d4bec:	4b60      	ldr	r3, [pc, #384]	; (d4d70 <loop+0x5a8>)
   d4bee:	e9c3 6700 	strd	r6, r7, [r3]
          rightPower=0;
   d4bf2:	4b60      	ldr	r3, [pc, #384]	; (d4d74 <loop+0x5ac>)
   d4bf4:	e9c3 6700 	strd	r6, r7, [r3]
   d4bf8:	4b5f      	ldr	r3, [pc, #380]	; (d4d78 <loop+0x5b0>)
   d4bfa:	2100      	movs	r1, #0
   d4bfc:	6818      	ldr	r0, [r3, #0]
   d4bfe:	f7ff fb21 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.3>
          setPwm( rightMotor, rightOutput);

          speed=setTargetSpeed(0);
   d4c02:	2000      	movs	r0, #0
   d4c04:	f7ff fba2 	bl	d434c <_Z14setTargetSpeedi>
   d4c08:	4b5c      	ldr	r3, [pc, #368]	; (d4d7c <loop+0x5b4>)
          leftPID.SetMode(PID::AUTOMATIC);
   d4c0a:	2101      	movs	r1, #1
          rightPID.SetMode(PID::MANUAL);
          rightOutput=0;
          rightPower=0;
          setPwm( rightMotor, rightOutput);

          speed=setTargetSpeed(0);
   d4c0c:	6018      	str	r0, [r3, #0]
          leftPID.SetMode(PID::AUTOMATIC);
   d4c0e:	4853      	ldr	r0, [pc, #332]	; (d4d5c <loop+0x594>)
   d4c10:	f000 fe30 	bl	d5874 <_ZN3PID7SetModeENS_6mode_tE>
          rightPID.SetMode(PID::AUTOMATIC);
   d4c14:	2101      	movs	r1, #1
   d4c16:	4855      	ldr	r0, [pc, #340]	; (d4d6c <loop+0x5a4>)
   d4c18:	f000 fe2c 	bl	d5874 <_ZN3PID7SetModeENS_6mode_tE>

          mode=IDLE;
   d4c1c:	2300      	movs	r3, #0
   d4c1e:	e01e      	b.n	d4c5e <loop+0x496>

  if (Serial.available())
  {
    int inByte = Serial.read();
    VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), inByte) ) ;
    switch (inByte)
   d4c20:	2836      	cmp	r0, #54	; 0x36
   d4c22:	d01b      	beq.n	d4c5c <loop+0x494>
   d4c24:	dc03      	bgt.n	d4c2e <loop+0x466>
   d4c26:	2835      	cmp	r0, #53	; 0x35
   d4c28:	d145      	bne.n	d4cb6 <loop+0x4ee>
          speed=setTargetSpeed(-speed);
          mode=DRIVE;
          break;
        case '5':
          VERBOSE(  Serial.printlnf( "[%s] %d -> BALANCE_INIT  ", __FUNCTION__, millis()) ) ;
          mode=BALANCE_INIT;
   d4c2a:	2302      	movs	r3, #2
   d4c2c:	e017      	b.n	d4c5e <loop+0x496>

  if (Serial.available())
  {
    int inByte = Serial.read();
    VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), inByte) ) ;
    switch (inByte)
   d4c2e:	2838      	cmp	r0, #56	; 0x38
   d4c30:	d017      	beq.n	d4c62 <loop+0x49a>
   d4c32:	2839      	cmp	r0, #57	; 0x39
   d4c34:	d13f      	bne.n	d4cb6 <loop+0x4ee>
            serialTime = 0;

          }
          break;              
        case '9':
          SleepStateToggle();
   d4c36:	f7ff fb2f 	bl	d4298 <_Z16SleepStateTogglev>
          break;
   d4c3a:	e03c      	b.n	d4cb6 <loop+0x4ee>

          mode=IDLE;

          break;
        case '1':
          speed=setTargetSpeed(speed-SPEED_DELTA);
   d4c3c:	4e4f      	ldr	r6, [pc, #316]	; (d4d7c <loop+0x5b4>)
   d4c3e:	6830      	ldr	r0, [r6, #0]
   d4c40:	3864      	subs	r0, #100	; 0x64
   d4c42:	e006      	b.n	d4c52 <loop+0x48a>
          mode=DRIVE;
          break;
        case '2':
          speed=setTargetSpeed(speed+SPEED_DELTA);
   d4c44:	4e4d      	ldr	r6, [pc, #308]	; (d4d7c <loop+0x5b4>)
   d4c46:	6830      	ldr	r0, [r6, #0]
   d4c48:	3064      	adds	r0, #100	; 0x64
   d4c4a:	e002      	b.n	d4c52 <loop+0x48a>
          mode=DRIVE;
          break;
        case '3':
          speed=setTargetSpeed(-speed);
   d4c4c:	4e4b      	ldr	r6, [pc, #300]	; (d4d7c <loop+0x5b4>)
   d4c4e:	6830      	ldr	r0, [r6, #0]
   d4c50:	4240      	negs	r0, r0
   d4c52:	f7ff fb7b 	bl	d434c <_Z14setTargetSpeedi>
          mode=DRIVE;
   d4c56:	2301      	movs	r3, #1
        case '2':
          speed=setTargetSpeed(speed+SPEED_DELTA);
          mode=DRIVE;
          break;
        case '3':
          speed=setTargetSpeed(-speed);
   d4c58:	6030      	str	r0, [r6, #0]
   d4c5a:	e000      	b.n	d4c5e <loop+0x496>
          VERBOSE(  Serial.printlnf( "[%s] %d -> BALANCE_INIT  ", __FUNCTION__, millis()) ) ;
          mode=BALANCE_INIT;
          break;         
        case '6':
          VERBOSE(  Serial.printlnf( "[%s] %d -> MQTT_TEST  ", __FUNCTION__, millis()) ) ;
          mode=MQTT_TEST;
   d4c5c:	2308      	movs	r3, #8
   d4c5e:	702b      	strb	r3, [r5, #0]
          break;              
   d4c60:	e029      	b.n	d4cb6 <loop+0x4ee>
        case '8':
          if( mode==AUTOTUNE) {
   d4c62:	782b      	ldrb	r3, [r5, #0]
   d4c64:	4f38      	ldr	r7, [pc, #224]	; (d4d48 <loop+0x580>)
   d4c66:	4e46      	ldr	r6, [pc, #280]	; (d4d80 <loop+0x5b8>)
   d4c68:	2b07      	cmp	r3, #7
   d4c6a:	d106      	bne.n	d4c7a <loop+0x4b2>
            aTune.Cancel();
   d4c6c:	4845      	ldr	r0, [pc, #276]	; (d4d84 <loop+0x5bc>)
   d4c6e:	f000 fe89 	bl	d5984 <_ZN9PID_ATune6CancelEv>
            tuning = false;
   d4c72:	2300      	movs	r3, #0
   d4c74:	7033      	strb	r3, [r6, #0]
            mode=IDLE;
   d4c76:	703b      	strb	r3, [r7, #0]
   d4c78:	e01d      	b.n	d4cb6 <loop+0x4ee>
          }
          else
          {
            mode=AUTOTUNE;
   d4c7a:	2307      	movs	r3, #7
   d4c7c:	703b      	strb	r3, [r7, #0]
            //Set the output to the desired starting frequency.
            leftOutput=aTuneStartValue;
   d4c7e:	4b42      	ldr	r3, [pc, #264]	; (d4d88 <loop+0x5c0>)
   d4c80:	e9d3 0100 	ldrd	r0, r1, [r3]
   d4c84:	4b36      	ldr	r3, [pc, #216]	; (d4d60 <loop+0x598>)
   d4c86:	e9c3 0100 	strd	r0, r1, [r3]
            aTune.SetNoiseBand(aTuneNoise);
   d4c8a:	4b40      	ldr	r3, [pc, #256]	; (d4d8c <loop+0x5c4>)
   d4c8c:	483d      	ldr	r0, [pc, #244]	; (d4d84 <loop+0x5bc>)
   d4c8e:	ed93 0b00 	vldr	d0, [r3]
   d4c92:	f001 f80c 	bl	d5cae <_ZN9PID_ATune12SetNoiseBandEd>
            aTune.SetOutputStep(aTuneStep);
   d4c96:	4b3e      	ldr	r3, [pc, #248]	; (d4d90 <loop+0x5c8>)
   d4c98:	483a      	ldr	r0, [pc, #232]	; (d4d84 <loop+0x5bc>)
   d4c9a:	ed93 0b00 	vldr	d0, [r3]
   d4c9e:	f001 f803 	bl	d5ca8 <_ZN9PID_ATune13SetOutputStepEd>
            aTune.SetLookbackSec((int)aTuneLookBack);
   d4ca2:	4b3c      	ldr	r3, [pc, #240]	; (d4d94 <loop+0x5cc>)
   d4ca4:	4837      	ldr	r0, [pc, #220]	; (d4d84 <loop+0x5bc>)
   d4ca6:	6819      	ldr	r1, [r3, #0]
   d4ca8:	f001 f804 	bl	d5cb4 <_ZN9PID_ATune14SetLookbackSecEi>

            tuning=true;
   d4cac:	2301      	movs	r3, #1
   d4cae:	7033      	strb	r3, [r6, #0]
            serialTime = 0;
   d4cb0:	4b39      	ldr	r3, [pc, #228]	; (d4d98 <loop+0x5d0>)
   d4cb2:	2200      	movs	r2, #0
   d4cb4:	601a      	str	r2, [r3, #0]

	inline int32_t read(void) {
		noInterrupts();
   d4cb6:	f003 fbcc 	bl	d8452 <_Z12noInterruptsv>
		int32_t ret = position;
   d4cba:	4b38      	ldr	r3, [pc, #224]	; (d4d9c <loop+0x5d4>)
   d4cbc:	695e      	ldr	r6, [r3, #20]
		interrupts();
   d4cbe:	f003 fbca 	bl	d8456 <_Z10interruptsv>
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
	}

	inline int32_t read(void) {
		noInterrupts();
   d4cc2:	f003 fbc6 	bl	d8452 <_Z12noInterruptsv>
		int32_t ret = position;
   d4cc6:	4b36      	ldr	r3, [pc, #216]	; (d4da0 <loop+0x5d8>)
   d4cc8:	f8d3 8014 	ldr.w	r8, [r3, #20]
		interrupts();
   d4ccc:	f003 fbc3 	bl	d8456 <_Z10interruptsv>
   d4cd0:	f002 fa74 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  }

  long newLeftPosition = leftEnc.read();
  long newRightPosition = rightEnc.read();
  int time=millis();
  switch(mode)
   d4cd4:	782b      	ldrb	r3, [r5, #0]
   d4cd6:	900e      	str	r0, [sp, #56]	; 0x38
   d4cd8:	3b01      	subs	r3, #1
   d4cda:	2b07      	cmp	r3, #7
   d4cdc:	f200 831d 	bhi.w	d531a <loop+0xb52>
   d4ce0:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4ce4:	001400cf 	.word	0x001400cf
   d4ce8:	031b0068 	.word	0x031b0068
   d4cec:	031b031b 	.word	0x031b031b
   d4cf0:	00080275 	.word	0x00080275
  {
    case MQTT_TEST:
      VERBOSE(  Serial.printlnf( "[%s] %d -> MQTT_TEST  ", __FUNCTION__, millis()) ) ;
      telemetrySend( "robot/test", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\": \"test\" }",Time.now(), millis() );
   d4cf4:	f003 fc5f 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4cf8:	4604      	mov	r4, r0
   d4cfa:	f002 fa5f 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d4cfe:	4622      	mov	r2, r4
   d4d00:	4603      	mov	r3, r0
   d4d02:	4928      	ldr	r1, [pc, #160]	; (d4da4 <loop+0x5dc>)
   d4d04:	4828      	ldr	r0, [pc, #160]	; (d4da8 <loop+0x5e0>)
   d4d06:	f7ff fcf3 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
      break;
   d4d0a:	e306      	b.n	d531a <loop+0xb52>

    case BALANCE_INIT:
      // wait for robot to be vertical then start balancing
      if ( abs(balanceInput)<BALANCE_THRESHOLD_START )
   d4d0c:	e9d4 0100 	ldrd	r0, r1, [r4]
   d4d10:	f004 fe96 	bl	d9a40 <__aeabi_d2iz>
   d4d14:	3001      	adds	r0, #1
   d4d16:	2802      	cmp	r0, #2
   d4d18:	f200 82ff 	bhi.w	d531a <loop+0xb52>
      {
        // start balancing
        mode=BALANCE_ACTIVE;
   d4d1c:	2303      	movs	r3, #3
   d4d1e:	702b      	strb	r3, [r5, #0]
        Serial.printlnf( "balance goes active:  %d, %d", millis(), balanceInput ) ;
   d4d20:	f003 fa0c 	bl	d813c <_Z16_fetch_usbserialv>
   d4d24:	4604      	mov	r4, r0
   d4d26:	f002 fa49 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d4d2a:	4b20      	ldr	r3, [pc, #128]	; (d4dac <loop+0x5e4>)
   d4d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d30:	2101      	movs	r1, #1
   d4d32:	e9cd 2300 	strd	r2, r3, [sp]
   d4d36:	4603      	mov	r3, r0
   d4d38:	4a1d      	ldr	r2, [pc, #116]	; (d4db0 <loop+0x5e8>)
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	f003 fd92 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
   d4d40:	e2eb      	b.n	d531a <loop+0xb52>
   d4d42:	bf00      	nop
   d4d44:	2003e3a8 	.word	0x2003e3a8
   d4d48:	2003ddb8 	.word	0x2003ddb8
   d4d4c:	000da9d4 	.word	0x000da9d4
   d4d50:	40568000 	.word	0x40568000
   d4d54:	407f4000 	.word	0x407f4000
   d4d58:	000da9da 	.word	0x000da9da
   d4d5c:	2003df40 	.word	0x2003df40
   d4d60:	2003de88 	.word	0x2003de88
   d4d64:	2003dc88 	.word	0x2003dc88
   d4d68:	2003dde4 	.word	0x2003dde4
   d4d6c:	2003ddf0 	.word	0x2003ddf0
   d4d70:	2003de90 	.word	0x2003de90
   d4d74:	2003de68 	.word	0x2003de68
   d4d78:	2003dce8 	.word	0x2003dce8
   d4d7c:	2003df20 	.word	0x2003df20
   d4d80:	2003dcec 	.word	0x2003dcec
   d4d84:	2003dfb8 	.word	0x2003dfb8
   d4d88:	2003df18 	.word	0x2003df18
   d4d8c:	2003dba8 	.word	0x2003dba8
   d4d90:	2003dba0 	.word	0x2003dba0
   d4d94:	2003db80 	.word	0x2003db80
   d4d98:	2003dd88 	.word	0x2003dd88
   d4d9c:	2003df24 	.word	0x2003df24
   d4da0:	2003ddc8 	.word	0x2003ddc8
   d4da4:	000da9f4 	.word	0x000da9f4
   d4da8:	000daa28 	.word	0x000daa28
   d4dac:	2003ddc0 	.word	0x2003ddc0
   d4db0:	000daa33 	.word	0x000daa33
      }
      break;
    case BALANCE_ACTIVE:
      if ( abs(balanceInput)>BALANCE_THRESHOLD_MAX )
   d4db4:	e9d4 0100 	ldrd	r0, r1, [r4]
   d4db8:	f004 fe42 	bl	d9a40 <__aeabi_d2iz>
   d4dbc:	2800      	cmp	r0, #0
   d4dbe:	bfb8      	it	lt
   d4dc0:	4240      	neglt	r0, r0
   d4dc2:	280e      	cmp	r0, #14
   d4dc4:	dd11      	ble.n	d4dea <loop+0x622>
      {
        // too far gone - give up - go idle
        mode=BALANCE_INIT;
   d4dc6:	2302      	movs	r3, #2
   d4dc8:	702b      	strb	r3, [r5, #0]
        Serial.printlnf( "balance goes idle: %d, %d", millis(), balanceInput ) ;
   d4dca:	f003 f9b7 	bl	d813c <_Z16_fetch_usbserialv>
   d4dce:	4605      	mov	r5, r0
   d4dd0:	f002 f9f4 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d4dd4:	4b92      	ldr	r3, [pc, #584]	; (d5020 <loop+0x858>)
   d4dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dda:	2101      	movs	r1, #1
   d4ddc:	e9cd 2300 	strd	r2, r3, [sp]
   d4de0:	4603      	mov	r3, r0
   d4de2:	4a90      	ldr	r2, [pc, #576]	; (d5024 <loop+0x85c>)
   d4de4:	4628      	mov	r0, r5
   d4de6:	f003 fd3d 	bl	d8864 <_ZN5Print11printf_implEbPKcz>
      }
    #if 1
      //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
      if ( balancePID.Compute() )
   d4dea:	488f      	ldr	r0, [pc, #572]	; (d5028 <loop+0x860>)
   d4dec:	f000 fbca 	bl	d5584 <_ZN3PID7ComputeEv>
   d4df0:	2800      	cmp	r0, #0
   d4df2:	d046      	beq.n	d4e82 <loop+0x6ba>
      {
        leftSetpoint=balanceOutput;
   d4df4:	4d8d      	ldr	r5, [pc, #564]	; (d502c <loop+0x864>)
   d4df6:	498e      	ldr	r1, [pc, #568]	; (d5030 <loop+0x868>)
   d4df8:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4dfc:	e9c1 2300 	strd	r2, r3, [r1]
        rightSetpoint=balanceOutput;
   d4e00:	498c      	ldr	r1, [pc, #560]	; (d5034 <loop+0x86c>)
   d4e02:	e9c1 2300 	strd	r2, r3, [r1]

        //Serial.printlnf( "balancePid { \"timestamp\": \"%f\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\" }", millis(), balanceInput, balanceSetpoint, balanceOutput  ) ;

        telemetrySend( "robot/balancePid", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"pid\", \"name\":\"balancePid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), balanceInput, balanceSetpoint, balanceOutput, balancePID.GetKp(), balancePID.GetKi(), balancePID.GetKd(), (balancePID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d4e06:	f003 fbd6 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4e0a:	4607      	mov	r7, r0
   d4e0c:	f002 f9d6 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d4e10:	4b89      	ldr	r3, [pc, #548]	; (d5038 <loop+0x870>)
   d4e12:	4681      	mov	r9, r0
   d4e14:	4884      	ldr	r0, [pc, #528]	; (d5028 <loop+0x860>)
   d4e16:	ed93 8b00 	vldr	d8, [r3]
   d4e1a:	e9d4 ab00 	ldrd	sl, fp, [r4]
   d4e1e:	e9d5 4500 	ldrd	r4, r5, [r5]
   d4e22:	f000 fda1 	bl	d5968 <_ZN3PID5GetKpEv>
   d4e26:	4880      	ldr	r0, [pc, #512]	; (d5028 <loop+0x860>)
   d4e28:	eeb0 9a40 	vmov.f32	s18, s0
   d4e2c:	eef0 9a60 	vmov.f32	s19, s1
   d4e30:	f000 fd9d 	bl	d596e <_ZN3PID5GetKiEv>
   d4e34:	487c      	ldr	r0, [pc, #496]	; (d5028 <loop+0x860>)
   d4e36:	eeb0 aa40 	vmov.f32	s20, s0
   d4e3a:	eef0 aa60 	vmov.f32	s21, s1
   d4e3e:	f000 fd99 	bl	d5974 <_ZN3PID5GetKdEv>
   d4e42:	4879      	ldr	r0, [pc, #484]	; (d5028 <loop+0x860>)
   d4e44:	eeb0 ba40 	vmov.f32	s22, s0
   d4e48:	eef0 ba60 	vmov.f32	s23, s1
   d4e4c:	f000 fd95 	bl	d597a <_ZN3PID7GetModeEv>
   d4e50:	4b7a      	ldr	r3, [pc, #488]	; (d503c <loop+0x874>)
   d4e52:	497b      	ldr	r1, [pc, #492]	; (d5040 <loop+0x878>)
   d4e54:	2801      	cmp	r0, #1
   d4e56:	bf0c      	ite	eq
   d4e58:	4608      	moveq	r0, r1
   d4e5a:	4618      	movne	r0, r3
   d4e5c:	900c      	str	r0, [sp, #48]	; 0x30
   d4e5e:	ed8d bb0a 	vstr	d11, [sp, #40]	; 0x28
   d4e62:	ed8d ab08 	vstr	d10, [sp, #32]
   d4e66:	ed8d 9b06 	vstr	d9, [sp, #24]
   d4e6a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d4e6e:	ed8d 8b02 	vstr	d8, [sp, #8]
   d4e72:	e9cd ab00 	strd	sl, fp, [sp]
   d4e76:	464b      	mov	r3, r9
   d4e78:	463a      	mov	r2, r7
   d4e7a:	4972      	ldr	r1, [pc, #456]	; (d5044 <loop+0x87c>)
   d4e7c:	4872      	ldr	r0, [pc, #456]	; (d5048 <loop+0x880>)
   d4e7e:	f7ff fc37 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
      }
    #endif
      // break;
    case DRIVE:
    #if 1
      if ( oldLeftTime==0 )
   d4e82:	4b72      	ldr	r3, [pc, #456]	; (d504c <loop+0x884>)
   d4e84:	681a      	ldr	r2, [r3, #0]
   d4e86:	461f      	mov	r7, r3
   d4e88:	b922      	cbnz	r2, d4e94 <loop+0x6cc>
      {
        // do nothing
        oldLeftPosition = newLeftPosition;
   d4e8a:	4a71      	ldr	r2, [pc, #452]	; (d5050 <loop+0x888>)
   d4e8c:	6016      	str	r6, [r2, #0]
        oldLeftTime = time;
   d4e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4e90:	601a      	str	r2, [r3, #0]
   d4e92:	e0b3      	b.n	d4ffc <loop+0x834>
      } 
      else if (time-oldLeftTime>0)
   d4e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4e96:	ebc2 0903 	rsb	r9, r2, r3
   d4e9a:	f1b9 0f00 	cmp.w	r9, #0
   d4e9e:	f340 80ad 	ble.w	d4ffc <loop+0x834>
      {  
        //Serial.printlnf( "[%s]%d", __FUNCTION__, time-oldLeftTime );
        leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(time-oldLeftTime)));
   d4ea2:	4b6b      	ldr	r3, [pc, #428]	; (d5050 <loop+0x888>)
   d4ea4:	f8df a1d4 	ldr.w	sl, [pc, #468]	; d507c <loop+0x8b4>
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	f64e 2060 	movw	r0, #60000	; 0xea60
   d4eae:	1af3      	subs	r3, r6, r3
   d4eb0:	4358      	muls	r0, r3
   d4eb2:	f004 faaf 	bl	d9414 <__aeabi_i2d>
   d4eb6:	4604      	mov	r4, r0
   d4eb8:	4648      	mov	r0, r9
   d4eba:	460d      	mov	r5, r1
   d4ebc:	f004 faaa 	bl	d9414 <__aeabi_i2d>
   d4ec0:	2200      	movs	r2, #0
   d4ec2:	4b64      	ldr	r3, [pc, #400]	; (d5054 <loop+0x88c>)
   d4ec4:	f004 fb0c 	bl	d94e0 <__aeabi_dmul>
   d4ec8:	4602      	mov	r2, r0
   d4eca:	460b      	mov	r3, r1
   d4ecc:	4620      	mov	r0, r4
   d4ece:	4629      	mov	r1, r5
   d4ed0:	f004 fc30 	bl	d9734 <__aeabi_ddiv>
   d4ed4:	e9ca 0100 	strd	r0, r1, [sl]
        //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
        if ( leftPID.Compute() )
   d4ed8:	485f      	ldr	r0, [pc, #380]	; (d5058 <loop+0x890>)
   d4eda:	f000 fb53 	bl	d5584 <_ZN3PID7ComputeEv>
   d4ede:	2800      	cmp	r0, #0
   d4ee0:	f000 808c 	beq.w	d4ffc <loop+0x834>
        {
          Serial.println(Time.timeStr());
   d4ee4:	f003 f92a 	bl	d813c <_Z16_fetch_usbserialv>
   d4ee8:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4eea:	f003 fb64 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4eee:	4601      	mov	r1, r0
   d4ef0:	a814      	add	r0, sp, #80	; 0x50
   d4ef2:	f003 fb1d 	bl	d8530 <_ZN9TimeClass7timeStrEl>
   d4ef6:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4ef8:	4620      	mov	r0, r4
   d4efa:	f003 fbb1 	bl	d8660 <_ZN5Print7printlnEPKc>
   d4efe:	a814      	add	r0, sp, #80	; 0x50
   d4f00:	f003 fd06 	bl	d8910 <_ZN6StringD1Ev>

          telemetrySend( "robot/leftPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d4f04:	f003 fb57 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4f08:	4605      	mov	r5, r0
   d4f0a:	f002 f957 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d4f0e:	4c53      	ldr	r4, [pc, #332]	; (d505c <loop+0x894>)
   d4f10:	4b47      	ldr	r3, [pc, #284]	; (d5030 <loop+0x868>)
   d4f12:	4681      	mov	r9, r0
   d4f14:	4850      	ldr	r0, [pc, #320]	; (d5058 <loop+0x890>)
   d4f16:	ed93 8b00 	vldr	d8, [r3]
   d4f1a:	ed94 9b00 	vldr	d9, [r4]
   d4f1e:	e9da ab00 	ldrd	sl, fp, [sl]
   d4f22:	f000 fd21 	bl	d5968 <_ZN3PID5GetKpEv>
   d4f26:	484c      	ldr	r0, [pc, #304]	; (d5058 <loop+0x890>)
   d4f28:	eeb0 aa40 	vmov.f32	s20, s0
   d4f2c:	eef0 aa60 	vmov.f32	s21, s1
   d4f30:	f000 fd1d 	bl	d596e <_ZN3PID5GetKiEv>
   d4f34:	4848      	ldr	r0, [pc, #288]	; (d5058 <loop+0x890>)
   d4f36:	eeb0 ba40 	vmov.f32	s22, s0
   d4f3a:	eef0 ba60 	vmov.f32	s23, s1
   d4f3e:	f000 fd19 	bl	d5974 <_ZN3PID5GetKdEv>
   d4f42:	4845      	ldr	r0, [pc, #276]	; (d5058 <loop+0x890>)
   d4f44:	eeb0 ca40 	vmov.f32	s24, s0
   d4f48:	eef0 ca60 	vmov.f32	s25, s1
   d4f4c:	f000 fd15 	bl	d597a <_ZN3PID7GetModeEv>
   d4f50:	4b3a      	ldr	r3, [pc, #232]	; (d503c <loop+0x874>)
   d4f52:	493b      	ldr	r1, [pc, #236]	; (d5040 <loop+0x878>)
   d4f54:	2801      	cmp	r0, #1
   d4f56:	bf0c      	ite	eq
   d4f58:	4608      	moveq	r0, r1
   d4f5a:	4618      	movne	r0, r3
   d4f5c:	464b      	mov	r3, r9

          leftPower=adjustSpeed( leftPower, leftOutput );
   d4f5e:	f8df 9120 	ldr.w	r9, [pc, #288]	; d5080 <loop+0x8b8>
        //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
        if ( leftPID.Compute() )
        {
          Serial.println(Time.timeStr());

          telemetrySend( "robot/leftPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d4f62:	900c      	str	r0, [sp, #48]	; 0x30
   d4f64:	462a      	mov	r2, r5
   d4f66:	493e      	ldr	r1, [pc, #248]	; (d5060 <loop+0x898>)
   d4f68:	483e      	ldr	r0, [pc, #248]	; (d5064 <loop+0x89c>)
   d4f6a:	ed8d cb0a 	vstr	d12, [sp, #40]	; 0x28
   d4f6e:	ed8d bb08 	vstr	d11, [sp, #32]
   d4f72:	ed8d ab06 	vstr	d10, [sp, #24]
   d4f76:	ed8d 9b04 	vstr	d9, [sp, #16]
   d4f7a:	ed8d 8b02 	vstr	d8, [sp, #8]
   d4f7e:	e9cd ab00 	strd	sl, fp, [sp]
   d4f82:	f7ff fbb5 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d4f86:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4f8a:	e9d9 0100 	ldrd	r0, r1, [r9]
   d4f8e:	f004 f8f5 	bl	d917c <__adddf3>
   d4f92:	a31f      	add	r3, pc, #124	; (adr r3, d5010 <loop+0x848>)
   d4f94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f98:	4604      	mov	r4, r0
   d4f9a:	460d      	mov	r5, r1
   d4f9c:	f004 fd12 	bl	d99c4 <__aeabi_dcmplt>
   d4fa0:	b158      	cbz	r0, d4fba <loop+0x7f2>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d4fa2:	a31d      	add	r3, pc, #116	; (adr r3, d5018 <loop+0x850>)
   d4fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fa8:	4620      	mov	r0, r4
   d4faa:	4629      	mov	r1, r5
   d4fac:	f004 fd28 	bl	d9a00 <__aeabi_dcmpgt>
   d4fb0:	b930      	cbnz	r0, d4fc0 <loop+0x7f8>
   d4fb2:	a519      	add	r5, pc, #100	; (adr r5, d5018 <loop+0x850>)
   d4fb4:	e9d5 4500 	ldrd	r4, r5, [r5]
   d4fb8:	e002      	b.n	d4fc0 <loop+0x7f8>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4fba:	a515      	add	r5, pc, #84	; (adr r5, d5010 <loop+0x848>)
   d4fbc:	e9d5 4500 	ldrd	r4, r5, [r5]
        {
          Serial.println(Time.timeStr());

          telemetrySend( "robot/leftPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;

          leftPower=adjustSpeed( leftPower, leftOutput );
   d4fc0:	e9c9 4500 	strd	r4, r5, [r9]
          setPwm( leftMotor, leftPower );
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	4629      	mov	r1, r5
   d4fc8:	f004 fd3a 	bl	d9a40 <__aeabi_d2iz>
   d4fcc:	4b26      	ldr	r3, [pc, #152]	; (d5068 <loop+0x8a0>)
   d4fce:	4601      	mov	r1, r0
   d4fd0:	6818      	ldr	r0, [r3, #0]
   d4fd2:	f7ff f9a3 	bl	d431c <_Z6setPwmP16Adafruit_DCMotori>
          //Serial.printlnf( "[%s]%d left power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, Time.now(), power, newLeftPosition-oldLeftPosition, newLeftPosition, leftInput );
          VERBOSE( Serial.printlnf( "[%s] %d - left pid input=%f, setpoint=%f, output=%f", __FUNCTION__, time, leftInput, leftSetpoint, leftOutput) );
          telemetrySend( "robot/leftPower", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"power\", \"name\":\"leftPower\", \"power\" : %f  }", Time.now(), millis(), leftPower ) ;
   d4fd6:	f003 faee 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d4fda:	4604      	mov	r4, r0
   d4fdc:	f002 f8ee 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d4fe0:	e9d9 2300 	ldrd	r2, r3, [r9]
   d4fe4:	4921      	ldr	r1, [pc, #132]	; (d506c <loop+0x8a4>)
   d4fe6:	e9cd 2300 	strd	r2, r3, [sp]
   d4fea:	4603      	mov	r3, r0
   d4fec:	4622      	mov	r2, r4
   d4fee:	4820      	ldr	r0, [pc, #128]	; (d5070 <loop+0x8a8>)
   d4ff0:	f7ff fb7e 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
          VERBOSE( Serial.printlnf( "[%s] %d - left power=%f", __FUNCTION__, time, leftPower) );

          oldLeftPosition = newLeftPosition;
   d4ff4:	4b16      	ldr	r3, [pc, #88]	; (d5050 <loop+0x888>)
   d4ff6:	601e      	str	r6, [r3, #0]
          oldLeftTime = time;
   d4ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4ffa:	603b      	str	r3, [r7, #0]
      }

    #endif

    #if 1
      if ( oldRightTime==0 )
   d4ffc:	4b1d      	ldr	r3, [pc, #116]	; (d5074 <loop+0x8ac>)
   d4ffe:	681c      	ldr	r4, [r3, #0]
   d5000:	461d      	mov	r5, r3
   d5002:	2c00      	cmp	r4, #0
   d5004:	d13e      	bne.n	d5084 <loop+0x8bc>
      {
        // do nothing
        oldRightPosition = newRightPosition;
   d5006:	4a1c      	ldr	r2, [pc, #112]	; (d5078 <loop+0x8b0>)
   d5008:	f8c2 8000 	str.w	r8, [r2]
   d500c:	e0e5      	b.n	d51da <loop+0xa12>
   d500e:	bf00      	nop
   d5010:	00000000 	.word	0x00000000
   d5014:	406fe000 	.word	0x406fe000
   d5018:	00000000 	.word	0x00000000
   d501c:	c06fe000 	.word	0xc06fe000
   d5020:	2003ddc0 	.word	0x2003ddc0
   d5024:	000daa50 	.word	0x000daa50
   d5028:	2003dd08 	.word	0x2003dd08
   d502c:	2003dcf0 	.word	0x2003dcf0
   d5030:	2003dd90 	.word	0x2003dd90
   d5034:	2003de78 	.word	0x2003de78
   d5038:	2003dda0 	.word	0x2003dda0
   d503c:	000da7e7 	.word	0x000da7e7
   d5040:	000da7dd 	.word	0x000da7dd
   d5044:	000daa6a 	.word	0x000daa6a
   d5048:	000dab09 	.word	0x000dab09
   d504c:	2003dd98 	.word	0x2003dd98
   d5050:	2003dea4 	.word	0x2003dea4
   d5054:	4092c000 	.word	0x4092c000
   d5058:	2003df40 	.word	0x2003df40
   d505c:	2003de88 	.word	0x2003de88
   d5060:	000dab1a 	.word	0x000dab1a
   d5064:	000dabb5 	.word	0x000dabb5
   d5068:	2003dde4 	.word	0x2003dde4
   d506c:	000dabc3 	.word	0x000dabc3
   d5070:	000dac1a 	.word	0x000dac1a
   d5074:	2003de80 	.word	0x2003de80
   d5078:	2003dd84 	.word	0x2003dd84
   d507c:	2003dd00 	.word	0x2003dd00
   d5080:	2003dc88 	.word	0x2003dc88
        oldRightTime = time;
      } 
      else if (time-oldRightTime>0)
   d5084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5086:	1b1c      	subs	r4, r3, r4
   d5088:	2c00      	cmp	r4, #0
   d508a:	f340 8146 	ble.w	d531a <loop+0xb52>
      {  
        rightInput = (((newRightPosition-oldRightPosition)*60000)/(18.75*64*(time-oldRightTime)));
   d508e:	f8df 9300 	ldr.w	r9, [pc, #768]	; d5390 <loop+0xbc8>
   d5092:	f8df a300 	ldr.w	sl, [pc, #768]	; d5394 <loop+0xbcc>
   d5096:	f8d9 0000 	ldr.w	r0, [r9]
   d509a:	f64e 2360 	movw	r3, #60000	; 0xea60
   d509e:	ebc0 0008 	rsb	r0, r0, r8
   d50a2:	4358      	muls	r0, r3
   d50a4:	f004 f9b6 	bl	d9414 <__aeabi_i2d>
   d50a8:	4606      	mov	r6, r0
   d50aa:	4620      	mov	r0, r4
   d50ac:	460f      	mov	r7, r1
   d50ae:	f004 f9b1 	bl	d9414 <__aeabi_i2d>
   d50b2:	2200      	movs	r2, #0
   d50b4:	4ba0      	ldr	r3, [pc, #640]	; (d5338 <loop+0xb70>)
   d50b6:	f004 fa13 	bl	d94e0 <__aeabi_dmul>
   d50ba:	4602      	mov	r2, r0
   d50bc:	460b      	mov	r3, r1
   d50be:	4630      	mov	r0, r6
   d50c0:	4639      	mov	r1, r7
   d50c2:	f004 fb37 	bl	d9734 <__aeabi_ddiv>
   d50c6:	e9ca 0100 	strd	r0, r1, [sl]


        if ( rightPID.Compute() )
   d50ca:	489c      	ldr	r0, [pc, #624]	; (d533c <loop+0xb74>)
   d50cc:	f000 fa5a 	bl	d5584 <_ZN3PID7ComputeEv>
   d50d0:	2800      	cmp	r0, #0
   d50d2:	f000 8122 	beq.w	d531a <loop+0xb52>
        {
            telemetrySend( "robot/rightPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d50d6:	f003 fa6e 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d50da:	4604      	mov	r4, r0
   d50dc:	f002 f86e 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d50e0:	4e97      	ldr	r6, [pc, #604]	; (d5340 <loop+0xb78>)
   d50e2:	4b98      	ldr	r3, [pc, #608]	; (d5344 <loop+0xb7c>)
   d50e4:	4607      	mov	r7, r0
   d50e6:	4895      	ldr	r0, [pc, #596]	; (d533c <loop+0xb74>)
   d50e8:	ed93 8b00 	vldr	d8, [r3]
   d50ec:	ed96 9b00 	vldr	d9, [r6]
   d50f0:	e9da ab00 	ldrd	sl, fp, [sl]
   d50f4:	f000 fc38 	bl	d5968 <_ZN3PID5GetKpEv>
   d50f8:	4890      	ldr	r0, [pc, #576]	; (d533c <loop+0xb74>)
   d50fa:	eeb0 aa40 	vmov.f32	s20, s0
   d50fe:	eef0 aa60 	vmov.f32	s21, s1
   d5102:	f000 fc34 	bl	d596e <_ZN3PID5GetKiEv>
   d5106:	488d      	ldr	r0, [pc, #564]	; (d533c <loop+0xb74>)
   d5108:	eeb0 ba40 	vmov.f32	s22, s0
   d510c:	eef0 ba60 	vmov.f32	s23, s1
   d5110:	f000 fc30 	bl	d5974 <_ZN3PID5GetKdEv>
   d5114:	4889      	ldr	r0, [pc, #548]	; (d533c <loop+0xb74>)
   d5116:	eeb0 ca40 	vmov.f32	s24, s0
   d511a:	eef0 ca60 	vmov.f32	s25, s1
   d511e:	f000 fc2c 	bl	d597a <_ZN3PID7GetModeEv>
   d5122:	4b89      	ldr	r3, [pc, #548]	; (d5348 <loop+0xb80>)
   d5124:	4989      	ldr	r1, [pc, #548]	; (d534c <loop+0xb84>)
   d5126:	4622      	mov	r2, r4
   d5128:	2801      	cmp	r0, #1
   d512a:	bf0c      	ite	eq
   d512c:	4608      	moveq	r0, r1
   d512e:	4618      	movne	r0, r3

            rightPower=adjustSpeed( rightPower, rightOutput );
   d5130:	4c87      	ldr	r4, [pc, #540]	; (d5350 <loop+0xb88>)
        rightInput = (((newRightPosition-oldRightPosition)*60000)/(18.75*64*(time-oldRightTime)));


        if ( rightPID.Compute() )
        {
            telemetrySend( "robot/rightPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d5132:	900c      	str	r0, [sp, #48]	; 0x30
   d5134:	463b      	mov	r3, r7
   d5136:	4987      	ldr	r1, [pc, #540]	; (d5354 <loop+0xb8c>)
   d5138:	4887      	ldr	r0, [pc, #540]	; (d5358 <loop+0xb90>)
   d513a:	ed8d cb0a 	vstr	d12, [sp, #40]	; 0x28
   d513e:	ed8d bb08 	vstr	d11, [sp, #32]
   d5142:	ed8d ab06 	vstr	d10, [sp, #24]
   d5146:	ed8d 9b04 	vstr	d9, [sp, #16]
   d514a:	ed8d 8b02 	vstr	d8, [sp, #8]
   d514e:	e9cd ab00 	strd	sl, fp, [sp]
   d5152:	f7ff facd 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d5156:	e9d6 2300 	ldrd	r2, r3, [r6]
   d515a:	e9d4 0100 	ldrd	r0, r1, [r4]
   d515e:	f004 f80d 	bl	d917c <__adddf3>
   d5162:	a371      	add	r3, pc, #452	; (adr r3, d5328 <loop+0xb60>)
   d5164:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5168:	4606      	mov	r6, r0
   d516a:	460f      	mov	r7, r1
   d516c:	f004 fc2a 	bl	d99c4 <__aeabi_dcmplt>
   d5170:	b158      	cbz	r0, d518a <loop+0x9c2>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5172:	a36f      	add	r3, pc, #444	; (adr r3, d5330 <loop+0xb68>)
   d5174:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5178:	4630      	mov	r0, r6
   d517a:	4639      	mov	r1, r7
   d517c:	f004 fc40 	bl	d9a00 <__aeabi_dcmpgt>
   d5180:	b930      	cbnz	r0, d5190 <loop+0x9c8>
   d5182:	a76b      	add	r7, pc, #428	; (adr r7, d5330 <loop+0xb68>)
   d5184:	e9d7 6700 	ldrd	r6, r7, [r7]
   d5188:	e002      	b.n	d5190 <loop+0x9c8>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d518a:	a767      	add	r7, pc, #412	; (adr r7, d5328 <loop+0xb60>)
   d518c:	e9d7 6700 	ldrd	r6, r7, [r7]

        if ( rightPID.Compute() )
        {
            telemetrySend( "robot/rightPid", "{ \"timestamp\": %lu, \"millis\":%lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }", Time.now(), millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;

            rightPower=adjustSpeed( rightPower, rightOutput );
   d5190:	e9c4 6700 	strd	r6, r7, [r4]
            setPwm( rightMotor, rightPower);
   d5194:	4630      	mov	r0, r6
   d5196:	4639      	mov	r1, r7
   d5198:	f004 fc52 	bl	d9a40 <__aeabi_d2iz>
   d519c:	4b6f      	ldr	r3, [pc, #444]	; (d535c <loop+0xb94>)
   d519e:	4601      	mov	r1, r0
   d51a0:	6818      	ldr	r0, [r3, #0]
   d51a2:	f7ff f8bb 	bl	d431c <_Z6setPwmP16Adafruit_DCMotori>
            //Serial.printlnf( "[%s]%d right power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, time, power, newRightPosition-oldRightPosition, newRightPosition, rightInput);
            telemetrySend( "robot/rightPower", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"power\", \"name\":\"rightPower\", \"power\" : %f  }", Time.now(), millis(), rightPower ) ;
   d51a6:	f003 fa06 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d51aa:	4606      	mov	r6, r0
   d51ac:	f002 f806 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d51b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   d51b4:	496a      	ldr	r1, [pc, #424]	; (d5360 <loop+0xb98>)
   d51b6:	e9cd 2300 	strd	r2, r3, [sp]
   d51ba:	4603      	mov	r3, r0
   d51bc:	4632      	mov	r2, r6
   d51be:	4869      	ldr	r0, [pc, #420]	; (d5364 <loop+0xb9c>)
   d51c0:	f7ff fa96 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
            VERBOSE( Serial.printlnf( "[%s] %d - right pid input=%f, setpoint=%f, output=%f", __FUNCTION__, time, rightInput, rightSetpoint, rightOutput) );
            VERBOSE( Serial.printlnf( "[%s] %d - right power=%f", __FUNCTION__, time, rightPower) );

            oldRightPosition = newRightPosition;
            oldRightTime = time; 
   d51c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            //Serial.printlnf( "[%s]%d right power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, time, power, newRightPosition-oldRightPosition, newRightPosition, rightInput);
            telemetrySend( "robot/rightPower", "{ \"timestamp\": %lu, \"millis\": %lu, \"type\":\"power\", \"name\":\"rightPower\", \"power\" : %f  }", Time.now(), millis(), rightPower ) ;
            VERBOSE( Serial.printlnf( "[%s] %d - right pid input=%f, setpoint=%f, output=%f", __FUNCTION__, time, rightInput, rightSetpoint, rightOutput) );
            VERBOSE( Serial.printlnf( "[%s] %d - right power=%f", __FUNCTION__, time, rightPower) );

            oldRightPosition = newRightPosition;
   d51c6:	f8c9 8000 	str.w	r8, [r9]
            oldRightTime = time; 
   d51ca:	602b      	str	r3, [r5, #0]
   d51cc:	e0a5      	b.n	d531a <loop+0xb52>
      }
    
    #endif      
      break; 
    case AUTOTUNE:
      if ( oldLeftTime==0 )
   d51ce:	4b66      	ldr	r3, [pc, #408]	; (d5368 <loop+0xba0>)
   d51d0:	681c      	ldr	r4, [r3, #0]
   d51d2:	461f      	mov	r7, r3
   d51d4:	b924      	cbnz	r4, d51e0 <loop+0xa18>
      {
        // do nothing
        oldLeftPosition = newLeftPosition;
   d51d6:	4a65      	ldr	r2, [pc, #404]	; (d536c <loop+0xba4>)
   d51d8:	6016      	str	r6, [r2, #0]
        oldLeftTime = time;
   d51da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d51dc:	601a      	str	r2, [r3, #0]
   d51de:	e09c      	b.n	d531a <loop+0xb52>
      } 
      else if (time-oldLeftTime>0)
   d51e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d51e2:	1b1c      	subs	r4, r3, r4
   d51e4:	2c00      	cmp	r4, #0
   d51e6:	f340 8098 	ble.w	d531a <loop+0xb52>
      {  
        //Serial.printlnf( "[%s]%d", __FUNCTION__, time-oldLeftTime );
        leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(time-oldLeftTime)));
   d51ea:	f8df a180 	ldr.w	sl, [pc, #384]	; d536c <loop+0xba4>
   d51ee:	f8df b1a8 	ldr.w	fp, [pc, #424]	; d5398 <loop+0xbd0>
   d51f2:	f8da 0000 	ldr.w	r0, [sl]
   d51f6:	f64e 2360 	movw	r3, #60000	; 0xea60
   d51fa:	1a30      	subs	r0, r6, r0
   d51fc:	4358      	muls	r0, r3
   d51fe:	f004 f909 	bl	d9414 <__aeabi_i2d>
   d5202:	4680      	mov	r8, r0
   d5204:	4620      	mov	r0, r4
   d5206:	4689      	mov	r9, r1
   d5208:	f004 f904 	bl	d9414 <__aeabi_i2d>
   d520c:	2200      	movs	r2, #0
   d520e:	4b4a      	ldr	r3, [pc, #296]	; (d5338 <loop+0xb70>)
   d5210:	4c57      	ldr	r4, [pc, #348]	; (d5370 <loop+0xba8>)
   d5212:	f004 f965 	bl	d94e0 <__aeabi_dmul>
   d5216:	4602      	mov	r2, r0
   d5218:	460b      	mov	r3, r1
   d521a:	4640      	mov	r0, r8
   d521c:	4649      	mov	r1, r9
   d521e:	f004 fa89 	bl	d9734 <__aeabi_ddiv>
   d5222:	4b54      	ldr	r3, [pc, #336]	; (d5374 <loop+0xbac>)
   d5224:	e9c3 0100 	strd	r0, r1, [r3]
        //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );

        if ((aTune.Runtime())!=0)
   d5228:	4853      	ldr	r0, [pc, #332]	; (d5378 <loop+0xbb0>)
   d522a:	f000 fbed 	bl	d5a08 <_ZN9PID_ATune7RuntimeEv>
   d522e:	b360      	cbz	r0, d528a <loop+0xac2>
        {
          //we're done, set the tuning parameters
          tuning = false;
   d5230:	4a52      	ldr	r2, [pc, #328]	; (d537c <loop+0xbb4>)
   d5232:	2300      	movs	r3, #0
   d5234:	7013      	strb	r3, [r2, #0]
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE COMPLETE Kp=%f, Ki=%f, Kd=%f", __FUNCTION__, time, aTune.GetKp(), aTune.GetKi(), aTune.GetKd()) );
          mode=IDLE;
   d5236:	702b      	strb	r3, [r5, #0]
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d5238:	2200      	movs	r2, #0
   d523a:	2300      	movs	r3, #0
   d523c:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5240:	f003 ff9c 	bl	d917c <__adddf3>
   d5244:	a338      	add	r3, pc, #224	; (adr r3, d5328 <loop+0xb60>)
   d5246:	e9d3 2300 	ldrd	r2, r3, [r3]
   d524a:	4606      	mov	r6, r0
   d524c:	460f      	mov	r7, r1
   d524e:	f004 fbb9 	bl	d99c4 <__aeabi_dcmplt>
   d5252:	b158      	cbz	r0, d526c <loop+0xaa4>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5254:	a336      	add	r3, pc, #216	; (adr r3, d5330 <loop+0xb68>)
   d5256:	e9d3 2300 	ldrd	r2, r3, [r3]
   d525a:	4630      	mov	r0, r6
   d525c:	4639      	mov	r1, r7
   d525e:	f004 fbcf 	bl	d9a00 <__aeabi_dcmpgt>
   d5262:	b930      	cbnz	r0, d5272 <loop+0xaaa>
   d5264:	a732      	add	r7, pc, #200	; (adr r7, d5330 <loop+0xb68>)
   d5266:	e9d7 6700 	ldrd	r6, r7, [r7]
   d526a:	e002      	b.n	d5272 <loop+0xaaa>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d526c:	a72e      	add	r7, pc, #184	; (adr r7, d5328 <loop+0xb60>)
   d526e:	e9d7 6700 	ldrd	r6, r7, [r7]
          //we're done, set the tuning parameters
          tuning = false;
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE COMPLETE Kp=%f, Ki=%f, Kd=%f", __FUNCTION__, time, aTune.GetKp(), aTune.GetKi(), aTune.GetKd()) );
          mode=IDLE;
          leftPower=adjustSpeed( leftPower, 0 );
          setPwm( leftMotor, leftPower );          
   d5272:	4639      	mov	r1, r7
        {
          //we're done, set the tuning parameters
          tuning = false;
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE COMPLETE Kp=%f, Ki=%f, Kd=%f", __FUNCTION__, time, aTune.GetKp(), aTune.GetKi(), aTune.GetKd()) );
          mode=IDLE;
          leftPower=adjustSpeed( leftPower, 0 );
   d5274:	e9c4 6700 	strd	r6, r7, [r4]
          setPwm( leftMotor, leftPower );          
   d5278:	4630      	mov	r0, r6
   d527a:	f004 fbe1 	bl	d9a40 <__aeabi_d2iz>
   d527e:	4601      	mov	r1, r0
   d5280:	f8db 0000 	ldr.w	r0, [fp]
   d5284:	f7ff f84a 	bl	d431c <_Z6setPwmP16Adafruit_DCMotori>
   d5288:	e047      	b.n	d531a <loop+0xb52>
        }
        else
        {
          leftPower=adjustSpeed( leftPower, leftOutput );
   d528a:	4b3d      	ldr	r3, [pc, #244]	; (d5380 <loop+0xbb8>)
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d528c:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5290:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5294:	f003 ff72 	bl	d917c <__adddf3>
   d5298:	a323      	add	r3, pc, #140	; (adr r3, d5328 <loop+0xb60>)
   d529a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d529e:	4680      	mov	r8, r0
   d52a0:	4689      	mov	r9, r1
   d52a2:	f004 fb8f 	bl	d99c4 <__aeabi_dcmplt>
   d52a6:	b160      	cbz	r0, d52c2 <loop+0xafa>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d52a8:	a321      	add	r3, pc, #132	; (adr r3, d5330 <loop+0xb68>)
   d52aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52ae:	4640      	mov	r0, r8
   d52b0:	4649      	mov	r1, r9
   d52b2:	f004 fba5 	bl	d9a00 <__aeabi_dcmpgt>
   d52b6:	b940      	cbnz	r0, d52ca <loop+0xb02>
   d52b8:	f20f 0974 	addw	r9, pc, #116	; 0x74
   d52bc:	e9d9 8900 	ldrd	r8, r9, [r9]
   d52c0:	e003      	b.n	d52ca <loop+0xb02>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d52c2:	f20f 0964 	addw	r9, pc, #100	; 0x64
   d52c6:	e9d9 8900 	ldrd	r8, r9, [r9]
          setPwm( leftMotor, leftPower );          
        }
        else
        {
          leftPower=adjustSpeed( leftPower, leftOutput );
          setPwm( leftMotor, leftPower );
   d52ca:	4649      	mov	r1, r9
          leftPower=adjustSpeed( leftPower, 0 );
          setPwm( leftMotor, leftPower );          
        }
        else
        {
          leftPower=adjustSpeed( leftPower, leftOutput );
   d52cc:	e9c4 8900 	strd	r8, r9, [r4]
          setPwm( leftMotor, leftPower );
   d52d0:	4640      	mov	r0, r8
   d52d2:	f004 fbb5 	bl	d9a40 <__aeabi_d2iz>
   d52d6:	4601      	mov	r1, r0
   d52d8:	f8db 0000 	ldr.w	r0, [fp]
   d52dc:	f7ff f81e 	bl	d431c <_Z6setPwmP16Adafruit_DCMotori>
          //Serial.printlnf( "[%s]%d left power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, time, power, newLeftPosition-oldLeftPosition, newLeftPosition, leftInput );
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE RUNNING input=%f, setpoint=%f, output=%f", __FUNCTION__, time, leftInput, leftSetpoint, leftOutput) );
          telemetrySend( "robot/leftPower", "{ \"timestamp\": %lu, \"millis\": %lu,  \"type\":\"power\", \"name\":\"leftPower\", \"power\" : %f  }", Time.now(), millis(),leftPower ) ;
   d52e0:	f003 f969 	bl	d85b6 <_ZN9TimeClass3nowEv>
   d52e4:	4605      	mov	r5, r0
   d52e6:	f001 ff69 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d52ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   d52ee:	4925      	ldr	r1, [pc, #148]	; (d5384 <loop+0xbbc>)
   d52f0:	e9cd 2300 	strd	r2, r3, [sp]
   d52f4:	4603      	mov	r3, r0
   d52f6:	462a      	mov	r2, r5
   d52f8:	4823      	ldr	r0, [pc, #140]	; (d5388 <loop+0xbc0>)
   d52fa:	f7ff f9f9 	bl	d46f0 <_Z13telemetrySendPKcS0_z>
          VERBOSE( Serial.printlnf( "[%s] %d - left power=%f", __FUNCTION__, time, leftPower) );

          oldLeftPosition = newLeftPosition;
          oldLeftTime = time;
   d52fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
          //Serial.printlnf( "[%s]%d left power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, time, power, newLeftPosition-oldLeftPosition, newLeftPosition, leftInput );
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE RUNNING input=%f, setpoint=%f, output=%f", __FUNCTION__, time, leftInput, leftSetpoint, leftOutput) );
          telemetrySend( "robot/leftPower", "{ \"timestamp\": %lu, \"millis\": %lu,  \"type\":\"power\", \"name\":\"leftPower\", \"power\" : %f  }", Time.now(), millis(),leftPower ) ;
          VERBOSE( Serial.printlnf( "[%s] %d - left power=%f", __FUNCTION__, time, leftPower) );

          oldLeftPosition = newLeftPosition;
   d5300:	f8ca 6000 	str.w	r6, [sl]
          oldLeftTime = time;
   d5304:	603b      	str	r3, [r7, #0]
        }
      }
      break;
  }

}
   d5306:	e008      	b.n	d531a <loop+0xb52>
        prevLeftSetpoint=leftSetpoint;
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
    {
      TxOn=false;
   d5308:	2600      	movs	r6, #0
      speed=setTargetSpeed(0);
   d530a:	4630      	mov	r0, r6
        prevLeftSetpoint=leftSetpoint;
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
    {
      TxOn=false;
   d530c:	703e      	strb	r6, [r7, #0]
      speed=setTargetSpeed(0);
   d530e:	f7ff f81d 	bl	d434c <_Z14setTargetSpeedi>
   d5312:	4b1e      	ldr	r3, [pc, #120]	; (d538c <loop+0xbc4>)
      mode=IDLE;
   d5314:	702e      	strb	r6, [r5, #0]
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
    {
      TxOn=false;
      speed=setTargetSpeed(0);
   d5316:	6018      	str	r0, [r3, #0]
   d5318:	e40a      	b.n	d4b30 <loop+0x368>
        }
      }
      break;
  }

}
   d531a:	b025      	add	sp, #148	; 0x94
   d531c:	ecbd 8b0a 	vpop	{d8-d12}
   d5320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5324:	f3af 8000 	nop.w
   d5328:	00000000 	.word	0x00000000
   d532c:	406fe000 	.word	0x406fe000
   d5330:	00000000 	.word	0x00000000
   d5334:	c06fe000 	.word	0xc06fe000
   d5338:	4092c000 	.word	0x4092c000
   d533c:	2003ddf0 	.word	0x2003ddf0
   d5340:	2003de90 	.word	0x2003de90
   d5344:	2003de78 	.word	0x2003de78
   d5348:	000da7e7 	.word	0x000da7e7
   d534c:	000da7dd 	.word	0x000da7dd
   d5350:	2003de68 	.word	0x2003de68
   d5354:	000dac2a 	.word	0x000dac2a
   d5358:	000dacc6 	.word	0x000dacc6
   d535c:	2003dce8 	.word	0x2003dce8
   d5360:	000dacd5 	.word	0x000dacd5
   d5364:	000dad2d 	.word	0x000dad2d
   d5368:	2003dd98 	.word	0x2003dd98
   d536c:	2003dea4 	.word	0x2003dea4
   d5370:	2003dc88 	.word	0x2003dc88
   d5374:	2003dd00 	.word	0x2003dd00
   d5378:	2003dfb8 	.word	0x2003dfb8
   d537c:	2003dcec 	.word	0x2003dcec
   d5380:	2003de88 	.word	0x2003de88
   d5384:	000dad3e 	.word	0x000dad3e
   d5388:	000dac1a 	.word	0x000dac1a
   d538c:	2003df20 	.word	0x2003df20
   d5390:	2003dd84 	.word	0x2003dd84
   d5394:	2003de98 	.word	0x2003de98
   d5398:	2003dde4 	.word	0x2003dde4

000d539c <_ZN15Adafruit_BNO055D0Ev>:
   d539c:	b510      	push	{r4, lr}
   d539e:	2110      	movs	r1, #16
   d53a0:	4604      	mov	r4, r0
   d53a2:	f003 fcf5 	bl	d8d90 <_ZdlPvj>
   d53a6:	4620      	mov	r0, r4
   d53a8:	bd10      	pop	{r4, pc}
   d53aa:	0000      	movs	r0, r0
   d53ac:	0000      	movs	r0, r0
	...

000d53b0 <_GLOBAL__sub_I_leftPower>:
   d53b0:	b570      	push	{r4, r5, r6, lr}
   d53b2:	ed2d 8b06 	vpush	{d8-d10}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d53b6:	4b56      	ldr	r3, [pc, #344]	; (d5510 <_GLOBAL__sub_I_leftPower+0x160>)
const double kp=0.256, ki=0.10, kd=0.0;
double leftSetpoint, leftInput, leftOutput;
double rightSetpoint, rightInput, rightOutput;

//Specify the links and initial tuning parameters
PID leftPID(&leftInput, &leftOutput, &leftSetpoint, kp, ki, kd, PID::DIRECT);
   d53b8:	4e56      	ldr	r6, [pc, #344]	; (d5514 <_GLOBAL__sub_I_leftPower+0x164>)
   d53ba:	4d57      	ldr	r5, [pc, #348]	; (d5518 <_GLOBAL__sub_I_leftPower+0x168>)
        }
      }
      break;
  }

}
   d53bc:	b082      	sub	sp, #8
   d53be:	2400      	movs	r4, #0
const double kp=0.256, ki=0.10, kd=0.0;
double leftSetpoint, leftInput, leftOutput;
double rightSetpoint, rightInput, rightOutput;

//Specify the links and initial tuning parameters
PID leftPID(&leftInput, &leftOutput, &leftSetpoint, kp, ki, kd, PID::DIRECT);
   d53c0:	ed9f 8b49 	vldr	d8, [pc, #292]	; d54e8 <_GLOBAL__sub_I_leftPower+0x138>
   d53c4:	601c      	str	r4, [r3, #0]
   d53c6:	ed9f ab4a 	vldr	d10, [pc, #296]	; d54f0 <_GLOBAL__sub_I_leftPower+0x140>

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d53ca:	f001 ff27 	bl	d721c <HAL_Pin_Map>
   d53ce:	eeb0 2a48 	vmov.f32	s4, s16
   d53d2:	eef0 2a68 	vmov.f32	s5, s17
   d53d6:	eeb0 1a4a 	vmov.f32	s2, s20
   d53da:	eef0 1a6a 	vmov.f32	s3, s21
   d53de:	ed9f 9b46 	vldr	d9, [pc, #280]	; d54f8 <_GLOBAL__sub_I_leftPower+0x148>
   d53e2:	4b4e      	ldr	r3, [pc, #312]	; (d551c <_GLOBAL__sub_I_leftPower+0x16c>)
   d53e4:	eeb0 0a49 	vmov.f32	s0, s18
   d53e8:	eef0 0a69 	vmov.f32	s1, s19
   d53ec:	6018      	str	r0, [r3, #0]
   d53ee:	4632      	mov	r2, r6
   d53f0:	9400      	str	r4, [sp, #0]
   d53f2:	4629      	mov	r1, r5
   d53f4:	4b4a      	ldr	r3, [pc, #296]	; (d5520 <_GLOBAL__sub_I_leftPower+0x170>)
   d53f6:	484b      	ldr	r0, [pc, #300]	; (d5524 <_GLOBAL__sub_I_leftPower+0x174>)
   d53f8:	f000 fa72 	bl	d58e0 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
PID rightPID(&rightInput, &rightOutput, &rightSetpoint, kp, ki, kd, PID::DIRECT);
   d53fc:	eeb0 2a48 	vmov.f32	s4, s16
   d5400:	eef0 2a68 	vmov.f32	s5, s17
   d5404:	eeb0 1a4a 	vmov.f32	s2, s20
   d5408:	eef0 1a6a 	vmov.f32	s3, s21
   d540c:	eeb0 0a49 	vmov.f32	s0, s18
   d5410:	eef0 0a69 	vmov.f32	s1, s19
   d5414:	9400      	str	r4, [sp, #0]
   d5416:	4b44      	ldr	r3, [pc, #272]	; (d5528 <_GLOBAL__sub_I_leftPower+0x178>)
   d5418:	4a44      	ldr	r2, [pc, #272]	; (d552c <_GLOBAL__sub_I_leftPower+0x17c>)
   d541a:	4945      	ldr	r1, [pc, #276]	; (d5530 <_GLOBAL__sub_I_leftPower+0x180>)
   d541c:	4845      	ldr	r0, [pc, #276]	; (d5534 <_GLOBAL__sub_I_leftPower+0x184>)
   d541e:	f000 fa5f 	bl	d58e0 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
//double outputStart=5;
double aTuneStep=200, aTuneNoise=20, aTuneStartValue=0;
unsigned int aTuneLookBack=20;
boolean tuning = false;

PID_ATune aTune(&leftInput, &leftOutput);
   d5422:	4632      	mov	r2, r6
   d5424:	4629      	mov	r1, r5
   d5426:	4844      	ldr	r0, [pc, #272]	; (d5538 <_GLOBAL__sub_I_leftPower+0x188>)
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d5428:	4d44      	ldr	r5, [pc, #272]	; (d553c <_GLOBAL__sub_I_leftPower+0x18c>)
//double outputStart=5;
double aTuneStep=200, aTuneNoise=20, aTuneStartValue=0;
unsigned int aTuneLookBack=20;
boolean tuning = false;

PID_ATune aTune(&leftInput, &leftOutput);
   d542a:	f000 fc55 	bl	d5cd8 <_ZN9PID_ATuneC1EPdS0_>
#define BALANCE_THRESHOLD_MAX (14)

//  balancing PID
const double bkp=2.0, bki=0.5, bkd=0;
double balanceSetpoint, balanceInput, balanceOutput;
PID balancePID(&balanceInput, &balanceOutput, &balanceSetpoint, bkp, bki, bkd, PID::DIRECT);
   d542e:	eeb0 2a48 	vmov.f32	s4, s16
   d5432:	eef0 2a68 	vmov.f32	s5, s17
   d5436:	ed9f 1b32 	vldr	d1, [pc, #200]	; d5500 <_GLOBAL__sub_I_leftPower+0x150>
   d543a:	ed9f 0b33 	vldr	d0, [pc, #204]	; d5508 <_GLOBAL__sub_I_leftPower+0x158>
   d543e:	4b40      	ldr	r3, [pc, #256]	; (d5540 <_GLOBAL__sub_I_leftPower+0x190>)
   d5440:	9400      	str	r4, [sp, #0]
   d5442:	4a40      	ldr	r2, [pc, #256]	; (d5544 <_GLOBAL__sub_I_leftPower+0x194>)
   d5444:	4940      	ldr	r1, [pc, #256]	; (d5548 <_GLOBAL__sub_I_leftPower+0x198>)
   d5446:	4841      	ldr	r0, [pc, #260]	; (d554c <_GLOBAL__sub_I_leftPower+0x19c>)
long oldRightPosition  = 0;
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
   d5448:	4c41      	ldr	r4, [pc, #260]	; (d5550 <_GLOBAL__sub_I_leftPower+0x1a0>)
#define BALANCE_THRESHOLD_MAX (14)

//  balancing PID
const double bkp=2.0, bki=0.5, bkd=0;
double balanceSetpoint, balanceInput, balanceOutput;
PID balancePID(&balanceInput, &balanceOutput, &balanceSetpoint, bkp, bki, bkd, PID::DIRECT);
   d544a:	f000 fa49 	bl	d58e0 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>



// Change these two numbers to the pins connected to your encoder.
// Both pins must have interrupt capability
Encoder rightEnc(D6, D8);
   d544e:	2208      	movs	r2, #8
   d5450:	2106      	movs	r1, #6
   d5452:	4840      	ldr	r0, [pc, #256]	; (d5554 <_GLOBAL__sub_I_leftPower+0x1a4>)
   d5454:	f7fe ffba 	bl	d43cc <_ZN7EncoderC1Ett>
//Encoder rightEnc(D8, D6);
Encoder leftEnc(D5, D4);
   d5458:	2204      	movs	r2, #4
   d545a:	2105      	movs	r1, #5
   d545c:	483e      	ldr	r0, [pc, #248]	; (d5558 <_GLOBAL__sub_I_leftPower+0x1a8>)
   d545e:	f7fe ffb5 	bl	d43cc <_ZN7EncoderC1Ett>
long oldRightPosition  = 0;
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
   d5462:	2160      	movs	r1, #96	; 0x60
   d5464:	4620      	mov	r0, r4
   d5466:	f000 fccd 	bl	d5e04 <_ZN20Adafruit_MotorShieldC1Eh>
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d546a:	2103      	movs	r1, #3
   d546c:	4620      	mov	r0, r4
   d546e:	f000 fc8f 	bl	d5d90 <_ZN20Adafruit_MotorShield8getMotorEh>
   d5472:	4b3a      	ldr	r3, [pc, #232]	; (d555c <_GLOBAL__sub_I_leftPower+0x1ac>)
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d5474:	2104      	movs	r1, #4
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d5476:	6018      	str	r0, [r3, #0]
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d5478:	4620      	mov	r0, r4
   d547a:	f000 fc89 	bl	d5d90 <_ZN20Adafruit_MotorShield8getMotorEh>
   d547e:	4b38      	ldr	r3, [pc, #224]	; (d5560 <_GLOBAL__sub_I_leftPower+0x1b0>)
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d5480:	4c38      	ldr	r4, [pc, #224]	; (d5564 <_GLOBAL__sub_I_leftPower+0x1b4>)
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d5482:	6018      	str	r0, [r3, #0]
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d5484:	2228      	movs	r2, #40	; 0x28
   d5486:	2137      	movs	r1, #55	; 0x37
   d5488:	4628      	mov	r0, r5
   d548a:	f001 fac1 	bl	d6a10 <_ZN15Adafruit_BNO055C1Elh>
   d548e:	4622      	mov	r2, r4
   d5490:	4935      	ldr	r1, [pc, #212]	; (d5568 <_GLOBAL__sub_I_leftPower+0x1b8>)
   d5492:	4628      	mov	r0, r5
   d5494:	f003 fc6e 	bl	d8d74 <__aeabi_atexit>

unsigned long serialTime; //this will help us know when to talk with processing

I2CSlave device(Wire1, 0x10, 10);
   d5498:	f003 fbec 	bl	d8c74 <_Z20__fetch_global_Wire1v>
   d549c:	4d33      	ldr	r5, [pc, #204]	; (d556c <_GLOBAL__sub_I_leftPower+0x1bc>)
   d549e:	230a      	movs	r3, #10
   d54a0:	4601      	mov	r1, r0
   d54a2:	2210      	movs	r2, #16
   d54a4:	4628      	mov	r0, r5
   d54a6:	f001 fc4f 	bl	d6d48 <_ZN8I2CSlaveC1ER7TwoWirehj>
   d54aa:	4622      	mov	r2, r4
   d54ac:	4930      	ldr	r1, [pc, #192]	; (d5570 <_GLOBAL__sub_I_leftPower+0x1c0>)
   d54ae:	4628      	mov	r0, r5
   d54b0:	f003 fc60 	bl	d8d74 <__aeabi_atexit>
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, 60, MQTTcallback, 512);
   d54b4:	4d2f      	ldr	r5, [pc, #188]	; (d5574 <_GLOBAL__sub_I_leftPower+0x1c4>)
   d54b6:	4930      	ldr	r1, [pc, #192]	; (d5578 <_GLOBAL__sub_I_leftPower+0x1c8>)
   d54b8:	f44f 7300 	mov.w	r3, #512	; 0x200
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	4b2f      	ldr	r3, [pc, #188]	; (d557c <_GLOBAL__sub_I_leftPower+0x1cc>)
   d54c0:	9300      	str	r3, [sp, #0]
   d54c2:	f240 725b 	movw	r2, #1883	; 0x75b
   d54c6:	233c      	movs	r3, #60	; 0x3c
   d54c8:	4628      	mov	r0, r5
   d54ca:	f000 fea7 	bl	d621c <_ZN4MQTTC1EPhtiPFvPcS0_jEi>
   d54ce:	492c      	ldr	r1, [pc, #176]	; (d5580 <_GLOBAL__sub_I_leftPower+0x1d0>)
   d54d0:	4622      	mov	r2, r4
   d54d2:	4628      	mov	r0, r5
        }
      }
      break;
  }

}
   d54d4:	b002      	add	sp, #8
   d54d6:	ecbd 8b06 	vpop	{d8-d10}
   d54da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, 60, MQTTcallback, 512);
   d54de:	f003 bc49 	b.w	d8d74 <__aeabi_atexit>
   d54e2:	bf00      	nop
   d54e4:	f3af 8000 	nop.w
	...
   d54f0:	9999999a 	.word	0x9999999a
   d54f4:	3fb99999 	.word	0x3fb99999
   d54f8:	d2f1a9fc 	.word	0xd2f1a9fc
   d54fc:	3fd0624d 	.word	0x3fd0624d
   d5500:	00000000 	.word	0x00000000
   d5504:	3fe00000 	.word	0x3fe00000
   d5508:	00000000 	.word	0x00000000
   d550c:	40000000 	.word	0x40000000
   d5510:	2003dde8 	.word	0x2003dde8
   d5514:	2003de88 	.word	0x2003de88
   d5518:	2003dd00 	.word	0x2003dd00
   d551c:	2003de70 	.word	0x2003de70
   d5520:	2003dd90 	.word	0x2003dd90
   d5524:	2003df40 	.word	0x2003df40
   d5528:	2003de78 	.word	0x2003de78
   d552c:	2003de90 	.word	0x2003de90
   d5530:	2003de98 	.word	0x2003de98
   d5534:	2003ddf0 	.word	0x2003ddf0
   d5538:	2003dfb8 	.word	0x2003dfb8
   d553c:	2003dda8 	.word	0x2003dda8
   d5540:	2003dda0 	.word	0x2003dda0
   d5544:	2003dcf0 	.word	0x2003dcf0
   d5548:	2003ddc0 	.word	0x2003ddc0
   d554c:	2003dd08 	.word	0x2003dd08
   d5550:	2003dea8 	.word	0x2003dea8
   d5554:	2003ddc8 	.word	0x2003ddc8
   d5558:	2003df24 	.word	0x2003df24
   d555c:	2003dde4 	.word	0x2003dde4
   d5560:	2003dce8 	.word	0x2003dce8
   d5564:	2003dc68 	.word	0x2003dc68
   d5568:	000d40d9 	.word	0x000d40d9
   d556c:	2003dc6c 	.word	0x2003dc6c
   d5570:	000d6d15 	.word	0x000d6d15
   d5574:	2003dc90 	.word	0x2003dc90
   d5578:	2003db90 	.word	0x2003db90
   d557c:	000d40dd 	.word	0x000d40dd
   d5580:	000d69a1 	.word	0x000d69a1

000d5584 <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
   d5584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if(!inAuto) return false;
   d5588:	f890 5070 	ldrb.w	r5, [r0, #112]	; 0x70
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
   d558c:	b087      	sub	sp, #28
   d558e:	4604      	mov	r4, r0
   if(!inAuto) return false;
   d5590:	b90d      	cbnz	r5, d5596 <_ZN3PID7ComputeEv+0x12>
   d5592:	2500      	movs	r5, #0
   d5594:	e06f      	b.n	d5676 <_ZN3PID7ComputeEv+0xf2>
   d5596:	f001 fe11 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   unsigned long now = millis();
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   d559a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d559c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d559e:	9003      	str	r0, [sp, #12]
   d55a0:	1ac3      	subs	r3, r0, r3
   d55a2:	4293      	cmp	r3, r2
   d55a4:	d3f5      	bcc.n	d5592 <_ZN3PID7ComputeEv+0xe>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
   d55a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
      double error = *mySetpoint - input;
   d55a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   unsigned long now = millis();
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
   d55aa:	e9d3 8900 	ldrd	r8, r9, [r3]
      double error = *mySetpoint - input;
   d55ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   d55b2:	4642      	mov	r2, r8
   d55b4:	464b      	mov	r3, r9
   d55b6:	f003 fddf 	bl	d9178 <__aeabi_dsub>
      ITerm+= (ki * error);
   d55ba:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
      double error = *mySetpoint - input;
   d55be:	e9cd 0104 	strd	r0, r1, [sp, #16]
      ITerm+= (ki * error);
   d55c2:	f003 ff8d 	bl	d94e0 <__aeabi_dmul>
   d55c6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d55ca:	f003 fdd7 	bl	d917c <__adddf3>
      if(ITerm > outMax) ITerm= outMax;
   d55ce:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
   d55d2:	4606      	mov	r6, r0
   d55d4:	460f      	mov	r7, r1
   d55d6:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
      if(ITerm > outMax) ITerm= outMax;
   d55da:	4652      	mov	r2, sl
   d55dc:	465b      	mov	r3, fp
   d55de:	f004 fa0f 	bl	d9a00 <__aeabi_dcmpgt>
   d55e2:	b110      	cbz	r0, d55ea <_ZN3PID7ComputeEv+0x66>
   d55e4:	e9c4 ab12 	strd	sl, fp, [r4, #72]	; 0x48
   d55e8:	e00e      	b.n	d5608 <_ZN3PID7ComputeEv+0x84>
      else if(ITerm < outMin) ITerm= outMin;
   d55ea:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
   d55ee:	4630      	mov	r0, r6
   d55f0:	ec53 2b17 	vmov	r2, r3, d7
   d55f4:	4639      	mov	r1, r7
   d55f6:	ed8d 7b00 	vstr	d7, [sp]
   d55fa:	f004 f9e3 	bl	d99c4 <__aeabi_dcmplt>
   d55fe:	b118      	cbz	r0, d5608 <_ZN3PID7ComputeEv+0x84>
   d5600:	ed9d 7b00 	vldr	d7, [sp]
   d5604:	ed84 7b12 	vstr	d7, [r4, #72]	; 0x48
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
   d5608:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d560c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5610:	f003 ff66 	bl	d94e0 <__aeabi_dmul>
   d5614:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d5618:	f003 fdb0 	bl	d917c <__adddf3>
   d561c:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
   d5620:	4606      	mov	r6, r0
   d5622:	460f      	mov	r7, r1
   d5624:	4640      	mov	r0, r8
   d5626:	4649      	mov	r1, r9
   d5628:	f003 fda6 	bl	d9178 <__aeabi_dsub>
   d562c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   d5630:	f003 ff56 	bl	d94e0 <__aeabi_dmul>
   d5634:	4602      	mov	r2, r0
   d5636:	460b      	mov	r3, r1
   d5638:	4630      	mov	r0, r6
   d563a:	4639      	mov	r1, r7
   d563c:	f003 fd9c 	bl	d9178 <__aeabi_dsub>
   d5640:	4606      	mov	r6, r0
   d5642:	460f      	mov	r7, r1
      
	  if(output > outMax) output = outMax;
   d5644:	4602      	mov	r2, r0
   d5646:	460b      	mov	r3, r1
   d5648:	4650      	mov	r0, sl
   d564a:	4659      	mov	r1, fp
   d564c:	f004 f9ba 	bl	d99c4 <__aeabi_dcmplt>
   d5650:	b950      	cbnz	r0, d5668 <_ZN3PID7ComputeEv+0xe4>
      else if(output < outMin) output = outMin;
   d5652:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
   d5656:	4630      	mov	r0, r6
   d5658:	4652      	mov	r2, sl
   d565a:	465b      	mov	r3, fp
   d565c:	4639      	mov	r1, r7
   d565e:	f004 f9b1 	bl	d99c4 <__aeabi_dcmplt>
   d5662:	b908      	cbnz	r0, d5668 <_ZN3PID7ComputeEv+0xe4>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
   d5664:	46b2      	mov	sl, r6
   d5666:	46bb      	mov	fp, r7
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
   d5668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d566a:	e9c3 ab00 	strd	sl, fp, [r3]
	  
      /*Remember some variables for next time*/
      lastInput = input;
   d566e:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
      lastTime = now;
   d5672:	9b03      	ldr	r3, [sp, #12]
   d5674:	6423      	str	r3, [r4, #64]	; 0x40
	  return true;
   }
   else return false;
}
   d5676:	4628      	mov	r0, r5
   d5678:	b007      	add	sp, #28
   d567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5680 <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
   d5680:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5684:	ec55 4b10 	vmov	r4, r5, d0
   d5688:	4682      	mov	sl, r0
   if (Kp<0 || Ki<0 || Kd<0) return;
   d568a:	2200      	movs	r2, #0
   d568c:	2300      	movs	r3, #0
   d568e:	ee10 0a10 	vmov	r0, s0
   d5692:	4629      	mov	r1, r5
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
   d5694:	ec59 8b11 	vmov	r8, r9, d1
   d5698:	ec57 6b12 	vmov	r6, r7, d2
   if (Kp<0 || Ki<0 || Kd<0) return;
   d569c:	f004 f992 	bl	d99c4 <__aeabi_dcmplt>
   d56a0:	2800      	cmp	r0, #0
   d56a2:	d151      	bne.n	d5748 <_ZN3PID10SetTuningsEddd+0xc8>
   d56a4:	2200      	movs	r2, #0
   d56a6:	2300      	movs	r3, #0
   d56a8:	4640      	mov	r0, r8
   d56aa:	4649      	mov	r1, r9
   d56ac:	f004 f98a 	bl	d99c4 <__aeabi_dcmplt>
   d56b0:	2800      	cmp	r0, #0
   d56b2:	d149      	bne.n	d5748 <_ZN3PID10SetTuningsEddd+0xc8>
   d56b4:	2200      	movs	r2, #0
   d56b6:	2300      	movs	r3, #0
   d56b8:	4630      	mov	r0, r6
   d56ba:	4639      	mov	r1, r7
   d56bc:	f004 f982 	bl	d99c4 <__aeabi_dcmplt>
   d56c0:	2800      	cmp	r0, #0
   d56c2:	d141      	bne.n	d5748 <_ZN3PID10SetTuningsEddd+0xc8>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   d56c4:	e9ca 8902 	strd	r8, r9, [sl, #8]
   d56c8:	e9ca 6704 	strd	r6, r7, [sl, #16]
   d56cc:	e9ca 4500 	strd	r4, r5, [sl]
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d56d0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   d56d4:	f003 fe8e 	bl	d93f4 <__aeabi_ui2d>
   d56d8:	2200      	movs	r2, #0
   d56da:	4b1d      	ldr	r3, [pc, #116]	; (d5750 <_ZN3PID10SetTuningsEddd+0xd0>)
   d56dc:	f004 f82a 	bl	d9734 <__aeabi_ddiv>
   kp = Kp;
   d56e0:	e9ca 4506 	strd	r4, r5, [sl, #24]
{
   if (Kp<0 || Ki<0 || Kd<0) return;
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d56e4:	e9cd 0100 	strd	r0, r1, [sp]
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   d56e8:	4602      	mov	r2, r0
   d56ea:	460b      	mov	r3, r1
   d56ec:	4640      	mov	r0, r8
   d56ee:	4649      	mov	r1, r9
   d56f0:	f003 fef6 	bl	d94e0 <__aeabi_dmul>
   d56f4:	4680      	mov	r8, r0
   d56f6:	4689      	mov	r9, r1
   kd = Kd / SampleTimeInSec;
   d56f8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d56fc:	4630      	mov	r0, r6
   d56fe:	4639      	mov	r1, r7
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   d5700:	e9ca 8908 	strd	r8, r9, [sl, #32]
   kd = Kd / SampleTimeInSec;
   d5704:	f004 f816 	bl	d9734 <__aeabi_ddiv>
 
  if(controllerDirection ==REVERSE)
   d5708:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
   d570c:	4606      	mov	r6, r0
   d570e:	460f      	mov	r7, r1
 
  if(controllerDirection ==REVERSE)
   d5710:	2b01      	cmp	r3, #1
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
   d5712:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
 
  if(controllerDirection ==REVERSE)
   d5716:	d117      	bne.n	d5748 <_ZN3PID10SetTuningsEddd+0xc8>
   {
      kp = (0 - kp);
   d5718:	4622      	mov	r2, r4
   d571a:	462b      	mov	r3, r5
   d571c:	2000      	movs	r0, #0
   d571e:	2100      	movs	r1, #0
   d5720:	f003 fd2a 	bl	d9178 <__aeabi_dsub>
      ki = (0 - ki);
   d5724:	4642      	mov	r2, r8
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
 
  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
   d5726:	e9ca 0106 	strd	r0, r1, [sl, #24]
      ki = (0 - ki);
   d572a:	464b      	mov	r3, r9
   d572c:	2000      	movs	r0, #0
   d572e:	2100      	movs	r1, #0
   d5730:	f003 fd22 	bl	d9178 <__aeabi_dsub>
      kd = (0 - kd);
   d5734:	4632      	mov	r2, r6
   kd = Kd / SampleTimeInSec;
 
  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
      ki = (0 - ki);
   d5736:	e9ca 0108 	strd	r0, r1, [sl, #32]
      kd = (0 - kd);
   d573a:	463b      	mov	r3, r7
   d573c:	2000      	movs	r0, #0
   d573e:	2100      	movs	r1, #0
   d5740:	f003 fd1a 	bl	d9178 <__aeabi_dsub>
   d5744:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
   }
}
   d5748:	b002      	add	sp, #8
   d574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d574e:	bf00      	nop
   d5750:	408f4000 	.word	0x408f4000

000d5754 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   d5754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (NewSampleTime > 0)
   d5756:	1e0d      	subs	r5, r1, #0
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   d5758:	4604      	mov	r4, r0
   if (NewSampleTime > 0)
   d575a:	dd20      	ble.n	d579e <_ZN3PID13SetSampleTimeEi+0x4a>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
   d575c:	4628      	mov	r0, r5
   d575e:	f003 fe59 	bl	d9414 <__aeabi_i2d>
   d5762:	4606      	mov	r6, r0
   d5764:	6da0      	ldr	r0, [r4, #88]	; 0x58
   d5766:	460f      	mov	r7, r1
   d5768:	f003 fe44 	bl	d93f4 <__aeabi_ui2d>
   d576c:	4602      	mov	r2, r0
   d576e:	460b      	mov	r3, r1
   d5770:	4630      	mov	r0, r6
   d5772:	4639      	mov	r1, r7
   d5774:	f003 ffde 	bl	d9734 <__aeabi_ddiv>
      ki *= ratio;
   d5778:	4602      	mov	r2, r0
   d577a:	460b      	mov	r3, r1
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
   d577c:	4606      	mov	r6, r0
   d577e:	460f      	mov	r7, r1
      ki *= ratio;
   d5780:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   d5784:	f003 feac 	bl	d94e0 <__aeabi_dmul>
      kd /= ratio;
   d5788:	4632      	mov	r2, r6
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
      ki *= ratio;
   d578a:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd /= ratio;
   d578e:	463b      	mov	r3, r7
   d5790:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   d5794:	f003 ffce 	bl	d9734 <__aeabi_ddiv>
   d5798:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
      SampleTime = (unsigned long)NewSampleTime;
   d579c:	65a5      	str	r5, [r4, #88]	; 0x58
   d579e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57a0 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   d57a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57a4:	ec55 4b10 	vmov	r4, r5, d0
   d57a8:	ec57 6b11 	vmov	r6, r7, d1
   d57ac:	4682      	mov	sl, r0
   if(Min >= Max) return;
   d57ae:	ee11 2a10 	vmov	r2, s2
   d57b2:	463b      	mov	r3, r7
   d57b4:	ee10 0a10 	vmov	r0, s0
   d57b8:	4629      	mov	r1, r5
   d57ba:	f004 f917 	bl	d99ec <__aeabi_dcmpge>
   d57be:	2800      	cmp	r0, #0
   d57c0:	d133      	bne.n	d582a <_ZN3PID15SetOutputLimitsEdd+0x8a>
   outMin = Min;
   outMax = Max;
 
   if(inAuto)
   d57c2:	f89a 3070 	ldrb.w	r3, [sl, #112]	; 0x70
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   d57c6:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
   outMax = Max;
   d57ca:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
 
   if(inAuto)
   d57ce:	b363      	cbz	r3, d582a <_ZN3PID15SetOutputLimitsEdd+0x8a>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   d57d0:	f8da b038 	ldr.w	fp, [sl, #56]	; 0x38
   d57d4:	e9db 8900 	ldrd	r8, r9, [fp]
   d57d8:	4630      	mov	r0, r6
   d57da:	4642      	mov	r2, r8
   d57dc:	464b      	mov	r3, r9
   d57de:	4639      	mov	r1, r7
   d57e0:	f004 f8f0 	bl	d99c4 <__aeabi_dcmplt>
   d57e4:	b110      	cbz	r0, d57ec <_ZN3PID15SetOutputLimitsEdd+0x4c>
   d57e6:	e9cb 6700 	strd	r6, r7, [fp]
   d57ea:	e008      	b.n	d57fe <_ZN3PID15SetOutputLimitsEdd+0x5e>
	   else if(*myOutput < outMin) *myOutput = outMin;
   d57ec:	4642      	mov	r2, r8
   d57ee:	464b      	mov	r3, r9
   d57f0:	4620      	mov	r0, r4
   d57f2:	4629      	mov	r1, r5
   d57f4:	f004 f904 	bl	d9a00 <__aeabi_dcmpgt>
   d57f8:	b108      	cbz	r0, d57fe <_ZN3PID15SetOutputLimitsEdd+0x5e>
   d57fa:	e9cb 4500 	strd	r4, r5, [fp]
	 
	   if(ITerm > outMax) ITerm= outMax;
   d57fe:	e9da 6712 	ldrd	r6, r7, [sl, #72]	; 0x48
   d5802:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
   d5806:	4630      	mov	r0, r6
   d5808:	4622      	mov	r2, r4
   d580a:	462b      	mov	r3, r5
   d580c:	4639      	mov	r1, r7
   d580e:	f004 f8f7 	bl	d9a00 <__aeabi_dcmpgt>
   d5812:	b940      	cbnz	r0, d5826 <_ZN3PID15SetOutputLimitsEdd+0x86>
	   else if(ITerm < outMin) ITerm= outMin;
   d5814:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
   d5818:	4630      	mov	r0, r6
   d581a:	4622      	mov	r2, r4
   d581c:	462b      	mov	r3, r5
   d581e:	4639      	mov	r1, r7
   d5820:	f004 f8d0 	bl	d99c4 <__aeabi_dcmplt>
   d5824:	b108      	cbz	r0, d582a <_ZN3PID15SetOutputLimitsEdd+0x8a>
   d5826:	e9ca 4512 	strd	r4, r5, [sl, #72]	; 0x48
   d582a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d582e <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   d582e:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
   ITerm = *myOutput;
   d5832:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5834:	e9d3 6700 	ldrd	r6, r7, [r3]
   d5838:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
   lastInput = *myInput;
   d583c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   if(ITerm > outMax) ITerm = outMax;
   d583e:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   ITerm = *myOutput;
   lastInput = *myInput;
   d5842:	e9d3 2300 	ldrd	r2, r3, [r3]
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   d5846:	4604      	mov	r4, r0
   ITerm = *myOutput;
   lastInput = *myInput;
   d5848:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
   if(ITerm > outMax) ITerm = outMax;
   d584c:	4639      	mov	r1, r7
   d584e:	4642      	mov	r2, r8
   d5850:	464b      	mov	r3, r9
   d5852:	4630      	mov	r0, r6
   d5854:	f004 f8d4 	bl	d9a00 <__aeabi_dcmpgt>
   d5858:	b940      	cbnz	r0, d586c <_ZN3PID10InitializeEv+0x3e>
   else if(ITerm < outMin) ITerm = outMin;
   d585a:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
   d585e:	4630      	mov	r0, r6
   d5860:	4642      	mov	r2, r8
   d5862:	464b      	mov	r3, r9
   d5864:	4639      	mov	r1, r7
   d5866:	f004 f8ad 	bl	d99c4 <__aeabi_dcmplt>
   d586a:	b108      	cbz	r0, d5870 <_ZN3PID10InitializeEv+0x42>
   d586c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   d5870:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

000d5874 <_ZN3PID7SetModeENS_6mode_tE>:
 * Allows the controller Mode to be set to MANUAL (0) or AUTOMATIC (1)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(mode_t Mode)
{
   d5874:	b538      	push	{r3, r4, r5, lr}
    bool newAuto = (Mode == AUTOMATIC);
   d5876:	1e4b      	subs	r3, r1, #1
   d5878:	425d      	negs	r5, r3
   d587a:	415d      	adcs	r5, r3
    if(newAuto == !inAuto)
   d587c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   d5880:	f083 0301 	eor.w	r3, r3, #1
   d5884:	429d      	cmp	r5, r3
 * Allows the controller Mode to be set to MANUAL (0) or AUTOMATIC (1)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(mode_t Mode)
{
   d5886:	4604      	mov	r4, r0
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto == !inAuto)
   d5888:	d101      	bne.n	d588e <_ZN3PID7SetModeENS_6mode_tE+0x1a>
    {  /*we just went from manual to auto*/
        PID::Initialize();
   d588a:	f7ff ffd0 	bl	d582e <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
   d588e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
   d5892:	bd38      	pop	{r3, r4, r5, pc}

000d5894 <_ZN3PID22SetControllerDirectionENS_11direction_tE>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   d5894:	b538      	push	{r3, r4, r5, lr}
   if(inAuto && Direction !=controllerDirection)
   d5896:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   d589a:	4604      	mov	r4, r0
   d589c:	460d      	mov	r5, r1
   if(inAuto && Direction !=controllerDirection)
   d589e:	b1d3      	cbz	r3, d58d6 <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   d58a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d58a2:	4299      	cmp	r1, r3
   d58a4:	d017      	beq.n	d58d6 <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   {
	  kp = (0 - kp);
   d58a6:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   d58aa:	2100      	movs	r1, #0
   d58ac:	2000      	movs	r0, #0
   d58ae:	f003 fc63 	bl	d9178 <__aeabi_dsub>
      ki = (0 - ki);
   d58b2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   if(inAuto && Direction !=controllerDirection)
   {
	  kp = (0 - kp);
   d58b6:	e9c4 0106 	strd	r0, r1, [r4, #24]
      ki = (0 - ki);
   d58ba:	2000      	movs	r0, #0
   d58bc:	2100      	movs	r1, #0
   d58be:	f003 fc5b 	bl	d9178 <__aeabi_dsub>
      kd = (0 - kd);
   d58c2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
void PID::SetControllerDirection(direction_t Direction)
{
   if(inAuto && Direction !=controllerDirection)
   {
	  kp = (0 - kp);
      ki = (0 - ki);
   d58c6:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd = (0 - kd);
   d58ca:	2000      	movs	r0, #0
   d58cc:	2100      	movs	r1, #0
   d58ce:	f003 fc53 	bl	d9178 <__aeabi_dsub>
   d58d2:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
   }   
   controllerDirection = Direction;
   d58d6:	6325      	str	r5, [r4, #48]	; 0x30
   d58d8:	bd38      	pop	{r3, r4, r5, pc}
   d58da:	0000      	movs	r0, r0
   d58dc:	0000      	movs	r0, r0
	...

000d58e0 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d58e0:	b510      	push	{r4, lr}
   d58e2:	ed2d 8b06 	vpush	{d8-d10}
   d58e6:	eeb0 8a40 	vmov.f32	s16, s0
   d58ea:	eef0 8a60 	vmov.f32	s17, s1
   d58ee:	eeb0 9a41 	vmov.f32	s18, s2
   d58f2:	eef0 9a61 	vmov.f32	s19, s3
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
    myInput = Input;
    mySetpoint = Setpoint;
   d58f6:	63c3      	str	r3, [r0, #60]	; 0x3c
	inAuto = false;
   d58f8:	2300      	movs	r3, #0
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
   d58fa:	6382      	str	r2, [r0, #56]	; 0x38
    myInput = Input;
    mySetpoint = Setpoint;
	inAuto = false;
   d58fc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   d5900:	2200      	movs	r2, #0
   d5902:	2300      	movs	r3, #0
   d5904:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d5908:	eeb0 aa42 	vmov.f32	s20, s4
   d590c:	eef0 aa62 	vmov.f32	s21, s5
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   outMax = Max;
   d5910:	a313      	add	r3, pc, #76	; (adr r3, d5960 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE+0x80>)
   d5912:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5916:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d591a:	2364      	movs	r3, #100	; 0x64

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d591c:	4604      	mov	r4, r0
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d591e:	6583      	str	r3, [r0, #88]	; 0x58
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
    myInput = Input;
   d5920:	6341      	str	r1, [r0, #52]	; 0x34
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
   d5922:	f89d 1020 	ldrb.w	r1, [sp, #32]
   d5926:	f7ff ffb5 	bl	d5894 <_ZN3PID22SetControllerDirectionENS_11direction_tE>
    PID::SetTunings(Kp, Ki, Kd);
   d592a:	eeb0 2a4a 	vmov.f32	s4, s20
   d592e:	eef0 2a6a 	vmov.f32	s5, s21
   d5932:	eeb0 1a49 	vmov.f32	s2, s18
   d5936:	eef0 1a69 	vmov.f32	s3, s19
   d593a:	eeb0 0a48 	vmov.f32	s0, s16
   d593e:	eef0 0a68 	vmov.f32	s1, s17
   d5942:	4620      	mov	r0, r4
   d5944:	f7ff fe9c 	bl	d5680 <_ZN3PID10SetTuningsEddd>
   d5948:	f001 fc38 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>

    lastTime = millis()-SampleTime;				
}
   d594c:	ecbd 8b06 	vpop	{d8-d10}
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd);

    lastTime = millis()-SampleTime;				
   d5950:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d5952:	1ac0      	subs	r0, r0, r3
   d5954:	6420      	str	r0, [r4, #64]	; 0x40
}
   d5956:	4620      	mov	r0, r4
   d5958:	bd10      	pop	{r4, pc}
   d595a:	bf00      	nop
   d595c:	f3af 8000 	nop.w
   d5960:	00000000 	.word	0x00000000
   d5964:	406fe000 	.word	0x406fe000

000d5968 <_ZN3PID5GetKpEv>:
/* Status Funcions*************************************************************
 * Just because you set the Kp=-1 doesn't mean it actually happened.  these
 * functions query the internal state of the PID.  they're here for display 
 * purposes.  this are the functions the PID Front-end uses for example
 ******************************************************************************/
double PID::GetKp(){ return  dispKp; }
   d5968:	ed90 0b00 	vldr	d0, [r0]
   d596c:	4770      	bx	lr

000d596e <_ZN3PID5GetKiEv>:
double PID::GetKi(){ return  dispKi;}
   d596e:	ed90 0b02 	vldr	d0, [r0, #8]
   d5972:	4770      	bx	lr

000d5974 <_ZN3PID5GetKdEv>:
double PID::GetKd(){ return  dispKd;}
   d5974:	ed90 0b04 	vldr	d0, [r0, #16]
   d5978:	4770      	bx	lr

000d597a <_ZN3PID7GetModeEv>:
int PID::GetMode(){ return  inAuto ? AUTOMATIC : MANUAL;}
   d597a:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
   d597e:	4770      	bx	lr

000d5980 <_GLOBAL__sub_I__ZN3PIDC2EPdS0_S0_dddNS_11direction_tE>:
   d5980:	f001 bc4c 	b.w	d721c <HAL_Pin_Map>

000d5984 <_ZN9PID_ATune6CancelEv>:



void PID_ATune::Cancel()
{
	running = false;
   d5984:	2300      	movs	r3, #0
   d5986:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   d598a:	4770      	bx	lr
   d598c:	0000      	movs	r0, r0
	...

000d5990 <_ZN9PID_ATune8FinishUpEv>:
  }
   justchanged=false;
	return 0;
}
void PID_ATune::FinishUp()
{
   d5990:	b5d0      	push	{r4, r6, r7, lr}
   d5992:	4604      	mov	r4, r0
	  *output = outputStart;
   d5994:	6883      	ldr	r3, [r0, #8]
   d5996:	e9d0 01f6 	ldrd	r0, r1, [r0, #984]	; 0x3d8
   d599a:	e9c3 0100 	strd	r0, r1, [r3]
      //we can generate tuning parameters!
      Ku = 4*(2*oStep)/((absMax-absMin)*3.14159);
   d599e:	e9d4 23f4 	ldrd	r2, r3, [r4, #976]	; 0x3d0
   d59a2:	4610      	mov	r0, r2
   d59a4:	4619      	mov	r1, r3
   d59a6:	f003 fbe9 	bl	d917c <__adddf3>
   d59aa:	2200      	movs	r2, #0
   d59ac:	4b14      	ldr	r3, [pc, #80]	; (d5a00 <_ZN9PID_ATune8FinishUpEv+0x70>)
   d59ae:	f003 fd97 	bl	d94e0 <__aeabi_dmul>
   d59b2:	e9d4 23f2 	ldrd	r2, r3, [r4, #968]	; 0x3c8
   d59b6:	4606      	mov	r6, r0
   d59b8:	460f      	mov	r7, r1
   d59ba:	e9d4 01f0 	ldrd	r0, r1, [r4, #960]	; 0x3c0
   d59be:	f003 fbdb 	bl	d9178 <__aeabi_dsub>
   d59c2:	a30d      	add	r3, pc, #52	; (adr r3, d59f8 <_ZN9PID_ATune8FinishUpEv+0x68>)
   d59c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d59c8:	f003 fd8a 	bl	d94e0 <__aeabi_dmul>
   d59cc:	4602      	mov	r2, r0
   d59ce:	460b      	mov	r3, r1
   d59d0:	4630      	mov	r0, r6
   d59d2:	4639      	mov	r1, r7
   d59d4:	f003 feae 	bl	d9734 <__aeabi_ddiv>
      Pu = (double)(peak1-peak2) / 1000;
   d59d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
void PID_ATune::FinishUp()
{
	  *output = outputStart;
      //we can generate tuning parameters!
      Ku = 4*(2*oStep)/((absMax-absMin)*3.14159);
   d59da:	e9c4 01f8 	strd	r0, r1, [r4, #992]	; 0x3e0
      Pu = (double)(peak1-peak2) / 1000;
   d59de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d59e0:	1ac0      	subs	r0, r0, r3
   d59e2:	f003 fd07 	bl	d93f4 <__aeabi_ui2d>
   d59e6:	2200      	movs	r2, #0
   d59e8:	4b06      	ldr	r3, [pc, #24]	; (d5a04 <_ZN9PID_ATune8FinishUpEv+0x74>)
   d59ea:	f003 fea3 	bl	d9734 <__aeabi_ddiv>
   d59ee:	e9c4 01fa 	strd	r0, r1, [r4, #1000]	; 0x3e8
   d59f2:	bdd0      	pop	{r4, r6, r7, pc}
   d59f4:	f3af 8000 	nop.w
   d59f8:	f01b866e 	.word	0xf01b866e
   d59fc:	400921f9 	.word	0x400921f9
   d5a00:	40100000 	.word	0x40100000
   d5a04:	408f4000 	.word	0x408f4000

000d5a08 <_ZN9PID_ATune7RuntimeEv>:
{
	running = false;
} 
 
int PID_ATune::Runtime()
{
   d5a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	justevaled=false;
	if(peakCount>9 && running)
   d5a0c:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
	running = false;
} 
 
int PID_ATune::Runtime()
{
	justevaled=false;
   d5a10:	2300      	movs	r3, #0
	if(peakCount>9 && running)
   d5a12:	2a09      	cmp	r2, #9
{
	running = false;
} 
 
int PID_ATune::Runtime()
{
   d5a14:	4682      	mov	sl, r0
	justevaled=false;
   d5a16:	f880 33bd 	strb.w	r3, [r0, #957]	; 0x3bd
	if(peakCount>9 && running)
   d5a1a:	dd07      	ble.n	d5a2c <_ZN9PID_ATune7RuntimeEv+0x24>
   d5a1c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   d5a20:	b122      	cbz	r2, d5a2c <_ZN9PID_ATune7RuntimeEv+0x24>
	{
		running = false;
   d5a22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		FinishUp();
   d5a26:	f7ff ffb3 	bl	d5990 <_ZN9PID_ATune8FinishUpEv>
   d5a2a:	e12f      	b.n	d5c8c <_ZN9PID_ATune7RuntimeEv+0x284>
   d5a2c:	f001 fbc6 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
		return 1;
	}
	unsigned long now = millis();
	
	if((now-lastTime)<(unsigned long)sampleTime) return false;
   d5a30:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
   d5a34:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
   d5a38:	1ac3      	subs	r3, r0, r3
   d5a3a:	4293      	cmp	r3, r2
   d5a3c:	4683      	mov	fp, r0
   d5a3e:	d201      	bcs.n	d5a44 <_ZN9PID_ATune7RuntimeEv+0x3c>
   d5a40:	2000      	movs	r0, #0
   d5a42:	e128      	b.n	d5c96 <_ZN9PID_ATune7RuntimeEv+0x28e>
	lastTime = now;
	double refVal = *input;
   d5a44:	f8da 3004 	ldr.w	r3, [sl, #4]
		return 1;
	}
	unsigned long now = millis();
	
	if((now-lastTime)<(unsigned long)sampleTime) return false;
	lastTime = now;
   d5a48:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
	double refVal = *input;
   d5a4c:	e9d3 4500 	ldrd	r4, r5, [r3]
	justevaled=true;
	if(!running)
   d5a50:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
	unsigned long now = millis();
	
	if((now-lastTime)<(unsigned long)sampleTime) return false;
	lastTime = now;
	double refVal = *input;
	justevaled=true;
   d5a54:	2201      	movs	r2, #1
   d5a56:	f88a 23bd 	strb.w	r2, [sl, #957]	; 0x3bd
	if(!running)
   d5a5a:	b9d3      	cbnz	r3, d5a92 <_ZN9PID_ATune7RuntimeEv+0x8a>
	{ //initialize working variables the first time around
		peakType = 0;
		peakCount=0;
		justchanged=false;
		absMax=refVal;
   d5a5c:	e9ca 45f0 	strd	r4, r5, [sl, #960]	; 0x3c0
		absMin=refVal;
   d5a60:	e9ca 45f2 	strd	r4, r5, [sl, #968]	; 0x3c8
		setpoint = refVal;
   d5a64:	e9ca 4504 	strd	r4, r5, [sl, #16]
		running = true;
		outputStart = *output;
   d5a68:	f8da 6008 	ldr.w	r6, [sl, #8]
	lastTime = now;
	double refVal = *input;
	justevaled=true;
	if(!running)
	{ //initialize working variables the first time around
		peakType = 0;
   d5a6c:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
		peakCount=0;
   d5a70:	f8ca 33b8 	str.w	r3, [sl, #952]	; 0x3b8
		justchanged=false;
   d5a74:	f88a 33bc 	strb.w	r3, [sl, #956]	; 0x3bc
		absMax=refVal;
		absMin=refVal;
		setpoint = refVal;
		running = true;
   d5a78:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
		outputStart = *output;
   d5a7c:	e9d6 2300 	ldrd	r2, r3, [r6]
		*output = outputStart+oStep;
   d5a80:	e9da 01f4 	ldrd	r0, r1, [sl, #976]	; 0x3d0
		justchanged=false;
		absMax=refVal;
		absMin=refVal;
		setpoint = refVal;
		running = true;
		outputStart = *output;
   d5a84:	e9ca 23f6 	strd	r2, r3, [sl, #984]	; 0x3d8
		*output = outputStart+oStep;
   d5a88:	f003 fb78 	bl	d917c <__adddf3>
   d5a8c:	e9c6 0100 	strd	r0, r1, [r6]
   d5a90:	e011      	b.n	d5ab6 <_ZN9PID_ATune7RuntimeEv+0xae>
	}
	else
	{
		if(refVal>absMax)absMax=refVal;
   d5a92:	e9da 23f0 	ldrd	r2, r3, [sl, #960]	; 0x3c0
   d5a96:	4620      	mov	r0, r4
   d5a98:	4629      	mov	r1, r5
   d5a9a:	f003 ffb1 	bl	d9a00 <__aeabi_dcmpgt>
   d5a9e:	b108      	cbz	r0, d5aa4 <_ZN9PID_ATune7RuntimeEv+0x9c>
   d5aa0:	e9ca 45f0 	strd	r4, r5, [sl, #960]	; 0x3c0
		if(refVal<absMin)absMin=refVal;
   d5aa4:	e9da 23f2 	ldrd	r2, r3, [sl, #968]	; 0x3c8
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	4629      	mov	r1, r5
   d5aac:	f003 ff8a 	bl	d99c4 <__aeabi_dcmplt>
   d5ab0:	b108      	cbz	r0, d5ab6 <_ZN9PID_ATune7RuntimeEv+0xae>
   d5ab2:	e9ca 45f2 	strd	r4, r5, [sl, #968]	; 0x3c8
	}
	
	//oscillate the output base on the input's relation to the setpoint
	
	if(refVal>setpoint+noiseBand) *output = outputStart-oStep;
   d5ab6:	e9da 6704 	ldrd	r6, r7, [sl, #16]
   d5aba:	e9da 8906 	ldrd	r8, r9, [sl, #24]
   d5abe:	4630      	mov	r0, r6
   d5ac0:	4642      	mov	r2, r8
   d5ac2:	464b      	mov	r3, r9
   d5ac4:	4639      	mov	r1, r7
   d5ac6:	f003 fb59 	bl	d917c <__adddf3>
   d5aca:	4602      	mov	r2, r0
   d5acc:	460b      	mov	r3, r1
   d5ace:	4620      	mov	r0, r4
   d5ad0:	4629      	mov	r1, r5
   d5ad2:	f003 ff95 	bl	d9a00 <__aeabi_dcmpgt>
   d5ad6:	b140      	cbz	r0, d5aea <_ZN9PID_ATune7RuntimeEv+0xe2>
   d5ad8:	e9da 23f4 	ldrd	r2, r3, [sl, #976]	; 0x3d0
   d5adc:	e9da 01f6 	ldrd	r0, r1, [sl, #984]	; 0x3d8
   d5ae0:	f8da 6008 	ldr.w	r6, [sl, #8]
   d5ae4:	f003 fb48 	bl	d9178 <__aeabi_dsub>
   d5ae8:	e014      	b.n	d5b14 <_ZN9PID_ATune7RuntimeEv+0x10c>
	else if (refVal<setpoint-noiseBand) *output = outputStart+oStep;
   d5aea:	4642      	mov	r2, r8
   d5aec:	464b      	mov	r3, r9
   d5aee:	4630      	mov	r0, r6
   d5af0:	4639      	mov	r1, r7
   d5af2:	f003 fb41 	bl	d9178 <__aeabi_dsub>
   d5af6:	4602      	mov	r2, r0
   d5af8:	460b      	mov	r3, r1
   d5afa:	4620      	mov	r0, r4
   d5afc:	4629      	mov	r1, r5
   d5afe:	f003 ff61 	bl	d99c4 <__aeabi_dcmplt>
   d5b02:	b148      	cbz	r0, d5b18 <_ZN9PID_ATune7RuntimeEv+0x110>
   d5b04:	e9da 23f4 	ldrd	r2, r3, [sl, #976]	; 0x3d0
   d5b08:	e9da 01f6 	ldrd	r0, r1, [sl, #984]	; 0x3d8
   d5b0c:	f8da 6008 	ldr.w	r6, [sl, #8]
   d5b10:	f003 fb34 	bl	d917c <__adddf3>
   d5b14:	e9c6 0100 	strd	r0, r1, [r6]
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5b18:	f8da 7038 	ldr.w	r7, [sl, #56]	; 0x38
	if(refVal>setpoint+noiseBand) *output = outputStart-oStep;
	else if (refVal<setpoint-noiseBand) *output = outputStart+oStep;
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
   d5b1c:	2301      	movs	r3, #1
   d5b1e:	eb0a 06c7 	add.w	r6, sl, r7, lsl #3
   d5b22:	f88a 3000 	strb.w	r3, [sl]
   d5b26:	f88a 3001 	strb.w	r3, [sl, #1]
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5b2a:	f107 38ff 	add.w	r8, r7, #4294967295
   d5b2e:	3648      	adds	r6, #72	; 0x48
   d5b30:	f1b8 0f00 	cmp.w	r8, #0
   d5b34:	db28      	blt.n	d5b88 <_ZN9PID_ATune7RuntimeEv+0x180>
  {
    double val = lastInputs[i];
   d5b36:	ed16 7b04 	vldr	d7, [r6, #-16]
    if(isMax) isMax = refVal>val;
   d5b3a:	f89a 3000 	ldrb.w	r3, [sl]
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
  {
    double val = lastInputs[i];
   d5b3e:	ed8d 7b00 	vstr	d7, [sp]
    if(isMax) isMax = refVal>val;
   d5b42:	b15b      	cbz	r3, d5b5c <_ZN9PID_ATune7RuntimeEv+0x154>
   d5b44:	ec53 2b17 	vmov	r2, r3, d7
   d5b48:	4620      	mov	r0, r4
   d5b4a:	4629      	mov	r1, r5
   d5b4c:	f04f 0901 	mov.w	r9, #1
   d5b50:	f003 ff56 	bl	d9a00 <__aeabi_dcmpgt>
   d5b54:	b900      	cbnz	r0, d5b58 <_ZN9PID_ATune7RuntimeEv+0x150>
   d5b56:	4681      	mov	r9, r0
   d5b58:	f88a 9000 	strb.w	r9, [sl]
    if(isMin) isMin = refVal<val;
   d5b5c:	f89a 3001 	ldrb.w	r3, [sl, #1]
   d5b60:	b15b      	cbz	r3, d5b7a <_ZN9PID_ATune7RuntimeEv+0x172>
   d5b62:	e9dd 2300 	ldrd	r2, r3, [sp]
   d5b66:	4620      	mov	r0, r4
   d5b68:	4629      	mov	r1, r5
   d5b6a:	f04f 0901 	mov.w	r9, #1
   d5b6e:	f003 ff29 	bl	d99c4 <__aeabi_dcmplt>
   d5b72:	b900      	cbnz	r0, d5b76 <_ZN9PID_ATune7RuntimeEv+0x16e>
   d5b74:	4681      	mov	r9, r0
   d5b76:	f88a 9001 	strb.w	r9, [sl, #1]
    lastInputs[i+1] = lastInputs[i];
   d5b7a:	ed9d 7b00 	vldr	d7, [sp]
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5b7e:	f108 38ff 	add.w	r8, r8, #4294967295
  {
    double val = lastInputs[i];
    if(isMax) isMax = refVal>val;
    if(isMin) isMin = refVal<val;
    lastInputs[i+1] = lastInputs[i];
   d5b82:	ed26 7b02 	vstmdb	r6!, {d7}
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5b86:	e7d3      	b.n	d5b30 <_ZN9PID_ATune7RuntimeEv+0x128>
    if(isMax) isMax = refVal>val;
    if(isMin) isMin = refVal<val;
    lastInputs[i+1] = lastInputs[i];
  }
  lastInputs[0] = refVal;  
  if(nLookBack<9)
   d5b88:	2f08      	cmp	r7, #8
    double val = lastInputs[i];
    if(isMax) isMax = refVal>val;
    if(isMin) isMin = refVal<val;
    lastInputs[i+1] = lastInputs[i];
  }
  lastInputs[0] = refVal;  
   d5b8a:	e9ca 4510 	strd	r4, r5, [sl, #64]	; 0x40
  if(nLookBack<9)
   d5b8e:	f77f af57 	ble.w	d5a40 <_ZN9PID_ATune7RuntimeEv+0x38>
  {  //we don't want to trust the maxes or mins until the inputs array has been filled
	return 0;
	}
  
  if(isMax)
   d5b92:	f89a 3000 	ldrb.w	r3, [sl]
   d5b96:	b1bb      	cbz	r3, d5bc8 <_ZN9PID_ATune7RuntimeEv+0x1c0>
  {
    if(peakType==0)peakType=1;
   d5b98:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5b9c:	b913      	cbnz	r3, d5ba4 <_ZN9PID_ATune7RuntimeEv+0x19c>
   d5b9e:	2301      	movs	r3, #1
   d5ba0:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
    if(peakType==-1)
   d5ba4:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5ba8:	3301      	adds	r3, #1
   d5baa:	d108      	bne.n	d5bbe <_ZN9PID_ATune7RuntimeEv+0x1b6>
    {
      peakType = 1;
   d5bac:	2301      	movs	r3, #1
   d5bae:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
      justchanged=true;
   d5bb2:	f88a 33bc 	strb.w	r3, [sl, #956]	; 0x3bc
      peak2 = peak1;
   d5bb6:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   d5bba:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
    }
    peak1 = now;
   d5bbe:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
    peaks[peakCount] = refVal;
   d5bc2:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
   d5bc6:	e01c      	b.n	d5c02 <_ZN9PID_ATune7RuntimeEv+0x1fa>
   
  }
  else if(isMin)
   d5bc8:	f89a 3001 	ldrb.w	r3, [sl, #1]
   d5bcc:	b1eb      	cbz	r3, d5c0a <_ZN9PID_ATune7RuntimeEv+0x202>
  {
    if(peakType==0)peakType=-1;
   d5bce:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5bd2:	b91b      	cbnz	r3, d5bdc <_ZN9PID_ATune7RuntimeEv+0x1d4>
   d5bd4:	f04f 33ff 	mov.w	r3, #4294967295
   d5bd8:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
    if(peakType==1)
   d5bdc:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
   d5be0:	2a01      	cmp	r2, #1
   d5be2:	d10a      	bne.n	d5bfa <_ZN9PID_ATune7RuntimeEv+0x1f2>
    {
      peakType=-1;
   d5be4:	f04f 33ff 	mov.w	r3, #4294967295
   d5be8:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
      peakCount++;
   d5bec:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
      justchanged=true;
   d5bf0:	f88a 23bc 	strb.w	r2, [sl, #956]	; 0x3bc
  {
    if(peakType==0)peakType=-1;
    if(peakType==1)
    {
      peakType=-1;
      peakCount++;
   d5bf4:	3301      	adds	r3, #1
   d5bf6:	f8ca 33b8 	str.w	r3, [sl, #952]	; 0x3b8
      justchanged=true;
    }
    
    if(peakCount<10)peaks[peakCount] = refVal;
   d5bfa:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
   d5bfe:	2b09      	cmp	r3, #9
   d5c00:	dc03      	bgt.n	d5c0a <_ZN9PID_ATune7RuntimeEv+0x202>
   d5c02:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   d5c06:	e9c3 45da 	strd	r4, r5, [r3, #872]	; 0x368
  }
  
  if(justchanged && peakCount>2)
   d5c0a:	f89a 33bc 	ldrb.w	r3, [sl, #956]	; 0x3bc
   d5c0e:	2b00      	cmp	r3, #0
   d5c10:	d03e      	beq.n	d5c90 <_ZN9PID_ATune7RuntimeEv+0x288>
   d5c12:	f8da 43b8 	ldr.w	r4, [sl, #952]	; 0x3b8
   d5c16:	2c02      	cmp	r4, #2
   d5c18:	dd3a      	ble.n	d5c90 <_ZN9PID_ATune7RuntimeEv+0x288>
   d5c1a:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
  { //we've transitioned.  check if we can autotune based on the last peaks
    double avgSeparation = (abs(peaks[peakCount-1]-peaks[peakCount-2])+abs(peaks[peakCount-2]-peaks[peakCount-3]))/2;
   d5c1e:	e9d4 67d6 	ldrd	r6, r7, [r4, #856]	; 0x358
    if( avgSeparation < 0.05*(absMax-absMin))
   d5c22:	e9d4 01d8 	ldrd	r0, r1, [r4, #864]	; 0x360
   d5c26:	4632      	mov	r2, r6
   d5c28:	463b      	mov	r3, r7
   d5c2a:	f003 faa5 	bl	d9178 <__aeabi_dsub>
   d5c2e:	f003 ff07 	bl	d9a40 <__aeabi_d2iz>
   d5c32:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
   d5c36:	e9d4 23d4 	ldrd	r2, r3, [r4, #848]	; 0x350
   d5c3a:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
   d5c3e:	4639      	mov	r1, r7
   d5c40:	4630      	mov	r0, r6
   d5c42:	f003 fa99 	bl	d9178 <__aeabi_dsub>
   d5c46:	f003 fefb 	bl	d9a40 <__aeabi_d2iz>
   d5c4a:	2800      	cmp	r0, #0
   d5c4c:	bfb8      	it	lt
   d5c4e:	4240      	neglt	r0, r0
   d5c50:	4428      	add	r0, r5
   d5c52:	1040      	asrs	r0, r0, #1
   d5c54:	f003 fbde 	bl	d9414 <__aeabi_i2d>
   d5c58:	e9da 23f2 	ldrd	r2, r3, [sl, #968]	; 0x3c8
   d5c5c:	4604      	mov	r4, r0
   d5c5e:	460d      	mov	r5, r1
   d5c60:	e9da 01f0 	ldrd	r0, r1, [sl, #960]	; 0x3c0
   d5c64:	f003 fa88 	bl	d9178 <__aeabi_dsub>
   d5c68:	a30d      	add	r3, pc, #52	; (adr r3, d5ca0 <_ZN9PID_ATune7RuntimeEv+0x298>)
   d5c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c6e:	f003 fc37 	bl	d94e0 <__aeabi_dmul>
   d5c72:	4602      	mov	r2, r0
   d5c74:	460b      	mov	r3, r1
   d5c76:	4620      	mov	r0, r4
   d5c78:	4629      	mov	r1, r5
   d5c7a:	f003 fea3 	bl	d99c4 <__aeabi_dcmplt>
   d5c7e:	b138      	cbz	r0, d5c90 <_ZN9PID_ATune7RuntimeEv+0x288>
    {
		FinishUp();
   d5c80:	4650      	mov	r0, sl
   d5c82:	f7ff fe85 	bl	d5990 <_ZN9PID_ATune8FinishUpEv>
      running = false;
   d5c86:	2300      	movs	r3, #0
   d5c88:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
	  return 1;
   d5c8c:	2001      	movs	r0, #1
   d5c8e:	e002      	b.n	d5c96 <_ZN9PID_ATune7RuntimeEv+0x28e>
	 
    }
  }
   justchanged=false;
   d5c90:	2000      	movs	r0, #0
   d5c92:	f88a 03bc 	strb.w	r0, [sl, #956]	; 0x3bc
	return 0;
}
   d5c96:	b003      	add	sp, #12
   d5c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c9c:	f3af 8000 	nop.w
   d5ca0:	9999999a 	.word	0x9999999a
   d5ca4:	3fa99999 	.word	0x3fa99999

000d5ca8 <_ZN9PID_ATune13SetOutputStepEd>:
	return controlType==1? 0.075 * Ku * Pu : 0;  //Kd = Kc * Td
}

void PID_ATune::SetOutputStep(double Step)
{
	oStep = Step;
   d5ca8:	ed80 0bf4 	vstr	d0, [r0, #976]	; 0x3d0
   d5cac:	4770      	bx	lr

000d5cae <_ZN9PID_ATune12SetNoiseBandEd>:
	return controlType;
}
	
void PID_ATune::SetNoiseBand(double Band)
{
	noiseBand = Band;
   d5cae:	ed80 0b06 	vstr	d0, [r0, #24]
   d5cb2:	4770      	bx	lr

000d5cb4 <_ZN9PID_ATune14SetLookbackSecEi>:
	return noiseBand;
}

void PID_ATune::SetLookbackSec(int value)
{
    if (value<1) value = 1;
   d5cb4:	2900      	cmp	r1, #0
   d5cb6:	dd02      	ble.n	d5cbe <_ZN9PID_ATune14SetLookbackSecEi+0xa>
	
	if(value<25)
   d5cb8:	2918      	cmp	r1, #24
   d5cba:	dc06      	bgt.n	d5cca <_ZN9PID_ATune14SetLookbackSecEi+0x16>
   d5cbc:	e000      	b.n	d5cc0 <_ZN9PID_ATune14SetLookbackSecEi+0xc>
	return noiseBand;
}

void PID_ATune::SetLookbackSec(int value)
{
    if (value<1) value = 1;
   d5cbe:	2101      	movs	r1, #1
	
	if(value<25)
	{
		nLookBack = value * 4;
   d5cc0:	0089      	lsls	r1, r1, #2
		sampleTime = 250;
   d5cc2:	23fa      	movs	r3, #250	; 0xfa
{
    if (value<1) value = 1;
	
	if(value<25)
	{
		nLookBack = value * 4;
   d5cc4:	6381      	str	r1, [r0, #56]	; 0x38
		sampleTime = 250;
   d5cc6:	6343      	str	r3, [r0, #52]	; 0x34
   d5cc8:	4770      	bx	lr
	}
	else
	{
		nLookBack = 100;
   d5cca:	2364      	movs	r3, #100	; 0x64
   d5ccc:	6383      	str	r3, [r0, #56]	; 0x38
		sampleTime = value*10;
   d5cce:	230a      	movs	r3, #10
   d5cd0:	4359      	muls	r1, r3
   d5cd2:	6341      	str	r1, [r0, #52]	; 0x34
   d5cd4:	4770      	bx	lr
	...

000d5cd8 <_ZN9PID_ATuneC1EPdS0_>:

PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
	output = Output;
	controlType =0 ; //default to PI
   d5cd8:	2300      	movs	r3, #0
#include <PID-AutoTune/PID-AutoTune.h>
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
   d5cda:	b5d0      	push	{r4, r6, r7, lr}
{
	input = Input;
	output = Output;
	controlType =0 ; //default to PI
   d5cdc:	6203      	str	r3, [r0, #32]
	noiseBand = 0.5;
	running = false;
   d5cde:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
	output = Output;
	controlType =0 ; //default to PI
	noiseBand = 0.5;
   d5ce2:	4f09      	ldr	r7, [pc, #36]	; (d5d08 <_ZN9PID_ATuneC1EPdS0_+0x30>)
	running = false;
	oStep = 30;
   d5ce4:	4b09      	ldr	r3, [pc, #36]	; (d5d0c <_ZN9PID_ATuneC1EPdS0_+0x34>)
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
	output = Output;
   d5ce6:	6082      	str	r2, [r0, #8]
	controlType =0 ; //default to PI
	noiseBand = 0.5;
   d5ce8:	2600      	movs	r6, #0
	running = false;
	oStep = 30;
   d5cea:	2200      	movs	r2, #0
#include <PID-AutoTune/PID-AutoTune.h>
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
   d5cec:	6041      	str	r1, [r0, #4]
	output = Output;
	controlType =0 ; //default to PI
	noiseBand = 0.5;
   d5cee:	e9c0 6706 	strd	r6, r7, [r0, #24]
	running = false;
	oStep = 30;
   d5cf2:	e9c0 23f4 	strd	r2, r3, [r0, #976]	; 0x3d0
	SetLookbackSec(10);
   d5cf6:	210a      	movs	r1, #10
#include <PID-AutoTune/PID-AutoTune.h>
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
   d5cf8:	4604      	mov	r4, r0
	output = Output;
	controlType =0 ; //default to PI
	noiseBand = 0.5;
	running = false;
	oStep = 30;
	SetLookbackSec(10);
   d5cfa:	f7ff ffdb 	bl	d5cb4 <_ZN9PID_ATune14SetLookbackSecEi>
   d5cfe:	f001 fa5d 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
	lastTime = millis();
   d5d02:	6320      	str	r0, [r4, #48]	; 0x30
	
}
   d5d04:	4620      	mov	r0, r4
   d5d06:	bdd0      	pop	{r4, r6, r7, pc}
   d5d08:	3fe00000 	.word	0x3fe00000
   d5d0c:	403e0000 	.word	0x403e0000

000d5d10 <_GLOBAL__sub_I__ZN9PID_ATuneC2EPdS0_>:
   d5d10:	f001 ba84 	b.w	d721c <HAL_Pin_Map>

000d5d14 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>:
  } else
    _pwm.setPWM(pin, 0, value);
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
   d5d14:	2300      	movs	r3, #0
   d5d16:	461a      	mov	r2, r3
   d5d18:	306c      	adds	r0, #108	; 0x6c
   d5d1a:	f000 b8d0 	b.w	d5ebe <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d5d1e <_ZN20Adafruit_MotorShield5beginEt>:
Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
  _addr = addr;
  _pwm = Adafruit_PWMServoDriver(_addr);
}

void Adafruit_MotorShield::begin(uint16_t freq) {
   d5d1e:	b570      	push	{r4, r5, r6, lr}
   d5d20:	4606      	mov	r6, r0
   d5d22:	460c      	mov	r4, r1
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
   d5d24:	f106 056c 	add.w	r5, r6, #108	; 0x6c
  _pwm = Adafruit_PWMServoDriver(_addr);
}

void Adafruit_MotorShield::begin(uint16_t freq) {
  // init PWM w/_freq
  Wire.begin();
   d5d28:	f002 ff7e 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5d2c:	f002 f8ae 	bl	d7e8c <_ZN7TwoWire5beginEv>
  _pwm.begin();
   d5d30:	4628      	mov	r0, r5
   d5d32:	f000 f92d 	bl	d5f90 <_ZN23Adafruit_PWMServoDriver5beginEv>
  _freq = freq;
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d5d36:	ee07 4a90 	vmov	s15, r4

void Adafruit_MotorShield::begin(uint16_t freq) {
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
  _freq = freq;
   d5d3a:	8074      	strh	r4, [r6, #2]
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d5d3c:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d5d40:	4628      	mov	r0, r5
   d5d42:	f000 f931 	bl	d5fa8 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>
   d5d46:	2400      	movs	r4, #0
  for (uint8_t i=0; i<16; i++)
    _pwm.setPWM(i, 0, 0);
   d5d48:	2300      	movs	r3, #0
   d5d4a:	b2e1      	uxtb	r1, r4
   d5d4c:	461a      	mov	r2, r3
   d5d4e:	4628      	mov	r0, r5
   d5d50:	3401      	adds	r4, #1
   d5d52:	f000 f8b4 	bl	d5ebe <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
  _freq = freq;
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
  for (uint8_t i=0; i<16; i++)
   d5d56:	2c10      	cmp	r4, #16
   d5d58:	d1f6      	bne.n	d5d48 <_ZN20Adafruit_MotorShield5beginEt+0x2a>
    _pwm.setPWM(i, 0, 0);
}
   d5d5a:	bd70      	pop	{r4, r5, r6, pc}

000d5d5c <_ZN20Adafruit_MotorShield6setPWMEht>:

void Adafruit_MotorShield::setPWM(uint8_t pin, uint16_t value) {
  if (value > 4095) {
   d5d5c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
  for (uint8_t i=0; i<16; i++)
    _pwm.setPWM(i, 0, 0);
}

void Adafruit_MotorShield::setPWM(uint8_t pin, uint16_t value) {
   d5d60:	4613      	mov	r3, r2
   d5d62:	f100 006c 	add.w	r0, r0, #108	; 0x6c
  if (value > 4095) {
    _pwm.setPWM(pin, 4096, 0);
   d5d66:	bf26      	itte	cs
   d5d68:	2300      	movcs	r3, #0
   d5d6a:	f44f 5280 	movcs.w	r2, #4096	; 0x1000
  } else
    _pwm.setPWM(pin, 0, value);
   d5d6e:	2200      	movcc	r2, #0
   d5d70:	f000 b8a5 	b.w	d5ebe <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d5d74 <_ZN20Adafruit_MotorShield6setPinEhb>:
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
   d5d74:	b410      	push	{r4}
  if (value == LOW)
   d5d76:	b91a      	cbnz	r2, d5d80 <_ZN20Adafruit_MotorShield6setPinEhb+0xc>
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
}
   d5d78:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5d7c:	f7ff bfca 	b.w	d5d14 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
   d5d80:	2300      	movs	r3, #0
   d5d82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d5d86:	306c      	adds	r0, #108	; 0x6c
}
   d5d88:	f85d 4b04 	ldr.w	r4, [sp], #4
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
   d5d8c:	f000 b897 	b.w	d5ebe <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d5d90 <_ZN20Adafruit_MotorShield8getMotorEh>:
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
  if (num > 4) return NULL;
   d5d90:	2904      	cmp	r1, #4
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
   d5d92:	b530      	push	{r4, r5, lr}
  if (num > 4) return NULL;
   d5d94:	d82d      	bhi.n	d5df2 <_ZN20Adafruit_MotorShield8getMotorEh+0x62>

  num--;
   d5d96:	3901      	subs	r1, #1
   d5d98:	b2c9      	uxtb	r1, r1

  if (dcmotors[num].motornum == 0) {
   d5d9a:	230c      	movs	r3, #12
   d5d9c:	fb03 0201 	mla	r2, r3, r1, r0
   d5da0:	7b14      	ldrb	r4, [r2, #12]
   d5da2:	bb0c      	cbnz	r4, d5de8 <_ZN20Adafruit_MotorShield8getMotorEh+0x58>
    // not init'd yet!
    dcmotors[num].motornum = num;
   d5da4:	7311      	strb	r1, [r2, #12]
   d5da6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   d5daa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    dcmotors[num].MC = this;
   d5dae:	6090      	str	r0, [r2, #8]
    uint8_t pwm=8, in1=10, in2=9;
    if (num == 0) {
   d5db0:	b169      	cbz	r1, d5dce <_ZN20Adafruit_MotorShield8getMotorEh+0x3e>
      pwm = 8; in2 = 9; in1 = 10;
    } else if (num == 1) {
   d5db2:	2901      	cmp	r1, #1
   d5db4:	d00f      	beq.n	d5dd6 <_ZN20Adafruit_MotorShield8getMotorEh+0x46>
      pwm = 13; in2 = 12; in1 = 11;
    } else if (num == 2) {
   d5db6:	2902      	cmp	r1, #2
   d5db8:	d010      	beq.n	d5ddc <_ZN20Adafruit_MotorShield8getMotorEh+0x4c>
      pwm = 2; in2 = 3; in1 = 4;
    } else if (num == 3) {
   d5dba:	2903      	cmp	r1, #3
      pwm = 7; in2 = 6; in1 = 5;
   d5dbc:	bf15      	itete	ne
   d5dbe:	2309      	movne	r3, #9
   d5dc0:	2306      	moveq	r3, #6
   d5dc2:	240a      	movne	r4, #10
   d5dc4:	2405      	moveq	r4, #5
   d5dc6:	bf14      	ite	ne
   d5dc8:	2508      	movne	r5, #8
   d5dca:	2507      	moveq	r5, #7
   d5dcc:	e009      	b.n	d5de2 <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    // not init'd yet!
    dcmotors[num].motornum = num;
    dcmotors[num].MC = this;
    uint8_t pwm=8, in1=10, in2=9;
    if (num == 0) {
      pwm = 8; in2 = 9; in1 = 10;
   d5dce:	2309      	movs	r3, #9
   d5dd0:	240a      	movs	r4, #10
   d5dd2:	2508      	movs	r5, #8
   d5dd4:	e005      	b.n	d5de2 <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    } else if (num == 1) {
      pwm = 13; in2 = 12; in1 = 11;
   d5dd6:	240b      	movs	r4, #11
   d5dd8:	250d      	movs	r5, #13
   d5dda:	e002      	b.n	d5de2 <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    } else if (num == 2) {
      pwm = 2; in2 = 3; in1 = 4;
   d5ddc:	2303      	movs	r3, #3
   d5dde:	2404      	movs	r4, #4
   d5de0:	460d      	mov	r5, r1
    } else if (num == 3) {
      pwm = 7; in2 = 6; in1 = 5;
    }
    dcmotors[num].PWMpin = pwm;
   d5de2:	7115      	strb	r5, [r2, #4]
    dcmotors[num].IN1pin = in1;
   d5de4:	7154      	strb	r4, [r2, #5]
    dcmotors[num].IN2pin = in2;
   d5de6:	7193      	strb	r3, [r2, #6]
  }
  return &dcmotors[num];
   d5de8:	230c      	movs	r3, #12
   d5dea:	fb03 0001 	mla	r0, r3, r1, r0
   d5dee:	3004      	adds	r0, #4
   d5df0:	bd30      	pop	{r4, r5, pc}
  else
    _pwm.setPWM(pin, 4096, 0);
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
  if (num > 4) return NULL;
   d5df2:	2000      	movs	r0, #0
    dcmotors[num].PWMpin = pwm;
    dcmotors[num].IN1pin = in1;
    dcmotors[num].IN2pin = in2;
  }
  return &dcmotors[num];
}
   d5df4:	bd30      	pop	{r4, r5, pc}

000d5df6 <_ZN16Adafruit_DCMotorC1Ev>:
/******************************************
               MOTORS
******************************************/

Adafruit_DCMotor::Adafruit_DCMotor(void) {
  MC = NULL;
   d5df6:	2200      	movs	r2, #0
   d5df8:	6042      	str	r2, [r0, #4]
  motornum = 0;
   d5dfa:	7202      	strb	r2, [r0, #8]
  PWMpin = IN1pin = IN2pin = 0;
   d5dfc:	7082      	strb	r2, [r0, #2]
   d5dfe:	7042      	strb	r2, [r0, #1]
   d5e00:	7002      	strb	r2, [r0, #0]
}
   d5e02:	4770      	bx	lr

000d5e04 <_ZN20Adafruit_MotorShieldC1Eh>:
uint8_t microstepcurve[] = {0, 50, 98, 142, 180, 212, 236, 250, 255};
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d5e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e06:	1d03      	adds	r3, r0, #4
   d5e08:	460d      	mov	r5, r1
   d5e0a:	4604      	mov	r4, r0
   d5e0c:	f100 0134 	add.w	r1, r0, #52	; 0x34
   d5e10:	4618      	mov	r0, r3
   d5e12:	f7ff fff0 	bl	d5df6 <_ZN16Adafruit_DCMotorC1Ev>
   d5e16:	330c      	adds	r3, #12
   d5e18:	428b      	cmp	r3, r1
   d5e1a:	d1f9      	bne.n	d5e10 <_ZN20Adafruit_MotorShieldC1Eh+0xc>
/******************************************
               STEPPERS
******************************************/

Adafruit_StepperMotor::Adafruit_StepperMotor(void) {
  revsteps = steppernum = currentstep = 0;
   d5e1c:	2300      	movs	r3, #0
   d5e1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   d5e22:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   d5e26:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   d5e2a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   d5e2e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   d5e32:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
uint8_t microstepcurve[] = {0, 50, 98, 142, 180, 212, 236, 250, 255};
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d5e36:	2140      	movs	r1, #64	; 0x40
   d5e38:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d5e3c:	f000 f83d 	bl	d5eba <_ZN23Adafruit_PWMServoDriverC1Eh>
  _addr = addr;
   d5e40:	7025      	strb	r5, [r4, #0]
  _pwm = Adafruit_PWMServoDriver(_addr);
   d5e42:	4629      	mov	r1, r5
   d5e44:	a801      	add	r0, sp, #4
   d5e46:	f000 f838 	bl	d5eba <_ZN23Adafruit_PWMServoDriverC1Eh>
   d5e4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5e4e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   d5e52:	4620      	mov	r0, r4
   d5e54:	b003      	add	sp, #12
   d5e56:	bd30      	pop	{r4, r5, pc}

000d5e58 <_ZN16Adafruit_DCMotor3runEh>:
  motornum = 0;
  PWMpin = IN1pin = IN2pin = 0;
}

void Adafruit_DCMotor::run(uint8_t cmd) {
  switch (cmd) {
   d5e58:	2902      	cmp	r1, #2
  MC = NULL;
  motornum = 0;
  PWMpin = IN1pin = IN2pin = 0;
}

void Adafruit_DCMotor::run(uint8_t cmd) {
   d5e5a:	b538      	push	{r3, r4, r5, lr}
   d5e5c:	4604      	mov	r4, r0
   d5e5e:	460d      	mov	r5, r1
  switch (cmd) {
   d5e60:	d00a      	beq.n	d5e78 <_ZN16Adafruit_DCMotor3runEh+0x20>
   d5e62:	2904      	cmp	r1, #4
   d5e64:	d013      	beq.n	d5e8e <_ZN16Adafruit_DCMotor3runEh+0x36>
   d5e66:	2901      	cmp	r1, #1
   d5e68:	d11b      	bne.n	d5ea2 <_ZN16Adafruit_DCMotor3runEh+0x4a>
   d5e6a:	7881      	ldrb	r1, [r0, #2]
   d5e6c:	6840      	ldr	r0, [r0, #4]
   d5e6e:	f7ff ff51 	bl	d5d14 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
  case FORWARD:
    MC->setPin(IN2pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN1pin, HIGH);
   d5e72:	462a      	mov	r2, r5
   d5e74:	7861      	ldrb	r1, [r4, #1]
   d5e76:	e005      	b.n	d5e84 <_ZN16Adafruit_DCMotor3runEh+0x2c>
   d5e78:	7841      	ldrb	r1, [r0, #1]
   d5e7a:	6840      	ldr	r0, [r0, #4]
   d5e7c:	f7ff ff4a 	bl	d5d14 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
    break;
  case BACKWARD:
    MC->setPin(IN1pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN2pin, HIGH);
   d5e80:	78a1      	ldrb	r1, [r4, #2]
   d5e82:	2201      	movs	r2, #1
   d5e84:	6860      	ldr	r0, [r4, #4]
  case RELEASE:
    MC->setPin(IN1pin, LOW);
    MC->setPin(IN2pin, LOW);
    break;
  }
}
   d5e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MC->setPin(IN2pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN1pin, HIGH);
    break;
  case BACKWARD:
    MC->setPin(IN1pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN2pin, HIGH);
   d5e8a:	f7ff bf73 	b.w	d5d74 <_ZN20Adafruit_MotorShield6setPinEhb>
   d5e8e:	7841      	ldrb	r1, [r0, #1]
   d5e90:	6840      	ldr	r0, [r0, #4]
   d5e92:	f7ff ff3f 	bl	d5d14 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
   d5e96:	78a1      	ldrb	r1, [r4, #2]
   d5e98:	6860      	ldr	r0, [r4, #4]
  case RELEASE:
    MC->setPin(IN1pin, LOW);
    MC->setPin(IN2pin, LOW);
    break;
  }
}
   d5e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5e9e:	f7ff bf39 	b.w	d5d14 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
   d5ea2:	bd38      	pop	{r3, r4, r5, pc}

000d5ea4 <_ZN16Adafruit_DCMotor8setSpeedEh>:

void Adafruit_DCMotor::setSpeed(uint8_t speed) {
  MC->setPWM(PWMpin, speed*16);
   d5ea4:	010a      	lsls	r2, r1, #4
   d5ea6:	7801      	ldrb	r1, [r0, #0]
   d5ea8:	6840      	ldr	r0, [r0, #4]
   d5eaa:	f7ff bf57 	b.w	d5d5c <_ZN20Adafruit_MotorShield6setPWMEht>

000d5eae <_GLOBAL__sub_I_microstepcurve>:
   d5eae:	f001 b9b5 	b.w	d721c <HAL_Pin_Map>

000d5eb2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5eb2:	6803      	ldr	r3, [r0, #0]
   d5eb4:	b2c9      	uxtb	r1, r1
   d5eb6:	689b      	ldr	r3, [r3, #8]
   d5eb8:	4718      	bx	r3

000d5eba <_ZN23Adafruit_PWMServoDriverC1Eh>:
#include "Adafruit_PWMServoDriver.h"
#include "application.h"
#include "math.h"

Adafruit_PWMServoDriver::Adafruit_PWMServoDriver(uint8_t addr) {
  _i2caddr = addr;
   d5eba:	7001      	strb	r1, [r0, #0]
}
   d5ebc:	4770      	bx	lr

000d5ebe <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>:
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}

void Adafruit_PWMServoDriver::setPWM(uint8_t num, uint16_t on, uint16_t off) {
   d5ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ec0:	4607      	mov	r7, r0
   d5ec2:	4615      	mov	r5, r2
   d5ec4:	461c      	mov	r4, r3
   d5ec6:	460e      	mov	r6, r1
  //Serial.print("Setting PWM "); Serial.print(num); Serial.print(": "); Serial.print(on); Serial.print("->"); Serial.println(off);

  Wire.beginTransmission(_i2caddr);
   d5ec8:	f002 feae 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5ecc:	7839      	ldrb	r1, [r7, #0]
   d5ece:	f002 f81a 	bl	d7f06 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(LED0_ON_L+4*num);
   d5ed2:	f002 fea9 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5ed6:	2106      	movs	r1, #6
   d5ed8:	eb01 0186 	add.w	r1, r1, r6, lsl #2
   d5edc:	f7ff ffe9 	bl	d5eb2 <_ZN7TwoWire5writeEi>
  Wire.write(on);
   d5ee0:	f002 fea2 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5ee4:	4629      	mov	r1, r5
   d5ee6:	f7ff ffe4 	bl	d5eb2 <_ZN7TwoWire5writeEi>
  Wire.write(on>>8);
   d5eea:	f002 fe9d 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5eee:	0a29      	lsrs	r1, r5, #8
   d5ef0:	f7ff ffdf 	bl	d5eb2 <_ZN7TwoWire5writeEi>
  Wire.write(off);
   d5ef4:	f002 fe98 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5ef8:	4621      	mov	r1, r4
   d5efa:	f7ff ffda 	bl	d5eb2 <_ZN7TwoWire5writeEi>
  Wire.write(off>>8);
   d5efe:	f002 fe93 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f02:	0a21      	lsrs	r1, r4, #8
   d5f04:	f7ff ffd5 	bl	d5eb2 <_ZN7TwoWire5writeEi>

  Wire.endTransmission();
   d5f08:	f002 fe8e 	bl	d8c28 <_Z19__fetch_global_Wirev>
}
   d5f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(on);
  Wire.write(on>>8);
  Wire.write(off);
  Wire.write(off>>8);

  Wire.endTransmission();
   d5f10:	f002 b801 	b.w	d7f16 <_ZN7TwoWire15endTransmissionEv>

000d5f14 <_ZN23Adafruit_PWMServoDriver5read8Eh>:
}

uint8_t Adafruit_PWMServoDriver::read8(uint8_t addr) {
   d5f14:	b538      	push	{r3, r4, r5, lr}
   d5f16:	4604      	mov	r4, r0
   d5f18:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d5f1a:	f002 fe85 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f1e:	7821      	ldrb	r1, [r4, #0]
   d5f20:	f001 fff1 	bl	d7f06 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d5f24:	f002 fe80 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f28:	6803      	ldr	r3, [r0, #0]
   d5f2a:	4629      	mov	r1, r5
   d5f2c:	689b      	ldr	r3, [r3, #8]
   d5f2e:	4798      	blx	r3

  Wire.endTransmission();
   d5f30:	f002 fe7a 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f34:	f001 ffef 	bl	d7f16 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
   d5f38:	f002 fe76 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f3c:	2201      	movs	r2, #1
   d5f3e:	7821      	ldrb	r1, [r4, #0]
   d5f40:	f001 ffde 	bl	d7f00 <_ZN7TwoWire11requestFromEhj>

  return Wire.read();
   d5f44:	f002 fe70 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f48:	6803      	ldr	r3, [r0, #0]
   d5f4a:	695b      	ldr	r3, [r3, #20]
   d5f4c:	4798      	blx	r3
}
   d5f4e:	b2c0      	uxtb	r0, r0
   d5f50:	bd38      	pop	{r3, r4, r5, pc}

000d5f52 <_ZN23Adafruit_PWMServoDriver6write8Ehh>:

void Adafruit_PWMServoDriver::write8(uint8_t addr, uint8_t d) {
   d5f52:	b570      	push	{r4, r5, r6, lr}
   d5f54:	4606      	mov	r6, r0
   d5f56:	4614      	mov	r4, r2
   d5f58:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d5f5a:	f002 fe65 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f5e:	7831      	ldrb	r1, [r6, #0]
   d5f60:	f001 ffd1 	bl	d7f06 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d5f64:	f002 fe60 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f68:	6803      	ldr	r3, [r0, #0]
   d5f6a:	4629      	mov	r1, r5
   d5f6c:	689b      	ldr	r3, [r3, #8]
   d5f6e:	4798      	blx	r3
  Wire.write(d);
   d5f70:	f002 fe5a 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f74:	6803      	ldr	r3, [r0, #0]
   d5f76:	4621      	mov	r1, r4
   d5f78:	689b      	ldr	r3, [r3, #8]
   d5f7a:	4798      	blx	r3

  Wire.endTransmission();
   d5f7c:	f002 fe54 	bl	d8c28 <_Z19__fetch_global_Wirev>
}
   d5f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.beginTransmission(_i2caddr);

  Wire.write(addr);
  Wire.write(d);

  Wire.endTransmission();
   d5f84:	f001 bfc7 	b.w	d7f16 <_ZN7TwoWire15endTransmissionEv>

000d5f88 <_ZN23Adafruit_PWMServoDriver5resetEv>:
 reset();
}


void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
   d5f88:	2200      	movs	r2, #0
   d5f8a:	4611      	mov	r1, r2
   d5f8c:	f7ff bfe1 	b.w	d5f52 <_ZN23Adafruit_PWMServoDriver6write8Ehh>

000d5f90 <_ZN23Adafruit_PWMServoDriver5beginEv>:

Adafruit_PWMServoDriver::Adafruit_PWMServoDriver(uint8_t addr) {
  _i2caddr = addr;
}

void Adafruit_PWMServoDriver::begin(void) {
   d5f90:	b510      	push	{r4, lr}
   d5f92:	4604      	mov	r4, r0
 Wire.begin();
   d5f94:	f002 fe48 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d5f98:	f001 ff78 	bl	d7e8c <_ZN7TwoWire5beginEv>
 reset();
   d5f9c:	4620      	mov	r0, r4
}
   d5f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _i2caddr = addr;
}

void Adafruit_PWMServoDriver::begin(void) {
 Wire.begin();
 reset();
   d5fa2:	f7ff bff1 	b.w	d5f88 <_ZN23Adafruit_PWMServoDriver5resetEv>
	...

000d5fa8 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>:
  //Serial.print("Attempting to set freq ");
  //Serial.println(freq);

  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
   d5fa8:	eddf 7a2e 	vldr	s15, [pc, #184]	; d6064 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xbc>
   d5fac:	ee87 0a80 	vdiv.f32	s0, s15, s0

void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
}

void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d5fb0:	b570      	push	{r4, r5, r6, lr}
   d5fb2:	4604      	mov	r4, r0
   d5fb4:	ed2d 8b02 	vpush	{d8}
  //Serial.println(freq);

  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
   d5fb8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d5fbc:	ee30 8a48 	vsub.f32	s16, s0, s16
  Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
   d5fc0:	f002 f8bc 	bl	d813c <_Z16_fetch_usbserialv>
   d5fc4:	4928      	ldr	r1, [pc, #160]	; (d6068 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc0>)
   d5fc6:	f002 fb38 	bl	d863a <_ZN5Print5printEPKc>
   d5fca:	f002 f8b7 	bl	d813c <_Z16_fetch_usbserialv>
   d5fce:	eeb0 0a48 	vmov.f32	s0, s16
   d5fd2:	2102      	movs	r1, #2
   d5fd4:	f002 fc37 	bl	d8846 <_ZN5Print7printlnEfi>
  uint8_t prescale = floor(prescaleval + 0.5);
   d5fd8:	ee18 0a10 	vmov	r0, s16
   d5fdc:	f003 fa2c 	bl	d9438 <__aeabi_f2d>
   d5fe0:	4b22      	ldr	r3, [pc, #136]	; (d606c <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc4>)
   d5fe2:	2200      	movs	r2, #0
   d5fe4:	f003 f8ca 	bl	d917c <__adddf3>
   d5fe8:	ec41 0b10 	vmov	d0, r0, r1
   d5fec:	f003 f830 	bl	d9050 <floor>
   d5ff0:	ec51 0b10 	vmov	r0, r1, d0
   d5ff4:	f003 fd4c 	bl	d9a90 <__aeabi_d2uiz>
   d5ff8:	b2c6      	uxtb	r6, r0
  Serial.print("Final pre-scale: "); Serial.println(prescale);
   d5ffa:	f002 f89f 	bl	d813c <_Z16_fetch_usbserialv>
   d5ffe:	491c      	ldr	r1, [pc, #112]	; (d6070 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc8>)
   d6000:	f002 fb1b 	bl	d863a <_ZN5Print5printEPKc>
   d6004:	f002 f89a 	bl	d813c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6008:	220a      	movs	r2, #10
   d600a:	4631      	mov	r1, r6
   d600c:	4605      	mov	r5, r0
   d600e:	f002 fb31 	bl	d8674 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d6012:	4628      	mov	r0, r5
   d6014:	f002 fb18 	bl	d8648 <_ZN5Print7printlnEv>

  uint8_t oldmode = read8(PCA9685_MODE1);
   d6018:	2100      	movs	r1, #0
   d601a:	4620      	mov	r0, r4
   d601c:	f7ff ff7a 	bl	d5f14 <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
   d6020:	f000 026f 	and.w	r2, r0, #111	; 0x6f
  prescaleval -= 1;
  Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  uint8_t prescale = floor(prescaleval + 0.5);
  Serial.print("Final pre-scale: "); Serial.println(prescale);

  uint8_t oldmode = read8(PCA9685_MODE1);
   d6024:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
   d6026:	f042 0210 	orr.w	r2, r2, #16
   d602a:	4620      	mov	r0, r4
   d602c:	2100      	movs	r1, #0
   d602e:	f7ff ff90 	bl	d5f52 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
   d6032:	4632      	mov	r2, r6
   d6034:	4620      	mov	r0, r4
   d6036:	21fe      	movs	r1, #254	; 0xfe
   d6038:	f7ff ff8b 	bl	d5f52 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_MODE1, oldmode);
   d603c:	462a      	mov	r2, r5
   d603e:	2100      	movs	r1, #0
   d6040:	4620      	mov	r0, r4
   d6042:	f7ff ff86 	bl	d5f52 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  delay(5);
   d6046:	2005      	movs	r0, #5
   d6048:	f002 face 	bl	d85e8 <delay>
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}
   d604c:	ecbd 8b02 	vpop	{d8}
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
  write8(PCA9685_MODE1, oldmode);
  delay(5);
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d6050:	f065 025e 	orn	r2, r5, #94	; 0x5e
   d6054:	4620      	mov	r0, r4
   d6056:	b2d2      	uxtb	r2, r2
   d6058:	2100      	movs	r1, #0
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}
   d605a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
  write8(PCA9685_MODE1, oldmode);
  delay(5);
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d605e:	f7ff bf78 	b.w	d5f52 <_ZN23Adafruit_PWMServoDriver6write8Ehh>
   d6062:	bf00      	nop
   d6064:	45bebc20 	.word	0x45bebc20
   d6068:	000dad96 	.word	0x000dad96
   d606c:	3fe00000 	.word	0x3fe00000
   d6070:	000dadac 	.word	0x000dadac

000d6074 <_GLOBAL__sub_I__ZN23Adafruit_PWMServoDriverC2Eh>:
   d6074:	f001 b8d2 	b.w	d721c <HAL_Pin_Map>

000d6078 <_ZN10FlySkyIBus5beginER6Stream>:
}

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
  this->state = DISCARD;
   d6078:	2304      	movs	r3, #4
  serial.begin(115200);
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
   d607a:	b510      	push	{r4, lr}
  this->stream = &stream;
  this->state = DISCARD;
   d607c:	7003      	strb	r3, [r0, #0]
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
   d607e:	6041      	str	r1, [r0, #4]
  serial.begin(115200);
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
   d6080:	4604      	mov	r4, r0
   d6082:	f001 f89b 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  this->stream = &stream;
  this->state = DISCARD;
  this->last = millis();
  this->ptr = 0;
   d6086:	2300      	movs	r3, #0

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
  this->state = DISCARD;
  this->last = millis();
   d6088:	60a0      	str	r0, [r4, #8]
  this->ptr = 0;
   d608a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  this->len = 0;
   d608e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  this->chksum = 0;
   d6092:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  this->lchksum = 0;
   d6096:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   d609a:	bd10      	pop	{r4, pc}

000d609c <_ZN10FlySkyIBus5beginER11USARTSerial>:
FlySkyIBus IBus;

//#define serial Serial

void FlySkyIBus::begin(USARTSerial& serial)
{
   d609c:	b538      	push	{r3, r4, r5, lr}
   d609e:	460c      	mov	r4, r1
   d60a0:	4605      	mov	r5, r0
  serial.begin(115200);
   d60a2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d60a6:	4620      	mov	r0, r4
   d60a8:	f001 ffa0 	bl	d7fec <_ZN11USARTSerial5beginEm>
  begin((Stream&)serial);
   d60ac:	4621      	mov	r1, r4
   d60ae:	4628      	mov	r0, r5
}
   d60b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
//#define serial Serial

void FlySkyIBus::begin(USARTSerial& serial)
{
  serial.begin(115200);
  begin((Stream&)serial);
   d60b4:	f7ff bfe0 	b.w	d6078 <_ZN10FlySkyIBus5beginER6Stream>

000d60b8 <_ZN10FlySkyIBus4loopEv>:
  this->chksum = 0;
  this->lchksum = 0;
}

void FlySkyIBus::loop(void)
{
   d60b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60ba:	4604      	mov	r4, r0
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
    {
      state = GET_LENGTH;
   d60bc:	2600      	movs	r6, #0

            default:
              break;
          }
        }
        state = DISCARD;
   d60be:	2504      	movs	r5, #4
  this->lchksum = 0;
}

void FlySkyIBus::loop(void)
{
  while (stream->available() > 0)
   d60c0:	6860      	ldr	r0, [r4, #4]
   d60c2:	6803      	ldr	r3, [r0, #0]
   d60c4:	691b      	ldr	r3, [r3, #16]
   d60c6:	4798      	blx	r3
   d60c8:	2800      	cmp	r0, #0
   d60ca:	dd56      	ble.n	d617a <_ZN10FlySkyIBus4loopEv+0xc2>
   d60cc:	f001 f876 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
   d60d0:	68a3      	ldr	r3, [r4, #8]
    {
      state = GET_LENGTH;
    }
    last = now;
   d60d2:	60a0      	str	r0, [r4, #8]
void FlySkyIBus::loop(void)
{
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
   d60d4:	1ac3      	subs	r3, r0, r3
   d60d6:	2b02      	cmp	r3, #2
    {
      state = GET_LENGTH;
    }
    last = now;

    uint8_t v = stream->read();
   d60d8:	6860      	ldr	r0, [r4, #4]
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
    {
      state = GET_LENGTH;
   d60da:	bf88      	it	hi
   d60dc:	7026      	strbhi	r6, [r4, #0]
    }
    last = now;

    uint8_t v = stream->read();
   d60de:	6803      	ldr	r3, [r0, #0]
   d60e0:	695b      	ldr	r3, [r3, #20]
   d60e2:	4798      	blx	r3
    switch (state)
   d60e4:	7822      	ldrb	r2, [r4, #0]
    {
      state = GET_LENGTH;
    }
    last = now;

    uint8_t v = stream->read();
   d60e6:	b2c3      	uxtb	r3, r0
    switch (state)
   d60e8:	2a03      	cmp	r2, #3
   d60ea:	d8e9      	bhi.n	d60c0 <_ZN10FlySkyIBus4loopEv+0x8>
   d60ec:	e8df f002 	tbb	[pc, r2]
   d60f0:	26210e02 	.word	0x26210e02
    {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH)
   d60f4:	2b20      	cmp	r3, #32
   d60f6:	d83e      	bhi.n	d6176 <_ZN10FlySkyIBus4loopEv+0xbe>
        {
          ptr = 0;
          len = v - PROTOCOL_OVERHEAD;
   d60f8:	1eda      	subs	r2, r3, #3
          chksum = 0xFFFF - v;
   d60fa:	43db      	mvns	r3, r3
   d60fc:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    switch (state)
    {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH)
        {
          ptr = 0;
   d6100:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
          len = v - PROTOCOL_OVERHEAD;
   d6104:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
          chksum = 0xFFFF - v;
          state = GET_DATA;
   d6108:	2301      	movs	r3, #1
   d610a:	e015      	b.n	d6138 <_ZN10FlySkyIBus4loopEv+0x80>
          state = DISCARD;
        }
        break;

      case GET_DATA:
        buffer[ptr++] = v;
   d610c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d6110:	1c4a      	adds	r2, r1, #1
   d6112:	4421      	add	r1, r4
   d6114:	b2d2      	uxtb	r2, r2
   d6116:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
   d611a:	730b      	strb	r3, [r1, #12]
        chksum -= v;
   d611c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   d6120:	1acb      	subs	r3, r1, r3
   d6122:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        if (ptr == len)
   d6126:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   d612a:	4293      	cmp	r3, r2
   d612c:	d1c8      	bne.n	d60c0 <_ZN10FlySkyIBus4loopEv+0x8>
        {
          state = GET_CHKSUML;
   d612e:	2302      	movs	r3, #2
   d6130:	e002      	b.n	d6138 <_ZN10FlySkyIBus4loopEv+0x80>
        }
        break;

      case GET_CHKSUML:
        lchksum = v;
   d6132:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        state = GET_CHKSUMH;
   d6136:	2303      	movs	r3, #3
   d6138:	7023      	strb	r3, [r4, #0]
        break;
   d613a:	e7c1      	b.n	d60c0 <_ZN10FlySkyIBus4loopEv+0x8>

      case GET_CHKSUMH:
        // Validate checksum
        if (chksum == (v << 8) + lchksum)
   d613c:	0200      	lsls	r0, r0, #8
   d613e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d6142:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
   d6146:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   d614a:	4418      	add	r0, r3
   d614c:	4282      	cmp	r2, r0
   d614e:	d112      	bne.n	d6176 <_ZN10FlySkyIBus4loopEv+0xbe>
        {
          // Execute command - we only know command 0x40
          switch (buffer[0])
   d6150:	7b23      	ldrb	r3, [r4, #12]
   d6152:	2b40      	cmp	r3, #64	; 0x40
   d6154:	d10f      	bne.n	d6176 <_ZN10FlySkyIBus4loopEv+0xbe>
   d6156:	4622      	mov	r2, r4
   d6158:	2301      	movs	r3, #1
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d615a:	7b97      	ldrb	r7, [r2, #14]
   d615c:	7b50      	ldrb	r0, [r2, #13]
   d615e:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6162:	3302      	adds	r3, #2
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d6164:	4421      	add	r1, r4
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6166:	b2db      	uxtb	r3, r3
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d6168:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d616c:	2b15      	cmp	r3, #21
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d616e:	85c8      	strh	r0, [r1, #46]	; 0x2e
   d6170:	f102 0202 	add.w	r2, r2, #2
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6174:	d1f1      	bne.n	d615a <_ZN10FlySkyIBus4loopEv+0xa2>

            default:
              break;
          }
        }
        state = DISCARD;
   d6176:	7025      	strb	r5, [r4, #0]
        break;
   d6178:	e7a2      	b.n	d60c0 <_ZN10FlySkyIBus4loopEv+0x8>
   d617a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d617c <_ZN10FlySkyIBus11readChannelEh>:
  }
}

uint16_t FlySkyIBus::readChannel(uint8_t channelNr)
{
  if (channelNr < PROTOCOL_CHANNELS)
   d617c:	2909      	cmp	r1, #9
  {
    return channel[channelNr];
   d617e:	bf9a      	itte	ls
   d6180:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
   d6184:	8dc0      	ldrhls	r0, [r0, #46]	; 0x2e
  }
  else
  {
    return 0;
   d6186:	2000      	movhi	r0, #0
  }
}
   d6188:	4770      	bx	lr

000d618a <_GLOBAL__sub_I_IBus>:
   d618a:	f001 b847 	b.w	d721c <HAL_Pin_Map>
	...

000d6190 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6190:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6192:	6984      	ldr	r4, [r0, #24]
   d6194:	4b0a      	ldr	r3, [pc, #40]	; (d61c0 <_ZN9TCPClientD1Ev+0x30>)
   d6196:	6003      	str	r3, [r0, #0]
   d6198:	4605      	mov	r5, r0
   d619a:	b17c      	cbz	r4, d61bc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d619c:	6863      	ldr	r3, [r4, #4]
   d619e:	3b01      	subs	r3, #1
   d61a0:	6063      	str	r3, [r4, #4]
   d61a2:	b95b      	cbnz	r3, d61bc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d61a4:	6823      	ldr	r3, [r4, #0]
   d61a6:	4620      	mov	r0, r4
   d61a8:	689b      	ldr	r3, [r3, #8]
   d61aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d61ac:	68a3      	ldr	r3, [r4, #8]
   d61ae:	3b01      	subs	r3, #1
   d61b0:	60a3      	str	r3, [r4, #8]
   d61b2:	b91b      	cbnz	r3, d61bc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d61b4:	6823      	ldr	r3, [r4, #0]
   d61b6:	4620      	mov	r0, r4
   d61b8:	68db      	ldr	r3, [r3, #12]
   d61ba:	4798      	blx	r3
   d61bc:	4628      	mov	r0, r5
   d61be:	bd38      	pop	{r3, r4, r5, pc}
   d61c0:	000dae5c 	.word	0x000dae5c

000d61c4 <_ZN9TCPClientD0Ev>:
   d61c4:	b510      	push	{r4, lr}
   d61c6:	4604      	mov	r4, r0
   d61c8:	f7ff ffe2 	bl	d6190 <_ZN9TCPClientD1Ev>
   d61cc:	4620      	mov	r0, r4
   d61ce:	211c      	movs	r1, #28
   d61d0:	f002 fdde 	bl	d8d90 <_ZdlPvj>
   d61d4:	4620      	mov	r0, r4
   d61d6:	bd10      	pop	{r4, pc}

000d61d8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d61d8:	b538      	push	{r3, r4, r5, lr}
   d61da:	461d      	mov	r5, r3
    this->callback = callback;
   d61dc:	9b05      	ldr	r3, [sp, #20]
   d61de:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d61e0:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d61e2:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d61e4:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d61e6:	b102      	cbz	r2, d61ea <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d61e8:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d61ea:	b119      	cbz	r1, d61f4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d61ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d61f0:	f002 fbe8 	bl	d89c4 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d61f4:	9b04      	ldr	r3, [sp, #16]
   d61f6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d61f8:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d61fa:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d61fc:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d6200:	2bff      	cmp	r3, #255	; 0xff
   d6202:	bfb8      	it	lt
   d6204:	23ff      	movlt	r3, #255	; 0xff
   d6206:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d620a:	b108      	cbz	r0, d6210 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d620c:	f7fd ff4b 	bl	d40a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d6210:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d6214:	f7fd ff43 	bl	d409e <_Znaj>
   d6218:	61e0      	str	r0, [r4, #28]
   d621a:	bd38      	pop	{r3, r4, r5, pc}

000d621c <_ZN4MQTTC1EPhtiPFvPcS0_jEi>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(NULL, ip, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d621c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6220:	4604      	mov	r4, r0
   d6222:	2500      	movs	r5, #0
   d6224:	4617      	mov	r7, r2
   d6226:	4698      	mov	r8, r3
   d6228:	460e      	mov	r6, r1
   d622a:	f001 fccb 	bl	d7bc4 <_ZN9TCPClientC1Ev>
   d622e:	61e5      	str	r5, [r4, #28]
   d6230:	490a      	ldr	r1, [pc, #40]	; (d625c <_ZN4MQTTC1EPhtiPFvPcS0_jEi+0x40>)
   d6232:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6236:	f002 fbb2 	bl	d899e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
   d623a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d623c:	9302      	str	r3, [sp, #8]
   d623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	4620      	mov	r0, r4

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(NULL, ip, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d6244:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
   d6246:	f8cd 8000 	str.w	r8, [sp]
   d624a:	463b      	mov	r3, r7
   d624c:	4632      	mov	r2, r6
   d624e:	4629      	mov	r1, r5
   d6250:	f7ff ffc2 	bl	d61d8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d6254:	4620      	mov	r0, r4
   d6256:	b004      	add	sp, #16
   d6258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d625c:	000db084 	.word	0x000db084

000d6260 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d6260:	b510      	push	{r4, lr}
   d6262:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d6264:	4620      	mov	r0, r4
   d6266:	f001 fc11 	bl	d7a8c <_ZN9TCPClient9availableEv>
   d626a:	2800      	cmp	r0, #0
   d626c:	d0fa      	beq.n	d6264 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d626e:	4620      	mov	r0, r4
   d6270:	f001 fab5 	bl	d77de <_ZN9TCPClient4readEv>
}
   d6274:	b2c0      	uxtb	r0, r0
   d6276:	bd10      	pop	{r4, pc}

000d6278 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d6278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d627c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d627e:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d6280:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6282:	f7ff ffed 	bl	d6260 <_ZN4MQTT8readByteEv>
   d6286:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d6288:	69eb      	ldr	r3, [r5, #28]
   d628a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d628e:	f04f 0901 	mov.w	r9, #1
   d6292:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d6296:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6298:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d629a:	4628      	mov	r0, r5
   d629c:	f7ff ffe0 	bl	d6260 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d62a0:	69eb      	ldr	r3, [r5, #28]
   d62a2:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d62a4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d62a8:	fb13 f309 	smulbb	r3, r3, r9
   d62ac:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d62ae:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d62b0:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d62b2:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d62b4:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d62b6:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d62ba:	d501      	bpl.n	d62c0 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d62bc:	4626      	mov	r6, r4
   d62be:	e7ec      	b.n	d629a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d62c0:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d62c2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d62c6:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d62ca:	d113      	bne.n	d62f4 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d62cc:	4628      	mov	r0, r5
   d62ce:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d62d2:	f7ff ffc5 	bl	d6260 <_ZN4MQTT8readByteEv>
   d62d6:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d62da:	4628      	mov	r0, r5
   d62dc:	1cf4      	adds	r4, r6, #3
   d62de:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d62e2:	3602      	adds	r6, #2
   d62e4:	f7ff ffbc 	bl	d6260 <_ZN4MQTT8readByteEv>
   d62e8:	b2b6      	uxth	r6, r6
   d62ea:	b2a4      	uxth	r4, r4
   d62ec:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d62f0:	2302      	movs	r3, #2
   d62f2:	e000      	b.n	d62f6 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d62f4:	2300      	movs	r3, #0
   d62f6:	1b1b      	subs	r3, r3, r4
   d62f8:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d62fa:	19a3      	adds	r3, r4, r6
   d62fc:	b29b      	uxth	r3, r3
   d62fe:	429f      	cmp	r7, r3
   d6300:	d90b      	bls.n	d631a <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d6302:	4628      	mov	r0, r5
   d6304:	f7ff ffac 	bl	d6260 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d6308:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d630c:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d630e:	bf84      	itt	hi
   d6310:	69eb      	ldrhi	r3, [r5, #28]
   d6312:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d6314:	3401      	adds	r4, #1
   d6316:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d6318:	e7ef      	b.n	d62fa <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d631a:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d631e:	42a0      	cmp	r0, r4
   d6320:	bf2c      	ite	cs
   d6322:	4620      	movcs	r0, r4
   d6324:	2000      	movcc	r0, #0
   d6326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d632a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d632a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d632c:	4607      	mov	r7, r0
   d632e:	468e      	mov	lr, r1
   d6330:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d6332:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d6334:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d6336:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d6338:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d633c:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d633e:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d6340:	bf18      	it	ne
   d6342:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d6346:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d6348:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d634c:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d634e:	2d00      	cmp	r5, #0
   d6350:	d1f1      	bne.n	d6336 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d6352:	f1c4 0304 	rsb	r3, r4, #4
   d6356:	18d1      	adds	r1, r2, r3
   d6358:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d635c:	42a5      	cmp	r5, r4
   d635e:	da06      	bge.n	d636e <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d6360:	1b2b      	subs	r3, r5, r4
   d6362:	a801      	add	r0, sp, #4
   d6364:	4413      	add	r3, r2
   d6366:	5c28      	ldrb	r0, [r5, r0]
   d6368:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d636a:	3501      	adds	r5, #1
   d636c:	e7f6      	b.n	d635c <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d636e:	1c72      	adds	r2, r6, #1
   d6370:	4422      	add	r2, r4
   d6372:	4638      	mov	r0, r7
   d6374:	f001 f989 	bl	d768a <_ZN9TCPClient5writeEPKhj>
   d6378:	4605      	mov	r5, r0
   d637a:	f000 ff1f 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d637e:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d6380:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d6382:	4434      	add	r4, r6
   d6384:	b2a8      	uxth	r0, r5
}
   d6386:	1a23      	subs	r3, r4, r0
   d6388:	4258      	negs	r0, r3
   d638a:	4158      	adcs	r0, r3
   d638c:	b003      	add	sp, #12
   d638e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6390 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d6390:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d6392:	69c3      	ldr	r3, [r0, #28]
   d6394:	22e0      	movs	r2, #224	; 0xe0
   d6396:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d6398:	69c3      	ldr	r3, [r0, #28]
   d639a:	2200      	movs	r2, #0
   d639c:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d639e:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d63a0:	2202      	movs	r2, #2
   d63a2:	69c1      	ldr	r1, [r0, #28]
   d63a4:	f001 f971 	bl	d768a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d63a8:	4620      	mov	r0, r4
   d63aa:	f001 fb57 	bl	d7a5c <_ZN9TCPClient4stopEv>
   d63ae:	f000 ff05 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d63b2:	6260      	str	r0, [r4, #36]	; 0x24
   d63b4:	62a0      	str	r0, [r4, #40]	; 0x28
   d63b6:	bd10      	pop	{r4, pc}

000d63b8 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d63b8:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d63ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d63bc:	b29b      	uxth	r3, r3
   d63be:	460d      	mov	r5, r1
   d63c0:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d63c2:	f815 6b01 	ldrb.w	r6, [r5], #1
   d63c6:	b2a4      	uxth	r4, r4
   d63c8:	b13e      	cbz	r6, d63da <_ZN4MQTT11writeStringEPKcPht+0x22>
   d63ca:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d63ce:	429f      	cmp	r7, r3
   d63d0:	d903      	bls.n	d63da <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d63d2:	1c5c      	adds	r4, r3, #1
   d63d4:	54d6      	strb	r6, [r2, r3]
   d63d6:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d63d8:	e7f2      	b.n	d63c0 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d63da:	1b19      	subs	r1, r3, r4
   d63dc:	440a      	add	r2, r1
   d63de:	1221      	asrs	r1, r4, #8
   d63e0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d63e4:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d63e8:	4618      	mov	r0, r3
   d63ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d63ec <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d63ec:	b538      	push	{r3, r4, r5, lr}
   d63ee:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d63f0:	f001 f961 	bl	d76b6 <_ZN9TCPClient9connectedEv>
   d63f4:	2800      	cmp	r0, #0
   d63f6:	bf14      	ite	ne
   d63f8:	2401      	movne	r4, #1
   d63fa:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d63fc:	d102      	bne.n	d6404 <_ZN4MQTT11isConnectedEv+0x18>
   d63fe:	4628      	mov	r0, r5
   d6400:	f001 fb2c 	bl	d7a5c <_ZN9TCPClient4stopEv>
    return rc;
}
   d6404:	4620      	mov	r0, r4
   d6406:	bd38      	pop	{r3, r4, r5, pc}

000d6408 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d6408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d640c:	b087      	sub	sp, #28
   d640e:	4604      	mov	r4, r0
   d6410:	4689      	mov	r9, r1
   d6412:	4617      	mov	r7, r2
   d6414:	461e      	mov	r6, r3
   d6416:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d641a:	f7ff ffe7 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d641e:	4605      	mov	r5, r0
   d6420:	2800      	cmp	r0, #0
   d6422:	f040 80bd 	bne.w	d65a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d6426:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6428:	b939      	cbnz	r1, d643a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d642a:	4603      	mov	r3, r0
   d642c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d6430:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6432:	4620      	mov	r0, r4
   d6434:	f001 fa16 	bl	d7864 <_ZN9TCPClient7connectEPKctm>
   d6438:	e009      	b.n	d644e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d643a:	4668      	mov	r0, sp
   d643c:	f001 ff2c 	bl	d8298 <_ZN9IPAddressC1EPKh>
   d6440:	462b      	mov	r3, r5
   d6442:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d6446:	4669      	mov	r1, sp
   d6448:	4620      	mov	r0, r4
   d644a:	f001 fa8d 	bl	d7968 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d644e:	2800      	cmp	r0, #0
   d6450:	f000 80a2 	beq.w	d6598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d6454:	2301      	movs	r3, #1
   d6456:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d6458:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d645c:	2b04      	cmp	r3, #4
   d645e:	d115      	bne.n	d648c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6460:	4b52      	ldr	r3, [pc, #328]	; (d65ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d6462:	6818      	ldr	r0, [r3, #0]
   d6464:	889a      	ldrh	r2, [r3, #4]
   d6466:	f8ad 2004 	strh.w	r2, [sp, #4]
   d646a:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d646c:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d646e:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6470:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6472:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6476:	1d53      	adds	r3, r2, #5
   d6478:	f8c2 0005 	str.w	r0, [r2, #5]
   d647c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d6480:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d6484:	719a      	strb	r2, [r3, #6]
   d6486:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d6488:	230c      	movs	r3, #12
   d648a:	e012      	b.n	d64b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d648c:	4b48      	ldr	r3, [pc, #288]	; (d65b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d648e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d6492:	6818      	ldr	r0, [r3, #0]
   d6494:	6859      	ldr	r1, [r3, #4]
   d6496:	7a1b      	ldrb	r3, [r3, #8]
   d6498:	466a      	mov	r2, sp
   d649a:	c203      	stmia	r2!, {r0, r1}
   d649c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d649e:	466b      	mov	r3, sp
   d64a0:	cb03      	ldmia	r3!, {r0, r1}
   d64a2:	f8cc 0005 	str.w	r0, [ip, #5]
   d64a6:	f8cc 1009 	str.w	r1, [ip, #9]
   d64aa:	7813      	ldrb	r3, [r2, #0]
   d64ac:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d64b0:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d64b2:	f1b8 0f00 	cmp.w	r8, #0
   d64b6:	d00a      	beq.n	d64ce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d64b8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d64bc:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d64c0:	0152      	lsls	r2, r2, #5
   d64c2:	f042 0206 	orr.w	r2, r2, #6
   d64c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d64ca:	b2d2      	uxtb	r2, r2
   d64cc:	e000      	b.n	d64d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d64ce:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d64d0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d64d4:	b909      	cbnz	r1, d64da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d64d6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d64da:	b12f      	cbz	r7, d64e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d64dc:	b916      	cbnz	r6, d64e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d64de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d64e2:	e001      	b.n	d64e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d64e4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d64e8:	69e1      	ldr	r1, [r4, #28]
   d64ea:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d64ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d64ee:	69e1      	ldr	r1, [r4, #28]
   d64f0:	1c58      	adds	r0, r3, #1
   d64f2:	1212      	asrs	r2, r2, #8
   d64f4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d64f6:	1c9a      	adds	r2, r3, #2
   d64f8:	69e1      	ldr	r1, [r4, #28]
   d64fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d64fc:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d64fe:	3303      	adds	r3, #3
   d6500:	69e2      	ldr	r2, [r4, #28]
   d6502:	4649      	mov	r1, r9
   d6504:	4620      	mov	r0, r4
   d6506:	f7ff ff57 	bl	d63b8 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d650a:	f1b8 0f00 	cmp.w	r8, #0
   d650e:	d00b      	beq.n	d6528 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d6510:	4603      	mov	r3, r0
   d6512:	69e2      	ldr	r2, [r4, #28]
   d6514:	4641      	mov	r1, r8
   d6516:	4620      	mov	r0, r4
   d6518:	f7ff ff4e 	bl	d63b8 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d651c:	69e2      	ldr	r2, [r4, #28]
   d651e:	9911      	ldr	r1, [sp, #68]	; 0x44
   d6520:	4603      	mov	r3, r0
   d6522:	4620      	mov	r0, r4
   d6524:	f7ff ff48 	bl	d63b8 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d6528:	b167      	cbz	r7, d6544 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d652a:	4603      	mov	r3, r0
   d652c:	69e2      	ldr	r2, [r4, #28]
   d652e:	4639      	mov	r1, r7
   d6530:	4620      	mov	r0, r4
   d6532:	f7ff ff41 	bl	d63b8 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d6536:	b12e      	cbz	r6, d6544 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d6538:	4603      	mov	r3, r0
   d653a:	69e2      	ldr	r2, [r4, #28]
   d653c:	4631      	mov	r1, r6
   d653e:	4620      	mov	r0, r4
   d6540:	f7ff ff3a 	bl	d63b8 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d6544:	1f43      	subs	r3, r0, #5
   d6546:	b29b      	uxth	r3, r3
   d6548:	69e2      	ldr	r2, [r4, #28]
   d654a:	2110      	movs	r1, #16
   d654c:	4620      	mov	r0, r4
   d654e:	f7ff feec 	bl	d632a <_ZN4MQTT5writeEhPht>
   d6552:	f000 fe33 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6556:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d655a:	6260      	str	r0, [r4, #36]	; 0x24
   d655c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d655e:	4620      	mov	r0, r4
   d6560:	f001 fa94 	bl	d7a8c <_ZN9TCPClient9availableEv>
   d6564:	b940      	cbnz	r0, d6578 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d6566:	f000 fe29 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d656a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d656c:	1ac0      	subs	r0, r0, r3
   d656e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6570:	4373      	muls	r3, r6
   d6572:	4298      	cmp	r0, r3
   d6574:	d9f3      	bls.n	d655e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d6576:	e00f      	b.n	d6598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d6578:	4669      	mov	r1, sp
   d657a:	4620      	mov	r0, r4
   d657c:	f7ff fe7c 	bl	d6278 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d6580:	2804      	cmp	r0, #4
   d6582:	d109      	bne.n	d6598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d6584:	69e3      	ldr	r3, [r4, #28]
   d6586:	78de      	ldrb	r6, [r3, #3]
   d6588:	b936      	cbnz	r6, d6598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d658a:	f000 fe17 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d658e:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d6590:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d6592:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d6596:	e004      	b.n	d65a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d6598:	4620      	mov	r0, r4
   d659a:	f001 fa5f 	bl	d7a5c <_ZN9TCPClient4stopEv>
   d659e:	e000      	b.n	d65a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d65a0:	2500      	movs	r5, #0
}
   d65a2:	4628      	mov	r0, r5
   d65a4:	b007      	add	sp, #28
   d65a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d65aa:	bf00      	nop
   d65ac:	000dadbe 	.word	0x000dadbe
   d65b0:	000dadc5 	.word	0x000dadc5

000d65b4 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d65b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d65b6:	2304      	movs	r3, #4
   d65b8:	9305      	str	r3, [sp, #20]
   d65ba:	2301      	movs	r3, #1
   d65bc:	9304      	str	r3, [sp, #16]
   d65be:	2300      	movs	r3, #0
   d65c0:	9303      	str	r3, [sp, #12]
   d65c2:	9302      	str	r3, [sp, #8]
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	9300      	str	r3, [sp, #0]
   d65c8:	461a      	mov	r2, r3
   d65ca:	f7ff ff1d 	bl	d6408 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d65ce:	b007      	add	sp, #28
   d65d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d65d4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d65d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65d8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d65da:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d65de:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d65e2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d65e6:	4604      	mov	r4, r0
   d65e8:	468b      	mov	fp, r1
   d65ea:	4691      	mov	r9, r2
   d65ec:	469a      	mov	sl, r3
    if (isConnected()) {
   d65ee:	f7ff fefd 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d65f2:	2800      	cmp	r0, #0
   d65f4:	d04c      	beq.n	d6690 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d65f6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d65fa:	69e0      	ldr	r0, [r4, #28]
   d65fc:	2100      	movs	r1, #0
   d65fe:	f003 fc04 	bl	d9e0a <memset>

        length = writeString(topic, buffer, length);
   d6602:	2305      	movs	r3, #5
   d6604:	69e2      	ldr	r2, [r4, #28]
   d6606:	4659      	mov	r1, fp
   d6608:	4620      	mov	r0, r4
   d660a:	f7ff fed5 	bl	d63b8 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d660e:	1e6b      	subs	r3, r5, #1
   d6610:	2b01      	cmp	r3, #1
   d6612:	d812      	bhi.n	d663a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d6614:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d6616:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d6618:	3301      	adds	r3, #1
   d661a:	b29b      	uxth	r3, r3
   d661c:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d661e:	121b      	asrs	r3, r3, #8
   d6620:	5413      	strb	r3, [r2, r0]
   d6622:	1c41      	adds	r1, r0, #1
   d6624:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d6626:	69e3      	ldr	r3, [r4, #28]
   d6628:	8c22      	ldrh	r2, [r4, #32]
   d662a:	545a      	strb	r2, [r3, r1]
   d662c:	3002      	adds	r0, #2
   d662e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d6630:	b11e      	cbz	r6, d663a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d6632:	8c23      	ldrh	r3, [r4, #32]
   d6634:	1c5a      	adds	r2, r3, #1
   d6636:	8422      	strh	r2, [r4, #32]
   d6638:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d663a:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d663c:	b291      	uxth	r1, r2
   d663e:	1883      	adds	r3, r0, r2
   d6640:	458a      	cmp	sl, r1
   d6642:	b29b      	uxth	r3, r3
   d6644:	d90a      	bls.n	d665c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d6646:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d664a:	429e      	cmp	r6, r3
   d664c:	f102 0201 	add.w	r2, r2, #1
   d6650:	d904      	bls.n	d665c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d6652:	f819 6001 	ldrb.w	r6, [r9, r1]
   d6656:	69e1      	ldr	r1, [r4, #28]
   d6658:	54ce      	strb	r6, [r1, r3]
   d665a:	e7ef      	b.n	d663c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d665c:	f1b8 0f00 	cmp.w	r8, #0
   d6660:	bf0c      	ite	eq
   d6662:	2130      	moveq	r1, #48	; 0x30
   d6664:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d6666:	b10f      	cbz	r7, d666c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d6668:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d666c:	2d02      	cmp	r5, #2
   d666e:	d102      	bne.n	d6676 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d6670:	f041 0104 	orr.w	r1, r1, #4
   d6674:	e003      	b.n	d667e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d6676:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d6678:	bf08      	it	eq
   d667a:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d667e:	3b05      	subs	r3, #5
   d6680:	69e2      	ldr	r2, [r4, #28]
   d6682:	b29b      	uxth	r3, r3
   d6684:	4620      	mov	r0, r4
    }
    return false;
}
   d6686:	b001      	add	sp, #4
   d6688:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d668c:	f7ff be4d 	b.w	d632a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6690:	b001      	add	sp, #4
   d6692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6696 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d6696:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d6698:	9c08      	ldr	r4, [sp, #32]
   d669a:	9403      	str	r4, [sp, #12]
   d669c:	2400      	movs	r4, #0
   d669e:	9402      	str	r4, [sp, #8]
   d66a0:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d66a4:	9401      	str	r4, [sp, #4]
   d66a6:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d66aa:	9400      	str	r4, [sp, #0]
   d66ac:	f7ff ff92 	bl	d65d4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d66b0:	b004      	add	sp, #16
   d66b2:	bd10      	pop	{r4, pc}

000d66b4 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d66b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d66b6:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d66b8:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d66ba:	460e      	mov	r6, r1
   d66bc:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d66be:	f003 fbe7 	bl	d9e90 <strlen>
   d66c2:	2300      	movs	r3, #0
   d66c4:	9302      	str	r3, [sp, #8]
   d66c6:	9301      	str	r3, [sp, #4]
   d66c8:	9300      	str	r3, [sp, #0]
   d66ca:	4622      	mov	r2, r4
   d66cc:	4603      	mov	r3, r0
   d66ce:	4631      	mov	r1, r6
   d66d0:	4628      	mov	r0, r5
   d66d2:	f7ff ffe0 	bl	d6696 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d66d6:	b004      	add	sp, #16
   d66d8:	bd70      	pop	{r4, r5, r6, pc}

000d66da <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d66da:	b538      	push	{r3, r4, r5, lr}
   d66dc:	4604      	mov	r4, r0
   d66de:	460d      	mov	r5, r1
    if (isConnected()) {
   d66e0:	f7ff fe84 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d66e4:	b190      	cbz	r0, d670c <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d66e6:	69e3      	ldr	r3, [r4, #28]
   d66e8:	2262      	movs	r2, #98	; 0x62
   d66ea:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d66ec:	69e3      	ldr	r3, [r4, #28]
   d66ee:	2202      	movs	r2, #2
   d66f0:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d66f2:	69e3      	ldr	r3, [r4, #28]
   d66f4:	122a      	asrs	r2, r5, #8
   d66f6:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d66f8:	69e3      	ldr	r3, [r4, #28]
   d66fa:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d66fc:	2204      	movs	r2, #4
   d66fe:	69e1      	ldr	r1, [r4, #28]
   d6700:	4620      	mov	r0, r4
   d6702:	f000 ffc2 	bl	d768a <_ZN9TCPClient5writeEPKhj>
   d6706:	3000      	adds	r0, #0
   d6708:	bf18      	it	ne
   d670a:	2001      	movne	r0, #1
    }
    return false;
}
   d670c:	bd38      	pop	{r3, r4, r5, pc}

000d670e <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d670e:	b538      	push	{r3, r4, r5, lr}
   d6710:	4604      	mov	r4, r0
   d6712:	460d      	mov	r5, r1
    if (isConnected()) {
   d6714:	f7ff fe6a 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d6718:	b190      	cbz	r0, d6740 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d671a:	69e3      	ldr	r3, [r4, #28]
   d671c:	2272      	movs	r2, #114	; 0x72
   d671e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d6720:	69e3      	ldr	r3, [r4, #28]
   d6722:	2202      	movs	r2, #2
   d6724:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d6726:	69e3      	ldr	r3, [r4, #28]
   d6728:	122a      	asrs	r2, r5, #8
   d672a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d672c:	69e3      	ldr	r3, [r4, #28]
   d672e:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d6730:	2204      	movs	r2, #4
   d6732:	69e1      	ldr	r1, [r4, #28]
   d6734:	4620      	mov	r0, r4
   d6736:	f000 ffa8 	bl	d768a <_ZN9TCPClient5writeEPKhj>
   d673a:	3000      	adds	r0, #0
   d673c:	bf18      	it	ne
   d673e:	2001      	movne	r0, #1
    }
    return false;
}
   d6740:	bd38      	pop	{r3, r4, r5, pc}

000d6742 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d6742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6746:	b083      	sub	sp, #12
   d6748:	af00      	add	r7, sp, #0
   d674a:	4604      	mov	r4, r0
    if (isConnected()) {
   d674c:	f7ff fe4e 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d6750:	4681      	mov	r9, r0
   d6752:	2800      	cmp	r0, #0
   d6754:	f000 80f6 	beq.w	d6944 <_ZN4MQTT4loopEv+0x202>
   d6758:	f000 fd30 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d675c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d675e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6762:	4353      	muls	r3, r2
   d6764:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d6766:	1a82      	subs	r2, r0, r2
   d6768:	429a      	cmp	r2, r3
   d676a:	4605      	mov	r5, r0
   d676c:	d803      	bhi.n	d6776 <_ZN4MQTT4loopEv+0x34>
   d676e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d6770:	1a82      	subs	r2, r0, r2
   d6772:	4293      	cmp	r3, r2
   d6774:	d217      	bcs.n	d67a6 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d6776:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d677a:	b12b      	cbz	r3, d6788 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d677c:	4620      	mov	r0, r4
   d677e:	f001 f96d 	bl	d7a5c <_ZN9TCPClient4stopEv>
                return false;
   d6782:	f04f 0900 	mov.w	r9, #0
   d6786:	e0dd      	b.n	d6944 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d6788:	69e2      	ldr	r2, [r4, #28]
   d678a:	21c0      	movs	r1, #192	; 0xc0
   d678c:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d678e:	69e2      	ldr	r2, [r4, #28]
   d6790:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d6792:	69e1      	ldr	r1, [r4, #28]
   d6794:	2202      	movs	r2, #2
   d6796:	4620      	mov	r0, r4
   d6798:	f000 ff77 	bl	d768a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d679c:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d679e:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d67a0:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d67a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d67a6:	4620      	mov	r0, r4
   d67a8:	f001 f970 	bl	d7a8c <_ZN9TCPClient9availableEv>
   d67ac:	2800      	cmp	r0, #0
   d67ae:	f000 80c9 	beq.w	d6944 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d67b2:	1df9      	adds	r1, r7, #7
   d67b4:	4620      	mov	r0, r4
   d67b6:	f7ff fd5f 	bl	d6278 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d67ba:	4602      	mov	r2, r0
   d67bc:	2800      	cmp	r0, #0
   d67be:	f000 80c1 	beq.w	d6944 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d67c2:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d67c4:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d67c6:	7818      	ldrb	r0, [r3, #0]
   d67c8:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d67cc:	2930      	cmp	r1, #48	; 0x30
   d67ce:	d17d      	bne.n	d68cc <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d67d0:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d67d4:	f1bb 0f00 	cmp.w	fp, #0
   d67d8:	f000 80b4 	beq.w	d6944 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d67dc:	f897 c007 	ldrb.w	ip, [r7, #7]
   d67e0:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d67e4:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d67e6:	7881      	ldrb	r1, [r0, #2]
   d67e8:	f890 e001 	ldrb.w	lr, [r0, #1]
   d67ec:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d67f0:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d67f4:	f10e 0108 	add.w	r1, lr, #8
   d67f8:	f021 0107 	bic.w	r1, r1, #7
   d67fc:	ebad 0d01 	sub.w	sp, sp, r1
   d6800:	4668      	mov	r0, sp
   d6802:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d6804:	b28e      	uxth	r6, r1
   d6806:	45b6      	cmp	lr, r6
   d6808:	d906      	bls.n	d6818 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d680a:	eb0c 0601 	add.w	r6, ip, r1
   d680e:	441e      	add	r6, r3
   d6810:	78f6      	ldrb	r6, [r6, #3]
   d6812:	5446      	strb	r6, [r0, r1]
   d6814:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d6816:	e7f5      	b.n	d6804 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d6818:	2100      	movs	r1, #0
   d681a:	f800 100e 	strb.w	r1, [r0, lr]
   d681e:	781e      	ldrb	r6, [r3, #0]
   d6820:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d6824:	2e02      	cmp	r6, #2
   d6826:	f10c 0103 	add.w	r1, ip, #3
   d682a:	ebcc 0202 	rsb	r2, ip, r2
   d682e:	d11e      	bne.n	d686e <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6830:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6832:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6836:	f813 8001 	ldrb.w	r8, [r3, r1]
   d683a:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d683c:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d683e:	7849      	ldrb	r1, [r1, #1]
   d6840:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6844:	f10c 0105 	add.w	r1, ip, #5
   d6848:	4471      	add	r1, lr
   d684a:	4419      	add	r1, r3
   d684c:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d684e:	69e3      	ldr	r3, [r4, #28]
   d6850:	2240      	movs	r2, #64	; 0x40
   d6852:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d6854:	69e3      	ldr	r3, [r4, #28]
   d6856:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d6858:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d685a:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d685e:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6862:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d6864:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d6866:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d6868:	f883 8003 	strb.w	r8, [r3, #3]
   d686c:	e020      	b.n	d68b0 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d686e:	2e04      	cmp	r6, #4
   d6870:	d124      	bne.n	d68bc <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6872:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6874:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6878:	f813 8001 	ldrb.w	r8, [r3, r1]
   d687c:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d687e:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6880:	7849      	ldrb	r1, [r1, #1]
   d6882:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6886:	f10c 0105 	add.w	r1, ip, #5
   d688a:	4471      	add	r1, lr
   d688c:	4419      	add	r1, r3
   d688e:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d6890:	69e3      	ldr	r3, [r4, #28]
   d6892:	2250      	movs	r2, #80	; 0x50
   d6894:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d6896:	69e3      	ldr	r3, [r4, #28]
   d6898:	2202      	movs	r2, #2
   d689a:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d689c:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d689e:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d68a2:	ea4f 2228 	mov.w	r2, r8, asr #8
   d68a6:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d68a8:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d68aa:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d68ac:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d68b0:	69e1      	ldr	r1, [r4, #28]
   d68b2:	4620      	mov	r0, r4
   d68b4:	f000 fee9 	bl	d768a <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d68b8:	6265      	str	r5, [r4, #36]	; 0x24
   d68ba:	e005      	b.n	d68c8 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d68bc:	3a03      	subs	r2, #3
   d68be:	4471      	add	r1, lr
   d68c0:	ebce 0202 	rsb	r2, lr, r2
   d68c4:	4419      	add	r1, r3
   d68c6:	47d8      	blx	fp
   d68c8:	46d5      	mov	sp, sl
   d68ca:	e03b      	b.n	d6944 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d68cc:	2950      	cmp	r1, #80	; 0x50
   d68ce:	d108      	bne.n	d68e2 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d68d0:	7899      	ldrb	r1, [r3, #2]
   d68d2:	78db      	ldrb	r3, [r3, #3]
   d68d4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d68d8:	b289      	uxth	r1, r1
   d68da:	4620      	mov	r0, r4
   d68dc:	f7ff fefd 	bl	d66da <_ZN4MQTT14publishReleaseEt>
   d68e0:	e030      	b.n	d6944 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d68e2:	2940      	cmp	r1, #64	; 0x40
   d68e4:	d00c      	beq.n	d6900 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d68e6:	2960      	cmp	r1, #96	; 0x60
   d68e8:	d108      	bne.n	d68fc <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d68ea:	7899      	ldrb	r1, [r3, #2]
   d68ec:	78db      	ldrb	r3, [r3, #3]
   d68ee:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d68f2:	b289      	uxth	r1, r1
   d68f4:	4620      	mov	r0, r4
   d68f6:	f7ff ff0a 	bl	d670e <_ZN4MQTT15publishCompleteEt>
   d68fa:	e023      	b.n	d6944 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d68fc:	2970      	cmp	r1, #112	; 0x70
   d68fe:	d10d      	bne.n	d691c <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d6900:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6902:	b1f9      	cbz	r1, d6944 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d6904:	2a04      	cmp	r2, #4
   d6906:	d11d      	bne.n	d6944 <_ZN4MQTT4loopEv+0x202>
   d6908:	f010 0f06 	tst.w	r0, #6
   d690c:	d11a      	bne.n	d6944 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d690e:	7898      	ldrb	r0, [r3, #2]
   d6910:	78db      	ldrb	r3, [r3, #3]
   d6912:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d6916:	b280      	uxth	r0, r0
   d6918:	4788      	blx	r1
   d691a:	e013      	b.n	d6944 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d691c:	2990      	cmp	r1, #144	; 0x90
   d691e:	d011      	beq.n	d6944 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d6920:	29c0      	cmp	r1, #192	; 0xc0
   d6922:	d10a      	bne.n	d693a <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d6924:	22d0      	movs	r2, #208	; 0xd0
   d6926:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d6928:	69e3      	ldr	r3, [r4, #28]
   d692a:	2200      	movs	r2, #0
   d692c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d692e:	69e1      	ldr	r1, [r4, #28]
   d6930:	2202      	movs	r2, #2
   d6932:	4620      	mov	r0, r4
   d6934:	f000 fea9 	bl	d768a <_ZN9TCPClient5writeEPKhj>
   d6938:	e004      	b.n	d6944 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d693a:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d693c:	bf04      	itt	eq
   d693e:	2300      	moveq	r3, #0
   d6940:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d6944:	4648      	mov	r0, r9
   d6946:	370c      	adds	r7, #12
   d6948:	46bd      	mov	sp, r7
   d694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d694e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d694e:	b570      	push	{r4, r5, r6, lr}
   d6950:	4604      	mov	r4, r0
   d6952:	460e      	mov	r6, r1
   d6954:	4615      	mov	r5, r2

    if (isConnected()) {
   d6956:	f7ff fd49 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d695a:	b1e8      	cbz	r0, d6998 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d695c:	8c23      	ldrh	r3, [r4, #32]
   d695e:	3301      	adds	r3, #1
   d6960:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d6962:	b903      	cbnz	r3, d6966 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d6964:	2301      	movs	r3, #1
   d6966:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d6968:	8c23      	ldrh	r3, [r4, #32]
   d696a:	69e2      	ldr	r2, [r4, #28]
   d696c:	121b      	asrs	r3, r3, #8
   d696e:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d6970:	69e3      	ldr	r3, [r4, #28]
   d6972:	8c22      	ldrh	r2, [r4, #32]
   d6974:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d6976:	69e2      	ldr	r2, [r4, #28]
   d6978:	4631      	mov	r1, r6
   d697a:	2307      	movs	r3, #7
   d697c:	4620      	mov	r0, r4
   d697e:	f7ff fd1b 	bl	d63b8 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d6982:	69e3      	ldr	r3, [r4, #28]
   d6984:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6986:	1f03      	subs	r3, r0, #4
   d6988:	69e2      	ldr	r2, [r4, #28]
   d698a:	4620      	mov	r0, r4
   d698c:	b29b      	uxth	r3, r3
   d698e:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d6990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6994:	f7ff bcc9 	b.w	d632a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6998:	bd70      	pop	{r4, r5, r6, pc}

000d699a <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d699a:	2200      	movs	r2, #0
   d699c:	f7ff bfd7 	b.w	d694e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d69a0 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d69a0:	b510      	push	{r4, lr}
   d69a2:	4604      	mov	r4, r0
    if (isConnected()) {
   d69a4:	f7ff fd22 	bl	d63ec <_ZN4MQTT11isConnectedEv>
   d69a8:	b110      	cbz	r0, d69b0 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d69aa:	4620      	mov	r0, r4
   d69ac:	f7ff fcf0 	bl	d6390 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d69b0:	69e0      	ldr	r0, [r4, #28]
   d69b2:	b108      	cbz	r0, d69b8 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d69b4:	f7fd fb77 	bl	d40a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d69b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d69bc:	f001 ffa8 	bl	d8910 <_ZN6StringD1Ev>
   d69c0:	4620      	mov	r0, r4
   d69c2:	f7ff fbe5 	bl	d6190 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d69c6:	4620      	mov	r0, r4
   d69c8:	bd10      	pop	{r4, pc}

000d69ca <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d69ca:	f000 bc27 	b.w	d721c <HAL_Pin_Map>
	...

000d69d0 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
   d69d0:	b538      	push	{r3, r4, r5, lr}
   d69d2:	460c      	mov	r4, r1
   d69d4:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d69d6:	2228      	movs	r2, #40	; 0x28
   d69d8:	2100      	movs	r1, #0
   d69da:	4620      	mov	r0, r4
   d69dc:	f003 fa15 	bl	d9e0a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d69e0:	220b      	movs	r2, #11
   d69e2:	4909      	ldr	r1, [pc, #36]	; (d6a08 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d69e4:	4620      	mov	r0, r4
   d69e6:	f003 fa70 	bl	d9eca <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d69ea:	2300      	movs	r3, #0
  sensor->version     = 1;
   d69ec:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d69ee:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d69f0:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d69f2:	68aa      	ldr	r2, [r5, #8]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay   = 0;
   d69f4:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0.0F;
   d69f6:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d69f8:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
   d69fa:	61a3      	str	r3, [r4, #24]
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d69fc:	2203      	movs	r2, #3
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
  sensor->min_value   = 0.0F;
   d69fe:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0.01F;
   d6a00:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d6a02:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
  sensor->min_value   = 0.0F;
  sensor->resolution  = 0.01F;
   d6a04:	6223      	str	r3, [r4, #32]
   d6a06:	bd38      	pop	{r3, r4, r5, pc}
   d6a08:	000dadce 	.word	0x000dadce
   d6a0c:	3c23d70a 	.word	0x3c23d70a

000d6a10 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
   d6a10:	b510      	push	{r4, lr}
   d6a12:	4c02      	ldr	r4, [pc, #8]	; (d6a1c <_ZN15Adafruit_BNO055C1Elh+0xc>)
   d6a14:	6004      	str	r4, [r0, #0]
{
  _sensorID = sensorID;
   d6a16:	6081      	str	r1, [r0, #8]
  _address = address;
   d6a18:	7142      	strb	r2, [r0, #5]
}
   d6a1a:	bd10      	pop	{r4, pc}
   d6a1c:	000dade0 	.word	0x000dade0

000d6a20 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
/*!
    @brief  Writes an 8 bit value over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value)
{
   d6a20:	b570      	push	{r4, r5, r6, lr}
   d6a22:	4606      	mov	r6, r0
   d6a24:	4614      	mov	r4, r2
   d6a26:	460d      	mov	r5, r1
  Wire.beginTransmission(_address);
   d6a28:	f002 f8fe 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a2c:	7971      	ldrb	r1, [r6, #5]
   d6a2e:	f001 fa6a 	bl	d7f06 <_ZN7TwoWire17beginTransmissionEh>

    Wire.write((uint8_t)reg);
   d6a32:	f002 f8f9 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a36:	6803      	ldr	r3, [r0, #0]
   d6a38:	4629      	mov	r1, r5
   d6a3a:	689b      	ldr	r3, [r3, #8]
   d6a3c:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d6a3e:	f002 f8f3 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a42:	6803      	ldr	r3, [r0, #0]
   d6a44:	4621      	mov	r1, r4
   d6a46:	689b      	ldr	r3, [r3, #8]
   d6a48:	4798      	blx	r3

  Wire.endTransmission();
   d6a4a:	f002 f8ed 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a4e:	f001 fa62 	bl	d7f16 <_ZN7TwoWire15endTransmissionEv>

  /* ToDo: Check for error! */
  return true;
}
   d6a52:	2001      	movs	r0, #1
   d6a54:	bd70      	pop	{r4, r5, r6, pc}

000d6a56 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Puts the chip in the specified operating mode
*/
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
   d6a56:	b508      	push	{r3, lr}
   d6a58:	460a      	mov	r2, r1
  _mode = mode;
   d6a5a:	7301      	strb	r1, [r0, #12]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d6a5c:	213d      	movs	r1, #61	; 0x3d
   d6a5e:	f7ff ffdf 	bl	d6a20 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d6a62:	201e      	movs	r0, #30
}
   d6a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
  _mode = mode;
  write8(BNO055_OPR_MODE_ADDR, _mode);
  delay(30);
   d6a68:	f001 bdbe 	b.w	d85e8 <delay>

000d6a6c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg )
{
   d6a6c:	b538      	push	{r3, r4, r5, lr}
   d6a6e:	4604      	mov	r4, r0
   d6a70:	460d      	mov	r5, r1
  byte value = 0;

  Wire.beginTransmission(_address);
   d6a72:	f002 f8d9 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a76:	7961      	ldrb	r1, [r4, #5]
   d6a78:	f001 fa45 	bl	d7f06 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d6a7c:	f002 f8d4 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a80:	6803      	ldr	r3, [r0, #0]
   d6a82:	4629      	mov	r1, r5
   d6a84:	689b      	ldr	r3, [r3, #8]
   d6a86:	4798      	blx	r3
  Wire.endTransmission();
   d6a88:	f002 f8ce 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a8c:	f001 fa43 	bl	d7f16 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)1);
   d6a90:	f002 f8ca 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6a94:	2201      	movs	r2, #1
   d6a96:	7961      	ldrb	r1, [r4, #5]
   d6a98:	f001 fa32 	bl	d7f00 <_ZN7TwoWire11requestFromEhj>
  value = Wire.read();
   d6a9c:	f002 f8c4 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6aa0:	6803      	ldr	r3, [r0, #0]
   d6aa2:	695b      	ldr	r3, [r3, #20]
   d6aa4:	4798      	blx	r3

  return value;
}
   d6aa6:	b2c0      	uxtb	r0, r0
   d6aa8:	bd38      	pop	{r3, r4, r5, pc}

000d6aaa <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Sets up the HW
*/
/**************************************************************************/
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode)
{
   d6aaa:	b538      	push	{r3, r4, r5, lr}
   d6aac:	460d      	mov	r5, r1
   d6aae:	4604      	mov	r4, r0
  /* Enable I2C */
  Wire.begin();
   d6ab0:	f002 f8ba 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6ab4:	f001 f9ea 	bl	d7e8c <_ZN7TwoWire5beginEv>

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6ab8:	2100      	movs	r1, #0
   d6aba:	4620      	mov	r0, r4
   d6abc:	f7ff ffd6 	bl	d6a6c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if(id != BNO055_ID)
   d6ac0:	28a0      	cmp	r0, #160	; 0xa0
   d6ac2:	d109      	bne.n	d6ad8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2e>
      return false;  // still not? ok bail
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	2100      	movs	r1, #0
   d6ac8:	f7ff ffc5 	bl	d6a56 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6acc:	2220      	movs	r2, #32
   d6ace:	213f      	movs	r1, #63	; 0x3f
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	f7ff ffa5 	bl	d6a20 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
   d6ad6:	e00b      	b.n	d6af0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x46>

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
  if(id != BNO055_ID)
  {
    delay(1000); // hold on for boot
   d6ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6adc:	f001 fd84 	bl	d85e8 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d6ae0:	2100      	movs	r1, #0
   d6ae2:	4620      	mov	r0, r4
   d6ae4:	f7ff ffc2 	bl	d6a6c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if(id != BNO055_ID) {
   d6ae8:	28a0      	cmp	r0, #160	; 0xa0
   d6aea:	d0eb      	beq.n	d6ac4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x1a>
      return false;  // still not? ok bail
   d6aec:	2000      	movs	r0, #0
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
  delay(20);

  return true;
}
   d6aee:	bd38      	pop	{r3, r4, r5, pc}
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d6af0:	2100      	movs	r1, #0
   d6af2:	4620      	mov	r0, r4
   d6af4:	f7ff ffba 	bl	d6a6c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6af8:	28a0      	cmp	r0, #160	; 0xa0
   d6afa:	d003      	beq.n	d6b04 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
  {
    delay(10);
   d6afc:	200a      	movs	r0, #10
   d6afe:	f001 fd73 	bl	d85e8 <delay>
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d6b02:	e7f5      	b.n	d6af0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x46>
  {
    delay(10);
  }
  delay(50);
   d6b04:	2032      	movs	r0, #50	; 0x32
   d6b06:	f001 fd6f 	bl	d85e8 <delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6b0a:	2200      	movs	r2, #0
   d6b0c:	213e      	movs	r1, #62	; 0x3e
   d6b0e:	4620      	mov	r0, r4
   d6b10:	f7ff ff86 	bl	d6a20 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6b14:	200a      	movs	r0, #10
   d6b16:	f001 fd67 	bl	d85e8 <delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
   d6b1a:	2200      	movs	r2, #0
   d6b1c:	2107      	movs	r1, #7
   d6b1e:	4620      	mov	r0, r4
   d6b20:	f7ff ff7e 	bl	d6a20 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d6b24:	2200      	movs	r2, #0
   d6b26:	213f      	movs	r1, #63	; 0x3f
   d6b28:	4620      	mov	r0, r4
   d6b2a:	f7ff ff79 	bl	d6a20 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6b2e:	200a      	movs	r0, #10
   d6b30:	f001 fd5a 	bl	d85e8 <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
   d6b34:	4629      	mov	r1, r5
   d6b36:	4620      	mov	r0, r4
   d6b38:	f7ff ff8d 	bl	d6a56 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d6b3c:	2014      	movs	r0, #20
   d6b3e:	f001 fd53 	bl	d85e8 <delay>

  return true;
   d6b42:	2001      	movs	r0, #1
   d6b44:	bd38      	pop	{r3, r4, r5, pc}

000d6b46 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
   d6b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b48:	4605      	mov	r5, r0
   d6b4a:	4616      	mov	r6, r2
   d6b4c:	461c      	mov	r4, r3
   d6b4e:	460f      	mov	r7, r1
  Wire.beginTransmission(_address);
   d6b50:	f002 f86a 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6b54:	7969      	ldrb	r1, [r5, #5]
   d6b56:	f001 f9d6 	bl	d7f06 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d6b5a:	f002 f865 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6b5e:	6803      	ldr	r3, [r0, #0]
   d6b60:	4639      	mov	r1, r7
   d6b62:	689b      	ldr	r3, [r3, #8]
   d6b64:	4798      	blx	r3
  Wire.endTransmission();
   d6b66:	f002 f85f 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6b6a:	f001 f9d4 	bl	d7f16 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)len);
   d6b6e:	f002 f85b 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6b72:	4622      	mov	r2, r4
   d6b74:	7969      	ldrb	r1, [r5, #5]
   d6b76:	f001 f9c3 	bl	d7f00 <_ZN7TwoWire11requestFromEhj>
   d6b7a:	3c01      	subs	r4, #1
   d6b7c:	1e75      	subs	r5, r6, #1
   d6b7e:	4434      	add	r4, r6

  for (uint8_t i = 0; i < len; i++)
   d6b80:	42a5      	cmp	r5, r4
   d6b82:	d007      	beq.n	d6b94 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x4e>
  {
      buffer[i] = Wire.read();
   d6b84:	f002 f850 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d6b88:	6803      	ldr	r3, [r0, #0]
   d6b8a:	695b      	ldr	r3, [r3, #20]
   d6b8c:	4798      	blx	r3
   d6b8e:	f805 0f01 	strb.w	r0, [r5, #1]!
  Wire.beginTransmission(_address);
  Wire.write((uint8_t)reg);
  Wire.endTransmission();
  Wire.requestFrom(_address, (byte)len);

  for (uint8_t i = 0; i < len; i++)
   d6b92:	e7f5      	b.n	d6b80 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x3a>
      buffer[i] = Wire.read();
  }

  /* ToDo: Check for errors! */
  return true;
}
   d6b94:	2001      	movs	r0, #1
   d6b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
   d6b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6b9a:	460d      	mov	r5, r1
   d6b9c:	4617      	mov	r7, r2
template <uint8_t N> class Vector
{
public:
    Vector()
    {
        memset(p_vec, 0, sizeof(double)*N);
   d6b9e:	2100      	movs	r1, #0
   d6ba0:	2218      	movs	r2, #24
   d6ba2:	4604      	mov	r4, r0
   d6ba4:	f003 f931 	bl	d9e0a <memset>
  imu::Vector<3> xyz;
  uint8_t buffer[6];
  memset (buffer, 0, 6);
   d6ba8:	2300      	movs	r3, #0
   d6baa:	9300      	str	r3, [sp, #0]
   d6bac:	f8ad 3004 	strh.w	r3, [sp, #4]

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6bb0:	4628      	mov	r0, r5
   d6bb2:	2306      	movs	r3, #6
   d6bb4:	466a      	mov	r2, sp
   d6bb6:	4639      	mov	r1, r7
   d6bb8:	f7ff ffc5 	bl	d6b46 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6bbc:	f89d 3000 	ldrb.w	r3, [sp]
   d6bc0:	f89d 0001 	ldrb.w	r0, [sp, #1]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6bc4:	f89d 6003 	ldrb.w	r6, [sp, #3]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bc8:	f89d 5005 	ldrb.w	r5, [sp, #5]
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6bcc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6bd0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d6bd4:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bd8:	f89d 3004 	ldrb.w	r3, [sp, #4]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
   d6bdc:	2f14      	cmp	r7, #20
  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6bde:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6be2:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6be4:	b236      	sxth	r6, r6
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6be6:	b22d      	sxth	r5, r5

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
   d6be8:	d023      	beq.n	d6c32 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9a>
   d6bea:	d803      	bhi.n	d6bf4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5c>
   d6bec:	2f08      	cmp	r7, #8
   d6bee:	d037      	beq.n	d6c60 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d6bf0:	2f0e      	cmp	r7, #14
   d6bf2:	e004      	b.n	d6bfe <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6bf4:	2f28      	cmp	r7, #40	; 0x28
   d6bf6:	d033      	beq.n	d6c60 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d6bf8:	2f2e      	cmp	r7, #46	; 0x2e
   d6bfa:	d031      	beq.n	d6c60 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d6bfc:	2f1a      	cmp	r7, #26
   d6bfe:	d149      	bne.n	d6c94 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xfc>
      xyz[1] = ((double)y)/900.0;
      xyz[2] = ((double)z)/900.0;
      break;
    case VECTOR_EULER:
      /* 1 degree = 16 LSB */
      xyz[0] = ((double)x)/16.0;
   d6c00:	f002 fc08 	bl	d9414 <__aeabi_i2d>
   d6c04:	2200      	movs	r2, #0
   d6c06:	4b25      	ldr	r3, [pc, #148]	; (d6c9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d6c08:	f002 fc6a 	bl	d94e0 <__aeabi_dmul>
   d6c0c:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/16.0;
   d6c10:	4630      	mov	r0, r6
   d6c12:	f002 fbff 	bl	d9414 <__aeabi_i2d>
   d6c16:	2200      	movs	r2, #0
   d6c18:	4b20      	ldr	r3, [pc, #128]	; (d6c9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d6c1a:	f002 fc61 	bl	d94e0 <__aeabi_dmul>
   d6c1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/16.0;
   d6c22:	4628      	mov	r0, r5
   d6c24:	f002 fbf6 	bl	d9414 <__aeabi_i2d>
   d6c28:	2200      	movs	r2, #0
   d6c2a:	4b1c      	ldr	r3, [pc, #112]	; (d6c9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d6c2c:	f002 fc58 	bl	d94e0 <__aeabi_dmul>
   d6c30:	e02e      	b.n	d6c90 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xf8>
      xyz[1] = ((double)y)/16.0;
      xyz[2] = ((double)z)/16.0;
      break;
    case VECTOR_GYROSCOPE:
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
   d6c32:	f002 fbef 	bl	d9414 <__aeabi_i2d>
   d6c36:	2200      	movs	r2, #0
   d6c38:	4b19      	ldr	r3, [pc, #100]	; (d6ca0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d6c3a:	f002 fd7b 	bl	d9734 <__aeabi_ddiv>
   d6c3e:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/900.0;
   d6c42:	4630      	mov	r0, r6
   d6c44:	f002 fbe6 	bl	d9414 <__aeabi_i2d>
   d6c48:	2200      	movs	r2, #0
   d6c4a:	4b15      	ldr	r3, [pc, #84]	; (d6ca0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d6c4c:	f002 fd72 	bl	d9734 <__aeabi_ddiv>
   d6c50:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/900.0;
   d6c54:	4628      	mov	r0, r5
   d6c56:	f002 fbdd 	bl	d9414 <__aeabi_i2d>
   d6c5a:	2200      	movs	r2, #0
   d6c5c:	4b10      	ldr	r3, [pc, #64]	; (d6ca0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d6c5e:	e015      	b.n	d6c8c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xf4>
      break;
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
   d6c60:	f002 fbd8 	bl	d9414 <__aeabi_i2d>
   d6c64:	2200      	movs	r2, #0
   d6c66:	4b0f      	ldr	r3, [pc, #60]	; (d6ca4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6c68:	f002 fd64 	bl	d9734 <__aeabi_ddiv>
   d6c6c:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/100.0;
   d6c70:	4630      	mov	r0, r6
   d6c72:	f002 fbcf 	bl	d9414 <__aeabi_i2d>
   d6c76:	2200      	movs	r2, #0
   d6c78:	4b0a      	ldr	r3, [pc, #40]	; (d6ca4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6c7a:	f002 fd5b 	bl	d9734 <__aeabi_ddiv>
   d6c7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/100.0;
   d6c82:	4628      	mov	r0, r5
   d6c84:	f002 fbc6 	bl	d9414 <__aeabi_i2d>
   d6c88:	4b06      	ldr	r3, [pc, #24]	; (d6ca4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6c8a:	2200      	movs	r2, #0
   d6c8c:	f002 fd52 	bl	d9734 <__aeabi_ddiv>
   d6c90:	e9c4 0104 	strd	r0, r1, [r4, #16]
      break;
  }

  return xyz;
}
   d6c94:	4620      	mov	r0, r4
   d6c96:	b003      	add	sp, #12
   d6c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c9a:	bf00      	nop
   d6c9c:	3fb00000 	.word	0x3fb00000
   d6ca0:	408c2000 	.word	0x408c2000
   d6ca4:	40590000 	.word	0x40590000

000d6ca8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
   d6ca8:	b570      	push	{r4, r5, r6, lr}
   d6caa:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6cac:	2624      	movs	r6, #36	; 0x24
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
   d6cae:	b086      	sub	sp, #24
   d6cb0:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6cb2:	4632      	mov	r2, r6
   d6cb4:	2100      	movs	r1, #0
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	f003 f8a7 	bl	d9e0a <memset>

  event->version   = sizeof(sensors_event_t);
   d6cbc:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
   d6cbe:	68ab      	ldr	r3, [r5, #8]
   d6cc0:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
   d6cc2:	2303      	movs	r3, #3
   d6cc4:	60a3      	str	r3, [r4, #8]
   d6cc6:	f000 fa79 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6cca:	221a      	movs	r2, #26
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_ORIENTATION;
  event->timestamp = millis();
   d6ccc:	6120      	str	r0, [r4, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6cce:	4629      	mov	r1, r5
   d6cd0:	4668      	mov	r0, sp
   d6cd2:	f7ff ff61 	bl	d6b98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6cda:	f002 fef9 	bl	d9ad0 <__aeabi_d2f>
   d6cde:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6ce4:	f002 fef4 	bl	d9ad0 <__aeabi_d2f>
   d6ce8:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6cee:	f002 feef 	bl	d9ad0 <__aeabi_d2f>
   d6cf2:	61e0      	str	r0, [r4, #28]

  return true;
}
   d6cf4:	2001      	movs	r0, #1
   d6cf6:	b006      	add	sp, #24
   d6cf8:	bd70      	pop	{r4, r5, r6, pc}

000d6cfa <_GLOBAL__sub_I__ZN15Adafruit_BNO055C2Elh>:
   d6cfa:	f000 ba8f 	b.w	d721c <HAL_Pin_Map>

000d6cfe <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d6cfe:	f000 ba8d 	b.w	d721c <HAL_Pin_Map>
	...

000d6d04 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d6d04:	b508      	push	{r3, lr}
   d6d06:	f000 fa89 	bl	d721c <HAL_Pin_Map>
   d6d0a:	4b01      	ldr	r3, [pc, #4]	; (d6d10 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d6d0c:	6018      	str	r0, [r3, #0]
   d6d0e:	bd08      	pop	{r3, pc}
   d6d10:	2003e3f0 	.word	0x2003e3f0

000d6d14 <_ZN8I2CSlaveD1Ev>:
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
	globalObj = this;
}

I2CSlave::~I2CSlave() {
   d6d14:	b510      	push	{r4, lr}
   d6d16:	4b05      	ldr	r3, [pc, #20]	; (d6d2c <_ZN8I2CSlaveD1Ev+0x18>)
   d6d18:	6003      	str	r3, [r0, #0]
   d6d1a:	4604      	mov	r4, r0
	free(registers);
   d6d1c:	6900      	ldr	r0, [r0, #16]
   d6d1e:	f000 fbc3 	bl	d74a8 <free>
	globalObj = 0;
   d6d22:	4b03      	ldr	r3, [pc, #12]	; (d6d30 <_ZN8I2CSlaveD1Ev+0x1c>)
   d6d24:	2200      	movs	r2, #0
   d6d26:	601a      	str	r2, [r3, #0]
}
   d6d28:	4620      	mov	r0, r4
   d6d2a:	bd10      	pop	{r4, pc}
   d6d2c:	000dadfc 	.word	0x000dadfc
   d6d30:	2003e3f4 	.word	0x2003e3f4

000d6d34 <_ZN8I2CSlaveD0Ev>:
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
	globalObj = this;
}

I2CSlave::~I2CSlave() {
   d6d34:	b510      	push	{r4, lr}
   d6d36:	4604      	mov	r4, r0
	free(registers);
	globalObj = 0;
}
   d6d38:	f7ff ffec 	bl	d6d14 <_ZN8I2CSlaveD1Ev>
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	211c      	movs	r1, #28
   d6d40:	f002 f826 	bl	d8d90 <_ZdlPvj>
   d6d44:	4620      	mov	r0, r4
   d6d46:	bd10      	pop	{r4, pc}

000d6d48 <_ZN8I2CSlaveC1ER7TwoWirehj>:
#include "Particle.h"
#include "I2CSlaveRK.h"

static I2CSlave *globalObj = 0;

I2CSlave::I2CSlave(TwoWire &wire, uint8_t addr, size_t numRegisters) :
   d6d48:	b510      	push	{r4, lr}
   d6d4a:	4604      	mov	r4, r0
		wire(wire), addr(addr), numRegisters(numRegisters),
		nextReadAddr(0), registerSetFlags(0) {
   d6d4c:	4807      	ldr	r0, [pc, #28]	; (d6d6c <_ZN8I2CSlaveC1ER7TwoWirehj+0x24>)
   d6d4e:	7222      	strb	r2, [r4, #8]
   d6d50:	2200      	movs	r2, #0
   d6d52:	e884 0003 	stmia.w	r4, {r0, r1}
   d6d56:	60e3      	str	r3, [r4, #12]
   d6d58:	82a2      	strh	r2, [r4, #20]
   d6d5a:	61a2      	str	r2, [r4, #24]
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d6d5c:	0098      	lsls	r0, r3, #2
   d6d5e:	f000 fb9b 	bl	d7498 <malloc>
	globalObj = this;
   d6d62:	4b03      	ldr	r3, [pc, #12]	; (d6d70 <_ZN8I2CSlaveC1ER7TwoWirehj+0x28>)
static I2CSlave *globalObj = 0;

I2CSlave::I2CSlave(TwoWire &wire, uint8_t addr, size_t numRegisters) :
		wire(wire), addr(addr), numRegisters(numRegisters),
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d6d64:	6120      	str	r0, [r4, #16]
	globalObj = this;
   d6d66:	601c      	str	r4, [r3, #0]
}
   d6d68:	4620      	mov	r0, r4
   d6d6a:	bd10      	pop	{r4, pc}
   d6d6c:	000dadfc 	.word	0x000dadfc
   d6d70:	2003e3f4 	.word	0x2003e3f4

000d6d74 <_ZN8I2CSlave5beginEv>:
I2CSlave::~I2CSlave() {
	free(registers);
	globalObj = 0;
}

void I2CSlave::begin() {
   d6d74:	b510      	push	{r4, lr}
   d6d76:	4604      	mov	r4, r0

	wire.begin(addr);
   d6d78:	7a01      	ldrb	r1, [r0, #8]
   d6d7a:	6840      	ldr	r0, [r0, #4]
   d6d7c:	f001 f88c 	bl	d7e98 <_ZN7TwoWire5beginEh>
	wire.onReceive(receiveEventStatic);
   d6d80:	6860      	ldr	r0, [r4, #4]
   d6d82:	4904      	ldr	r1, [pc, #16]	; (d6d94 <_ZN8I2CSlave5beginEv+0x20>)
   d6d84:	f001 f8ca 	bl	d7f1c <_ZN7TwoWire9onReceiveEPFviE>
	wire.onRequest(requestEventStatic);
   d6d88:	6860      	ldr	r0, [r4, #4]
   d6d8a:	4903      	ldr	r1, [pc, #12]	; (d6d98 <_ZN8I2CSlave5beginEv+0x24>)
}
   d6d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void I2CSlave::begin() {

	wire.begin(addr);
	wire.onReceive(receiveEventStatic);
	wire.onRequest(requestEventStatic);
   d6d90:	f001 b8c8 	b.w	d7f24 <_ZN7TwoWire9onRequestEPFvvE>
   d6d94:	000d6e91 	.word	0x000d6e91
   d6d98:	000d6ed1 	.word	0x000d6ed1

000d6d9c <_ZNK8I2CSlave11getRegisterEt>:
}

uint32_t I2CSlave::getRegister(uint16_t regAddr) const {
	if (regAddr < numRegisters) {
   d6d9c:	68c3      	ldr	r3, [r0, #12]
   d6d9e:	4299      	cmp	r1, r3
		return registers[regAddr];
   d6da0:	bf3a      	itte	cc
   d6da2:	6903      	ldrcc	r3, [r0, #16]
   d6da4:	f853 0021 	ldrcc.w	r0, [r3, r1, lsl #2]
	}
	else {
		return 0;
   d6da8:	2000      	movcs	r0, #0
	}
}
   d6daa:	4770      	bx	lr

000d6dac <_ZN8I2CSlave11setRegisterEtm>:

void I2CSlave::setRegister(uint16_t regAddr, uint32_t value) {
	if (regAddr < numRegisters) {
   d6dac:	68c3      	ldr	r3, [r0, #12]
   d6dae:	4299      	cmp	r1, r3
		registers[regAddr] = value;
   d6db0:	bf3c      	itt	cc
   d6db2:	6903      	ldrcc	r3, [r0, #16]
   d6db4:	f843 2021 	strcc.w	r2, [r3, r1, lsl #2]
   d6db8:	4770      	bx	lr

000d6dba <_ZN8I2CSlave14getRegisterSetERt>:
	}
}

bool I2CSlave::getRegisterSet(uint16_t &regAddr) {
   d6dba:	b570      	push	{r4, r5, r6, lr}
	if (registerSetFlags) {
   d6dbc:	6983      	ldr	r3, [r0, #24]
   d6dbe:	b18b      	cbz	r3, d6de4 <_ZN8I2CSlave14getRegisterSetERt+0x2a>
   d6dc0:	2200      	movs	r2, #0
		for(uint16_t ii = 0; ii < 32; ii++) {
			if (registerSetFlags & (1 << ii)) {
   d6dc2:	2501      	movs	r5, #1
   d6dc4:	6983      	ldr	r3, [r0, #24]
   d6dc6:	fa05 f402 	lsl.w	r4, r5, r2
   d6dca:	4023      	ands	r3, r4
   d6dcc:	b296      	uxth	r6, r2
   d6dce:	d006      	beq.n	d6dde <_ZN8I2CSlave14getRegisterSetERt+0x24>
				// Bit is set, return the address and clear the flag
				regAddr = ii;
   d6dd0:	800e      	strh	r6, [r1, #0]
				registerSetFlags &= ~(1 << ii);
   d6dd2:	6983      	ldr	r3, [r0, #24]
   d6dd4:	ea23 0304 	bic.w	r3, r3, r4
   d6dd8:	6183      	str	r3, [r0, #24]
				return true;
   d6dda:	2001      	movs	r0, #1
   d6ddc:	bd70      	pop	{r4, r5, r6, pc}
   d6dde:	3201      	adds	r2, #1
	}
}

bool I2CSlave::getRegisterSet(uint16_t &regAddr) {
	if (registerSetFlags) {
		for(uint16_t ii = 0; ii < 32; ii++) {
   d6de0:	2a20      	cmp	r2, #32
   d6de2:	d1ef      	bne.n	d6dc4 <_ZN8I2CSlave14getRegisterSetERt+0xa>
			}
		}
		return false;
	}
	else {
		return false;
   d6de4:	4618      	mov	r0, r3
	}
}
   d6de6:	bd70      	pop	{r4, r5, r6, pc}

000d6de8 <_ZN8I2CSlave12receiveEventEi>:


void I2CSlave::receiveEvent(int numBytes) {

	if (numBytes == sizeof(uint16_t)) {
   d6de8:	2902      	cmp	r1, #2
		return false;
	}
}


void I2CSlave::receiveEvent(int numBytes) {
   d6dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6dee:	4604      	mov	r4, r0

	if (numBytes == sizeof(uint16_t)) {
   d6df0:	d10f      	bne.n	d6e12 <_ZN8I2CSlave12receiveEventEi+0x2a>
		// This is just an  address to read the register. Save for requestEvent.
		nextReadAddr = (wire.read() & 0xff);
   d6df2:	6840      	ldr	r0, [r0, #4]
   d6df4:	6803      	ldr	r3, [r0, #0]
   d6df6:	695b      	ldr	r3, [r3, #20]
   d6df8:	4798      	blx	r3
   d6dfa:	b2c0      	uxtb	r0, r0
   d6dfc:	82a0      	strh	r0, [r4, #20]
		nextReadAddr |= (wire.read() & 0xff) << 8;
   d6dfe:	6860      	ldr	r0, [r4, #4]
   d6e00:	6803      	ldr	r3, [r0, #0]
   d6e02:	695b      	ldr	r3, [r3, #20]
   d6e04:	4798      	blx	r3
   d6e06:	8aa3      	ldrh	r3, [r4, #20]
   d6e08:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d6e0c:	82a0      	strh	r0, [r4, #20]
   d6e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	if (numBytes == (sizeof(uint16_t) + sizeof(uint32_t))) {
   d6e12:	2906      	cmp	r1, #6
   d6e14:	d139      	bne.n	d6e8a <_ZN8I2CSlave12receiveEventEi+0xa2>
		// Set a register
		uint16_t writeAddr = (wire.read() & 0xff);
   d6e16:	6840      	ldr	r0, [r0, #4]
   d6e18:	6803      	ldr	r3, [r0, #0]
   d6e1a:	695b      	ldr	r3, [r3, #20]
   d6e1c:	4798      	blx	r3
   d6e1e:	4605      	mov	r5, r0
		writeAddr |= (wire.read() & 0xff) << 8;
   d6e20:	6860      	ldr	r0, [r4, #4]
   d6e22:	6803      	ldr	r3, [r0, #0]
   d6e24:	695b      	ldr	r3, [r3, #20]
   d6e26:	4798      	blx	r3
   d6e28:	b2ed      	uxtb	r5, r5
   d6e2a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   d6e2e:	b285      	uxth	r5, r0

		uint32_t value = (wire.read() & 0xff);
   d6e30:	6860      	ldr	r0, [r4, #4]
   d6e32:	6803      	ldr	r3, [r0, #0]
   d6e34:	695b      	ldr	r3, [r3, #20]
   d6e36:	4798      	blx	r3
   d6e38:	4680      	mov	r8, r0
		value |= (wire.read() & 0xff) << 8;
   d6e3a:	6860      	ldr	r0, [r4, #4]
   d6e3c:	6803      	ldr	r3, [r0, #0]
   d6e3e:	695b      	ldr	r3, [r3, #20]
   d6e40:	4798      	blx	r3
   d6e42:	4606      	mov	r6, r0
		value |= (wire.read() & 0xff) << 16;
   d6e44:	6860      	ldr	r0, [r4, #4]
   d6e46:	6803      	ldr	r3, [r0, #0]
   d6e48:	695b      	ldr	r3, [r3, #20]
   d6e4a:	4798      	blx	r3
   d6e4c:	4607      	mov	r7, r0
		value |= (wire.read() & 0xff) << 24;
   d6e4e:	6860      	ldr	r0, [r4, #4]
   d6e50:	6803      	ldr	r3, [r0, #0]
   d6e52:	695b      	ldr	r3, [r3, #20]
   d6e54:	4798      	blx	r3

		if (writeAddr < numRegisters) {
   d6e56:	68e3      	ldr	r3, [r4, #12]
   d6e58:	429d      	cmp	r5, r3
   d6e5a:	d216      	bcs.n	d6e8a <_ZN8I2CSlave12receiveEventEi+0xa2>
   d6e5c:	fa5f f888 	uxtb.w	r8, r8
   d6e60:	0236      	lsls	r6, r6, #8
   d6e62:	ea48 6000 	orr.w	r0, r8, r0, lsl #24
   d6e66:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   d6e6a:	4306      	orrs	r6, r0
			registers[writeAddr] = value;
   d6e6c:	0438      	lsls	r0, r7, #16
   d6e6e:	6923      	ldr	r3, [r4, #16]
   d6e70:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   d6e74:	4330      	orrs	r0, r6

			if (writeAddr < 32) {
   d6e76:	2d1f      	cmp	r5, #31
		value |= (wire.read() & 0xff) << 8;
		value |= (wire.read() & 0xff) << 16;
		value |= (wire.read() & 0xff) << 24;

		if (writeAddr < numRegisters) {
			registers[writeAddr] = value;
   d6e78:	f843 0025 	str.w	r0, [r3, r5, lsl #2]

			if (writeAddr < 32) {
   d6e7c:	d805      	bhi.n	d6e8a <_ZN8I2CSlave12receiveEventEi+0xa2>
				registerSetFlags |= 1 << writeAddr;
   d6e7e:	69a3      	ldr	r3, [r4, #24]
   d6e80:	2001      	movs	r0, #1
   d6e82:	fa00 f505 	lsl.w	r5, r0, r5
   d6e86:	431d      	orrs	r5, r3
   d6e88:	61a5      	str	r5, [r4, #24]
   d6e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6e90 <_ZN8I2CSlave18receiveEventStaticEi>:
	wire.write((const uint8_t *)&value, sizeof(value));
}

// [static]
void I2CSlave::receiveEventStatic(int numBytes) {
	if (globalObj) {
   d6e90:	4b03      	ldr	r3, [pc, #12]	; (d6ea0 <_ZN8I2CSlave18receiveEventStaticEi+0x10>)
	}
	wire.write((const uint8_t *)&value, sizeof(value));
}

// [static]
void I2CSlave::receiveEventStatic(int numBytes) {
   d6e92:	4601      	mov	r1, r0
	if (globalObj) {
   d6e94:	6818      	ldr	r0, [r3, #0]
   d6e96:	b108      	cbz	r0, d6e9c <_ZN8I2CSlave18receiveEventStaticEi+0xc>
		globalObj->receiveEvent(numBytes);
   d6e98:	f7ff bfa6 	b.w	d6de8 <_ZN8I2CSlave12receiveEventEi>
   d6e9c:	4770      	bx	lr
   d6e9e:	bf00      	nop
   d6ea0:	2003e3f4 	.word	0x2003e3f4

000d6ea4 <_ZN8I2CSlave12requestEventEv>:
		}
	}

}

void I2CSlave::requestEvent() {
   d6ea4:	b507      	push	{r0, r1, r2, lr}
	// Request to read
	uint32_t value = 0;
   d6ea6:	2300      	movs	r3, #0
   d6ea8:	9301      	str	r3, [sp, #4]

	if (nextReadAddr < numRegisters) {
   d6eaa:	68c2      	ldr	r2, [r0, #12]
   d6eac:	8a83      	ldrh	r3, [r0, #20]
   d6eae:	4293      	cmp	r3, r2
		value = registers[nextReadAddr];
   d6eb0:	bf38      	it	cc
   d6eb2:	6902      	ldrcc	r2, [r0, #16]
	}
	wire.write((const uint8_t *)&value, sizeof(value));
   d6eb4:	6840      	ldr	r0, [r0, #4]
void I2CSlave::requestEvent() {
	// Request to read
	uint32_t value = 0;

	if (nextReadAddr < numRegisters) {
		value = registers[nextReadAddr];
   d6eb6:	bf3c      	itt	cc
   d6eb8:	f852 3023 	ldrcc.w	r3, [r2, r3, lsl #2]
   d6ebc:	9301      	strcc	r3, [sp, #4]
	}
	wire.write((const uint8_t *)&value, sizeof(value));
   d6ebe:	6803      	ldr	r3, [r0, #0]
   d6ec0:	2204      	movs	r2, #4
   d6ec2:	68db      	ldr	r3, [r3, #12]
   d6ec4:	eb0d 0102 	add.w	r1, sp, r2
   d6ec8:	4798      	blx	r3
}
   d6eca:	b003      	add	sp, #12
   d6ecc:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ed0 <_ZN8I2CSlave18requestEventStaticEv>:
	}
}

// [static]
void I2CSlave::requestEventStatic() {
	if (globalObj) {
   d6ed0:	4b02      	ldr	r3, [pc, #8]	; (d6edc <_ZN8I2CSlave18requestEventStaticEv+0xc>)
   d6ed2:	6818      	ldr	r0, [r3, #0]
   d6ed4:	b108      	cbz	r0, d6eda <_ZN8I2CSlave18requestEventStaticEv+0xa>
		globalObj->requestEvent();
   d6ed6:	f7ff bfe5 	b.w	d6ea4 <_ZN8I2CSlave12requestEventEv>
   d6eda:	4770      	bx	lr
   d6edc:	2003e3f4 	.word	0x2003e3f4

000d6ee0 <_GLOBAL__sub_I__ZN8I2CSlaveC2ER7TwoWirehj>:
   d6ee0:	f000 b99c 	b.w	d721c <HAL_Pin_Map>

000d6ee4 <_GLOBAL__sub_I__ZN14I2CSlaveMasterC2ER7TwoWireh>:
   d6ee4:	f000 b99a 	b.w	d721c <HAL_Pin_Map>

000d6ee8 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
   d6ee8:	f000 b998 	b.w	d721c <HAL_Pin_Map>

000d6eec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <HAL_USB_USART_Init+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	681b      	ldr	r3, [r3, #0]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	0003024c 	.word	0x0003024c

000d6efc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <HAL_USB_USART_Begin+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	685b      	ldr	r3, [r3, #4]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	0003024c 	.word	0x0003024c

000d6f0c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <HAL_USB_USART_Available_Data+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	691b      	ldr	r3, [r3, #16]
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	0003024c 	.word	0x0003024c

000d6f1c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	695b      	ldr	r3, [r3, #20]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	0003024c 	.word	0x0003024c

000d6f2c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <HAL_USB_USART_Receive_Data+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	699b      	ldr	r3, [r3, #24]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	0003024c 	.word	0x0003024c

000d6f3c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <HAL_USB_USART_Send_Data+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	69db      	ldr	r3, [r3, #28]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	0003024c 	.word	0x0003024c

000d6f4c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <HAL_USB_USART_Flush_Data+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	6a1b      	ldr	r3, [r3, #32]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	0003024c 	.word	0x0003024c

000d6f5c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <sock_setsockopt+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	699b      	ldr	r3, [r3, #24]
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030238 	.word	0x00030238

000d6f6c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <sock_close+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	69db      	ldr	r3, [r3, #28]
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030238 	.word	0x00030238

000d6f7c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <sock_connect+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6a1b      	ldr	r3, [r3, #32]
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030238 	.word	0x00030238

000d6f8c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <sock_recv+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030238 	.word	0x00030238

000d6f9c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <sock_send+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030238 	.word	0x00030238

000d6fac <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <sock_socket+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030238 	.word	0x00030238

000d6fbc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <HAL_I2C_Begin+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	68db      	ldr	r3, [r3, #12]
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030228 	.word	0x00030228

000d6fcc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <HAL_I2C_Begin_Transmission+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	699b      	ldr	r3, [r3, #24]
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030228 	.word	0x00030228

000d6fdc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <HAL_I2C_End_Transmission+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	69db      	ldr	r3, [r3, #28]
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030228 	.word	0x00030228

000d6fec <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <HAL_I2C_Write_Data+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	6a1b      	ldr	r3, [r3, #32]
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	00030228 	.word	0x00030228

000d6ffc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <HAL_I2C_Available_Data+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	00030228 	.word	0x00030228

000d700c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <HAL_I2C_Read_Data+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	00030228 	.word	0x00030228

000d701c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <HAL_I2C_Peek_Data+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	00030228 	.word	0x00030228

000d702c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <HAL_I2C_Flush_Data+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	00030228 	.word	0x00030228

000d703c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <HAL_I2C_Is_Enabled+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	00030228 	.word	0x00030228

000d704c <HAL_I2C_Set_Callback_On_Receive>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
   d704c:	b508      	push	{r3, lr}
   d704e:	4b02      	ldr	r3, [pc, #8]	; (d7058 <HAL_I2C_Set_Callback_On_Receive+0xc>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7054:	9301      	str	r3, [sp, #4]
   d7056:	bd08      	pop	{r3, pc}
   d7058:	00030228 	.word	0x00030228

000d705c <HAL_I2C_Set_Callback_On_Request>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
   d705c:	b508      	push	{r3, lr}
   d705e:	4b02      	ldr	r3, [pc, #8]	; (d7068 <HAL_I2C_Set_Callback_On_Request+0xc>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	bd08      	pop	{r3, pc}
   d7068:	00030228 	.word	0x00030228

000d706c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d706c:	b508      	push	{r3, lr}
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <HAL_I2C_Init+0xc>)
   d7070:	681b      	ldr	r3, [r3, #0]
   d7072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7074:	9301      	str	r3, [sp, #4]
   d7076:	bd08      	pop	{r3, pc}
   d7078:	00030228 	.word	0x00030228

000d707c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d707c:	b508      	push	{r3, lr}
   d707e:	4b02      	ldr	r3, [pc, #8]	; (d7088 <HAL_I2C_Request_Data_Ex+0xc>)
   d7080:	681b      	ldr	r3, [r3, #0]
   d7082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	bd08      	pop	{r3, pc}
   d7088:	00030228 	.word	0x00030228

000d708c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d708c:	b508      	push	{r3, lr}
   d708e:	4b02      	ldr	r3, [pc, #8]	; (d7098 <HAL_USART_Init+0xc>)
   d7090:	681b      	ldr	r3, [r3, #0]
   d7092:	681b      	ldr	r3, [r3, #0]
   d7094:	9301      	str	r3, [sp, #4]
   d7096:	bd08      	pop	{r3, pc}
   d7098:	0003023c 	.word	0x0003023c

000d709c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d709c:	b508      	push	{r3, lr}
   d709e:	4b02      	ldr	r3, [pc, #8]	; (d70a8 <HAL_USART_Write_Data+0xc>)
   d70a0:	681b      	ldr	r3, [r3, #0]
   d70a2:	68db      	ldr	r3, [r3, #12]
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	bd08      	pop	{r3, pc}
   d70a8:	0003023c 	.word	0x0003023c

000d70ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d70ac:	b508      	push	{r3, lr}
   d70ae:	4b02      	ldr	r3, [pc, #8]	; (d70b8 <HAL_USART_Available_Data+0xc>)
   d70b0:	681b      	ldr	r3, [r3, #0]
   d70b2:	691b      	ldr	r3, [r3, #16]
   d70b4:	9301      	str	r3, [sp, #4]
   d70b6:	bd08      	pop	{r3, pc}
   d70b8:	0003023c 	.word	0x0003023c

000d70bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d70bc:	b508      	push	{r3, lr}
   d70be:	4b02      	ldr	r3, [pc, #8]	; (d70c8 <HAL_USART_Read_Data+0xc>)
   d70c0:	681b      	ldr	r3, [r3, #0]
   d70c2:	695b      	ldr	r3, [r3, #20]
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	bd08      	pop	{r3, pc}
   d70c8:	0003023c 	.word	0x0003023c

000d70cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d70cc:	b508      	push	{r3, lr}
   d70ce:	4b02      	ldr	r3, [pc, #8]	; (d70d8 <HAL_USART_Peek_Data+0xc>)
   d70d0:	681b      	ldr	r3, [r3, #0]
   d70d2:	699b      	ldr	r3, [r3, #24]
   d70d4:	9301      	str	r3, [sp, #4]
   d70d6:	bd08      	pop	{r3, pc}
   d70d8:	0003023c 	.word	0x0003023c

000d70dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d70dc:	b508      	push	{r3, lr}
   d70de:	4b02      	ldr	r3, [pc, #8]	; (d70e8 <HAL_USART_Flush_Data+0xc>)
   d70e0:	681b      	ldr	r3, [r3, #0]
   d70e2:	69db      	ldr	r3, [r3, #28]
   d70e4:	9301      	str	r3, [sp, #4]
   d70e6:	bd08      	pop	{r3, pc}
   d70e8:	0003023c 	.word	0x0003023c

000d70ec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d70ec:	b508      	push	{r3, lr}
   d70ee:	4b02      	ldr	r3, [pc, #8]	; (d70f8 <HAL_USART_Is_Enabled+0xc>)
   d70f0:	681b      	ldr	r3, [r3, #0]
   d70f2:	6a1b      	ldr	r3, [r3, #32]
   d70f4:	9301      	str	r3, [sp, #4]
   d70f6:	bd08      	pop	{r3, pc}
   d70f8:	0003023c 	.word	0x0003023c

000d70fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d70fc:	b508      	push	{r3, lr}
   d70fe:	4b02      	ldr	r3, [pc, #8]	; (d7108 <HAL_USART_Available_Data_For_Write+0xc>)
   d7100:	681b      	ldr	r3, [r3, #0]
   d7102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7104:	9301      	str	r3, [sp, #4]
   d7106:	bd08      	pop	{r3, pc}
   d7108:	0003023c 	.word	0x0003023c

000d710c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d710c:	b508      	push	{r3, lr}
   d710e:	4b02      	ldr	r3, [pc, #8]	; (d7118 <HAL_USART_BeginConfig+0xc>)
   d7110:	681b      	ldr	r3, [r3, #0]
   d7112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7114:	9301      	str	r3, [sp, #4]
   d7116:	bd08      	pop	{r3, pc}
   d7118:	0003023c 	.word	0x0003023c

000d711c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d711c:	b508      	push	{r3, lr}
   d711e:	4b02      	ldr	r3, [pc, #8]	; (d7128 <inet_inet_ntop+0xc>)
   d7120:	681b      	ldr	r3, [r3, #0]
   d7122:	695b      	ldr	r3, [r3, #20]
   d7124:	9301      	str	r3, [sp, #4]
   d7126:	bd08      	pop	{r3, pc}
   d7128:	00030264 	.word	0x00030264

000d712c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d712c:	b508      	push	{r3, lr}
   d712e:	4b02      	ldr	r3, [pc, #8]	; (d7138 <inet_htonl+0xc>)
   d7130:	681b      	ldr	r3, [r3, #0]
   d7132:	6a1b      	ldr	r3, [r3, #32]
   d7134:	9301      	str	r3, [sp, #4]
   d7136:	bd08      	pop	{r3, pc}
   d7138:	00030264 	.word	0x00030264

000d713c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d713c:	b508      	push	{r3, lr}
   d713e:	4b02      	ldr	r3, [pc, #8]	; (d7148 <inet_htons+0xc>)
   d7140:	681b      	ldr	r3, [r3, #0]
   d7142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7144:	9301      	str	r3, [sp, #4]
   d7146:	bd08      	pop	{r3, pc}
   d7148:	00030264 	.word	0x00030264

000d714c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d714c:	b508      	push	{r3, lr}
   d714e:	4b02      	ldr	r3, [pc, #8]	; (d7158 <os_thread_is_current+0xc>)
   d7150:	681b      	ldr	r3, [r3, #0]
   d7152:	689b      	ldr	r3, [r3, #8]
   d7154:	9301      	str	r3, [sp, #4]
   d7156:	bd08      	pop	{r3, pc}
   d7158:	00030248 	.word	0x00030248

000d715c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d715c:	b508      	push	{r3, lr}
   d715e:	4b02      	ldr	r3, [pc, #8]	; (d7168 <os_thread_join+0xc>)
   d7160:	681b      	ldr	r3, [r3, #0]
   d7162:	691b      	ldr	r3, [r3, #16]
   d7164:	9301      	str	r3, [sp, #4]
   d7166:	bd08      	pop	{r3, pc}
   d7168:	00030248 	.word	0x00030248

000d716c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d716c:	b508      	push	{r3, lr}
   d716e:	4b02      	ldr	r3, [pc, #8]	; (d7178 <os_thread_cleanup+0xc>)
   d7170:	681b      	ldr	r3, [r3, #0]
   d7172:	695b      	ldr	r3, [r3, #20]
   d7174:	9301      	str	r3, [sp, #4]
   d7176:	bd08      	pop	{r3, pc}
   d7178:	00030248 	.word	0x00030248

000d717c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d717c:	b508      	push	{r3, lr}
   d717e:	4b02      	ldr	r3, [pc, #8]	; (d7188 <os_mutex_recursive_create+0xc>)
   d7180:	681b      	ldr	r3, [r3, #0]
   d7182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7184:	9301      	str	r3, [sp, #4]
   d7186:	bd08      	pop	{r3, pc}
   d7188:	00030248 	.word	0x00030248

000d718c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d718c:	b508      	push	{r3, lr}
   d718e:	4b02      	ldr	r3, [pc, #8]	; (d7198 <os_mutex_recursive_destroy+0xc>)
   d7190:	681b      	ldr	r3, [r3, #0]
   d7192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7194:	9301      	str	r3, [sp, #4]
   d7196:	bd08      	pop	{r3, pc}
   d7198:	00030248 	.word	0x00030248

000d719c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d719c:	b508      	push	{r3, lr}
   d719e:	4b02      	ldr	r3, [pc, #8]	; (d71a8 <HAL_RNG_GetRandomNumber+0xc>)
   d71a0:	681b      	ldr	r3, [r3, #0]
   d71a2:	685b      	ldr	r3, [r3, #4]
   d71a4:	9301      	str	r3, [sp, #4]
   d71a6:	bd08      	pop	{r3, pc}
   d71a8:	00030218 	.word	0x00030218

000d71ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d71ac:	b508      	push	{r3, lr}
   d71ae:	4b02      	ldr	r3, [pc, #8]	; (d71b8 <HAL_Delay_Microseconds+0xc>)
   d71b0:	681b      	ldr	r3, [r3, #0]
   d71b2:	68db      	ldr	r3, [r3, #12]
   d71b4:	9301      	str	r3, [sp, #4]
   d71b6:	bd08      	pop	{r3, pc}
   d71b8:	00030218 	.word	0x00030218

000d71bc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d71bc:	b508      	push	{r3, lr}
   d71be:	4b02      	ldr	r3, [pc, #8]	; (d71c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d71c0:	681b      	ldr	r3, [r3, #0]
   d71c2:	695b      	ldr	r3, [r3, #20]
   d71c4:	9301      	str	r3, [sp, #4]
   d71c6:	bd08      	pop	{r3, pc}
   d71c8:	00030218 	.word	0x00030218

000d71cc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d71cc:	b508      	push	{r3, lr}
   d71ce:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <HAL_RTC_Get_UnixTime+0xc>)
   d71d0:	681b      	ldr	r3, [r3, #0]
   d71d2:	69db      	ldr	r3, [r3, #28]
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	bd08      	pop	{r3, pc}
   d71d8:	00030218 	.word	0x00030218

000d71dc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d71dc:	b508      	push	{r3, lr}
   d71de:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <HAL_RTC_Time_Is_Valid+0xc>)
   d71e0:	681b      	ldr	r3, [r3, #0]
   d71e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	00030218 	.word	0x00030218

000d71ec <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d71ec:	b508      	push	{r3, lr}
   d71ee:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <if_index_to_name+0xc>)
   d71f0:	681b      	ldr	r3, [r3, #0]
   d71f2:	695b      	ldr	r3, [r3, #20]
   d71f4:	9301      	str	r3, [sp, #4]
   d71f6:	bd08      	pop	{r3, pc}
   d71f8:	0003026c 	.word	0x0003026c

000d71fc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4b02      	ldr	r3, [pc, #8]	; (d7208 <HAL_SPI_Init+0xc>)
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	69db      	ldr	r3, [r3, #28]
   d7204:	9301      	str	r3, [sp, #4]
   d7206:	bd08      	pop	{r3, pc}
   d7208:	00030230 	.word	0x00030230

000d720c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d720c:	b508      	push	{r3, lr}
   d720e:	4b02      	ldr	r3, [pc, #8]	; (d7218 <HAL_SPI_Is_Enabled+0xc>)
   d7210:	681b      	ldr	r3, [r3, #0]
   d7212:	6a1b      	ldr	r3, [r3, #32]
   d7214:	9301      	str	r3, [sp, #4]
   d7216:	bd08      	pop	{r3, pc}
   d7218:	00030230 	.word	0x00030230

000d721c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d721c:	b508      	push	{r3, lr}
   d721e:	4b02      	ldr	r3, [pc, #8]	; (d7228 <HAL_Pin_Map+0xc>)
   d7220:	681b      	ldr	r3, [r3, #0]
   d7222:	681b      	ldr	r3, [r3, #0]
   d7224:	9301      	str	r3, [sp, #4]
   d7226:	bd08      	pop	{r3, pc}
   d7228:	0003022c 	.word	0x0003022c

000d722c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d722c:	b508      	push	{r3, lr}
   d722e:	4b02      	ldr	r3, [pc, #8]	; (d7238 <HAL_Pin_Mode+0xc>)
   d7230:	681b      	ldr	r3, [r3, #0]
   d7232:	689b      	ldr	r3, [r3, #8]
   d7234:	9301      	str	r3, [sp, #4]
   d7236:	bd08      	pop	{r3, pc}
   d7238:	0003022c 	.word	0x0003022c

000d723c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d723c:	b508      	push	{r3, lr}
   d723e:	4b02      	ldr	r3, [pc, #8]	; (d7248 <HAL_Get_Pin_Mode+0xc>)
   d7240:	681b      	ldr	r3, [r3, #0]
   d7242:	68db      	ldr	r3, [r3, #12]
   d7244:	9301      	str	r3, [sp, #4]
   d7246:	bd08      	pop	{r3, pc}
   d7248:	0003022c 	.word	0x0003022c

000d724c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d724c:	b508      	push	{r3, lr}
   d724e:	4b02      	ldr	r3, [pc, #8]	; (d7258 <HAL_GPIO_Read+0xc>)
   d7250:	681b      	ldr	r3, [r3, #0]
   d7252:	695b      	ldr	r3, [r3, #20]
   d7254:	9301      	str	r3, [sp, #4]
   d7256:	bd08      	pop	{r3, pc}
   d7258:	0003022c 	.word	0x0003022c

000d725c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d725c:	b508      	push	{r3, lr}
   d725e:	4b02      	ldr	r3, [pc, #8]	; (d7268 <HAL_Interrupts_Attach+0xc>)
   d7260:	681b      	ldr	r3, [r3, #0]
   d7262:	699b      	ldr	r3, [r3, #24]
   d7264:	9301      	str	r3, [sp, #4]
   d7266:	bd08      	pop	{r3, pc}
   d7268:	0003022c 	.word	0x0003022c

000d726c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d726c:	b508      	push	{r3, lr}
   d726e:	4b02      	ldr	r3, [pc, #8]	; (d7278 <HAL_Interrupts_Detach+0xc>)
   d7270:	681b      	ldr	r3, [r3, #0]
   d7272:	69db      	ldr	r3, [r3, #28]
   d7274:	9301      	str	r3, [sp, #4]
   d7276:	bd08      	pop	{r3, pc}
   d7278:	0003022c 	.word	0x0003022c

000d727c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d727c:	b508      	push	{r3, lr}
   d727e:	4b02      	ldr	r3, [pc, #8]	; (d7288 <HAL_Interrupts_Enable_All+0xc>)
   d7280:	681b      	ldr	r3, [r3, #0]
   d7282:	6a1b      	ldr	r3, [r3, #32]
   d7284:	9301      	str	r3, [sp, #4]
   d7286:	bd08      	pop	{r3, pc}
   d7288:	0003022c 	.word	0x0003022c

000d728c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d728c:	b508      	push	{r3, lr}
   d728e:	4b02      	ldr	r3, [pc, #8]	; (d7298 <HAL_Interrupts_Disable_All+0xc>)
   d7290:	681b      	ldr	r3, [r3, #0]
   d7292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7294:	9301      	str	r3, [sp, #4]
   d7296:	bd08      	pop	{r3, pc}
   d7298:	0003022c 	.word	0x0003022c

000d729c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d729c:	b508      	push	{r3, lr}
   d729e:	4b02      	ldr	r3, [pc, #8]	; (d72a8 <netdb_freeaddrinfo+0xc>)
   d72a0:	681b      	ldr	r3, [r3, #0]
   d72a2:	689b      	ldr	r3, [r3, #8]
   d72a4:	9301      	str	r3, [sp, #4]
   d72a6:	bd08      	pop	{r3, pc}
   d72a8:	00030268 	.word	0x00030268

000d72ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d72ac:	b508      	push	{r3, lr}
   d72ae:	4b02      	ldr	r3, [pc, #8]	; (d72b8 <netdb_getaddrinfo+0xc>)
   d72b0:	681b      	ldr	r3, [r3, #0]
   d72b2:	68db      	ldr	r3, [r3, #12]
   d72b4:	9301      	str	r3, [sp, #4]
   d72b6:	bd08      	pop	{r3, pc}
   d72b8:	00030268 	.word	0x00030268

000d72bc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d72bc:	b508      	push	{r3, lr}
   d72be:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <LED_SetSignalingColor+0xc>)
   d72c0:	681b      	ldr	r3, [r3, #0]
   d72c2:	685b      	ldr	r3, [r3, #4]
   d72c4:	9301      	str	r3, [sp, #4]
   d72c6:	bd08      	pop	{r3, pc}
   d72c8:	00030260 	.word	0x00030260

000d72cc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d72cc:	b508      	push	{r3, lr}
   d72ce:	4b02      	ldr	r3, [pc, #8]	; (d72d8 <LED_Signaling_Start+0xc>)
   d72d0:	681b      	ldr	r3, [r3, #0]
   d72d2:	689b      	ldr	r3, [r3, #8]
   d72d4:	9301      	str	r3, [sp, #4]
   d72d6:	bd08      	pop	{r3, pc}
   d72d8:	00030260 	.word	0x00030260

000d72dc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d72dc:	b508      	push	{r3, lr}
   d72de:	4b02      	ldr	r3, [pc, #8]	; (d72e8 <LED_Signaling_Stop+0xc>)
   d72e0:	681b      	ldr	r3, [r3, #0]
   d72e2:	68db      	ldr	r3, [r3, #12]
   d72e4:	9301      	str	r3, [sp, #4]
   d72e6:	bd08      	pop	{r3, pc}
   d72e8:	00030260 	.word	0x00030260

000d72ec <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d72ec:	b508      	push	{r3, lr}
   d72ee:	4b02      	ldr	r3, [pc, #8]	; (d72f8 <LED_RGB_IsOverRidden+0xc>)
   d72f0:	681b      	ldr	r3, [r3, #0]
   d72f2:	699b      	ldr	r3, [r3, #24]
   d72f4:	9301      	str	r3, [sp, #4]
   d72f6:	bd08      	pop	{r3, pc}
   d72f8:	00030260 	.word	0x00030260

000d72fc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d72fc:	b508      	push	{r3, lr}
   d72fe:	4b02      	ldr	r3, [pc, #8]	; (d7308 <LED_On+0xc>)
   d7300:	681b      	ldr	r3, [r3, #0]
   d7302:	69db      	ldr	r3, [r3, #28]
   d7304:	9301      	str	r3, [sp, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	00030260 	.word	0x00030260

000d730c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d730c:	b508      	push	{r3, lr}
   d730e:	4b02      	ldr	r3, [pc, #8]	; (d7318 <panic_+0xc>)
   d7310:	681b      	ldr	r3, [r3, #0]
   d7312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7314:	9301      	str	r3, [sp, #4]
   d7316:	bd08      	pop	{r3, pc}
   d7318:	00030260 	.word	0x00030260

000d731c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b02      	ldr	r3, [pc, #8]	; (d7328 <log_message+0xc>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7324:	9301      	str	r3, [sp, #4]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	00030260 	.word	0x00030260

000d732c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d732c:	b508      	push	{r3, lr}
   d732e:	4b02      	ldr	r3, [pc, #8]	; (d7338 <spark_process+0xc>)
   d7330:	681b      	ldr	r3, [r3, #0]
   d7332:	689b      	ldr	r3, [r3, #8]
   d7334:	9301      	str	r3, [sp, #4]
   d7336:	bd08      	pop	{r3, pc}
   d7338:	00030244 	.word	0x00030244

000d733c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d733c:	b508      	push	{r3, lr}
   d733e:	4b02      	ldr	r3, [pc, #8]	; (d7348 <spark_cloud_flag_connected+0xc>)
   d7340:	681b      	ldr	r3, [r3, #0]
   d7342:	695b      	ldr	r3, [r3, #20]
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	bd08      	pop	{r3, pc}
   d7348:	00030244 	.word	0x00030244

000d734c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d734c:	b508      	push	{r3, lr}
   d734e:	4b02      	ldr	r3, [pc, #8]	; (d7358 <spark_deviceID+0xc>)
   d7350:	681b      	ldr	r3, [r3, #0]
   d7352:	69db      	ldr	r3, [r3, #28]
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	bd08      	pop	{r3, pc}
   d7358:	00030244 	.word	0x00030244

000d735c <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d735c:	b508      	push	{r3, lr}
   d735e:	4b02      	ldr	r3, [pc, #8]	; (d7368 <spark_sync_time_pending+0xc>)
   d7360:	681b      	ldr	r3, [r3, #0]
   d7362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	bd08      	pop	{r3, pc}
   d7368:	00030244 	.word	0x00030244

000d736c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d736c:	b508      	push	{r3, lr}
   d736e:	4b02      	ldr	r3, [pc, #8]	; (d7378 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7370:	681b      	ldr	r3, [r3, #0]
   d7372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	bd08      	pop	{r3, pc}
   d7378:	00030244 	.word	0x00030244

000d737c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d737c:	b508      	push	{r3, lr}
   d737e:	4b02      	ldr	r3, [pc, #8]	; (d7388 <network_connect+0xc>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	685b      	ldr	r3, [r3, #4]
   d7384:	9301      	str	r3, [sp, #4]
   d7386:	bd08      	pop	{r3, pc}
   d7388:	00030240 	.word	0x00030240

000d738c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d738c:	b508      	push	{r3, lr}
   d738e:	4b02      	ldr	r3, [pc, #8]	; (d7398 <network_connecting+0xc>)
   d7390:	681b      	ldr	r3, [r3, #0]
   d7392:	689b      	ldr	r3, [r3, #8]
   d7394:	9301      	str	r3, [sp, #4]
   d7396:	bd08      	pop	{r3, pc}
   d7398:	00030240 	.word	0x00030240

000d739c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d739c:	b508      	push	{r3, lr}
   d739e:	4b02      	ldr	r3, [pc, #8]	; (d73a8 <network_disconnect+0xc>)
   d73a0:	681b      	ldr	r3, [r3, #0]
   d73a2:	68db      	ldr	r3, [r3, #12]
   d73a4:	9301      	str	r3, [sp, #4]
   d73a6:	bd08      	pop	{r3, pc}
   d73a8:	00030240 	.word	0x00030240

000d73ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d73ac:	b508      	push	{r3, lr}
   d73ae:	4b02      	ldr	r3, [pc, #8]	; (d73b8 <network_ready+0xc>)
   d73b0:	681b      	ldr	r3, [r3, #0]
   d73b2:	691b      	ldr	r3, [r3, #16]
   d73b4:	9301      	str	r3, [sp, #4]
   d73b6:	bd08      	pop	{r3, pc}
   d73b8:	00030240 	.word	0x00030240

000d73bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d73bc:	b508      	push	{r3, lr}
   d73be:	4b02      	ldr	r3, [pc, #8]	; (d73c8 <network_on+0xc>)
   d73c0:	681b      	ldr	r3, [r3, #0]
   d73c2:	695b      	ldr	r3, [r3, #20]
   d73c4:	9301      	str	r3, [sp, #4]
   d73c6:	bd08      	pop	{r3, pc}
   d73c8:	00030240 	.word	0x00030240

000d73cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <network_off+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	699b      	ldr	r3, [r3, #24]
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	00030240 	.word	0x00030240

000d73dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <network_listen+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	69db      	ldr	r3, [r3, #28]
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	00030240 	.word	0x00030240

000d73ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <network_listening+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	6a1b      	ldr	r3, [r3, #32]
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	00030240 	.word	0x00030240

000d73fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <network_set_listen_timeout+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	00030240 	.word	0x00030240

000d740c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <network_get_listen_timeout+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	00030240 	.word	0x00030240

000d741c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <system_mode+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	681b      	ldr	r3, [r3, #0]
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	00030220 	.word	0x00030220

000d742c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <set_system_mode+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	685b      	ldr	r3, [r3, #4]
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	00030220 	.word	0x00030220

000d743c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <system_delay_ms+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	695b      	ldr	r3, [r3, #20]
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	00030220 	.word	0x00030220

000d744c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <system_thread_get_state+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	00030220 	.word	0x00030220

000d745c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b03      	ldr	r3, [pc, #12]	; (d746c <system_ctrl_set_app_request_handler+0x10>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7466:	9301      	str	r3, [sp, #4]
   d7468:	bd08      	pop	{r3, pc}
   d746a:	0000      	.short	0x0000
   d746c:	00030220 	.word	0x00030220

000d7470 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7470:	b508      	push	{r3, lr}
   d7472:	4b03      	ldr	r3, [pc, #12]	; (d7480 <system_ctrl_set_result+0x10>)
   d7474:	681b      	ldr	r3, [r3, #0]
   d7476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d747a:	9301      	str	r3, [sp, #4]
   d747c:	bd08      	pop	{r3, pc}
   d747e:	0000      	.short	0x0000
   d7480:	00030220 	.word	0x00030220

000d7484 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d7484:	b508      	push	{r3, lr}
   d7486:	4b03      	ldr	r3, [pc, #12]	; (d7494 <system_sleep_pins+0x10>)
   d7488:	681b      	ldr	r3, [r3, #0]
   d748a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d748e:	9301      	str	r3, [sp, #4]
   d7490:	bd08      	pop	{r3, pc}
   d7492:	0000      	.short	0x0000
   d7494:	00030220 	.word	0x00030220

000d7498 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7498:	b508      	push	{r3, lr}
   d749a:	4b02      	ldr	r3, [pc, #8]	; (d74a4 <malloc+0xc>)
   d749c:	681b      	ldr	r3, [r3, #0]
   d749e:	681b      	ldr	r3, [r3, #0]
   d74a0:	9301      	str	r3, [sp, #4]
   d74a2:	bd08      	pop	{r3, pc}
   d74a4:	0003021c 	.word	0x0003021c

000d74a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d74a8:	b508      	push	{r3, lr}
   d74aa:	4b02      	ldr	r3, [pc, #8]	; (d74b4 <free+0xc>)
   d74ac:	681b      	ldr	r3, [r3, #0]
   d74ae:	685b      	ldr	r3, [r3, #4]
   d74b0:	9301      	str	r3, [sp, #4]
   d74b2:	bd08      	pop	{r3, pc}
   d74b4:	0003021c 	.word	0x0003021c

000d74b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d74b8:	b508      	push	{r3, lr}
   d74ba:	4b02      	ldr	r3, [pc, #8]	; (d74c4 <realloc+0xc>)
   d74bc:	681b      	ldr	r3, [r3, #0]
   d74be:	689b      	ldr	r3, [r3, #8]
   d74c0:	9301      	str	r3, [sp, #4]
   d74c2:	bd08      	pop	{r3, pc}
   d74c4:	0003021c 	.word	0x0003021c

000d74c8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d74c8:	b508      	push	{r3, lr}
   d74ca:	4b02      	ldr	r3, [pc, #8]	; (d74d4 <siprintf+0xc>)
   d74cc:	681b      	ldr	r3, [r3, #0]
   d74ce:	691b      	ldr	r3, [r3, #16]
   d74d0:	9301      	str	r3, [sp, #4]
   d74d2:	bd08      	pop	{r3, pc}
   d74d4:	0003021c 	.word	0x0003021c

000d74d8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d74d8:	b508      	push	{r3, lr}
   d74da:	4b02      	ldr	r3, [pc, #8]	; (d74e4 <siscanf+0xc>)
   d74dc:	681b      	ldr	r3, [r3, #0]
   d74de:	699b      	ldr	r3, [r3, #24]
   d74e0:	9301      	str	r3, [sp, #4]
   d74e2:	bd08      	pop	{r3, pc}
   d74e4:	0003021c 	.word	0x0003021c

000d74e8 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d74e8:	b508      	push	{r3, lr}
   d74ea:	4b02      	ldr	r3, [pc, #8]	; (d74f4 <vsnprintf+0xc>)
   d74ec:	681b      	ldr	r3, [r3, #0]
   d74ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d74f0:	9301      	str	r3, [sp, #4]
   d74f2:	bd08      	pop	{r3, pc}
   d74f4:	0003021c 	.word	0x0003021c

000d74f8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d74f8:	b508      	push	{r3, lr}
   d74fa:	4b02      	ldr	r3, [pc, #8]	; (d7504 <abort+0xc>)
   d74fc:	681b      	ldr	r3, [r3, #0]
   d74fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7500:	9301      	str	r3, [sp, #4]
   d7502:	bd08      	pop	{r3, pc}
   d7504:	0003021c 	.word	0x0003021c

000d7508 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7508:	b508      	push	{r3, lr}
   d750a:	4b02      	ldr	r3, [pc, #8]	; (d7514 <_malloc_r+0xc>)
   d750c:	681b      	ldr	r3, [r3, #0]
   d750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7510:	9301      	str	r3, [sp, #4]
   d7512:	bd08      	pop	{r3, pc}
   d7514:	0003021c 	.word	0x0003021c

000d7518 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7518:	b508      	push	{r3, lr}
   d751a:	4b02      	ldr	r3, [pc, #8]	; (d7524 <__errno+0xc>)
   d751c:	681b      	ldr	r3, [r3, #0]
   d751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7520:	9301      	str	r3, [sp, #4]
   d7522:	bd08      	pop	{r3, pc}
   d7524:	0003021c 	.word	0x0003021c

000d7528 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7528:	2300      	movs	r3, #0
   d752a:	461a      	mov	r2, r3
   d752c:	6840      	ldr	r0, [r0, #4]
   d752e:	f7ff bf25 	b.w	d737c <network_connect>

000d7532 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7532:	2200      	movs	r2, #0
   d7534:	2102      	movs	r1, #2
   d7536:	6840      	ldr	r0, [r0, #4]
   d7538:	f7ff bf30 	b.w	d739c <network_disconnect>

000d753c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d753c:	2200      	movs	r2, #0
   d753e:	4611      	mov	r1, r2
   d7540:	6840      	ldr	r0, [r0, #4]
   d7542:	f7ff bf23 	b.w	d738c <network_connecting>

000d7546 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7546:	2200      	movs	r2, #0
   d7548:	4611      	mov	r1, r2
   d754a:	6840      	ldr	r0, [r0, #4]
   d754c:	f7ff bf2e 	b.w	d73ac <network_ready>

000d7550 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7550:	2300      	movs	r3, #0
   d7552:	461a      	mov	r2, r3
   d7554:	4619      	mov	r1, r3
   d7556:	6840      	ldr	r0, [r0, #4]
   d7558:	f7ff bf30 	b.w	d73bc <network_on>

000d755c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d755c:	2300      	movs	r3, #0
   d755e:	461a      	mov	r2, r3
   d7560:	4619      	mov	r1, r3
   d7562:	6840      	ldr	r0, [r0, #4]
   d7564:	f7ff bf32 	b.w	d73cc <network_off>

000d7568 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7568:	2200      	movs	r2, #0
   d756a:	f081 0101 	eor.w	r1, r1, #1
   d756e:	6840      	ldr	r0, [r0, #4]
   d7570:	f7ff bf34 	b.w	d73dc <network_listen>

000d7574 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7574:	2200      	movs	r2, #0
   d7576:	6840      	ldr	r0, [r0, #4]
   d7578:	f7ff bf40 	b.w	d73fc <network_set_listen_timeout>

000d757c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d757c:	2200      	movs	r2, #0
   d757e:	4611      	mov	r1, r2
   d7580:	6840      	ldr	r0, [r0, #4]
   d7582:	f7ff bf43 	b.w	d740c <network_get_listen_timeout>

000d7586 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7586:	2200      	movs	r2, #0
   d7588:	4611      	mov	r1, r2
   d758a:	6840      	ldr	r0, [r0, #4]
   d758c:	f7ff bf2e 	b.w	d73ec <network_listening>

000d7590 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7594:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7596:	b095      	sub	sp, #84	; 0x54
   d7598:	4616      	mov	r6, r2
   d759a:	460d      	mov	r5, r1
   d759c:	4607      	mov	r7, r0
    IPAddress addr;
   d759e:	f000 fe2d 	bl	d81fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d75a2:	4621      	mov	r1, r4
   d75a4:	2220      	movs	r2, #32
   d75a6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d75a8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d75aa:	f002 fc2e 	bl	d9e0a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d75ae:	2340      	movs	r3, #64	; 0x40
   d75b0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d75b2:	4621      	mov	r1, r4
   d75b4:	466b      	mov	r3, sp
   d75b6:	aa0c      	add	r2, sp, #48	; 0x30
   d75b8:	4630      	mov	r0, r6
   d75ba:	f7ff fe77 	bl	d72ac <netdb_getaddrinfo>
    if (!r) {
   d75be:	4604      	mov	r4, r0
   d75c0:	2800      	cmp	r0, #0
   d75c2:	d144      	bne.n	d764e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d75c4:	4602      	mov	r2, r0
   d75c6:	2101      	movs	r1, #1
   d75c8:	6868      	ldr	r0, [r5, #4]
   d75ca:	f7ff feef 	bl	d73ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75ce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d75d0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75d2:	4622      	mov	r2, r4
   d75d4:	6868      	ldr	r0, [r5, #4]
   d75d6:	f7ff fee9 	bl	d73ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75da:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75dc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d75de:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75e0:	2e00      	cmp	r6, #0
   d75e2:	d034      	beq.n	d764e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d75e4:	2900      	cmp	r1, #0
   d75e6:	d132      	bne.n	d764e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d75e8:	6873      	ldr	r3, [r6, #4]
   d75ea:	2b02      	cmp	r3, #2
   d75ec:	d002      	beq.n	d75f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d75ee:	2b0a      	cmp	r3, #10
   d75f0:	d009      	beq.n	d7606 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d75f2:	e02a      	b.n	d764a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d75f4:	f1b8 0f00 	cmp.w	r8, #0
   d75f8:	d027      	beq.n	d764a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d75fa:	6971      	ldr	r1, [r6, #20]
   d75fc:	4638      	mov	r0, r7
   d75fe:	3104      	adds	r1, #4
   d7600:	f000 fe3f 	bl	d8282 <_ZN9IPAddressaSEPKh>
   d7604:	e020      	b.n	d7648 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7606:	f1b9 0f00 	cmp.w	r9, #0
   d760a:	d01e      	beq.n	d764a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d760c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d760e:	2211      	movs	r2, #17
   d7610:	a801      	add	r0, sp, #4
   d7612:	f002 fbfa 	bl	d9e0a <memset>
                    a.v = 6;
   d7616:	2306      	movs	r3, #6
   d7618:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d761c:	ad01      	add	r5, sp, #4
   d761e:	f104 0308 	add.w	r3, r4, #8
   d7622:	3418      	adds	r4, #24
   d7624:	6818      	ldr	r0, [r3, #0]
   d7626:	6859      	ldr	r1, [r3, #4]
   d7628:	462a      	mov	r2, r5
   d762a:	c203      	stmia	r2!, {r0, r1}
   d762c:	3308      	adds	r3, #8
   d762e:	42a3      	cmp	r3, r4
   d7630:	4615      	mov	r5, r2
   d7632:	d1f7      	bne.n	d7624 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7634:	a901      	add	r1, sp, #4
   d7636:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7638:	ad07      	add	r5, sp, #28
   d763a:	f000 fded 	bl	d8218 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d763e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7640:	1d3c      	adds	r4, r7, #4
   d7642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7644:	682b      	ldr	r3, [r5, #0]
   d7646:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7648:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d764a:	69f6      	ldr	r6, [r6, #28]
   d764c:	e7c8      	b.n	d75e0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d764e:	9800      	ldr	r0, [sp, #0]
   d7650:	f7ff fe24 	bl	d729c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7654:	4638      	mov	r0, r7
   d7656:	b015      	add	sp, #84	; 0x54
   d7658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d765c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d765c:	4b02      	ldr	r3, [pc, #8]	; (d7668 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d765e:	4a03      	ldr	r2, [pc, #12]	; (d766c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7660:	601a      	str	r2, [r3, #0]
   d7662:	2200      	movs	r2, #0
   d7664:	605a      	str	r2, [r3, #4]
   d7666:	4770      	bx	lr
   d7668:	2003e3f8 	.word	0x2003e3f8
   d766c:	000dae0c 	.word	0x000dae0c

000d7670 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7670:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7672:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7674:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7676:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d767a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d767c:	2201      	movs	r2, #1
   d767e:	f04f 33ff 	mov.w	r3, #4294967295
   d7682:	4621      	mov	r1, r4
   d7684:	47a8      	blx	r5
}
   d7686:	b003      	add	sp, #12
   d7688:	bd30      	pop	{r4, r5, pc}

000d768a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d768a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d768c:	6803      	ldr	r3, [r0, #0]
   d768e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7690:	f04f 33ff 	mov.w	r3, #4294967295
   d7694:	46a4      	mov	ip, r4
}
   d7696:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d769a:	4760      	bx	ip

000d769c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d769c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d769e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d76a0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d76a2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d76a6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d76a8:	4621      	mov	r1, r4
   d76aa:	4613      	mov	r3, r2
   d76ac:	2201      	movs	r2, #1
   d76ae:	47a8      	blx	r5
}
   d76b0:	b003      	add	sp, #12
   d76b2:	bd30      	pop	{r4, r5, pc}

000d76b4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d76b4:	4770      	bx	lr

000d76b6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d76b6:	b538      	push	{r3, r4, r5, lr}
   d76b8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d76ba:	681a      	ldr	r2, [r3, #0]
   d76bc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d76be:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d76c0:	da05      	bge.n	d76ce <_ZN9TCPClient9connectedEv+0x18>
   d76c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d76c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d76ca:	429a      	cmp	r2, r3
   d76cc:	d001      	beq.n	d76d2 <_ZN9TCPClient9connectedEv+0x1c>
   d76ce:	2501      	movs	r5, #1
   d76d0:	e00b      	b.n	d76ea <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d76d2:	6803      	ldr	r3, [r0, #0]
   d76d4:	691b      	ldr	r3, [r3, #16]
   d76d6:	4798      	blx	r3
   d76d8:	2800      	cmp	r0, #0
   d76da:	bf14      	ite	ne
   d76dc:	2501      	movne	r5, #1
   d76de:	2500      	moveq	r5, #0
        if (!rv) {
   d76e0:	d103      	bne.n	d76ea <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d76e2:	6823      	ldr	r3, [r4, #0]
   d76e4:	4620      	mov	r0, r4
   d76e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d76e8:	4798      	blx	r3
        }
    }
    return rv;
}
   d76ea:	4628      	mov	r0, r5
   d76ec:	bd38      	pop	{r3, r4, r5, pc}

000d76ee <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d76ee:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d76f0:	6818      	ldr	r0, [r3, #0]
}
   d76f2:	43c0      	mvns	r0, r0
   d76f4:	0fc0      	lsrs	r0, r0, #31
   d76f6:	4770      	bx	lr

000d76f8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d76f8:	4770      	bx	lr

000d76fa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d76fa:	2000      	movs	r0, #0
   d76fc:	4770      	bx	lr

000d76fe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d76fe:	b510      	push	{r4, lr}
   d7700:	2114      	movs	r1, #20
   d7702:	4604      	mov	r4, r0
   d7704:	f001 fb44 	bl	d8d90 <_ZdlPvj>
   d7708:	4620      	mov	r0, r4
   d770a:	bd10      	pop	{r4, pc}

000d770c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d770c:	f7fc bcc9 	b.w	d40a2 <_ZdlPv>

000d7710 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7712:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7714:	2200      	movs	r2, #0
   d7716:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7718:	9202      	str	r2, [sp, #8]
   d771a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d771c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d771e:	4604      	mov	r4, r0
   d7720:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7722:	d008      	beq.n	d7736 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7728:	fbb3 f1f2 	udiv	r1, r3, r2
   d772c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d772e:	fb02 3111 	mls	r1, r2, r1, r3
   d7732:	434a      	muls	r2, r1
   d7734:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7736:	6960      	ldr	r0, [r4, #20]
   d7738:	2308      	movs	r3, #8
   d773a:	9300      	str	r3, [sp, #0]
   d773c:	f241 0205 	movw	r2, #4101	; 0x1005
   d7740:	446b      	add	r3, sp
   d7742:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7746:	6800      	ldr	r0, [r0, #0]
   d7748:	f7ff fc08 	bl	d6f5c <sock_setsockopt>
    if (ret < 0) {
   d774c:	2800      	cmp	r0, #0
   d774e:	db08      	blt.n	d7762 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7750:	6960      	ldr	r0, [r4, #20]
   d7752:	2300      	movs	r3, #0
   d7754:	4632      	mov	r2, r6
   d7756:	4629      	mov	r1, r5
   d7758:	6800      	ldr	r0, [r0, #0]
   d775a:	f7ff fc1f 	bl	d6f9c <sock_send>
    if (ret < 0) {
   d775e:	2800      	cmp	r0, #0
   d7760:	da04      	bge.n	d776c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7762:	f7ff fed9 	bl	d7518 <__errno>
   d7766:	6803      	ldr	r3, [r0, #0]
   d7768:	6063      	str	r3, [r4, #4]
   d776a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d776c:	b004      	add	sp, #16
   d776e:	bd70      	pop	{r4, r5, r6, pc}

000d7770 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7770:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7772:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7774:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7776:	689b      	ldr	r3, [r3, #8]
   d7778:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d777a:	68a3      	ldr	r3, [r4, #8]
   d777c:	3b01      	subs	r3, #1
   d777e:	60a3      	str	r3, [r4, #8]
   d7780:	b92b      	cbnz	r3, d778e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7782:	6823      	ldr	r3, [r4, #0]
   d7784:	4620      	mov	r0, r4
   d7786:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d778c:	4718      	bx	r3
   d778e:	bd10      	pop	{r4, pc}

000d7790 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7790:	b570      	push	{r4, r5, r6, lr}
   d7792:	4604      	mov	r4, r0
   d7794:	694d      	ldr	r5, [r1, #20]
   d7796:	4b05      	ldr	r3, [pc, #20]	; (d77ac <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7798:	f844 3b04 	str.w	r3, [r4], #4
   d779c:	358c      	adds	r5, #140	; 0x8c
   d779e:	4606      	mov	r6, r0
   d77a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77a4:	682b      	ldr	r3, [r5, #0]
   d77a6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d77a8:	4630      	mov	r0, r6
   d77aa:	bd70      	pop	{r4, r5, r6, pc}
   d77ac:	000dafb0 	.word	0x000dafb0

000d77b0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d77b0:	b510      	push	{r4, lr}
   d77b2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77b4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d77b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d77bc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d77be:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77c0:	d005      	beq.n	d77ce <_ZN9TCPClient4peekEv+0x1e>
   d77c2:	6962      	ldr	r2, [r4, #20]
   d77c4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d77c8:	4413      	add	r3, r2
   d77ca:	7918      	ldrb	r0, [r3, #4]
   d77cc:	bd10      	pop	{r4, pc}
   d77ce:	6803      	ldr	r3, [r0, #0]
   d77d0:	691b      	ldr	r3, [r3, #16]
   d77d2:	4798      	blx	r3
   d77d4:	2800      	cmp	r0, #0
   d77d6:	d1f4      	bne.n	d77c2 <_ZN9TCPClient4peekEv+0x12>
   d77d8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d77dc:	bd10      	pop	{r4, pc}

000d77de <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d77de:	b510      	push	{r4, lr}
   d77e0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d77e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d77e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d77ea:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d77ec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d77ee:	d008      	beq.n	d7802 <_ZN9TCPClient4readEv+0x24>
   d77f0:	6962      	ldr	r2, [r4, #20]
   d77f2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d77f6:	1c59      	adds	r1, r3, #1
   d77f8:	4413      	add	r3, r2
   d77fa:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d77fe:	7918      	ldrb	r0, [r3, #4]
   d7800:	bd10      	pop	{r4, pc}
   d7802:	6803      	ldr	r3, [r0, #0]
   d7804:	691b      	ldr	r3, [r3, #16]
   d7806:	4798      	blx	r3
   d7808:	2800      	cmp	r0, #0
   d780a:	d1f1      	bne.n	d77f0 <_ZN9TCPClient4readEv+0x12>
   d780c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7810:	bd10      	pop	{r4, pc}

000d7812 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7814:	6943      	ldr	r3, [r0, #20]
   d7816:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7818:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d781c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7820:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7822:	4605      	mov	r5, r0
   d7824:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7826:	d106      	bne.n	d7836 <_ZN9TCPClient4readEPhj+0x24>
   d7828:	6803      	ldr	r3, [r0, #0]
   d782a:	691b      	ldr	r3, [r3, #16]
   d782c:	4798      	blx	r3
   d782e:	b910      	cbnz	r0, d7836 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7830:	f04f 34ff 	mov.w	r4, #4294967295
   d7834:	e014      	b.n	d7860 <_ZN9TCPClient4readEPhj+0x4e>
   d7836:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7838:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d783c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7840:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7842:	42bc      	cmp	r4, r7
   d7844:	bf28      	it	cs
   d7846:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7848:	4419      	add	r1, r3
   d784a:	4622      	mov	r2, r4
   d784c:	3104      	adds	r1, #4
   d784e:	4630      	mov	r0, r6
   d7850:	f002 fad0 	bl	d9df4 <memcpy>
   d7854:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7856:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d785a:	4423      	add	r3, r4
   d785c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7860:	4620      	mov	r0, r4
   d7862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7864 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7868:	4698      	mov	r8, r3
    stop();
   d786a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d786c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7870:	460d      	mov	r5, r1
   d7872:	4606      	mov	r6, r0
   d7874:	4617      	mov	r7, r2
    stop();
   d7876:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7878:	ab12      	add	r3, sp, #72	; 0x48
   d787a:	2400      	movs	r4, #0
   d787c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7880:	4622      	mov	r2, r4
   d7882:	4621      	mov	r1, r4
   d7884:	4628      	mov	r0, r5
   d7886:	f7ff fd11 	bl	d72ac <netdb_getaddrinfo>
   d788a:	4681      	mov	r9, r0
   d788c:	2800      	cmp	r0, #0
   d788e:	d13d      	bne.n	d790c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7890:	9b00      	ldr	r3, [sp, #0]
   d7892:	2b00      	cmp	r3, #0
   d7894:	d056      	beq.n	d7944 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7896:	695b      	ldr	r3, [r3, #20]
   d7898:	2b00      	cmp	r3, #0
   d789a:	d053      	beq.n	d7944 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d789c:	a806      	add	r0, sp, #24
   d789e:	f000 fcad 	bl	d81fc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d78a2:	9b00      	ldr	r3, [sp, #0]
   d78a4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d78a6:	7863      	ldrb	r3, [r4, #1]
   d78a8:	2b02      	cmp	r3, #2
   d78aa:	d101      	bne.n	d78b0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d78ac:	1d21      	adds	r1, r4, #4
   d78ae:	e013      	b.n	d78d8 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d78b0:	2b0a      	cmp	r3, #10
   d78b2:	d114      	bne.n	d78de <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d78b4:	2211      	movs	r2, #17
   d78b6:	4649      	mov	r1, r9
   d78b8:	a801      	add	r0, sp, #4
   d78ba:	f002 faa6 	bl	d9e0a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d78be:	68a3      	ldr	r3, [r4, #8]
   d78c0:	bb33      	cbnz	r3, d7910 <_ZN9TCPClient7connectEPKctm+0xac>
   d78c2:	68e3      	ldr	r3, [r4, #12]
   d78c4:	bb23      	cbnz	r3, d7910 <_ZN9TCPClient7connectEPKctm+0xac>
   d78c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d78ca:	6925      	ldr	r5, [r4, #16]
   d78cc:	f7ff fc2e 	bl	d712c <inet_htonl>
   d78d0:	4285      	cmp	r5, r0
   d78d2:	d11d      	bne.n	d7910 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d78d4:	f104 0114 	add.w	r1, r4, #20
   d78d8:	a806      	add	r0, sp, #24
   d78da:	f000 fcd2 	bl	d8282 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d78de:	a806      	add	r0, sp, #24
   d78e0:	f000 fcac 	bl	d823c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d78e4:	2800      	cmp	r0, #0
   d78e6:	d02d      	beq.n	d7944 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d78e8:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d78ea:	ad07      	add	r5, sp, #28
   d78ec:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d78f0:	4b18      	ldr	r3, [pc, #96]	; (d7954 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d78f2:	930c      	str	r3, [sp, #48]	; 0x30
   d78f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d78f6:	ac0d      	add	r4, sp, #52	; 0x34
   d78f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d78fa:	682b      	ldr	r3, [r5, #0]
   d78fc:	7023      	strb	r3, [r4, #0]
   d78fe:	463a      	mov	r2, r7
   d7900:	4643      	mov	r3, r8
   d7902:	a90c      	add	r1, sp, #48	; 0x30
   d7904:	4630      	mov	r0, r6
   d7906:	47c8      	blx	r9
   d7908:	4681      	mov	r9, r0
   d790a:	e01b      	b.n	d7944 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d790c:	46a1      	mov	r9, r4
   d790e:	e019      	b.n	d7944 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7910:	f104 0308 	add.w	r3, r4, #8
   d7914:	ad01      	add	r5, sp, #4
   d7916:	3418      	adds	r4, #24
   d7918:	6818      	ldr	r0, [r3, #0]
   d791a:	6859      	ldr	r1, [r3, #4]
   d791c:	462a      	mov	r2, r5
   d791e:	c203      	stmia	r2!, {r0, r1}
   d7920:	3308      	adds	r3, #8
   d7922:	42a3      	cmp	r3, r4
   d7924:	4615      	mov	r5, r2
   d7926:	d1f7      	bne.n	d7918 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7928:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d792a:	a901      	add	r1, sp, #4
   d792c:	a80c      	add	r0, sp, #48	; 0x30
   d792e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7930:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7934:	f000 fc70 	bl	d8218 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d793a:	ac07      	add	r4, sp, #28
   d793c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d793e:	682b      	ldr	r3, [r5, #0]
   d7940:	7023      	strb	r3, [r4, #0]
   d7942:	e7cc      	b.n	d78de <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7944:	9800      	ldr	r0, [sp, #0]
   d7946:	f7ff fca9 	bl	d729c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d794a:	4648      	mov	r0, r9
   d794c:	b013      	add	sp, #76	; 0x4c
   d794e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7952:	bf00      	nop
   d7954:	000dafb0 	.word	0x000dafb0

000d7958 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7958:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d795a:	2300      	movs	r3, #0
   d795c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7960:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7962:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7966:	4770      	bx	lr

000d7968 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d796c:	461e      	mov	r6, r3
    stop();
   d796e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7970:	460c      	mov	r4, r1
   d7972:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7974:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7976:	4605      	mov	r5, r0
   d7978:	4617      	mov	r7, r2
    stop();
   d797a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d797c:	7d23      	ldrb	r3, [r4, #20]
   d797e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7982:	2b04      	cmp	r3, #4
   d7984:	bf0c      	ite	eq
   d7986:	2002      	moveq	r0, #2
   d7988:	200a      	movne	r0, #10
   d798a:	2206      	movs	r2, #6
   d798c:	2101      	movs	r1, #1
   d798e:	f7ff fb0d 	bl	d6fac <sock_socket>
   d7992:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7996:	696b      	ldr	r3, [r5, #20]
   d7998:	681b      	ldr	r3, [r3, #0]
   d799a:	2b00      	cmp	r3, #0
   d799c:	db18      	blt.n	d79d0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d799e:	4628      	mov	r0, r5
   d79a0:	f7ff ffda 	bl	d7958 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d79a4:	b1d6      	cbz	r6, d79dc <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d79a6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d79a8:	a903      	add	r1, sp, #12
   d79aa:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d79ac:	9303      	str	r3, [sp, #12]
   d79ae:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d79b2:	f7ff fc1b 	bl	d71ec <if_index_to_name>
   d79b6:	b958      	cbnz	r0, d79d0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d79b8:	6968      	ldr	r0, [r5, #20]
   d79ba:	2306      	movs	r3, #6
   d79bc:	9300      	str	r3, [sp, #0]
   d79be:	f241 020b 	movw	r2, #4107	; 0x100b
   d79c2:	ab03      	add	r3, sp, #12
   d79c4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d79c8:	6800      	ldr	r0, [r0, #0]
   d79ca:	f7ff fac7 	bl	d6f5c <sock_setsockopt>
   d79ce:	b128      	cbz	r0, d79dc <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d79d0:	682b      	ldr	r3, [r5, #0]
   d79d2:	4628      	mov	r0, r5
   d79d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d79d6:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d79d8:	4798      	blx	r3
   d79da:	e03b      	b.n	d7a54 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d79dc:	261c      	movs	r6, #28
   d79de:	4632      	mov	r2, r6
   d79e0:	2100      	movs	r1, #0
   d79e2:	a803      	add	r0, sp, #12
   d79e4:	f002 fa11 	bl	d9e0a <memset>
    if (ip.version() == 4) {
   d79e8:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d79ea:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d79ee:	2b04      	cmp	r3, #4
   d79f0:	d10c      	bne.n	d7a0c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d79f2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d79f4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d79f6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d79fa:	f7ff fb9f 	bl	d713c <inet_htons>
   d79fe:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7a02:	6860      	ldr	r0, [r4, #4]
   d7a04:	f7ff fb92 	bl	d712c <inet_htonl>
   d7a08:	9004      	str	r0, [sp, #16]
   d7a0a:	e013      	b.n	d7a34 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7a0c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7a0e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7a10:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7a14:	f7ff fb92 	bl	d713c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7a18:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7a1a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7a1e:	1d23      	adds	r3, r4, #4
   d7a20:	f104 0714 	add.w	r7, r4, #20
   d7a24:	6818      	ldr	r0, [r3, #0]
   d7a26:	6859      	ldr	r1, [r3, #4]
   d7a28:	4632      	mov	r2, r6
   d7a2a:	c203      	stmia	r2!, {r0, r1}
   d7a2c:	3308      	adds	r3, #8
   d7a2e:	42bb      	cmp	r3, r7
   d7a30:	4616      	mov	r6, r2
   d7a32:	d1f7      	bne.n	d7a24 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7a34:	696b      	ldr	r3, [r5, #20]
   d7a36:	221c      	movs	r2, #28
   d7a38:	a903      	add	r1, sp, #12
   d7a3a:	6818      	ldr	r0, [r3, #0]
   d7a3c:	f7ff fa9e 	bl	d6f7c <sock_connect>
   d7a40:	2800      	cmp	r0, #0
   d7a42:	d1c5      	bne.n	d79d0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7a44:	3404      	adds	r4, #4
   d7a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7a48:	696d      	ldr	r5, [r5, #20]
   d7a4a:	358c      	adds	r5, #140	; 0x8c
   d7a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7a4e:	6823      	ldr	r3, [r4, #0]
   d7a50:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7a52:	2401      	movs	r4, #1
}
   d7a54:	4620      	mov	r0, r4
   d7a56:	b00a      	add	sp, #40	; 0x28
   d7a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a5c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7a5c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7a5e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7a60:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7a62:	6818      	ldr	r0, [r3, #0]
   d7a64:	2800      	cmp	r0, #0
   d7a66:	db01      	blt.n	d7a6c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7a68:	f7ff fa80 	bl	d6f6c <sock_close>
   d7a6c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7a6e:	f04f 32ff 	mov.w	r2, #4294967295
   d7a72:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a74:	6960      	ldr	r0, [r4, #20]
   d7a76:	2211      	movs	r2, #17
   d7a78:	2100      	movs	r1, #0
   d7a7a:	308c      	adds	r0, #140	; 0x8c
   d7a7c:	f002 f9c5 	bl	d9e0a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7a80:	4620      	mov	r0, r4
}
   d7a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7a86:	f7ff bf67 	b.w	d7958 <_ZN9TCPClient12flush_bufferEv>
	...

000d7a8c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7a8c:	b530      	push	{r4, r5, lr}
   d7a8e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7a90:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7a94:	b08b      	sub	sp, #44	; 0x2c
   d7a96:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7a98:	b11b      	cbz	r3, d7aa2 <_ZN9TCPClient9availableEv+0x16>
   d7a9a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7a9e:	429a      	cmp	r2, r3
   d7aa0:	d040      	beq.n	d7b24 <_ZN9TCPClient9availableEv+0x98>
   d7aa2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7aa4:	6818      	ldr	r0, [r3, #0]
   d7aa6:	2800      	cmp	r0, #0
   d7aa8:	db3f      	blt.n	d7b2a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7aaa:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7aae:	2d7f      	cmp	r5, #127	; 0x7f
   d7ab0:	d83b      	bhi.n	d7b2a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7ab2:	1d19      	adds	r1, r3, #4
   d7ab4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7ab8:	2308      	movs	r3, #8
   d7aba:	4429      	add	r1, r5
   d7abc:	f7ff fa66 	bl	d6f8c <sock_recv>
            if (ret > 0) {
   d7ac0:	2800      	cmp	r0, #0
   d7ac2:	dd0c      	ble.n	d7ade <_ZN9TCPClient9availableEv+0x52>
   d7ac4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7ac6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7aca:	b90a      	cbnz	r2, d7ad0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7acc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7ad0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7ad2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7ad6:	4418      	add	r0, r3
   d7ad8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7adc:	e025      	b.n	d7b2a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7ade:	f7ff fd1b 	bl	d7518 <__errno>
   d7ae2:	6803      	ldr	r3, [r0, #0]
   d7ae4:	2b0b      	cmp	r3, #11
   d7ae6:	d020      	beq.n	d7b2a <_ZN9TCPClient9availableEv+0x9e>
   d7ae8:	f7ff fd16 	bl	d7518 <__errno>
   d7aec:	6803      	ldr	r3, [r0, #0]
   d7aee:	2b0b      	cmp	r3, #11
   d7af0:	d01b      	beq.n	d7b2a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7af2:	2320      	movs	r3, #32
   d7af4:	2500      	movs	r5, #0
   d7af6:	9302      	str	r3, [sp, #8]
   d7af8:	9503      	str	r5, [sp, #12]
   d7afa:	f7ff fd0d 	bl	d7518 <__errno>
   d7afe:	6803      	ldr	r3, [r0, #0]
   d7b00:	9301      	str	r3, [sp, #4]
   d7b02:	4b0e      	ldr	r3, [pc, #56]	; (d7b3c <_ZN9TCPClient9availableEv+0xb0>)
   d7b04:	9300      	str	r3, [sp, #0]
   d7b06:	aa02      	add	r2, sp, #8
   d7b08:	462b      	mov	r3, r5
   d7b0a:	490d      	ldr	r1, [pc, #52]	; (d7b40 <_ZN9TCPClient9availableEv+0xb4>)
   d7b0c:	2032      	movs	r0, #50	; 0x32
   d7b0e:	f7ff fc05 	bl	d731c <log_message>
                    sock_close(d_->sock);
   d7b12:	6963      	ldr	r3, [r4, #20]
   d7b14:	6818      	ldr	r0, [r3, #0]
   d7b16:	f7ff fa29 	bl	d6f6c <sock_close>
   d7b1a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7b1c:	f04f 32ff 	mov.w	r2, #4294967295
   d7b20:	601a      	str	r2, [r3, #0]
   d7b22:	e002      	b.n	d7b2a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7b24:	f7ff ff18 	bl	d7958 <_ZN9TCPClient12flush_bufferEv>
   d7b28:	e7bb      	b.n	d7aa2 <_ZN9TCPClient9availableEv+0x16>
   d7b2a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7b2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7b30:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7b34:	1a18      	subs	r0, r3, r0
}
   d7b36:	b00b      	add	sp, #44	; 0x2c
   d7b38:	bd30      	pop	{r4, r5, pc}
   d7b3a:	bf00      	nop
   d7b3c:	000daea7 	.word	0x000daea7
   d7b40:	000daea0 	.word	0x000daea0

000d7b44 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7b44:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7b46:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7b48:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7b4a:	6001      	str	r1, [r0, #0]
   d7b4c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7b50:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7b54:	3088      	adds	r0, #136	; 0x88
   d7b56:	f000 fb51 	bl	d81fc <_ZN9IPAddressC1Ev>
}
   d7b5a:	4620      	mov	r0, r4
   d7b5c:	bd10      	pop	{r4, pc}
	...

000d7b60 <_ZN9TCPClientC1Ei>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7b64:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7b66:	2300      	movs	r3, #0
   d7b68:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7b6a:	4a14      	ldr	r2, [pc, #80]	; (d7bbc <_ZN9TCPClientC1Ei+0x5c>)
   d7b6c:	6043      	str	r3, [r0, #4]
   d7b6e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7b70:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7b72:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7b74:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7b76:	20a0      	movs	r0, #160	; 0xa0
   d7b78:	460e      	mov	r6, r1
   d7b7a:	f7fc fa8e 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7b7e:	4605      	mov	r5, r0
   d7b80:	b110      	cbz	r0, d7b88 <_ZN9TCPClientC1Ei+0x28>
   d7b82:	4631      	mov	r1, r6
   d7b84:	f7ff ffde 	bl	d7b44 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7b88:	2014      	movs	r0, #20
   d7b8a:	f7fc fa86 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7b8e:	4603      	mov	r3, r0
   d7b90:	b128      	cbz	r0, d7b9e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7b92:	2201      	movs	r2, #1
   d7b94:	6042      	str	r2, [r0, #4]
   d7b96:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7b98:	4a09      	ldr	r2, [pc, #36]	; (d7bc0 <_ZN9TCPClientC1Ei+0x60>)
   d7b9a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7b9c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7b9e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7ba0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7ba2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7ba4:	b128      	cbz	r0, d7bb2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7ba6:	6843      	ldr	r3, [r0, #4]
   d7ba8:	3b01      	subs	r3, #1
   d7baa:	6043      	str	r3, [r0, #4]
   d7bac:	b90b      	cbnz	r3, d7bb2 <_ZN9TCPClientC1Ei+0x52>
   d7bae:	f7ff fddf 	bl	d7770 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7bb2:	4620      	mov	r0, r4
   d7bb4:	f7ff fed0 	bl	d7958 <_ZN9TCPClient12flush_bufferEv>
}
   d7bb8:	4620      	mov	r0, r4
   d7bba:	bd70      	pop	{r4, r5, r6, pc}
   d7bbc:	000dae5c 	.word	0x000dae5c
   d7bc0:	000dae40 	.word	0x000dae40

000d7bc4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7bc4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7bc6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7bca:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7bcc:	f7ff ffc8 	bl	d7b60 <_ZN9TCPClientC1Ei>
}
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	bd10      	pop	{r4, pc}

000d7bd4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7bd4:	b510      	push	{r4, lr}
   d7bd6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7bd8:	6800      	ldr	r0, [r0, #0]
   d7bda:	2800      	cmp	r0, #0
   d7bdc:	db01      	blt.n	d7be2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7bde:	f7ff f9c5 	bl	d6f6c <sock_close>
    }
}
   d7be2:	4620      	mov	r0, r4
   d7be4:	bd10      	pop	{r4, pc}

000d7be6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7be6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7be8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7bea:	4620      	mov	r0, r4
   d7bec:	f7ff fff2 	bl	d7bd4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7bf0:	b124      	cbz	r4, d7bfc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7bf2:	4620      	mov	r0, r4
   d7bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7bf8:	f7fc ba53 	b.w	d40a2 <_ZdlPv>
   d7bfc:	bd10      	pop	{r4, pc}

000d7bfe <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7bfe:	2200      	movs	r2, #0
   d7c00:	4611      	mov	r1, r2
   d7c02:	6840      	ldr	r0, [r0, #4]
   d7c04:	f7ff bbf2 	b.w	d73ec <network_listening>

000d7c08 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7c08:	2200      	movs	r2, #0
   d7c0a:	4611      	mov	r1, r2
   d7c0c:	6840      	ldr	r0, [r0, #4]
   d7c0e:	f7ff bbfd 	b.w	d740c <network_get_listen_timeout>

000d7c12 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7c12:	2200      	movs	r2, #0
   d7c14:	6840      	ldr	r0, [r0, #4]
   d7c16:	f7ff bbf1 	b.w	d73fc <network_set_listen_timeout>

000d7c1a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c1a:	2200      	movs	r2, #0
   d7c1c:	f081 0101 	eor.w	r1, r1, #1
   d7c20:	6840      	ldr	r0, [r0, #4]
   d7c22:	f7ff bbdb 	b.w	d73dc <network_listen>

000d7c26 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7c26:	2300      	movs	r3, #0
   d7c28:	461a      	mov	r2, r3
   d7c2a:	2101      	movs	r1, #1
   d7c2c:	6840      	ldr	r0, [r0, #4]
   d7c2e:	f7ff bbcd 	b.w	d73cc <network_off>

000d7c32 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7c32:	2300      	movs	r3, #0
   d7c34:	461a      	mov	r2, r3
   d7c36:	4619      	mov	r1, r3
   d7c38:	6840      	ldr	r0, [r0, #4]
   d7c3a:	f7ff bbbf 	b.w	d73bc <network_on>

000d7c3e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7c3e:	2200      	movs	r2, #0
   d7c40:	4611      	mov	r1, r2
   d7c42:	6840      	ldr	r0, [r0, #4]
   d7c44:	f7ff bbb2 	b.w	d73ac <network_ready>

000d7c48 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7c48:	2200      	movs	r2, #0
   d7c4a:	4611      	mov	r1, r2
   d7c4c:	6840      	ldr	r0, [r0, #4]
   d7c4e:	f7ff bb9d 	b.w	d738c <network_connecting>

000d7c52 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c52:	2200      	movs	r2, #0
   d7c54:	2102      	movs	r1, #2
   d7c56:	6840      	ldr	r0, [r0, #4]
   d7c58:	f7ff bba0 	b.w	d739c <network_disconnect>

000d7c5c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7c5c:	2300      	movs	r3, #0
   d7c5e:	461a      	mov	r2, r3
   d7c60:	6840      	ldr	r0, [r0, #4]
   d7c62:	f7ff bb8b 	b.w	d737c <network_connect>

000d7c66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7c66:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7c68:	4605      	mov	r5, r0
   d7c6a:	b188      	cbz	r0, d7c90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7c6c:	6804      	ldr	r4, [r0, #0]
   d7c6e:	b14c      	cbz	r4, d7c84 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7c70:	68a3      	ldr	r3, [r4, #8]
   d7c72:	b11b      	cbz	r3, d7c7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7c74:	2203      	movs	r2, #3
   d7c76:	4621      	mov	r1, r4
   d7c78:	4620      	mov	r0, r4
   d7c7a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7c7c:	2110      	movs	r1, #16
   d7c7e:	4620      	mov	r0, r4
   d7c80:	f001 f886 	bl	d8d90 <_ZdlPvj>
   d7c84:	4628      	mov	r0, r5
   d7c86:	2114      	movs	r1, #20
      }
   d7c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7c8c:	f001 b880 	b.w	d8d90 <_ZdlPvj>
   d7c90:	bd38      	pop	{r3, r4, r5, pc}

000d7c92 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7c92:	b110      	cbz	r0, d7c9a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7c94:	6803      	ldr	r3, [r0, #0]
   d7c96:	685b      	ldr	r3, [r3, #4]
   d7c98:	4718      	bx	r3
   d7c9a:	4770      	bx	lr

000d7c9c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7c9c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7c9e:	6803      	ldr	r3, [r0, #0]
   d7ca0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7ca2:	b1bb      	cbz	r3, d7cd4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7ca4:	6858      	ldr	r0, [r3, #4]
   d7ca6:	f7ff fa51 	bl	d714c <os_thread_is_current>
   d7caa:	b978      	cbnz	r0, d7ccc <_ZN6ThreadD1Ev+0x30>
   d7cac:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7cae:	7c5a      	ldrb	r2, [r3, #17]
   d7cb0:	b912      	cbnz	r2, d7cb8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7cb2:	6858      	ldr	r0, [r3, #4]
   d7cb4:	f7ff fa52 	bl	d715c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7cb8:	6823      	ldr	r3, [r4, #0]
   d7cba:	6858      	ldr	r0, [r3, #4]
   d7cbc:	f7ff fa56 	bl	d716c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7cc0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7cc2:	2300      	movs	r3, #0
   d7cc4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7cc6:	b128      	cbz	r0, d7cd4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7cc8:	f7ff ffcd 	bl	d7c66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7ccc:	6820      	ldr	r0, [r4, #0]
   d7cce:	b108      	cbz	r0, d7cd4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7cd0:	f7ff ffc9 	bl	d7c66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7cd4:	4620      	mov	r0, r4
   d7cd6:	bd10      	pop	{r4, pc}

000d7cd8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7cd8:	b538      	push	{r3, r4, r5, lr}
   d7cda:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cdc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7ce0:	b108      	cbz	r0, d7ce6 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7ce2:	f7fc f9e0 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7ce6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7cea:	b108      	cbz	r0, d7cf0 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7cec:	f7ff fa4e 	bl	d718c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cf0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7cf4:	b135      	cbz	r5, d7d04 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7cf6:	4628      	mov	r0, r5
   d7cf8:	f7ff ffd0 	bl	d7c9c <_ZN6ThreadD1Ev>
   d7cfc:	2104      	movs	r1, #4
   d7cfe:	4628      	mov	r0, r5
   d7d00:	f001 f846 	bl	d8d90 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d04:	6820      	ldr	r0, [r4, #0]
   d7d06:	b108      	cbz	r0, d7d0c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7d08:	f7ff ffc3 	bl	d7c92 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7d0c:	4620      	mov	r0, r4
   d7d0e:	bd38      	pop	{r3, r4, r5, pc}

000d7d10 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7d10:	b510      	push	{r4, lr}
   d7d12:	4b04      	ldr	r3, [pc, #16]	; (d7d24 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7d14:	4604      	mov	r4, r0
   d7d16:	f840 3b08 	str.w	r3, [r0], #8
   d7d1a:	f7ff ffdd 	bl	d7cd8 <_ZN5spark11MeshPublishD1Ev>
   d7d1e:	4620      	mov	r0, r4
   d7d20:	bd10      	pop	{r4, pc}
   d7d22:	bf00      	nop
   d7d24:	000daec0 	.word	0x000daec0

000d7d28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7d28:	b538      	push	{r3, r4, r5, lr}
   d7d2a:	4c0e      	ldr	r4, [pc, #56]	; (d7d64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7d2c:	4b0e      	ldr	r3, [pc, #56]	; (d7d68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7d2e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7d30:	2500      	movs	r5, #0
   d7d32:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7d34:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7d38:	6063      	str	r3, [r4, #4]
   d7d3a:	60a5      	str	r5, [r4, #8]
   d7d3c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7d40:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7d44:	f7ff fa1a 	bl	d717c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7d48:	4b08      	ldr	r3, [pc, #32]	; (d7d6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7d4a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7d4e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7d52:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7d54:	4620      	mov	r0, r4
   d7d56:	4a06      	ldr	r2, [pc, #24]	; (d7d70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7d58:	4906      	ldr	r1, [pc, #24]	; (d7d74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7d5e:	f001 b809 	b.w	d8d74 <__aeabi_atexit>
   d7d62:	bf00      	nop
   d7d64:	2003e400 	.word	0x2003e400
   d7d68:	000dae0c 	.word	0x000dae0c
   d7d6c:	000daec0 	.word	0x000daec0
   d7d70:	2003dc68 	.word	0x2003dc68
   d7d74:	000d7d11 	.word	0x000d7d11

000d7d78 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7d78:	b510      	push	{r4, lr}
   d7d7a:	4604      	mov	r4, r0
{
    _spi = spi;
   d7d7c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7d7e:	4608      	mov	r0, r1
   d7d80:	f7ff fa3c 	bl	d71fc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7d84:	2300      	movs	r3, #0
   d7d86:	6063      	str	r3, [r4, #4]
}
   d7d88:	4620      	mov	r0, r4
   d7d8a:	bd10      	pop	{r4, pc}

000d7d8c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7d8c:	7800      	ldrb	r0, [r0, #0]
   d7d8e:	f7ff ba3d 	b.w	d720c <HAL_SPI_Is_Enabled>

000d7d92 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7d92:	2200      	movs	r2, #0
   d7d94:	4611      	mov	r1, r2
   d7d96:	6840      	ldr	r0, [r0, #4]
   d7d98:	f7ff bb08 	b.w	d73ac <network_ready>

000d7d9c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d9c:	2200      	movs	r2, #0
   d7d9e:	4611      	mov	r1, r2
   d7da0:	6840      	ldr	r0, [r0, #4]
   d7da2:	f7ff bb23 	b.w	d73ec <network_listening>

000d7da6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7da6:	2200      	movs	r2, #0
   d7da8:	4611      	mov	r1, r2
   d7daa:	6840      	ldr	r0, [r0, #4]
   d7dac:	f7ff bb2e 	b.w	d740c <network_get_listen_timeout>

000d7db0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7db0:	2200      	movs	r2, #0
   d7db2:	6840      	ldr	r0, [r0, #4]
   d7db4:	f7ff bb22 	b.w	d73fc <network_set_listen_timeout>

000d7db8 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7db8:	2200      	movs	r2, #0
   d7dba:	f081 0101 	eor.w	r1, r1, #1
   d7dbe:	6840      	ldr	r0, [r0, #4]
   d7dc0:	f7ff bb0c 	b.w	d73dc <network_listen>

000d7dc4 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7dc4:	2300      	movs	r3, #0
   d7dc6:	461a      	mov	r2, r3
   d7dc8:	4619      	mov	r1, r3
   d7dca:	6840      	ldr	r0, [r0, #4]
   d7dcc:	f7ff bafe 	b.w	d73cc <network_off>

000d7dd0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7dd0:	2300      	movs	r3, #0
   d7dd2:	461a      	mov	r2, r3
   d7dd4:	4619      	mov	r1, r3
   d7dd6:	6840      	ldr	r0, [r0, #4]
   d7dd8:	f7ff baf0 	b.w	d73bc <network_on>

000d7ddc <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7ddc:	2200      	movs	r2, #0
   d7dde:	4611      	mov	r1, r2
   d7de0:	6840      	ldr	r0, [r0, #4]
   d7de2:	f7ff bad3 	b.w	d738c <network_connecting>

000d7de6 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7de6:	2200      	movs	r2, #0
   d7de8:	2102      	movs	r1, #2
   d7dea:	6840      	ldr	r0, [r0, #4]
   d7dec:	f7ff bad6 	b.w	d739c <network_disconnect>

000d7df0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7df0:	2300      	movs	r3, #0
   d7df2:	461a      	mov	r2, r3
   d7df4:	6840      	ldr	r0, [r0, #4]
   d7df6:	f7ff bac1 	b.w	d737c <network_connect>
	...

000d7dfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7dfc:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7dfe:	2204      	movs	r2, #4
   d7e00:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7e02:	4a02      	ldr	r2, [pc, #8]	; (d7e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7e04:	601a      	str	r2, [r3, #0]
   d7e06:	4770      	bx	lr
   d7e08:	2003e5d4 	.word	0x2003e5d4
   d7e0c:	000daef4 	.word	0x000daef4

000d7e10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7e10:	4770      	bx	lr

000d7e12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e14:	4606      	mov	r6, r0
   d7e16:	4615      	mov	r5, r2
   d7e18:	460c      	mov	r4, r1
   d7e1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7e1c:	42bc      	cmp	r4, r7
   d7e1e:	d006      	beq.n	d7e2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7e20:	6833      	ldr	r3, [r6, #0]
   d7e22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7e26:	689b      	ldr	r3, [r3, #8]
   d7e28:	4630      	mov	r0, r6
   d7e2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7e2c:	e7f6      	b.n	d7e1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7e2e:	4628      	mov	r0, r5
   d7e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7e32:	2200      	movs	r2, #0
   d7e34:	7c00      	ldrb	r0, [r0, #16]
   d7e36:	f7ff b8d9 	b.w	d6fec <HAL_I2C_Write_Data>

000d7e3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7e3a:	2100      	movs	r1, #0
   d7e3c:	7c00      	ldrb	r0, [r0, #16]
   d7e3e:	f7ff b8dd 	b.w	d6ffc <HAL_I2C_Available_Data>

000d7e42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7e42:	2100      	movs	r1, #0
   d7e44:	7c00      	ldrb	r0, [r0, #16]
   d7e46:	f7ff b8e1 	b.w	d700c <HAL_I2C_Read_Data>

000d7e4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7e4a:	2100      	movs	r1, #0
   d7e4c:	7c00      	ldrb	r0, [r0, #16]
   d7e4e:	f7ff b8e5 	b.w	d701c <HAL_I2C_Peek_Data>

000d7e52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7e52:	2100      	movs	r1, #0
   d7e54:	7c00      	ldrb	r0, [r0, #16]
   d7e56:	f7ff b8e9 	b.w	d702c <HAL_I2C_Flush_Data>

000d7e5a <_ZN7TwoWireD0Ev>:
   d7e5a:	b510      	push	{r4, lr}
   d7e5c:	2114      	movs	r1, #20
   d7e5e:	4604      	mov	r4, r0
   d7e60:	f000 ff96 	bl	d8d90 <_ZdlPvj>
   d7e64:	4620      	mov	r0, r4
   d7e66:	bd10      	pop	{r4, pc}

000d7e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7e68:	b510      	push	{r4, lr}
   d7e6a:	4604      	mov	r4, r0
   d7e6c:	2300      	movs	r3, #0
   d7e6e:	6063      	str	r3, [r4, #4]
   d7e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7e74:	60a3      	str	r3, [r4, #8]
   d7e76:	4b04      	ldr	r3, [pc, #16]	; (d7e88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7e78:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7e7a:	4608      	mov	r0, r1
   d7e7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7e7e:	4611      	mov	r1, r2
   d7e80:	f7ff f8f4 	bl	d706c <HAL_I2C_Init>
}
   d7e84:	4620      	mov	r0, r4
   d7e86:	bd10      	pop	{r4, pc}
   d7e88:	000daf28 	.word	0x000daf28

000d7e8c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7e8c:	2300      	movs	r3, #0
   d7e8e:	461a      	mov	r2, r3
   d7e90:	4619      	mov	r1, r3
   d7e92:	7c00      	ldrb	r0, [r0, #16]
   d7e94:	f7ff b892 	b.w	d6fbc <HAL_I2C_Begin>

000d7e98 <_ZN7TwoWire5beginEh>:
}

void TwoWire::begin(uint8_t address)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d7e98:	460a      	mov	r2, r1
   d7e9a:	2300      	movs	r3, #0
   d7e9c:	2101      	movs	r1, #1
   d7e9e:	7c00      	ldrb	r0, [r0, #16]
   d7ea0:	f7ff b88c 	b.w	d6fbc <HAL_I2C_Begin>

000d7ea4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7ea4:	b570      	push	{r4, r5, r6, lr}
   d7ea6:	460c      	mov	r4, r1
   d7ea8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7eaa:	2514      	movs	r5, #20
   d7eac:	4606      	mov	r6, r0
   d7eae:	462a      	mov	r2, r5
   d7eb0:	2100      	movs	r1, #0
   d7eb2:	a801      	add	r0, sp, #4
   d7eb4:	f001 ffa9 	bl	d9e0a <memset>
   d7eb8:	7823      	ldrb	r3, [r4, #0]
   d7eba:	f88d 3008 	strb.w	r3, [sp, #8]
   d7ebe:	6863      	ldr	r3, [r4, #4]
   d7ec0:	9303      	str	r3, [sp, #12]
   d7ec2:	68e3      	ldr	r3, [r4, #12]
   d7ec4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7ec6:	2200      	movs	r2, #0
   d7ec8:	7a23      	ldrb	r3, [r4, #8]
   d7eca:	7c30      	ldrb	r0, [r6, #16]
   d7ecc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7ed0:	a901      	add	r1, sp, #4
   d7ed2:	9305      	str	r3, [sp, #20]
   d7ed4:	f7ff f8d2 	bl	d707c <HAL_I2C_Request_Data_Ex>
}
   d7ed8:	b006      	add	sp, #24
   d7eda:	bd70      	pop	{r4, r5, r6, pc}

000d7edc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7ede:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7ee0:	f88d 1000 	strb.w	r1, [sp]
   d7ee4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7ee8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7eea:	bf18      	it	ne
   d7eec:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7eee:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7ef0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7ef2:	f88d 3008 	strb.w	r3, [sp, #8]
   d7ef6:	f7ff ffd5 	bl	d7ea4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7efa:	b005      	add	sp, #20
   d7efc:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f00 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7f00:	2301      	movs	r3, #1
   d7f02:	f7ff bfeb 	b.w	d7edc <_ZN7TwoWire11requestFromEhjh>

000d7f06 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7f06:	2200      	movs	r2, #0
   d7f08:	7c00      	ldrb	r0, [r0, #16]
   d7f0a:	f7ff b85f 	b.w	d6fcc <HAL_I2C_Begin_Transmission>

000d7f0e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7f0e:	2200      	movs	r2, #0
   d7f10:	7c00      	ldrb	r0, [r0, #16]
   d7f12:	f7ff b863 	b.w	d6fdc <HAL_I2C_End_Transmission>

000d7f16 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7f16:	2101      	movs	r1, #1
   d7f18:	f7ff bff9 	b.w	d7f0e <_ZN7TwoWire15endTransmissionEh>

000d7f1c <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  HAL_I2C_Set_Callback_On_Receive(_i2c, function, NULL);
   d7f1c:	2200      	movs	r2, #0
   d7f1e:	7c00      	ldrb	r0, [r0, #16]
   d7f20:	f7ff b894 	b.w	d704c <HAL_I2C_Set_Callback_On_Receive>

000d7f24 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
   d7f24:	2200      	movs	r2, #0
   d7f26:	7c00      	ldrb	r0, [r0, #16]
   d7f28:	f7ff b898 	b.w	d705c <HAL_I2C_Set_Callback_On_Request>

000d7f2c <_ZN7TwoWire9isEnabledEv>:
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7f2c:	2100      	movs	r1, #0
   d7f2e:	7c00      	ldrb	r0, [r0, #16]
   d7f30:	f7ff b884 	b.w	d703c <HAL_I2C_Is_Enabled>

000d7f34 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7f34:	4770      	bx	lr

000d7f36 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f36:	7441      	strb	r1, [r0, #17]
   d7f38:	4770      	bx	lr

000d7f3a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7f3a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7f3c:	7c00      	ldrb	r0, [r0, #16]
   d7f3e:	f7ff f8dd 	bl	d70fc <HAL_USART_Available_Data_For_Write>
}
   d7f42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f46:	bd08      	pop	{r3, pc}

000d7f48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7f48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7f4a:	7c00      	ldrb	r0, [r0, #16]
   d7f4c:	f7ff f8ae 	bl	d70ac <HAL_USART_Available_Data>
}
   d7f50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f54:	bd08      	pop	{r3, pc}

000d7f56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7f56:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7f58:	7c00      	ldrb	r0, [r0, #16]
   d7f5a:	f7ff f8b7 	bl	d70cc <HAL_USART_Peek_Data>
}
   d7f5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f62:	bf28      	it	cs
   d7f64:	f04f 30ff 	movcs.w	r0, #4294967295
   d7f68:	bd08      	pop	{r3, pc}

000d7f6a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7f6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7f6c:	7c00      	ldrb	r0, [r0, #16]
   d7f6e:	f7ff f8a5 	bl	d70bc <HAL_USART_Read_Data>
}
   d7f72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f76:	bf28      	it	cs
   d7f78:	f04f 30ff 	movcs.w	r0, #4294967295
   d7f7c:	bd08      	pop	{r3, pc}

000d7f7e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7f7e:	7c00      	ldrb	r0, [r0, #16]
   d7f80:	f7ff b8ac 	b.w	d70dc <HAL_USART_Flush_Data>

000d7f84 <_ZN11USARTSerialD0Ev>:
   d7f84:	b510      	push	{r4, lr}
   d7f86:	2114      	movs	r1, #20
   d7f88:	4604      	mov	r4, r0
   d7f8a:	f000 ff01 	bl	d8d90 <_ZdlPvj>
   d7f8e:	4620      	mov	r0, r4
   d7f90:	bd10      	pop	{r4, pc}

000d7f92 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7f92:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7f94:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7f96:	4604      	mov	r4, r0
   d7f98:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7f9a:	b925      	cbnz	r5, d7fa6 <_ZN11USARTSerial5writeEh+0x14>
   d7f9c:	7c00      	ldrb	r0, [r0, #16]
   d7f9e:	f7ff f8ad 	bl	d70fc <HAL_USART_Available_Data_For_Write>
   d7fa2:	2800      	cmp	r0, #0
   d7fa4:	dd05      	ble.n	d7fb2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7fa6:	4631      	mov	r1, r6
   d7fa8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7fae:	f7ff b875 	b.w	d709c <HAL_USART_Write_Data>
  }
  return 0;
}
   d7fb2:	4628      	mov	r0, r5
   d7fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7fb8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7fb8:	b510      	push	{r4, lr}
   d7fba:	4604      	mov	r4, r0
   d7fbc:	4608      	mov	r0, r1
   d7fbe:	4611      	mov	r1, r2
   d7fc0:	2200      	movs	r2, #0
   d7fc2:	6062      	str	r2, [r4, #4]
   d7fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7fc8:	60a2      	str	r2, [r4, #8]
   d7fca:	4a05      	ldr	r2, [pc, #20]	; (d7fe0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7fcc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7fce:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7fd0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7fd2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7fd4:	461a      	mov	r2, r3
   d7fd6:	f7ff f859 	bl	d708c <HAL_USART_Init>
}
   d7fda:	4620      	mov	r0, r4
   d7fdc:	bd10      	pop	{r4, pc}
   d7fde:	bf00      	nop
   d7fe0:	000daf50 	.word	0x000daf50

000d7fe4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7fe4:	2300      	movs	r3, #0
   d7fe6:	7c00      	ldrb	r0, [r0, #16]
   d7fe8:	f7ff b890 	b.w	d710c <HAL_USART_BeginConfig>

000d7fec <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7fec:	2200      	movs	r2, #0
   d7fee:	f7ff bff9 	b.w	d7fe4 <_ZN11USARTSerial5beginEmm>

000d7ff2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7ff2:	7c00      	ldrb	r0, [r0, #16]
   d7ff4:	f7ff b87a 	b.w	d70ec <HAL_USART_Is_Enabled>

000d7ff8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d7ffa:	4c19      	ldr	r4, [pc, #100]	; (d8060 <_Z22__fetch_global_Serial1v+0x68>)
   d7ffc:	6825      	ldr	r5, [r4, #0]
   d7ffe:	b94d      	cbnz	r5, d8014 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d8000:	2084      	movs	r0, #132	; 0x84
   d8002:	f7fc f84a 	bl	d409a <_Znwj>
   d8006:	4606      	mov	r6, r0
   d8008:	b118      	cbz	r0, d8012 <_Z22__fetch_global_Serial1v+0x1a>
   d800a:	2284      	movs	r2, #132	; 0x84
   d800c:	4629      	mov	r1, r5
   d800e:	f001 fefc 	bl	d9e0a <memset>
   d8012:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d8014:	4d13      	ldr	r5, [pc, #76]	; (d8064 <_Z22__fetch_global_Serial1v+0x6c>)
   d8016:	682e      	ldr	r6, [r5, #0]
   d8018:	b94e      	cbnz	r6, d802e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d801a:	2084      	movs	r0, #132	; 0x84
   d801c:	f7fc f83d 	bl	d409a <_Znwj>
   d8020:	4607      	mov	r7, r0
   d8022:	b118      	cbz	r0, d802c <_Z22__fetch_global_Serial1v+0x34>
   d8024:	2284      	movs	r2, #132	; 0x84
   d8026:	4631      	mov	r1, r6
   d8028:	f001 feef 	bl	d9e0a <memset>
   d802c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d802e:	4f0e      	ldr	r7, [pc, #56]	; (d8068 <_Z22__fetch_global_Serial1v+0x70>)
   d8030:	6839      	ldr	r1, [r7, #0]
   d8032:	f011 0601 	ands.w	r6, r1, #1
   d8036:	d111      	bne.n	d805c <_Z22__fetch_global_Serial1v+0x64>
   d8038:	4638      	mov	r0, r7
   d803a:	f7fc f836 	bl	d40aa <__cxa_guard_acquire>
   d803e:	b168      	cbz	r0, d805c <_Z22__fetch_global_Serial1v+0x64>
   d8040:	6822      	ldr	r2, [r4, #0]
   d8042:	682b      	ldr	r3, [r5, #0]
   d8044:	4809      	ldr	r0, [pc, #36]	; (d806c <_Z22__fetch_global_Serial1v+0x74>)
   d8046:	4631      	mov	r1, r6
   d8048:	f7ff ffb6 	bl	d7fb8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d804c:	4638      	mov	r0, r7
   d804e:	f7fc f831 	bl	d40b4 <__cxa_guard_release>
   d8052:	4a07      	ldr	r2, [pc, #28]	; (d8070 <_Z22__fetch_global_Serial1v+0x78>)
   d8054:	4907      	ldr	r1, [pc, #28]	; (d8074 <_Z22__fetch_global_Serial1v+0x7c>)
   d8056:	4805      	ldr	r0, [pc, #20]	; (d806c <_Z22__fetch_global_Serial1v+0x74>)
   d8058:	f000 fe8c 	bl	d8d74 <__aeabi_atexit>
#endif
	return serial1;
}
   d805c:	4803      	ldr	r0, [pc, #12]	; (d806c <_Z22__fetch_global_Serial1v+0x74>)
   d805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8060:	2003e5f8 	.word	0x2003e5f8
   d8064:	2003e5f0 	.word	0x2003e5f0
   d8068:	2003e5f4 	.word	0x2003e5f4
   d806c:	2003e5dc 	.word	0x2003e5dc
   d8070:	2003dc68 	.word	0x2003dc68
   d8074:	000d7f35 	.word	0x000d7f35

000d8078 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8078:	7441      	strb	r1, [r0, #17]
   d807a:	4770      	bx	lr

000d807c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d807c:	4770      	bx	lr

000d807e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d807e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8080:	2100      	movs	r1, #0
   d8082:	7c00      	ldrb	r0, [r0, #16]
   d8084:	f7fe ff52 	bl	d6f2c <HAL_USB_USART_Receive_Data>
}
   d8088:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d808c:	bf28      	it	cs
   d808e:	f04f 30ff 	movcs.w	r0, #4294967295
   d8092:	bd08      	pop	{r3, pc}

000d8094 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8094:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8096:	2101      	movs	r1, #1
   d8098:	7c00      	ldrb	r0, [r0, #16]
   d809a:	f7fe ff47 	bl	d6f2c <HAL_USB_USART_Receive_Data>
}
   d809e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d80a2:	bf28      	it	cs
   d80a4:	f04f 30ff 	movcs.w	r0, #4294967295
   d80a8:	bd08      	pop	{r3, pc}

000d80aa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d80aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d80ac:	7c00      	ldrb	r0, [r0, #16]
   d80ae:	f7fe ff35 	bl	d6f1c <HAL_USB_USART_Available_Data_For_Write>
}
   d80b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80b6:	bd08      	pop	{r3, pc}

000d80b8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d80b8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d80ba:	7c00      	ldrb	r0, [r0, #16]
   d80bc:	f7fe ff26 	bl	d6f0c <HAL_USB_USART_Available_Data>
}
   d80c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80c4:	bd08      	pop	{r3, pc}

000d80c6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d80c6:	7c00      	ldrb	r0, [r0, #16]
   d80c8:	f7fe bf40 	b.w	d6f4c <HAL_USB_USART_Flush_Data>

000d80cc <_ZN9USBSerialD0Ev>:
   d80cc:	b510      	push	{r4, lr}
   d80ce:	2114      	movs	r1, #20
   d80d0:	4604      	mov	r4, r0
   d80d2:	f000 fe5d 	bl	d8d90 <_ZdlPvj>
   d80d6:	4620      	mov	r0, r4
   d80d8:	bd10      	pop	{r4, pc}

000d80da <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d80da:	b538      	push	{r3, r4, r5, lr}
   d80dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d80de:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d80e0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d80e2:	f7fe ff1b 	bl	d6f1c <HAL_USB_USART_Available_Data_For_Write>
   d80e6:	2800      	cmp	r0, #0
   d80e8:	dc01      	bgt.n	d80ee <_ZN9USBSerial5writeEh+0x14>
   d80ea:	7c60      	ldrb	r0, [r4, #17]
   d80ec:	b128      	cbz	r0, d80fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d80ee:	4629      	mov	r1, r5
   d80f0:	7c20      	ldrb	r0, [r4, #16]
   d80f2:	f7fe ff23 	bl	d6f3c <HAL_USB_USART_Send_Data>
   d80f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d80fa:	bd38      	pop	{r3, r4, r5, pc}

000d80fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d80fc:	b510      	push	{r4, lr}
   d80fe:	4604      	mov	r4, r0
   d8100:	2300      	movs	r3, #0
   d8102:	6063      	str	r3, [r4, #4]
   d8104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8108:	60a3      	str	r3, [r4, #8]
   d810a:	4b05      	ldr	r3, [pc, #20]	; (d8120 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d810c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d810e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8110:	4608      	mov	r0, r1
{
  _serial = serial;
   d8112:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8114:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8116:	4611      	mov	r1, r2
   d8118:	f7fe fee8 	bl	d6eec <HAL_USB_USART_Init>
}
   d811c:	4620      	mov	r0, r4
   d811e:	bd10      	pop	{r4, pc}
   d8120:	000daf80 	.word	0x000daf80

000d8124 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8124:	2200      	movs	r2, #0
   d8126:	7c00      	ldrb	r0, [r0, #16]
   d8128:	f7fe bee8 	b.w	d6efc <HAL_USB_USART_Begin>

000d812c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d812c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d812e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8130:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8132:	2100      	movs	r1, #0
   d8134:	f001 fe69 	bl	d9e0a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8138:	4620      	mov	r0, r4
   d813a:	bd10      	pop	{r4, pc}

000d813c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d813c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d813e:	4d0e      	ldr	r5, [pc, #56]	; (d8178 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8140:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8142:	a801      	add	r0, sp, #4
   d8144:	f7ff fff2 	bl	d812c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8148:	6829      	ldr	r1, [r5, #0]
   d814a:	f011 0401 	ands.w	r4, r1, #1
   d814e:	d110      	bne.n	d8172 <_Z16_fetch_usbserialv+0x36>
   d8150:	4628      	mov	r0, r5
   d8152:	f7fb ffaa 	bl	d40aa <__cxa_guard_acquire>
   d8156:	b160      	cbz	r0, d8172 <_Z16_fetch_usbserialv+0x36>
   d8158:	aa01      	add	r2, sp, #4
   d815a:	4621      	mov	r1, r4
   d815c:	4807      	ldr	r0, [pc, #28]	; (d817c <_Z16_fetch_usbserialv+0x40>)
   d815e:	f7ff ffcd 	bl	d80fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8162:	4628      	mov	r0, r5
   d8164:	f7fb ffa6 	bl	d40b4 <__cxa_guard_release>
   d8168:	4a05      	ldr	r2, [pc, #20]	; (d8180 <_Z16_fetch_usbserialv+0x44>)
   d816a:	4906      	ldr	r1, [pc, #24]	; (d8184 <_Z16_fetch_usbserialv+0x48>)
   d816c:	4803      	ldr	r0, [pc, #12]	; (d817c <_Z16_fetch_usbserialv+0x40>)
   d816e:	f000 fe01 	bl	d8d74 <__aeabi_atexit>
	return _usbserial;
}
   d8172:	4802      	ldr	r0, [pc, #8]	; (d817c <_Z16_fetch_usbserialv+0x40>)
   d8174:	b007      	add	sp, #28
   d8176:	bd30      	pop	{r4, r5, pc}
   d8178:	2003e5fc 	.word	0x2003e5fc
   d817c:	2003e600 	.word	0x2003e600
   d8180:	2003dc68 	.word	0x2003dc68
   d8184:	000d807d 	.word	0x000d807d

000d8188 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8188:	4770      	bx	lr

000d818a <_ZN9IPAddressD0Ev>:
   d818a:	b510      	push	{r4, lr}
   d818c:	2118      	movs	r1, #24
   d818e:	4604      	mov	r4, r0
   d8190:	f000 fdfe 	bl	d8d90 <_ZdlPvj>
   d8194:	4620      	mov	r0, r4
   d8196:	bd10      	pop	{r4, pc}

000d8198 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8198:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d819a:	7d03      	ldrb	r3, [r0, #20]
   d819c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d819e:	b08d      	sub	sp, #52	; 0x34
   d81a0:	460e      	mov	r6, r1
   d81a2:	f100 0704 	add.w	r7, r0, #4
   d81a6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d81aa:	d002      	beq.n	d81b2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d81ac:	f100 0508 	add.w	r5, r0, #8
   d81b0:	e018      	b.n	d81e4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d81b2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d81b4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d81b6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d81ba:	232f      	movs	r3, #47	; 0x2f
   d81bc:	462a      	mov	r2, r5
   d81be:	200a      	movs	r0, #10
   d81c0:	f7fe ffac 	bl	d711c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d81c4:	4628      	mov	r0, r5
   d81c6:	f001 fe63 	bl	d9e90 <strlen>
   d81ca:	6833      	ldr	r3, [r6, #0]
   d81cc:	4602      	mov	r2, r0
   d81ce:	68db      	ldr	r3, [r3, #12]
   d81d0:	4629      	mov	r1, r5
   d81d2:	4630      	mov	r0, r6
   d81d4:	4798      	blx	r3
   d81d6:	e00f      	b.n	d81f8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d81d8:	b124      	cbz	r4, d81e4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d81da:	212e      	movs	r1, #46	; 0x2e
   d81dc:	4630      	mov	r0, r6
   d81de:	f000 fa30 	bl	d8642 <_ZN5Print5printEc>
   d81e2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d81e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d81e8:	220a      	movs	r2, #10
   d81ea:	4630      	mov	r0, r6
   d81ec:	f000 fa42 	bl	d8674 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d81f0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d81f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d81f4:	d1f0      	bne.n	d81d8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d81f6:	4620      	mov	r0, r4
    }
    return n;
}
   d81f8:	b00d      	add	sp, #52	; 0x34
   d81fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d81fc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d81fc:	b510      	push	{r4, lr}
   d81fe:	4b05      	ldr	r3, [pc, #20]	; (d8214 <_ZN9IPAddressC1Ev+0x18>)
   d8200:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8202:	2211      	movs	r2, #17
   d8204:	f840 3b04 	str.w	r3, [r0], #4
   d8208:	2100      	movs	r1, #0
   d820a:	f001 fdfe 	bl	d9e0a <memset>
{
    clear();
}
   d820e:	4620      	mov	r0, r4
   d8210:	bd10      	pop	{r4, pc}
   d8212:	bf00      	nop
   d8214:	000dafb0 	.word	0x000dafb0

000d8218 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8218:	4603      	mov	r3, r0
   d821a:	4a07      	ldr	r2, [pc, #28]	; (d8238 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d821c:	b510      	push	{r4, lr}
   d821e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8222:	f101 0210 	add.w	r2, r1, #16
   d8226:	f851 4b04 	ldr.w	r4, [r1], #4
   d822a:	f843 4b04 	str.w	r4, [r3], #4
   d822e:	4291      	cmp	r1, r2
   d8230:	d1f9      	bne.n	d8226 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8232:	780a      	ldrb	r2, [r1, #0]
   d8234:	701a      	strb	r2, [r3, #0]
}
   d8236:	bd10      	pop	{r4, pc}
   d8238:	000dafb0 	.word	0x000dafb0

000d823c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d823c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d823e:	2b04      	cmp	r3, #4
   d8240:	d101      	bne.n	d8246 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d8242:	6840      	ldr	r0, [r0, #4]
   d8244:	e008      	b.n	d8258 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d8246:	2b06      	cmp	r3, #6
   d8248:	d10a      	bne.n	d8260 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d824a:	6843      	ldr	r3, [r0, #4]
   d824c:	b953      	cbnz	r3, d8264 <_ZNK9IPAddresscvbEv+0x28>
   d824e:	6883      	ldr	r3, [r0, #8]
   d8250:	b943      	cbnz	r3, d8264 <_ZNK9IPAddresscvbEv+0x28>
   d8252:	68c3      	ldr	r3, [r0, #12]
   d8254:	b933      	cbnz	r3, d8264 <_ZNK9IPAddresscvbEv+0x28>
   d8256:	6900      	ldr	r0, [r0, #16]
   d8258:	3000      	adds	r0, #0
   d825a:	bf18      	it	ne
   d825c:	2001      	movne	r0, #1
   d825e:	4770      	bx	lr
    } else {
        return false;
   d8260:	2000      	movs	r0, #0
   d8262:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8264:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d8266:	4770      	bx	lr

000d8268 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8268:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d826a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d826e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8272:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8276:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d827a:	2304      	movs	r3, #4
   d827c:	6041      	str	r1, [r0, #4]
   d827e:	7503      	strb	r3, [r0, #20]
   d8280:	bd10      	pop	{r4, pc}

000d8282 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8282:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8284:	780d      	ldrb	r5, [r1, #0]
   d8286:	788b      	ldrb	r3, [r1, #2]
   d8288:	784a      	ldrb	r2, [r1, #1]
   d828a:	78c9      	ldrb	r1, [r1, #3]
   d828c:	9100      	str	r1, [sp, #0]
   d828e:	4629      	mov	r1, r5
   d8290:	f7ff ffea 	bl	d8268 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8294:	b003      	add	sp, #12
   d8296:	bd30      	pop	{r4, r5, pc}

000d8298 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d8298:	b510      	push	{r4, lr}
   d829a:	4b03      	ldr	r3, [pc, #12]	; (d82a8 <_ZN9IPAddressC1EPKh+0x10>)
   d829c:	6003      	str	r3, [r0, #0]
   d829e:	4604      	mov	r4, r0
{
    *this = address;
   d82a0:	f7ff ffef 	bl	d8282 <_ZN9IPAddressaSEPKh>
}
   d82a4:	4620      	mov	r0, r4
   d82a6:	bd10      	pop	{r4, pc}
   d82a8:	000dafb0 	.word	0x000dafb0

000d82ac <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d82ac:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d82ae:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d82b0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d82b2:	b113      	cbz	r3, d82ba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d82b4:	2203      	movs	r2, #3
   d82b6:	4601      	mov	r1, r0
   d82b8:	4798      	blx	r3
    }
   d82ba:	4620      	mov	r0, r4
   d82bc:	bd10      	pop	{r4, pc}
	...

000d82c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d82c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d82c2:	4b0c      	ldr	r3, [pc, #48]	; (d82f4 <serialEventRun+0x34>)
   d82c4:	b133      	cbz	r3, d82d4 <serialEventRun+0x14>
   d82c6:	f7ff ff39 	bl	d813c <_Z16_fetch_usbserialv>
   d82ca:	6803      	ldr	r3, [r0, #0]
   d82cc:	691b      	ldr	r3, [r3, #16]
   d82ce:	4798      	blx	r3
   d82d0:	2800      	cmp	r0, #0
   d82d2:	dc09      	bgt.n	d82e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d82d4:	4b08      	ldr	r3, [pc, #32]	; (d82f8 <serialEventRun+0x38>)
   d82d6:	b163      	cbz	r3, d82f2 <serialEventRun+0x32>
   d82d8:	f7ff fe8e 	bl	d7ff8 <_Z22__fetch_global_Serial1v>
   d82dc:	6803      	ldr	r3, [r0, #0]
   d82de:	691b      	ldr	r3, [r3, #16]
   d82e0:	4798      	blx	r3
   d82e2:	2800      	cmp	r0, #0
   d82e4:	dc03      	bgt.n	d82ee <serialEventRun+0x2e>
   d82e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d82e8:	f3af 8000 	nop.w
   d82ec:	e7f2      	b.n	d82d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d82ee:	f3af 8000 	nop.w
   d82f2:	bd08      	pop	{r3, pc}
	...

000d82fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d82fc:	b508      	push	{r3, lr}
	serialEventRun();
   d82fe:	f7ff ffdf 	bl	d82c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8302:	f7fe ff5b 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8306:	4b01      	ldr	r3, [pc, #4]	; (d830c <_post_loop+0x10>)
   d8308:	6018      	str	r0, [r3, #0]
   d830a:	bd08      	pop	{r3, pc}
   d830c:	2003e714 	.word	0x2003e714

000d8310 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8310:	4802      	ldr	r0, [pc, #8]	; (d831c <_Z33system_initialize_user_backup_ramv+0xc>)
   d8312:	4a03      	ldr	r2, [pc, #12]	; (d8320 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8314:	4903      	ldr	r1, [pc, #12]	; (d8324 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8316:	1a12      	subs	r2, r2, r0
   d8318:	f001 bd6c 	b.w	d9df4 <memcpy>
   d831c:	2003f400 	.word	0x2003f400
   d8320:	2003f404 	.word	0x2003f404
   d8324:	000db3c0 	.word	0x000db3c0

000d8328 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8328:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d832a:	2300      	movs	r3, #0
   d832c:	9300      	str	r3, [sp, #0]
   d832e:	461a      	mov	r2, r3
   d8330:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8334:	f7ff f89c 	bl	d7470 <system_ctrl_set_result>
}
   d8338:	b003      	add	sp, #12
   d833a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8340 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8340:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8342:	8843      	ldrh	r3, [r0, #2]
   d8344:	2b0a      	cmp	r3, #10
   d8346:	d008      	beq.n	d835a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8348:	2b50      	cmp	r3, #80	; 0x50
   d834a:	d109      	bne.n	d8360 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d834c:	4b09      	ldr	r3, [pc, #36]	; (d8374 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d834e:	681b      	ldr	r3, [r3, #0]
   d8350:	b13b      	cbz	r3, d8362 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8352:	b003      	add	sp, #12
   d8354:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8358:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d835a:	f7ff ffe5 	bl	d8328 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d835e:	e006      	b.n	d836e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8360:	2300      	movs	r3, #0
   d8362:	9300      	str	r3, [sp, #0]
   d8364:	461a      	mov	r2, r3
   d8366:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d836a:	f7ff f881 	bl	d7470 <system_ctrl_set_result>
        break;
    }
}
   d836e:	b003      	add	sp, #12
   d8370:	f85d fb04 	ldr.w	pc, [sp], #4
   d8374:	2003e614 	.word	0x2003e614

000d8378 <module_user_init_hook>:

void module_user_init_hook()
{
   d8378:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d837a:	4c10      	ldr	r4, [pc, #64]	; (d83bc <module_user_init_hook+0x44>)
   d837c:	4d10      	ldr	r5, [pc, #64]	; (d83c0 <module_user_init_hook+0x48>)
   d837e:	6823      	ldr	r3, [r4, #0]
   d8380:	42ab      	cmp	r3, r5
   d8382:	4b10      	ldr	r3, [pc, #64]	; (d83c4 <module_user_init_hook+0x4c>)
   d8384:	bf0c      	ite	eq
   d8386:	2201      	moveq	r2, #1
   d8388:	2200      	movne	r2, #0
   d838a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d838c:	d002      	beq.n	d8394 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d838e:	f7ff ffbf 	bl	d8310 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8392:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8394:	f7fe ff02 	bl	d719c <HAL_RNG_GetRandomNumber>
   d8398:	4604      	mov	r4, r0
    srand(seed);
   d839a:	f001 fd3f 	bl	d9e1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d839e:	4b0a      	ldr	r3, [pc, #40]	; (d83c8 <module_user_init_hook+0x50>)
   d83a0:	b113      	cbz	r3, d83a8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d83a2:	4620      	mov	r0, r4
   d83a4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d83a8:	2100      	movs	r1, #0
   d83aa:	4807      	ldr	r0, [pc, #28]	; (d83c8 <module_user_init_hook+0x50>)
   d83ac:	f7fe ffde 	bl	d736c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d83b0:	2100      	movs	r1, #0
   d83b2:	4806      	ldr	r0, [pc, #24]	; (d83cc <module_user_init_hook+0x54>)
}
   d83b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d83b8:	f7ff b850 	b.w	d745c <system_ctrl_set_app_request_handler>
   d83bc:	2003f400 	.word	0x2003f400
   d83c0:	9a271c1e 	.word	0x9a271c1e
   d83c4:	2003e618 	.word	0x2003e618
   d83c8:	00000000 	.word	0x00000000
   d83cc:	000d8341 	.word	0x000d8341

000d83d0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d83d0:	b510      	push	{r4, lr}
   d83d2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d83d4:	f7ff ff6a 	bl	d82ac <_ZNSt14_Function_baseD1Ev>
   d83d8:	4620      	mov	r0, r4
   d83da:	bd10      	pop	{r4, pc}

000d83dc <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d83dc:	b510      	push	{r4, lr}
   d83de:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d83e0:	f7fe ff84 	bl	d72ec <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d83e4:	4284      	cmp	r4, r0
   d83e6:	d008      	beq.n	d83fa <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d83e8:	b11c      	cbz	r4, d83f2 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d83ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d83ee:	f7fe bf6d 	b.w	d72cc <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d83f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d83f6:	f7fe bf71 	b.w	d72dc <LED_Signaling_Stop>
   d83fa:	bd10      	pop	{r4, pc}

000d83fc <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d83fc:	b570      	push	{r4, r5, r6, lr}
   d83fe:	4605      	mov	r5, r0
   d8400:	460e      	mov	r6, r1
   d8402:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d8404:	f7fe ff72 	bl	d72ec <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d8408:	b150      	cbz	r0, d8420 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d840a:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d840e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d8412:	f7fe ff53 	bl	d72bc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d8416:	20e7      	movs	r0, #231	; 0xe7
}
   d8418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d841c:	f7fe bf6e 	b.w	d72fc <LED_On>
   d8420:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8424 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8424:	4803      	ldr	r0, [pc, #12]	; (d8434 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8426:	4a04      	ldr	r2, [pc, #16]	; (d8438 <_GLOBAL__sub_I_RGB+0x14>)
   d8428:	4904      	ldr	r1, [pc, #16]	; (d843c <_GLOBAL__sub_I_RGB+0x18>)
   d842a:	2300      	movs	r3, #0
   d842c:	6083      	str	r3, [r0, #8]
   d842e:	f000 bca1 	b.w	d8d74 <__aeabi_atexit>
   d8432:	bf00      	nop
   d8434:	2003e61c 	.word	0x2003e61c
   d8438:	2003dc68 	.word	0x2003dc68
   d843c:	000d83d1 	.word	0x000d83d1

000d8440 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8440:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   d8442:	b510      	push	{r4, lr}
   d8444:	b90a      	cbnz	r2, d844a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   d8446:	f000 fcb6 	bl	d8db6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d844a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   d844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8450:	4718      	bx	r3

000d8452 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8452:	f7fe bf1b 	b.w	d728c <HAL_Interrupts_Disable_All>

000d8456 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8456:	f7fe bf11 	b.w	d727c <HAL_Interrupts_Enable_All>

000d845a <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d845a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d845c:	2300      	movs	r3, #0
   d845e:	6083      	str	r3, [r0, #8]
   d8460:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8462:	4604      	mov	r4, r0
   d8464:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8466:	b12b      	cbz	r3, d8474 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8468:	2202      	movs	r2, #2
   d846a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d846c:	68eb      	ldr	r3, [r5, #12]
   d846e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8470:	68ab      	ldr	r3, [r5, #8]
   d8472:	60a3      	str	r3, [r4, #8]
	}
    }
   d8474:	4620      	mov	r0, r4
   d8476:	bd38      	pop	{r3, r4, r5, pc}

000d8478 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d8478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   d847a:	4b0d      	ldr	r3, [pc, #52]	; (d84b0 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   d847c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d8480:	4606      	mov	r6, r0
   d8482:	460f      	mov	r7, r1
   d8484:	461c      	mov	r4, r3
    delete handlers[pin];
   d8486:	b135      	cbz	r5, d8496 <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8488:	4628      	mov	r0, r5
   d848a:	f7ff ff0f 	bl	d82ac <_ZNSt14_Function_baseD1Ev>
   d848e:	2110      	movs	r1, #16
   d8490:	4628      	mov	r0, r5
   d8492:	f000 fc7d 	bl	d8d90 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   d8496:	2010      	movs	r0, #16
   d8498:	f7fb fdff 	bl	d409a <_Znwj>
   d849c:	4605      	mov	r5, r0
   d849e:	b110      	cbz	r0, d84a6 <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   d84a0:	4639      	mov	r1, r7
   d84a2:	f7ff ffda 	bl	d845a <_ZNSt8functionIFvvEEC1ERKS1_>
   d84a6:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   d84aa:	4628      	mov	r0, r5
   d84ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d84ae:	bf00      	nop
   d84b0:	2003e62c 	.word	0x2003e62c

000d84b4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d84b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d84b6:	460c      	mov	r4, r1
   d84b8:	b085      	sub	sp, #20
   d84ba:	4605      	mov	r5, r0
   d84bc:	4617      	mov	r7, r2
   d84be:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   d84c0:	f7fe fed4 	bl	d726c <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   d84c4:	4621      	mov	r1, r4
   d84c6:	4628      	mov	r0, r5
   d84c8:	f7ff ffd6 	bl	d8478 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   d84cc:	4604      	mov	r4, r0
   d84ce:	b1c8      	cbz	r0, d8504 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
        HAL_InterruptExtraConfiguration extra = {0};
   d84d0:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d84d2:	2304      	movs	r3, #4
  if (priority >= 0) {
   d84d4:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   d84d6:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d84d8:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d84dc:	bfa5      	ittet	ge
   d84de:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d84e2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d84e6:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d84e8:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d84ea:	9300      	str	r3, [sp, #0]
   d84ec:	4602      	mov	r2, r0
   d84ee:	463b      	mov	r3, r7
   d84f0:	4907      	ldr	r1, [pc, #28]	; (d8510 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d84f2:	bfa8      	it	ge
   d84f4:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d84f8:	4628      	mov	r0, r5
   d84fa:	f7fe feaf 	bl	d725c <HAL_Interrupts_Attach>
   d84fe:	b108      	cbz	r0, d8504 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
            return false;
   d8500:	2000      	movs	r0, #0
   d8502:	e002      	b.n	d850a <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x56>
        }
    }
    return handler!=NULL;
   d8504:	1c20      	adds	r0, r4, #0
   d8506:	bf18      	it	ne
   d8508:	2001      	movne	r0, #1
}
   d850a:	b005      	add	sp, #20
   d850c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d850e:	bf00      	nop
   d8510:	000d8441 	.word	0x000d8441

000d8514 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8514:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8516:	2000      	movs	r0, #0
   d8518:	f7fe ff20 	bl	d735c <spark_sync_time_pending>
   d851c:	b128      	cbz	r0, d852a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d851e:	f7fe ff0d 	bl	d733c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8522:	f080 0001 	eor.w	r0, r0, #1
   d8526:	b2c0      	uxtb	r0, r0
   d8528:	bd08      	pop	{r3, pc}
   d852a:	2001      	movs	r0, #1
    }
   d852c:	bd08      	pop	{r3, pc}
	...

000d8530 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8530:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d8532:	4b0e      	ldr	r3, [pc, #56]	; (d856c <_ZN9TimeClass7timeStrEl+0x3c>)
   d8534:	681b      	ldr	r3, [r3, #0]
   d8536:	4419      	add	r1, r3
   d8538:	4b0d      	ldr	r3, [pc, #52]	; (d8570 <_ZN9TimeClass7timeStrEl+0x40>)
   d853a:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d853c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d853e:	a802      	add	r0, sp, #8
   d8540:	4419      	add	r1, r3
   d8542:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d8546:	f001 fb5d 	bl	d9c04 <localtime>
        char* ascstr = asctime(calendar_time);
   d854a:	f001 fb11 	bl	d9b70 <asctime>
   d854e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d8550:	f001 fc9e 	bl	d9e90 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d8554:	4428      	add	r0, r5
   d8556:	2300      	movs	r3, #0
   d8558:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d855c:	4629      	mov	r1, r5
   d855e:	4620      	mov	r0, r4
   d8560:	f000 fa1d 	bl	d899e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8564:	4620      	mov	r0, r4
   d8566:	b003      	add	sp, #12
   d8568:	bd30      	pop	{r4, r5, pc}
   d856a:	bf00      	nop
   d856c:	2003e6c4 	.word	0x2003e6c4
   d8570:	2003e6c0 	.word	0x2003e6c0

000d8574 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8574:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8576:	2000      	movs	r0, #0
   d8578:	f7fe fe30 	bl	d71dc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d857c:	4604      	mov	r4, r0
   d857e:	b968      	cbnz	r0, d859c <_ZN9TimeClass7isValidEv+0x28>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8580:	f7fe ff4c 	bl	d741c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8584:	2801      	cmp	r0, #1
   d8586:	d10b      	bne.n	d85a0 <_ZN9TimeClass7isValidEv+0x2c>
   d8588:	4620      	mov	r0, r4
   d858a:	f7fe ff5f 	bl	d744c <system_thread_get_state>
   d858e:	b938      	cbnz	r0, d85a0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8590:	f7ff ffc0 	bl	d8514 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8594:	b930      	cbnz	r0, d85a4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8596:	f7fe fec9 	bl	d732c <spark_process>
   d859a:	e7f9      	b.n	d8590 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d859c:	2001      	movs	r0, #1
   d859e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d85a0:	2000      	movs	r0, #0
   d85a2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d85a4:	f7ff ffb6 	bl	d8514 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d85a8:	2000      	movs	r0, #0
   d85aa:	f7fe fe17 	bl	d71dc <HAL_RTC_Time_Is_Valid>
   d85ae:	3000      	adds	r0, #0
   d85b0:	bf18      	it	ne
   d85b2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d85b4:	bd10      	pop	{r4, pc}

000d85b6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d85b6:	b508      	push	{r3, lr}
    (void)isValid();
   d85b8:	f7ff ffdc 	bl	d8574 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d85bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d85c0:	f7fe be04 	b.w	d71cc <HAL_RTC_Get_UnixTime>

000d85c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d85c4:	4b02      	ldr	r3, [pc, #8]	; (d85d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d85c6:	681a      	ldr	r2, [r3, #0]
   d85c8:	4b02      	ldr	r3, [pc, #8]	; (d85d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d85ca:	601a      	str	r2, [r3, #0]
   d85cc:	4770      	bx	lr
   d85ce:	bf00      	nop
   d85d0:	2003dbb0 	.word	0x2003dbb0
   d85d4:	2003e6bc 	.word	0x2003e6bc

000d85d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d85d8:	4b01      	ldr	r3, [pc, #4]	; (d85e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d85da:	4a02      	ldr	r2, [pc, #8]	; (d85e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d85dc:	601a      	str	r2, [r3, #0]
   d85de:	4770      	bx	lr
   d85e0:	2003e6c8 	.word	0x2003e6c8
   d85e4:	000db053 	.word	0x000db053

000d85e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d85e8:	2100      	movs	r1, #0
   d85ea:	f7fe bf27 	b.w	d743c <system_delay_ms>

000d85ee <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d85ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85f0:	4606      	mov	r6, r0
   d85f2:	460d      	mov	r5, r1
   d85f4:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d85f6:	2400      	movs	r4, #0
  while (size--) {
   d85f8:	42bd      	cmp	r5, r7
   d85fa:	d00c      	beq.n	d8616 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d85fc:	6833      	ldr	r3, [r6, #0]
   d85fe:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8602:	689b      	ldr	r3, [r3, #8]
   d8604:	4630      	mov	r0, r6
   d8606:	4798      	blx	r3
     if (chunk>=0)
   d8608:	2800      	cmp	r0, #0
   d860a:	db01      	blt.n	d8610 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d860c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d860e:	e7f3      	b.n	d85f8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8610:	2c00      	cmp	r4, #0
   d8612:	bf08      	it	eq
   d8614:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8616:	4620      	mov	r0, r4
   d8618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d861a <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d861a:	b570      	push	{r4, r5, r6, lr}
   d861c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d861e:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d8620:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d8622:	b149      	cbz	r1, d8638 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d8624:	f001 fc34 	bl	d9e90 <strlen>
   d8628:	682b      	ldr	r3, [r5, #0]
   d862a:	4602      	mov	r2, r0
   d862c:	4621      	mov	r1, r4
   d862e:	4628      	mov	r0, r5
   d8630:	68db      	ldr	r3, [r3, #12]
    }
   d8632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8636:	4718      	bx	r3
    }
   d8638:	bd70      	pop	{r4, r5, r6, pc}

000d863a <_ZN5Print5printEPKc>:
   d863a:	b508      	push	{r3, lr}
   d863c:	f7ff ffed 	bl	d861a <_ZN5Print5writeEPKc>
   d8640:	bd08      	pop	{r3, pc}

000d8642 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8642:	6803      	ldr	r3, [r0, #0]
   d8644:	689b      	ldr	r3, [r3, #8]
   d8646:	4718      	bx	r3

000d8648 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8648:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d864a:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d864c:	4605      	mov	r5, r0
  size_t n = print('\r');
   d864e:	f7ff fff8 	bl	d8642 <_ZN5Print5printEc>
  n += print('\n');
   d8652:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8654:	4604      	mov	r4, r0
  n += print('\n');
   d8656:	4628      	mov	r0, r5
   d8658:	f7ff fff3 	bl	d8642 <_ZN5Print5printEc>
  return n;
}
   d865c:	4420      	add	r0, r4
   d865e:	bd38      	pop	{r3, r4, r5, pc}

000d8660 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8660:	b538      	push	{r3, r4, r5, lr}
   d8662:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8664:	f7ff ffd9 	bl	d861a <_ZN5Print5writeEPKc>
   d8668:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d866a:	4628      	mov	r0, r5
   d866c:	f7ff ffec 	bl	d8648 <_ZN5Print7printlnEv>
  return n;
}
   d8670:	4420      	add	r0, r4
   d8672:	bd38      	pop	{r3, r4, r5, pc}

000d8674 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8674:	b530      	push	{r4, r5, lr}
   d8676:	b08b      	sub	sp, #44	; 0x2c
   d8678:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d867a:	2100      	movs	r1, #0
   d867c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8680:	2a01      	cmp	r2, #1
   d8682:	bf98      	it	ls
   d8684:	220a      	movls	r2, #10
   d8686:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d868a:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d868e:	fb05 3312 	mls	r3, r5, r2, r3
   d8692:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8696:	2b09      	cmp	r3, #9
   d8698:	bf94      	ite	ls
   d869a:	3330      	addls	r3, #48	; 0x30
   d869c:	3337      	addhi	r3, #55	; 0x37
   d869e:	b2db      	uxtb	r3, r3
   d86a0:	4621      	mov	r1, r4
   d86a2:	f804 3901 	strb.w	r3, [r4], #-1
   d86a6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d86a8:	2d00      	cmp	r5, #0
   d86aa:	d1ee      	bne.n	d868a <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d86ac:	f7ff ffb5 	bl	d861a <_ZN5Print5writeEPKc>
}
   d86b0:	b00b      	add	sp, #44	; 0x2c
   d86b2:	bd30      	pop	{r4, r5, pc}

000d86b4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d86b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d86b8:	ec57 6b10 	vmov	r6, r7, d0
   d86bc:	4682      	mov	sl, r0
   d86be:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d86c0:	ee10 2a10 	vmov	r2, s0
   d86c4:	463b      	mov	r3, r7
   d86c6:	ee10 0a10 	vmov	r0, s0
   d86ca:	4639      	mov	r1, r7
   d86cc:	f001 f9a2 	bl	d9a14 <__aeabi_dcmpun>
   d86d0:	b108      	cbz	r0, d86d6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d86d2:	494e      	ldr	r1, [pc, #312]	; (d880c <_ZN5Print10printFloatEdh+0x158>)
   d86d4:	e012      	b.n	d86fc <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d86d6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d86da:	f04f 32ff 	mov.w	r2, #4294967295
   d86de:	4b4c      	ldr	r3, [pc, #304]	; (d8810 <_ZN5Print10printFloatEdh+0x15c>)
   d86e0:	4630      	mov	r0, r6
   d86e2:	4649      	mov	r1, r9
   d86e4:	f001 f996 	bl	d9a14 <__aeabi_dcmpun>
   d86e8:	b968      	cbnz	r0, d8706 <_ZN5Print10printFloatEdh+0x52>
   d86ea:	f04f 32ff 	mov.w	r2, #4294967295
   d86ee:	4b48      	ldr	r3, [pc, #288]	; (d8810 <_ZN5Print10printFloatEdh+0x15c>)
   d86f0:	4630      	mov	r0, r6
   d86f2:	4649      	mov	r1, r9
   d86f4:	f001 f970 	bl	d99d8 <__aeabi_dcmple>
   d86f8:	b928      	cbnz	r0, d8706 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d86fa:	4946      	ldr	r1, [pc, #280]	; (d8814 <_ZN5Print10printFloatEdh+0x160>)
   d86fc:	4650      	mov	r0, sl
   d86fe:	f7ff ff8c 	bl	d861a <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d8702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8706:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d870a:	4b43      	ldr	r3, [pc, #268]	; (d8818 <_ZN5Print10printFloatEdh+0x164>)
   d870c:	4630      	mov	r0, r6
   d870e:	4639      	mov	r1, r7
   d8710:	f001 f976 	bl	d9a00 <__aeabi_dcmpgt>
   d8714:	b108      	cbz	r0, d871a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8716:	4941      	ldr	r1, [pc, #260]	; (d881c <_ZN5Print10printFloatEdh+0x168>)
   d8718:	e7f0      	b.n	d86fc <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d871a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d871e:	4b40      	ldr	r3, [pc, #256]	; (d8820 <_ZN5Print10printFloatEdh+0x16c>)
   d8720:	4630      	mov	r0, r6
   d8722:	4639      	mov	r1, r7
   d8724:	f001 f94e 	bl	d99c4 <__aeabi_dcmplt>
   d8728:	2800      	cmp	r0, #0
   d872a:	d1f4      	bne.n	d8716 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d872c:	2200      	movs	r2, #0
   d872e:	2300      	movs	r3, #0
   d8730:	4630      	mov	r0, r6
   d8732:	4639      	mov	r1, r7
   d8734:	f001 f946 	bl	d99c4 <__aeabi_dcmplt>
   d8738:	b140      	cbz	r0, d874c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d873a:	212d      	movs	r1, #45	; 0x2d
   d873c:	4650      	mov	r0, sl
   d873e:	f7ff ff80 	bl	d8642 <_ZN5Print5printEc>
     number = -number;
   d8742:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d8746:	4604      	mov	r4, r0
     number = -number;
   d8748:	461f      	mov	r7, r3
   d874a:	e000      	b.n	d874e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d874c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d874e:	4935      	ldr	r1, [pc, #212]	; (d8824 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d8750:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d8754:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d8756:	fa5f f388 	uxtb.w	r3, r8
   d875a:	429d      	cmp	r5, r3
   d875c:	d906      	bls.n	d876c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d875e:	2200      	movs	r2, #0
   d8760:	4b31      	ldr	r3, [pc, #196]	; (d8828 <_ZN5Print10printFloatEdh+0x174>)
   d8762:	f000 ffe7 	bl	d9734 <__aeabi_ddiv>
   d8766:	f108 0801 	add.w	r8, r8, #1
   d876a:	e7f4      	b.n	d8756 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d876c:	4632      	mov	r2, r6
   d876e:	463b      	mov	r3, r7
   d8770:	f000 fd04 	bl	d917c <__adddf3>
   d8774:	460f      	mov	r7, r1
   d8776:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d8778:	f001 f98a 	bl	d9a90 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d877c:	220a      	movs	r2, #10
   d877e:	4601      	mov	r1, r0
   d8780:	4680      	mov	r8, r0
   d8782:	4650      	mov	r0, sl
   d8784:	f7ff ff76 	bl	d8674 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d8788:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d878a:	b3e5      	cbz	r5, d8806 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d878c:	4640      	mov	r0, r8
   d878e:	f000 fe31 	bl	d93f4 <__aeabi_ui2d>
   d8792:	4602      	mov	r2, r0
   d8794:	460b      	mov	r3, r1
   d8796:	4630      	mov	r0, r6
   d8798:	4639      	mov	r1, r7
   d879a:	f000 fced 	bl	d9178 <__aeabi_dsub>
   d879e:	4606      	mov	r6, r0
   d87a0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d87a2:	4650      	mov	r0, sl
   d87a4:	4921      	ldr	r1, [pc, #132]	; (d882c <_ZN5Print10printFloatEdh+0x178>)
   d87a6:	f7ff ff38 	bl	d861a <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d87aa:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d87ac:	2200      	movs	r2, #0
   d87ae:	4b1e      	ldr	r3, [pc, #120]	; (d8828 <_ZN5Print10printFloatEdh+0x174>)
   d87b0:	4630      	mov	r0, r6
   d87b2:	4639      	mov	r1, r7
   d87b4:	f000 fe94 	bl	d94e0 <__aeabi_dmul>
   d87b8:	4606      	mov	r6, r0
   d87ba:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d87bc:	f001 f940 	bl	d9a40 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d87c0:	f1b0 0900 	subs.w	r9, r0, #0
   d87c4:	da07      	bge.n	d87d6 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d87c6:	212d      	movs	r1, #45	; 0x2d
   d87c8:	4650      	mov	r0, sl
   d87ca:	f7ff ff3a 	bl	d8642 <_ZN5Print5printEc>
            val = -n;
   d87ce:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d87d2:	4680      	mov	r8, r0
   d87d4:	e002      	b.n	d87dc <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d87d6:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d87d8:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d87dc:	220a      	movs	r2, #10
   d87de:	4650      	mov	r0, sl
   d87e0:	f7ff ff48 	bl	d8674 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d87e4:	4440      	add	r0, r8
   d87e6:	4404      	add	r4, r0
    remainder -= toPrint;
   d87e8:	4648      	mov	r0, r9
   d87ea:	f000 fe13 	bl	d9414 <__aeabi_i2d>
   d87ee:	4602      	mov	r2, r0
   d87f0:	460b      	mov	r3, r1
   d87f2:	4630      	mov	r0, r6
   d87f4:	4639      	mov	r1, r7
   d87f6:	f000 fcbf 	bl	d9178 <__aeabi_dsub>
   d87fa:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d87fc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d8800:	4606      	mov	r6, r0
   d8802:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d8804:	d1d2      	bne.n	d87ac <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d8806:	4620      	mov	r0, r4
   d8808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d880c:	000db0bc 	.word	0x000db0bc
   d8810:	7fefffff 	.word	0x7fefffff
   d8814:	000db0c6 	.word	0x000db0c6
   d8818:	41efffff 	.word	0x41efffff
   d881c:	000db0c0 	.word	0x000db0c0
   d8820:	c1efffff 	.word	0xc1efffff
   d8824:	3fe00000 	.word	0x3fe00000
   d8828:	40240000 	.word	0x40240000
   d882c:	000db0c4 	.word	0x000db0c4

000d8830 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d8830:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d8832:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d8834:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d8836:	f7ff ff3d 	bl	d86b4 <_ZN5Print10printFloatEdh>
   d883a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d883c:	4628      	mov	r0, r5
   d883e:	f7ff ff03 	bl	d8648 <_ZN5Print7printlnEv>
  return n;
}
   d8842:	4420      	add	r0, r4
   d8844:	bd38      	pop	{r3, r4, r5, pc}

000d8846 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d8846:	b538      	push	{r3, r4, r5, lr}
   d8848:	4604      	mov	r4, r0
    return println((double)num, digits);
   d884a:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d884e:	460d      	mov	r5, r1
    return println((double)num, digits);
   d8850:	f000 fdf2 	bl	d9438 <__aeabi_f2d>
   d8854:	ec41 0b10 	vmov	d0, r0, r1
   d8858:	4629      	mov	r1, r5
   d885a:	4620      	mov	r0, r4
}
   d885c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d8860:	f7ff bfe6 	b.w	d8830 <_ZN5Print7printlnEdi>

000d8864 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8864:	b40c      	push	{r2, r3}
   d8866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d886a:	b087      	sub	sp, #28
   d886c:	af00      	add	r7, sp, #0
   d886e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d8872:	4605      	mov	r5, r0
   d8874:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8878:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d887a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d887c:	4623      	mov	r3, r4
   d887e:	464a      	mov	r2, r9
   d8880:	2114      	movs	r1, #20
   d8882:	1d38      	adds	r0, r7, #4
   d8884:	f7fe fe30 	bl	d74e8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8888:	2813      	cmp	r0, #19
   d888a:	d805      	bhi.n	d8898 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d888c:	1d39      	adds	r1, r7, #4
   d888e:	4628      	mov	r0, r5
   d8890:	f7ff fec3 	bl	d861a <_ZN5Print5writeEPKc>
   d8894:	4604      	mov	r4, r0
   d8896:	e013      	b.n	d88c0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8898:	f100 0308 	add.w	r3, r0, #8
   d889c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d88a0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d88a2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d88a6:	1c41      	adds	r1, r0, #1
   d88a8:	4623      	mov	r3, r4
   d88aa:	464a      	mov	r2, r9
   d88ac:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d88ae:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d88b0:	f7fe fe1a 	bl	d74e8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d88b4:	4669      	mov	r1, sp
   d88b6:	4628      	mov	r0, r5
   d88b8:	f7ff feaf 	bl	d861a <_ZN5Print5writeEPKc>
   d88bc:	4604      	mov	r4, r0
   d88be:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d88c0:	b11e      	cbz	r6, d88ca <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d88c2:	4628      	mov	r0, r5
   d88c4:	f7ff fec0 	bl	d8648 <_ZN5Print7printlnEv>
   d88c8:	4404      	add	r4, r0
    return n;
}
   d88ca:	4620      	mov	r0, r4
   d88cc:	371c      	adds	r7, #28
   d88ce:	46bd      	mov	sp, r7
   d88d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d88d4:	b002      	add	sp, #8
   d88d6:	4770      	bx	lr

000d88d8 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d88d8:	b510      	push	{r4, lr}
   d88da:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d88dc:	6800      	ldr	r0, [r0, #0]
   d88de:	b108      	cbz	r0, d88e4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d88e0:	f7fe fc54 	bl	d718c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d88e4:	4620      	mov	r0, r4
   d88e6:	bd10      	pop	{r4, pc}

000d88e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d88e8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d88ea:	4c06      	ldr	r4, [pc, #24]	; (d8904 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d88ec:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d88ee:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d88f0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d88f2:	f7fe fc43 	bl	d717c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d88f6:	4620      	mov	r0, r4
   d88f8:	4a03      	ldr	r2, [pc, #12]	; (d8908 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d88fa:	4904      	ldr	r1, [pc, #16]	; (d890c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d88fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8900:	f000 ba38 	b.w	d8d74 <__aeabi_atexit>
   d8904:	2003e6cc 	.word	0x2003e6cc
   d8908:	2003dc68 	.word	0x2003dc68
   d890c:	000d88d9 	.word	0x000d88d9

000d8910 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8910:	b510      	push	{r4, lr}
   d8912:	4604      	mov	r4, r0
{
	free(buffer);
   d8914:	6800      	ldr	r0, [r0, #0]
   d8916:	f7fe fdc7 	bl	d74a8 <free>
}
   d891a:	4620      	mov	r0, r4
   d891c:	bd10      	pop	{r4, pc}

000d891e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d891e:	b510      	push	{r4, lr}
   d8920:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8922:	6800      	ldr	r0, [r0, #0]
   d8924:	b108      	cbz	r0, d892a <_ZN6String10invalidateEv+0xc>
   d8926:	f7fe fdbf 	bl	d74a8 <free>
	buffer = NULL;
   d892a:	2300      	movs	r3, #0
   d892c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d892e:	60a3      	str	r3, [r4, #8]
   d8930:	6063      	str	r3, [r4, #4]
   d8932:	bd10      	pop	{r4, pc}

000d8934 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8934:	b538      	push	{r3, r4, r5, lr}
   d8936:	4604      	mov	r4, r0
   d8938:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d893a:	6800      	ldr	r0, [r0, #0]
   d893c:	3101      	adds	r1, #1
   d893e:	f7fe fdbb 	bl	d74b8 <realloc>
	if (newbuffer) {
   d8942:	b110      	cbz	r0, d894a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8944:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8948:	2001      	movs	r0, #1
	}
	return 0;
}
   d894a:	bd38      	pop	{r3, r4, r5, pc}

000d894c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d894c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d894e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8950:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8952:	b113      	cbz	r3, d895a <_ZN6String7reserveEj+0xe>
   d8954:	6843      	ldr	r3, [r0, #4]
   d8956:	428b      	cmp	r3, r1
   d8958:	d207      	bcs.n	d896a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d895a:	4620      	mov	r0, r4
   d895c:	f7ff ffea 	bl	d8934 <_ZN6String12changeBufferEj>
   d8960:	b120      	cbz	r0, d896c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8962:	68a3      	ldr	r3, [r4, #8]
   d8964:	b90b      	cbnz	r3, d896a <_ZN6String7reserveEj+0x1e>
   d8966:	6822      	ldr	r2, [r4, #0]
   d8968:	7013      	strb	r3, [r2, #0]
   d896a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d896c:	bd10      	pop	{r4, pc}

000d896e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d896e:	b570      	push	{r4, r5, r6, lr}
   d8970:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8972:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8974:	4604      	mov	r4, r0
   d8976:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8978:	f7ff ffe8 	bl	d894c <_ZN6String7reserveEj>
   d897c:	b918      	cbnz	r0, d8986 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d897e:	4620      	mov	r0, r4
   d8980:	f7ff ffcd 	bl	d891e <_ZN6String10invalidateEv>
		return *this;
   d8984:	e009      	b.n	d899a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8986:	462a      	mov	r2, r5
   d8988:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d898a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d898c:	6820      	ldr	r0, [r4, #0]
   d898e:	f001 fa31 	bl	d9df4 <memcpy>
	buffer[len] = 0;
   d8992:	6822      	ldr	r2, [r4, #0]
   d8994:	68a3      	ldr	r3, [r4, #8]
   d8996:	2100      	movs	r1, #0
   d8998:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d899a:	4620      	mov	r0, r4
   d899c:	bd70      	pop	{r4, r5, r6, pc}

000d899e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d899e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d89a0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d89a2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d89a4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d89a6:	6043      	str	r3, [r0, #4]
	len = 0;
   d89a8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d89aa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d89ac:	460d      	mov	r5, r1
   d89ae:	b139      	cbz	r1, d89c0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d89b0:	4608      	mov	r0, r1
   d89b2:	f001 fa6d 	bl	d9e90 <strlen>
   d89b6:	4629      	mov	r1, r5
   d89b8:	4602      	mov	r2, r0
   d89ba:	4620      	mov	r0, r4
   d89bc:	f7ff ffd7 	bl	d896e <_ZN6String4copyEPKcj>
}
   d89c0:	4620      	mov	r0, r4
   d89c2:	bd38      	pop	{r3, r4, r5, pc}

000d89c4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d89c4:	b538      	push	{r3, r4, r5, lr}
   d89c6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d89c8:	460c      	mov	r4, r1
   d89ca:	b141      	cbz	r1, d89de <_ZN6StringaSEPKc+0x1a>
   d89cc:	4608      	mov	r0, r1
   d89ce:	f001 fa5f 	bl	d9e90 <strlen>
   d89d2:	4621      	mov	r1, r4
   d89d4:	4602      	mov	r2, r0
   d89d6:	4628      	mov	r0, r5
   d89d8:	f7ff ffc9 	bl	d896e <_ZN6String4copyEPKcj>
   d89dc:	e001      	b.n	d89e2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d89de:	f7ff ff9e 	bl	d891e <_ZN6String10invalidateEv>

	return *this;
}
   d89e2:	4628      	mov	r0, r5
   d89e4:	bd38      	pop	{r3, r4, r5, pc}

000d89e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d89e6:	b510      	push	{r4, lr}
   d89e8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d89ea:	6800      	ldr	r0, [r0, #0]
   d89ec:	b118      	cbz	r0, d89f6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d89ee:	f7fe fd5b 	bl	d74a8 <free>
            wakeupSource_ = nullptr;
   d89f2:	2300      	movs	r3, #0
   d89f4:	6023      	str	r3, [r4, #0]
   d89f6:	bd10      	pop	{r4, pc}

000d89f8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d89f8:	b510      	push	{r4, lr}
   d89fa:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d89fc:	f7ff fff3 	bl	d89e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8a00:	4620      	mov	r0, r4
   d8a02:	bd10      	pop	{r4, pc}

000d8a04 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8a04:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d8a06:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d8a0a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d8a0c:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8a0e:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d8a10:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d8a14:	f8c0 2006 	str.w	r2, [r0, #6]
   d8a18:	889b      	ldrh	r3, [r3, #4]
   d8a1a:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8a1c:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d8a1e:	f7ff ffe2 	bl	d89e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d8a22:	682b      	ldr	r3, [r5, #0]
   d8a24:	b113      	cbz	r3, d8a2c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d8a26:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d8a28:	2300      	movs	r3, #0
   d8a2a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d8a2c:	4620      	mov	r0, r4
   d8a2e:	bd38      	pop	{r3, r4, r5, pc}

000d8a30 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d8a30:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d8a34:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d8a36:	b90b      	cbnz	r3, d8a3c <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d8a38:	680a      	ldr	r2, [r1, #0]
   d8a3a:	b19a      	cbz	r2, d8a64 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d8a3c:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d8a3e:	b15c      	cbz	r4, d8a58 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d8a40:	88a2      	ldrh	r2, [r4, #4]
   d8a42:	2a01      	cmp	r2, #1
   d8a44:	d003      	beq.n	d8a4e <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d8a46:	2a04      	cmp	r2, #4
   d8a48:	d106      	bne.n	d8a58 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d8a4a:	2202      	movs	r2, #2
   d8a4c:	e005      	b.n	d8a5a <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d8a4e:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d8a50:	814c      	strh	r4, [r1, #10]
   d8a52:	718a      	strb	r2, [r1, #6]
   d8a54:	810b      	strh	r3, [r1, #8]
                    break;
   d8a56:	e005      	b.n	d8a64 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d8a58:	2204      	movs	r2, #4
   d8a5a:	810b      	strh	r3, [r1, #8]
   d8a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8a60:	718a      	strb	r2, [r1, #6]
   d8a62:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d8a64:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d8a68:	6003      	str	r3, [r0, #0]
   d8a6a:	888b      	ldrh	r3, [r1, #4]
   d8a6c:	8083      	strh	r3, [r0, #4]
    }
   d8a6e:	bd10      	pop	{r4, pc}

000d8a70 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d8a70:	b510      	push	{r4, lr}
   d8a72:	2400      	movs	r4, #0
   d8a74:	7004      	strb	r4, [r0, #0]
   d8a76:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d8a78:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d8a7a:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d8a7e:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d8a80:	dd07      	ble.n	d8a92 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d8a82:	3901      	subs	r1, #1
   d8a84:	4299      	cmp	r1, r3
   d8a86:	d209      	bcs.n	d8a9c <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d8a88:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d8a8c:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d8a8e:	2301      	movs	r3, #1
   d8a90:	e001      	b.n	d8a96 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d8a92:	d102      	bne.n	d8a9a <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d8a94:	2302      	movs	r3, #2
   d8a96:	7003      	strb	r3, [r0, #0]
   d8a98:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d8a9a:	8041      	strh	r1, [r0, #2]
    }
}
   d8a9c:	bd10      	pop	{r4, pc}
	...

000d8aa0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8aa2:	b08b      	sub	sp, #44	; 0x2c
   d8aa4:	4617      	mov	r7, r2
   d8aa6:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8aaa:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8aac:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8aae:	2400      	movs	r4, #0
   d8ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d8ab2:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8ab4:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8ab6:	9300      	str	r3, [sp, #0]
   d8ab8:	4639      	mov	r1, r7
   d8aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8abc:	4630      	mov	r0, r6
   d8abe:	f7fe fce1 	bl	d7484 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d8ac2:	463b      	mov	r3, r7
   d8ac4:	4632      	mov	r2, r6
   d8ac6:	4601      	mov	r1, r0
   d8ac8:	a805      	add	r0, sp, #20
   d8aca:	f7ff ffd1 	bl	d8a70 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d8ace:	9407      	str	r4, [sp, #28]
   d8ad0:	f8ad 4020 	strh.w	r4, [sp, #32]
   d8ad4:	4c0d      	ldr	r4, [pc, #52]	; (d8b0c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d8ad6:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d8ada:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d8ade:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d8ae2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d8ae6:	4620      	mov	r0, r4
   d8ae8:	a907      	add	r1, sp, #28
   d8aea:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d8aee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d8af2:	f7ff ff87 	bl	d8a04 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8af6:	a807      	add	r0, sp, #28
   d8af8:	f7ff ff75 	bl	d89e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d8afc:	4628      	mov	r0, r5
   d8afe:	4621      	mov	r1, r4
   d8b00:	f7ff ff96 	bl	d8a30 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d8b04:	4628      	mov	r0, r5
   d8b06:	b00b      	add	sp, #44	; 0x2c
   d8b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8b0a:	bf00      	nop
   d8b0c:	2003e6d0 	.word	0x2003e6d0

000d8b10 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8b10:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8b12:	4c09      	ldr	r4, [pc, #36]	; (d8b38 <_GLOBAL__sub_I_System+0x28>)
   d8b14:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8b16:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8b1a:	6020      	str	r0, [r4, #0]
   d8b1c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8b1e:	71a0      	strb	r0, [r4, #6]
   d8b20:	8120      	strh	r0, [r4, #8]
   d8b22:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8b24:	f7fe fc82 	bl	d742c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8b28:	4620      	mov	r0, r4
   d8b2a:	4a04      	ldr	r2, [pc, #16]	; (d8b3c <_GLOBAL__sub_I_System+0x2c>)
   d8b2c:	4904      	ldr	r1, [pc, #16]	; (d8b40 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8b32:	f000 b91f 	b.w	d8d74 <__aeabi_atexit>
   d8b36:	bf00      	nop
   d8b38:	2003e6d0 	.word	0x2003e6d0
   d8b3c:	2003dc68 	.word	0x2003dc68
   d8b40:	000d89f9 	.word	0x000d89f9

000d8b44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8b44:	2200      	movs	r2, #0
   d8b46:	4611      	mov	r1, r2
   d8b48:	6840      	ldr	r0, [r0, #4]
   d8b4a:	f7fe bc4f 	b.w	d73ec <network_listening>

000d8b4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8b4e:	2200      	movs	r2, #0
   d8b50:	4611      	mov	r1, r2
   d8b52:	6840      	ldr	r0, [r0, #4]
   d8b54:	f7fe bc5a 	b.w	d740c <network_get_listen_timeout>

000d8b58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8b58:	2200      	movs	r2, #0
   d8b5a:	6840      	ldr	r0, [r0, #4]
   d8b5c:	f7fe bc4e 	b.w	d73fc <network_set_listen_timeout>

000d8b60 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8b60:	2200      	movs	r2, #0
   d8b62:	f081 0101 	eor.w	r1, r1, #1
   d8b66:	6840      	ldr	r0, [r0, #4]
   d8b68:	f7fe bc38 	b.w	d73dc <network_listen>

000d8b6c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8b6c:	2300      	movs	r3, #0
   d8b6e:	461a      	mov	r2, r3
   d8b70:	4619      	mov	r1, r3
   d8b72:	6840      	ldr	r0, [r0, #4]
   d8b74:	f7fe bc2a 	b.w	d73cc <network_off>

000d8b78 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8b78:	2300      	movs	r3, #0
   d8b7a:	461a      	mov	r2, r3
   d8b7c:	4619      	mov	r1, r3
   d8b7e:	6840      	ldr	r0, [r0, #4]
   d8b80:	f7fe bc1c 	b.w	d73bc <network_on>

000d8b84 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8b84:	2200      	movs	r2, #0
   d8b86:	4611      	mov	r1, r2
   d8b88:	6840      	ldr	r0, [r0, #4]
   d8b8a:	f7fe bc0f 	b.w	d73ac <network_ready>

000d8b8e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8b8e:	2200      	movs	r2, #0
   d8b90:	4611      	mov	r1, r2
   d8b92:	6840      	ldr	r0, [r0, #4]
   d8b94:	f7fe bbfa 	b.w	d738c <network_connecting>

000d8b98 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8b98:	2200      	movs	r2, #0
   d8b9a:	2102      	movs	r1, #2
   d8b9c:	6840      	ldr	r0, [r0, #4]
   d8b9e:	f7fe bbfd 	b.w	d739c <network_disconnect>

000d8ba2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8ba2:	2300      	movs	r3, #0
   d8ba4:	461a      	mov	r2, r3
   d8ba6:	6840      	ldr	r0, [r0, #4]
   d8ba8:	f7fe bbe8 	b.w	d737c <network_connect>

000d8bac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8bac:	4b02      	ldr	r3, [pc, #8]	; (d8bb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8bae:	2203      	movs	r2, #3
   d8bb0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8bb2:	4a02      	ldr	r2, [pc, #8]	; (d8bbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8bb4:	601a      	str	r2, [r3, #0]
   d8bb6:	4770      	bx	lr
   d8bb8:	2003e6dc 	.word	0x2003e6dc
   d8bbc:	000db0d4 	.word	0x000db0d4

000d8bc0 <_Z17acquireWireBufferv>:
   d8bc0:	b570      	push	{r4, r5, r6, lr}
   d8bc2:	4604      	mov	r4, r0
   d8bc4:	2514      	movs	r5, #20
   d8bc6:	462a      	mov	r2, r5
   d8bc8:	4e09      	ldr	r6, [pc, #36]	; (d8bf0 <_Z17acquireWireBufferv+0x30>)
   d8bca:	2100      	movs	r1, #0
   d8bcc:	f001 f91d 	bl	d9e0a <memset>
   d8bd0:	8025      	strh	r5, [r4, #0]
   d8bd2:	2520      	movs	r5, #32
   d8bd4:	4631      	mov	r1, r6
   d8bd6:	60a5      	str	r5, [r4, #8]
   d8bd8:	6125      	str	r5, [r4, #16]
   d8bda:	4628      	mov	r0, r5
   d8bdc:	f000 f8da 	bl	d8d94 <_ZnajRKSt9nothrow_t>
   d8be0:	4631      	mov	r1, r6
   d8be2:	6060      	str	r0, [r4, #4]
   d8be4:	4628      	mov	r0, r5
   d8be6:	f000 f8d5 	bl	d8d94 <_ZnajRKSt9nothrow_t>
   d8bea:	60e0      	str	r0, [r4, #12]
   d8bec:	4620      	mov	r0, r4
   d8bee:	bd70      	pop	{r4, r5, r6, pc}
   d8bf0:	000db100 	.word	0x000db100

000d8bf4 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d8bf4:	b570      	push	{r4, r5, r6, lr}
   d8bf6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8bf8:	2514      	movs	r5, #20
   d8bfa:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8bfc:	4e09      	ldr	r6, [pc, #36]	; (d8c24 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8bfe:	2100      	movs	r1, #0
   d8c00:	f001 f903 	bl	d9e0a <memset>
   d8c04:	8025      	strh	r5, [r4, #0]
   d8c06:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8c08:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8c0a:	60a5      	str	r5, [r4, #8]
   d8c0c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8c0e:	4628      	mov	r0, r5
   d8c10:	f000 f8c0 	bl	d8d94 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8c14:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8c16:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8c18:	4628      	mov	r0, r5
   d8c1a:	f000 f8bb 	bl	d8d94 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8c1e:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d8c20:	4620      	mov	r0, r4
   d8c22:	bd70      	pop	{r4, r5, r6, pc}
   d8c24:	000db100 	.word	0x000db100

000d8c28 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8c28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8c2a:	4d0e      	ldr	r5, [pc, #56]	; (d8c64 <_Z19__fetch_global_Wirev+0x3c>)
   d8c2c:	6829      	ldr	r1, [r5, #0]
   d8c2e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8c32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8c34:	d113      	bne.n	d8c5e <_Z19__fetch_global_Wirev+0x36>
   d8c36:	4628      	mov	r0, r5
   d8c38:	f7fb fa37 	bl	d40aa <__cxa_guard_acquire>
   d8c3c:	b178      	cbz	r0, d8c5e <_Z19__fetch_global_Wirev+0x36>
   d8c3e:	a801      	add	r0, sp, #4
   d8c40:	f7ff ffbe 	bl	d8bc0 <_Z17acquireWireBufferv>
   d8c44:	aa01      	add	r2, sp, #4
   d8c46:	4621      	mov	r1, r4
   d8c48:	4807      	ldr	r0, [pc, #28]	; (d8c68 <_Z19__fetch_global_Wirev+0x40>)
   d8c4a:	f7ff f90d 	bl	d7e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8c4e:	4628      	mov	r0, r5
   d8c50:	f7fb fa30 	bl	d40b4 <__cxa_guard_release>
   d8c54:	4a05      	ldr	r2, [pc, #20]	; (d8c6c <_Z19__fetch_global_Wirev+0x44>)
   d8c56:	4906      	ldr	r1, [pc, #24]	; (d8c70 <_Z19__fetch_global_Wirev+0x48>)
   d8c58:	4803      	ldr	r0, [pc, #12]	; (d8c68 <_Z19__fetch_global_Wirev+0x40>)
   d8c5a:	f000 f88b 	bl	d8d74 <__aeabi_atexit>
	return wire;
}
   d8c5e:	4802      	ldr	r0, [pc, #8]	; (d8c68 <_Z19__fetch_global_Wirev+0x40>)
   d8c60:	b007      	add	sp, #28
   d8c62:	bd30      	pop	{r4, r5, pc}
   d8c64:	2003e6e4 	.word	0x2003e6e4
   d8c68:	2003e6fc 	.word	0x2003e6fc
   d8c6c:	2003dc68 	.word	0x2003dc68
   d8c70:	000d7e11 	.word	0x000d7e11

000d8c74 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8c74:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8c76:	4c0e      	ldr	r4, [pc, #56]	; (d8cb0 <_Z20__fetch_global_Wire1v+0x3c>)
   d8c78:	6823      	ldr	r3, [r4, #0]
   d8c7a:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8c7c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8c7e:	d413      	bmi.n	d8ca8 <_Z20__fetch_global_Wire1v+0x34>
   d8c80:	4620      	mov	r0, r4
   d8c82:	f7fb fa12 	bl	d40aa <__cxa_guard_acquire>
   d8c86:	b178      	cbz	r0, d8ca8 <_Z20__fetch_global_Wire1v+0x34>
   d8c88:	a801      	add	r0, sp, #4
   d8c8a:	f7ff ffb3 	bl	d8bf4 <_Z18acquireWire1Bufferv>
   d8c8e:	aa01      	add	r2, sp, #4
   d8c90:	2101      	movs	r1, #1
   d8c92:	4808      	ldr	r0, [pc, #32]	; (d8cb4 <_Z20__fetch_global_Wire1v+0x40>)
   d8c94:	f7ff f8e8 	bl	d7e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8c98:	4620      	mov	r0, r4
   d8c9a:	f7fb fa0b 	bl	d40b4 <__cxa_guard_release>
   d8c9e:	4a06      	ldr	r2, [pc, #24]	; (d8cb8 <_Z20__fetch_global_Wire1v+0x44>)
   d8ca0:	4906      	ldr	r1, [pc, #24]	; (d8cbc <_Z20__fetch_global_Wire1v+0x48>)
   d8ca2:	4804      	ldr	r0, [pc, #16]	; (d8cb4 <_Z20__fetch_global_Wire1v+0x40>)
   d8ca4:	f000 f866 	bl	d8d74 <__aeabi_atexit>
	return wire;
}
   d8ca8:	4802      	ldr	r0, [pc, #8]	; (d8cb4 <_Z20__fetch_global_Wire1v+0x40>)
   d8caa:	b006      	add	sp, #24
   d8cac:	bd10      	pop	{r4, pc}
   d8cae:	bf00      	nop
   d8cb0:	2003e710 	.word	0x2003e710
   d8cb4:	2003e6e8 	.word	0x2003e6e8
   d8cb8:	2003dc68 	.word	0x2003dc68
   d8cbc:	000d7e11 	.word	0x000d7e11

000d8cc0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8cc0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8cc2:	4e18      	ldr	r6, [pc, #96]	; (d8d24 <pinAvailable+0x64>)
   d8cc4:	6831      	ldr	r1, [r6, #0]
   d8cc6:	f011 0501 	ands.w	r5, r1, #1
   d8cca:	4604      	mov	r4, r0
   d8ccc:	d10a      	bne.n	d8ce4 <pinAvailable+0x24>
   d8cce:	4630      	mov	r0, r6
   d8cd0:	f7fb f9eb 	bl	d40aa <__cxa_guard_acquire>
   d8cd4:	b130      	cbz	r0, d8ce4 <pinAvailable+0x24>
   d8cd6:	4629      	mov	r1, r5
   d8cd8:	4813      	ldr	r0, [pc, #76]	; (d8d28 <pinAvailable+0x68>)
   d8cda:	f7ff f84d 	bl	d7d78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8cde:	4630      	mov	r0, r6
   d8ce0:	f7fb f9e8 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8ce4:	4810      	ldr	r0, [pc, #64]	; (d8d28 <pinAvailable+0x68>)
   d8ce6:	f7ff f851 	bl	d7d8c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8cea:	b128      	cbz	r0, d8cf8 <pinAvailable+0x38>
   d8cec:	f1a4 030b 	sub.w	r3, r4, #11
   d8cf0:	2b02      	cmp	r3, #2
   d8cf2:	d801      	bhi.n	d8cf8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8cf4:	2000      	movs	r0, #0
   d8cf6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8cf8:	f7ff ff96 	bl	d8c28 <_Z19__fetch_global_Wirev>
   d8cfc:	f7ff f916 	bl	d7f2c <_ZN7TwoWire9isEnabledEv>
   d8d00:	b108      	cbz	r0, d8d06 <pinAvailable+0x46>
   d8d02:	2c01      	cmp	r4, #1
   d8d04:	d9f6      	bls.n	d8cf4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8d06:	f7ff f977 	bl	d7ff8 <_Z22__fetch_global_Serial1v>
   d8d0a:	f7ff f972 	bl	d7ff2 <_ZN11USARTSerial9isEnabledEv>
   d8d0e:	b118      	cbz	r0, d8d18 <pinAvailable+0x58>
   d8d10:	f1a4 0309 	sub.w	r3, r4, #9
   d8d14:	2b01      	cmp	r3, #1
   d8d16:	d9ed      	bls.n	d8cf4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8d18:	2c23      	cmp	r4, #35	; 0x23
   d8d1a:	bf8c      	ite	hi
   d8d1c:	2000      	movhi	r0, #0
   d8d1e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8d20:	bd70      	pop	{r4, r5, r6, pc}
   d8d22:	bf00      	nop
   d8d24:	2003e718 	.word	0x2003e718
   d8d28:	2003e71c 	.word	0x2003e71c

000d8d2c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8d2c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8d2e:	b538      	push	{r3, r4, r5, lr}
   d8d30:	4604      	mov	r4, r0
   d8d32:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8d34:	d80a      	bhi.n	d8d4c <pinMode+0x20>
   d8d36:	29ff      	cmp	r1, #255	; 0xff
   d8d38:	d008      	beq.n	d8d4c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8d3a:	f7ff ffc1 	bl	d8cc0 <pinAvailable>
   d8d3e:	b128      	cbz	r0, d8d4c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8d40:	4629      	mov	r1, r5
   d8d42:	4620      	mov	r0, r4
}
   d8d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8d48:	f7fe ba70 	b.w	d722c <HAL_Pin_Mode>
   d8d4c:	bd38      	pop	{r3, r4, r5, pc}

000d8d4e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8d4e:	b510      	push	{r4, lr}
   d8d50:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8d52:	f7fe fa73 	bl	d723c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8d56:	3804      	subs	r0, #4
   d8d58:	b2c0      	uxtb	r0, r0
   d8d5a:	2801      	cmp	r0, #1
   d8d5c:	d908      	bls.n	d8d70 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8d5e:	4620      	mov	r0, r4
   d8d60:	f7ff ffae 	bl	d8cc0 <pinAvailable>
   d8d64:	b120      	cbz	r0, d8d70 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8d66:	4620      	mov	r0, r4
}
   d8d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8d6c:	f7fe ba6e 	b.w	d724c <HAL_GPIO_Read>
}
   d8d70:	2000      	movs	r0, #0
   d8d72:	bd10      	pop	{r4, pc}

000d8d74 <__aeabi_atexit>:
   d8d74:	460b      	mov	r3, r1
   d8d76:	4601      	mov	r1, r0
   d8d78:	4618      	mov	r0, r3
   d8d7a:	f000 bf35 	b.w	d9be8 <__cxa_atexit>
	...

000d8d80 <_ZSt15get_new_handlerv>:
   d8d80:	4b02      	ldr	r3, [pc, #8]	; (d8d8c <_ZSt15get_new_handlerv+0xc>)
   d8d82:	6818      	ldr	r0, [r3, #0]
   d8d84:	f3bf 8f5f 	dmb	sy
   d8d88:	4770      	bx	lr
   d8d8a:	bf00      	nop
   d8d8c:	2003e724 	.word	0x2003e724

000d8d90 <_ZdlPvj>:
   d8d90:	f7fb b987 	b.w	d40a2 <_ZdlPv>

000d8d94 <_ZnajRKSt9nothrow_t>:
   d8d94:	f000 b800 	b.w	d8d98 <_ZnwjRKSt9nothrow_t>

000d8d98 <_ZnwjRKSt9nothrow_t>:
   d8d98:	b510      	push	{r4, lr}
   d8d9a:	2800      	cmp	r0, #0
   d8d9c:	bf14      	ite	ne
   d8d9e:	4604      	movne	r4, r0
   d8da0:	2401      	moveq	r4, #1
   d8da2:	4620      	mov	r0, r4
   d8da4:	f7fe fb78 	bl	d7498 <malloc>
   d8da8:	b920      	cbnz	r0, d8db4 <_ZnwjRKSt9nothrow_t+0x1c>
   d8daa:	f7ff ffe9 	bl	d8d80 <_ZSt15get_new_handlerv>
   d8dae:	b108      	cbz	r0, d8db4 <_ZnwjRKSt9nothrow_t+0x1c>
   d8db0:	4780      	blx	r0
   d8db2:	e7f6      	b.n	d8da2 <_ZnwjRKSt9nothrow_t+0xa>
   d8db4:	bd10      	pop	{r4, pc}

000d8db6 <_ZSt25__throw_bad_function_callv>:
   d8db6:	b508      	push	{r3, lr}
   d8db8:	f7fe fb9e 	bl	d74f8 <abort>

000d8dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8dbc:	4b18      	ldr	r3, [pc, #96]	; (d8e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8dbe:	681a      	ldr	r2, [r3, #0]
   d8dc0:	07d1      	lsls	r1, r2, #31
   d8dc2:	bf5c      	itt	pl
   d8dc4:	2201      	movpl	r2, #1
   d8dc6:	601a      	strpl	r2, [r3, #0]
   d8dc8:	4b16      	ldr	r3, [pc, #88]	; (d8e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8dca:	681a      	ldr	r2, [r3, #0]
   d8dcc:	07d2      	lsls	r2, r2, #31
   d8dce:	bf5c      	itt	pl
   d8dd0:	2201      	movpl	r2, #1
   d8dd2:	601a      	strpl	r2, [r3, #0]
   d8dd4:	4b14      	ldr	r3, [pc, #80]	; (d8e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8dd6:	681a      	ldr	r2, [r3, #0]
   d8dd8:	07d0      	lsls	r0, r2, #31
   d8dda:	bf5c      	itt	pl
   d8ddc:	2201      	movpl	r2, #1
   d8dde:	601a      	strpl	r2, [r3, #0]
   d8de0:	4b12      	ldr	r3, [pc, #72]	; (d8e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8de2:	681a      	ldr	r2, [r3, #0]
   d8de4:	07d1      	lsls	r1, r2, #31
   d8de6:	bf5c      	itt	pl
   d8de8:	2201      	movpl	r2, #1
   d8dea:	601a      	strpl	r2, [r3, #0]
   d8dec:	4b10      	ldr	r3, [pc, #64]	; (d8e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8dee:	681a      	ldr	r2, [r3, #0]
   d8df0:	07d2      	lsls	r2, r2, #31
   d8df2:	bf5c      	itt	pl
   d8df4:	2201      	movpl	r2, #1
   d8df6:	601a      	strpl	r2, [r3, #0]
   d8df8:	4b0e      	ldr	r3, [pc, #56]	; (d8e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8dfa:	681a      	ldr	r2, [r3, #0]
   d8dfc:	07d0      	lsls	r0, r2, #31
   d8dfe:	bf5c      	itt	pl
   d8e00:	2201      	movpl	r2, #1
   d8e02:	601a      	strpl	r2, [r3, #0]
   d8e04:	4b0c      	ldr	r3, [pc, #48]	; (d8e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8e06:	681a      	ldr	r2, [r3, #0]
   d8e08:	07d1      	lsls	r1, r2, #31
   d8e0a:	bf5c      	itt	pl
   d8e0c:	2201      	movpl	r2, #1
   d8e0e:	601a      	strpl	r2, [r3, #0]
   d8e10:	4b0a      	ldr	r3, [pc, #40]	; (d8e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8e12:	681a      	ldr	r2, [r3, #0]
   d8e14:	07d2      	lsls	r2, r2, #31
   d8e16:	bf5c      	itt	pl
   d8e18:	2201      	movpl	r2, #1
   d8e1a:	601a      	strpl	r2, [r3, #0]
   d8e1c:	4770      	bx	lr
   d8e1e:	bf00      	nop
   d8e20:	2003e744 	.word	0x2003e744
   d8e24:	2003e740 	.word	0x2003e740
   d8e28:	2003e73c 	.word	0x2003e73c
   d8e2c:	2003e738 	.word	0x2003e738
   d8e30:	2003e734 	.word	0x2003e734
   d8e34:	2003e730 	.word	0x2003e730
   d8e38:	2003e72c 	.word	0x2003e72c
   d8e3c:	2003e728 	.word	0x2003e728

000d8e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8e40:	4b24      	ldr	r3, [pc, #144]	; (d8ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8e42:	681a      	ldr	r2, [r3, #0]
   d8e44:	07d0      	lsls	r0, r2, #31
   d8e46:	bf5c      	itt	pl
   d8e48:	2201      	movpl	r2, #1
   d8e4a:	601a      	strpl	r2, [r3, #0]
   d8e4c:	4b22      	ldr	r3, [pc, #136]	; (d8ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8e4e:	681a      	ldr	r2, [r3, #0]
   d8e50:	07d1      	lsls	r1, r2, #31
   d8e52:	bf5c      	itt	pl
   d8e54:	2201      	movpl	r2, #1
   d8e56:	601a      	strpl	r2, [r3, #0]
   d8e58:	4b20      	ldr	r3, [pc, #128]	; (d8edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8e5a:	681a      	ldr	r2, [r3, #0]
   d8e5c:	07d2      	lsls	r2, r2, #31
   d8e5e:	bf5c      	itt	pl
   d8e60:	2201      	movpl	r2, #1
   d8e62:	601a      	strpl	r2, [r3, #0]
   d8e64:	4b1e      	ldr	r3, [pc, #120]	; (d8ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8e66:	681a      	ldr	r2, [r3, #0]
   d8e68:	07d0      	lsls	r0, r2, #31
   d8e6a:	bf5c      	itt	pl
   d8e6c:	2201      	movpl	r2, #1
   d8e6e:	601a      	strpl	r2, [r3, #0]
   d8e70:	4b1c      	ldr	r3, [pc, #112]	; (d8ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8e72:	681a      	ldr	r2, [r3, #0]
   d8e74:	07d1      	lsls	r1, r2, #31
   d8e76:	bf5c      	itt	pl
   d8e78:	2201      	movpl	r2, #1
   d8e7a:	601a      	strpl	r2, [r3, #0]
   d8e7c:	4b1a      	ldr	r3, [pc, #104]	; (d8ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8e7e:	681a      	ldr	r2, [r3, #0]
   d8e80:	07d2      	lsls	r2, r2, #31
   d8e82:	bf5c      	itt	pl
   d8e84:	2201      	movpl	r2, #1
   d8e86:	601a      	strpl	r2, [r3, #0]
   d8e88:	4b18      	ldr	r3, [pc, #96]	; (d8eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8e8a:	681a      	ldr	r2, [r3, #0]
   d8e8c:	07d0      	lsls	r0, r2, #31
   d8e8e:	bf5c      	itt	pl
   d8e90:	2201      	movpl	r2, #1
   d8e92:	601a      	strpl	r2, [r3, #0]
   d8e94:	4b16      	ldr	r3, [pc, #88]	; (d8ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8e96:	681a      	ldr	r2, [r3, #0]
   d8e98:	07d1      	lsls	r1, r2, #31
   d8e9a:	bf5c      	itt	pl
   d8e9c:	2201      	movpl	r2, #1
   d8e9e:	601a      	strpl	r2, [r3, #0]
   d8ea0:	4b14      	ldr	r3, [pc, #80]	; (d8ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8ea2:	681a      	ldr	r2, [r3, #0]
   d8ea4:	07d2      	lsls	r2, r2, #31
   d8ea6:	bf5c      	itt	pl
   d8ea8:	2201      	movpl	r2, #1
   d8eaa:	601a      	strpl	r2, [r3, #0]
   d8eac:	4b12      	ldr	r3, [pc, #72]	; (d8ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8eae:	681a      	ldr	r2, [r3, #0]
   d8eb0:	07d0      	lsls	r0, r2, #31
   d8eb2:	bf5c      	itt	pl
   d8eb4:	2201      	movpl	r2, #1
   d8eb6:	601a      	strpl	r2, [r3, #0]
   d8eb8:	4b10      	ldr	r3, [pc, #64]	; (d8efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8eba:	681a      	ldr	r2, [r3, #0]
   d8ebc:	07d1      	lsls	r1, r2, #31
   d8ebe:	bf5c      	itt	pl
   d8ec0:	2201      	movpl	r2, #1
   d8ec2:	601a      	strpl	r2, [r3, #0]
   d8ec4:	4b0e      	ldr	r3, [pc, #56]	; (d8f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8ec6:	681a      	ldr	r2, [r3, #0]
   d8ec8:	07d2      	lsls	r2, r2, #31
   d8eca:	bf5c      	itt	pl
   d8ecc:	2201      	movpl	r2, #1
   d8ece:	601a      	strpl	r2, [r3, #0]
   d8ed0:	4770      	bx	lr
   d8ed2:	bf00      	nop
   d8ed4:	2003e774 	.word	0x2003e774
   d8ed8:	2003e770 	.word	0x2003e770
   d8edc:	2003e76c 	.word	0x2003e76c
   d8ee0:	2003e768 	.word	0x2003e768
   d8ee4:	2003e764 	.word	0x2003e764
   d8ee8:	2003e760 	.word	0x2003e760
   d8eec:	2003e75c 	.word	0x2003e75c
   d8ef0:	2003e758 	.word	0x2003e758
   d8ef4:	2003e754 	.word	0x2003e754
   d8ef8:	2003e750 	.word	0x2003e750
   d8efc:	2003e74c 	.word	0x2003e74c
   d8f00:	2003e748 	.word	0x2003e748

000d8f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8f04:	4b24      	ldr	r3, [pc, #144]	; (d8f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8f06:	681a      	ldr	r2, [r3, #0]
   d8f08:	07d0      	lsls	r0, r2, #31
   d8f0a:	bf5c      	itt	pl
   d8f0c:	2201      	movpl	r2, #1
   d8f0e:	601a      	strpl	r2, [r3, #0]
   d8f10:	4b22      	ldr	r3, [pc, #136]	; (d8f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8f12:	681a      	ldr	r2, [r3, #0]
   d8f14:	07d1      	lsls	r1, r2, #31
   d8f16:	bf5c      	itt	pl
   d8f18:	2201      	movpl	r2, #1
   d8f1a:	601a      	strpl	r2, [r3, #0]
   d8f1c:	4b20      	ldr	r3, [pc, #128]	; (d8fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8f1e:	681a      	ldr	r2, [r3, #0]
   d8f20:	07d2      	lsls	r2, r2, #31
   d8f22:	bf5c      	itt	pl
   d8f24:	2201      	movpl	r2, #1
   d8f26:	601a      	strpl	r2, [r3, #0]
   d8f28:	4b1e      	ldr	r3, [pc, #120]	; (d8fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8f2a:	681a      	ldr	r2, [r3, #0]
   d8f2c:	07d0      	lsls	r0, r2, #31
   d8f2e:	bf5c      	itt	pl
   d8f30:	2201      	movpl	r2, #1
   d8f32:	601a      	strpl	r2, [r3, #0]
   d8f34:	4b1c      	ldr	r3, [pc, #112]	; (d8fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8f36:	681a      	ldr	r2, [r3, #0]
   d8f38:	07d1      	lsls	r1, r2, #31
   d8f3a:	bf5c      	itt	pl
   d8f3c:	2201      	movpl	r2, #1
   d8f3e:	601a      	strpl	r2, [r3, #0]
   d8f40:	4b1a      	ldr	r3, [pc, #104]	; (d8fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8f42:	681a      	ldr	r2, [r3, #0]
   d8f44:	07d2      	lsls	r2, r2, #31
   d8f46:	bf5c      	itt	pl
   d8f48:	2201      	movpl	r2, #1
   d8f4a:	601a      	strpl	r2, [r3, #0]
   d8f4c:	4b18      	ldr	r3, [pc, #96]	; (d8fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8f4e:	681a      	ldr	r2, [r3, #0]
   d8f50:	07d0      	lsls	r0, r2, #31
   d8f52:	bf5c      	itt	pl
   d8f54:	2201      	movpl	r2, #1
   d8f56:	601a      	strpl	r2, [r3, #0]
   d8f58:	4b16      	ldr	r3, [pc, #88]	; (d8fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8f5a:	681a      	ldr	r2, [r3, #0]
   d8f5c:	07d1      	lsls	r1, r2, #31
   d8f5e:	bf5c      	itt	pl
   d8f60:	2201      	movpl	r2, #1
   d8f62:	601a      	strpl	r2, [r3, #0]
   d8f64:	4b14      	ldr	r3, [pc, #80]	; (d8fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8f66:	681a      	ldr	r2, [r3, #0]
   d8f68:	07d2      	lsls	r2, r2, #31
   d8f6a:	bf5c      	itt	pl
   d8f6c:	2201      	movpl	r2, #1
   d8f6e:	601a      	strpl	r2, [r3, #0]
   d8f70:	4b12      	ldr	r3, [pc, #72]	; (d8fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8f72:	681a      	ldr	r2, [r3, #0]
   d8f74:	07d0      	lsls	r0, r2, #31
   d8f76:	bf5c      	itt	pl
   d8f78:	2201      	movpl	r2, #1
   d8f7a:	601a      	strpl	r2, [r3, #0]
   d8f7c:	4b10      	ldr	r3, [pc, #64]	; (d8fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8f7e:	681a      	ldr	r2, [r3, #0]
   d8f80:	07d1      	lsls	r1, r2, #31
   d8f82:	bf5c      	itt	pl
   d8f84:	2201      	movpl	r2, #1
   d8f86:	601a      	strpl	r2, [r3, #0]
   d8f88:	4b0e      	ldr	r3, [pc, #56]	; (d8fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8f8a:	681a      	ldr	r2, [r3, #0]
   d8f8c:	07d2      	lsls	r2, r2, #31
   d8f8e:	bf5c      	itt	pl
   d8f90:	2201      	movpl	r2, #1
   d8f92:	601a      	strpl	r2, [r3, #0]
   d8f94:	4770      	bx	lr
   d8f96:	bf00      	nop
   d8f98:	2003e7a4 	.word	0x2003e7a4
   d8f9c:	2003e7a0 	.word	0x2003e7a0
   d8fa0:	2003e79c 	.word	0x2003e79c
   d8fa4:	2003e798 	.word	0x2003e798
   d8fa8:	2003e794 	.word	0x2003e794
   d8fac:	2003e790 	.word	0x2003e790
   d8fb0:	2003e78c 	.word	0x2003e78c
   d8fb4:	2003e788 	.word	0x2003e788
   d8fb8:	2003e784 	.word	0x2003e784
   d8fbc:	2003e780 	.word	0x2003e780
   d8fc0:	2003e77c 	.word	0x2003e77c
   d8fc4:	2003e778 	.word	0x2003e778

000d8fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8fc8:	4b18      	ldr	r3, [pc, #96]	; (d902c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8fca:	681a      	ldr	r2, [r3, #0]
   d8fcc:	07d1      	lsls	r1, r2, #31
   d8fce:	bf5c      	itt	pl
   d8fd0:	2201      	movpl	r2, #1
   d8fd2:	601a      	strpl	r2, [r3, #0]
   d8fd4:	4b16      	ldr	r3, [pc, #88]	; (d9030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8fd6:	681a      	ldr	r2, [r3, #0]
   d8fd8:	07d2      	lsls	r2, r2, #31
   d8fda:	bf5c      	itt	pl
   d8fdc:	2201      	movpl	r2, #1
   d8fde:	601a      	strpl	r2, [r3, #0]
   d8fe0:	4b14      	ldr	r3, [pc, #80]	; (d9034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8fe2:	681a      	ldr	r2, [r3, #0]
   d8fe4:	07d0      	lsls	r0, r2, #31
   d8fe6:	bf5c      	itt	pl
   d8fe8:	2201      	movpl	r2, #1
   d8fea:	601a      	strpl	r2, [r3, #0]
   d8fec:	4b12      	ldr	r3, [pc, #72]	; (d9038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8fee:	681a      	ldr	r2, [r3, #0]
   d8ff0:	07d1      	lsls	r1, r2, #31
   d8ff2:	bf5c      	itt	pl
   d8ff4:	2201      	movpl	r2, #1
   d8ff6:	601a      	strpl	r2, [r3, #0]
   d8ff8:	4b10      	ldr	r3, [pc, #64]	; (d903c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8ffa:	681a      	ldr	r2, [r3, #0]
   d8ffc:	07d2      	lsls	r2, r2, #31
   d8ffe:	bf5c      	itt	pl
   d9000:	2201      	movpl	r2, #1
   d9002:	601a      	strpl	r2, [r3, #0]
   d9004:	4b0e      	ldr	r3, [pc, #56]	; (d9040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9006:	681a      	ldr	r2, [r3, #0]
   d9008:	07d0      	lsls	r0, r2, #31
   d900a:	bf5c      	itt	pl
   d900c:	2201      	movpl	r2, #1
   d900e:	601a      	strpl	r2, [r3, #0]
   d9010:	4b0c      	ldr	r3, [pc, #48]	; (d9044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9012:	681a      	ldr	r2, [r3, #0]
   d9014:	07d1      	lsls	r1, r2, #31
   d9016:	bf5c      	itt	pl
   d9018:	2201      	movpl	r2, #1
   d901a:	601a      	strpl	r2, [r3, #0]
   d901c:	4b0a      	ldr	r3, [pc, #40]	; (d9048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d901e:	681a      	ldr	r2, [r3, #0]
   d9020:	07d2      	lsls	r2, r2, #31
   d9022:	bf5c      	itt	pl
   d9024:	2201      	movpl	r2, #1
   d9026:	601a      	strpl	r2, [r3, #0]
   d9028:	4770      	bx	lr
   d902a:	bf00      	nop
   d902c:	2003e7c4 	.word	0x2003e7c4
   d9030:	2003e7c0 	.word	0x2003e7c0
   d9034:	2003e7bc 	.word	0x2003e7bc
   d9038:	2003e7b8 	.word	0x2003e7b8
   d903c:	2003e7b4 	.word	0x2003e7b4
   d9040:	2003e7b0 	.word	0x2003e7b0
   d9044:	2003e7ac 	.word	0x2003e7ac
   d9048:	2003e7a8 	.word	0x2003e7a8
   d904c:	00000000 	.word	0x00000000

000d9050 <floor>:
   d9050:	ec51 0b10 	vmov	r0, r1, d0
   d9054:	f3c1 530a 	ubfx	r3, r1, #20, #11
   d9058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d905c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   d9060:	2d13      	cmp	r5, #19
   d9062:	460c      	mov	r4, r1
   d9064:	460f      	mov	r7, r1
   d9066:	ee10 6a10 	vmov	r6, s0
   d906a:	dc1d      	bgt.n	d90a8 <floor+0x58>
   d906c:	2d00      	cmp	r5, #0
   d906e:	db43      	blt.n	d90f8 <floor+0xa8>
   d9070:	4b3d      	ldr	r3, [pc, #244]	; (d9168 <floor+0x118>)
   d9072:	fa43 f805 	asr.w	r8, r3, r5
   d9076:	ea01 0308 	and.w	r3, r1, r8
   d907a:	4303      	orrs	r3, r0
   d907c:	d019      	beq.n	d90b2 <floor+0x62>
   d907e:	a338      	add	r3, pc, #224	; (adr r3, d9160 <floor+0x110>)
   d9080:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9084:	f000 f87a 	bl	d917c <__adddf3>
   d9088:	2200      	movs	r2, #0
   d908a:	2300      	movs	r3, #0
   d908c:	f000 fcb8 	bl	d9a00 <__aeabi_dcmpgt>
   d9090:	b120      	cbz	r0, d909c <floor+0x4c>
   d9092:	2c00      	cmp	r4, #0
   d9094:	db49      	blt.n	d912a <floor+0xda>
   d9096:	ea27 0408 	bic.w	r4, r7, r8
   d909a:	2600      	movs	r6, #0
   d909c:	4623      	mov	r3, r4
   d909e:	4632      	mov	r2, r6
   d90a0:	ec43 2b10 	vmov	d0, r2, r3
   d90a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d90a8:	2d33      	cmp	r5, #51	; 0x33
   d90aa:	dd06      	ble.n	d90ba <floor+0x6a>
   d90ac:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d90b0:	d032      	beq.n	d9118 <floor+0xc8>
   d90b2:	ec41 0b10 	vmov	d0, r0, r1
   d90b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d90ba:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   d90be:	f04f 38ff 	mov.w	r8, #4294967295
   d90c2:	fa28 f803 	lsr.w	r8, r8, r3
   d90c6:	ea10 0f08 	tst.w	r0, r8
   d90ca:	d0f2      	beq.n	d90b2 <floor+0x62>
   d90cc:	a324      	add	r3, pc, #144	; (adr r3, d9160 <floor+0x110>)
   d90ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90d2:	f000 f853 	bl	d917c <__adddf3>
   d90d6:	2200      	movs	r2, #0
   d90d8:	2300      	movs	r3, #0
   d90da:	f000 fc91 	bl	d9a00 <__aeabi_dcmpgt>
   d90de:	2800      	cmp	r0, #0
   d90e0:	d0dc      	beq.n	d909c <floor+0x4c>
   d90e2:	2c00      	cmp	r4, #0
   d90e4:	db27      	blt.n	d9136 <floor+0xe6>
   d90e6:	463c      	mov	r4, r7
   d90e8:	ea26 0608 	bic.w	r6, r6, r8
   d90ec:	4623      	mov	r3, r4
   d90ee:	4632      	mov	r2, r6
   d90f0:	ec43 2b10 	vmov	d0, r2, r3
   d90f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d90f8:	a319      	add	r3, pc, #100	; (adr r3, d9160 <floor+0x110>)
   d90fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90fe:	f000 f83d 	bl	d917c <__adddf3>
   d9102:	2200      	movs	r2, #0
   d9104:	2300      	movs	r3, #0
   d9106:	f000 fc7b 	bl	d9a00 <__aeabi_dcmpgt>
   d910a:	2800      	cmp	r0, #0
   d910c:	d0c6      	beq.n	d909c <floor+0x4c>
   d910e:	2c00      	cmp	r4, #0
   d9110:	db1c      	blt.n	d914c <floor+0xfc>
   d9112:	2600      	movs	r6, #0
   d9114:	4634      	mov	r4, r6
   d9116:	e7c1      	b.n	d909c <floor+0x4c>
   d9118:	ee10 2a10 	vmov	r2, s0
   d911c:	460b      	mov	r3, r1
   d911e:	f000 f82d 	bl	d917c <__adddf3>
   d9122:	ec41 0b10 	vmov	d0, r0, r1
   d9126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d912a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   d912e:	fa43 f505 	asr.w	r5, r3, r5
   d9132:	442f      	add	r7, r5
   d9134:	e7af      	b.n	d9096 <floor+0x46>
   d9136:	2d14      	cmp	r5, #20
   d9138:	d010      	beq.n	d915c <floor+0x10c>
   d913a:	2301      	movs	r3, #1
   d913c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   d9140:	fa03 f505 	lsl.w	r5, r3, r5
   d9144:	19ae      	adds	r6, r5, r6
   d9146:	bf28      	it	cs
   d9148:	18ff      	addcs	r7, r7, r3
   d914a:	e7cc      	b.n	d90e6 <floor+0x96>
   d914c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   d9150:	4b06      	ldr	r3, [pc, #24]	; (d916c <floor+0x11c>)
   d9152:	4332      	orrs	r2, r6
   d9154:	bf18      	it	ne
   d9156:	461c      	movne	r4, r3
   d9158:	2600      	movs	r6, #0
   d915a:	e79f      	b.n	d909c <floor+0x4c>
   d915c:	3701      	adds	r7, #1
   d915e:	e7c2      	b.n	d90e6 <floor+0x96>
   d9160:	8800759c 	.word	0x8800759c
   d9164:	7e37e43c 	.word	0x7e37e43c
   d9168:	000fffff 	.word	0x000fffff
   d916c:	bff00000 	.word	0xbff00000

000d9170 <__aeabi_drsub>:
   d9170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9174:	e002      	b.n	d917c <__adddf3>
   d9176:	bf00      	nop

000d9178 <__aeabi_dsub>:
   d9178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d917c <__adddf3>:
   d917c:	b530      	push	{r4, r5, lr}
   d917e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9182:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9186:	ea94 0f05 	teq	r4, r5
   d918a:	bf08      	it	eq
   d918c:	ea90 0f02 	teqeq	r0, r2
   d9190:	bf1f      	itttt	ne
   d9192:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9196:	ea55 0c02 	orrsne.w	ip, r5, r2
   d919a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d919e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d91a2:	f000 80e2 	beq.w	d936a <__adddf3+0x1ee>
   d91a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d91aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d91ae:	bfb8      	it	lt
   d91b0:	426d      	neglt	r5, r5
   d91b2:	dd0c      	ble.n	d91ce <__adddf3+0x52>
   d91b4:	442c      	add	r4, r5
   d91b6:	ea80 0202 	eor.w	r2, r0, r2
   d91ba:	ea81 0303 	eor.w	r3, r1, r3
   d91be:	ea82 0000 	eor.w	r0, r2, r0
   d91c2:	ea83 0101 	eor.w	r1, r3, r1
   d91c6:	ea80 0202 	eor.w	r2, r0, r2
   d91ca:	ea81 0303 	eor.w	r3, r1, r3
   d91ce:	2d36      	cmp	r5, #54	; 0x36
   d91d0:	bf88      	it	hi
   d91d2:	bd30      	pophi	{r4, r5, pc}
   d91d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d91d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d91dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d91e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d91e4:	d002      	beq.n	d91ec <__adddf3+0x70>
   d91e6:	4240      	negs	r0, r0
   d91e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d91f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d91f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d91f8:	d002      	beq.n	d9200 <__adddf3+0x84>
   d91fa:	4252      	negs	r2, r2
   d91fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9200:	ea94 0f05 	teq	r4, r5
   d9204:	f000 80a7 	beq.w	d9356 <__adddf3+0x1da>
   d9208:	f1a4 0401 	sub.w	r4, r4, #1
   d920c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9210:	db0d      	blt.n	d922e <__adddf3+0xb2>
   d9212:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9216:	fa22 f205 	lsr.w	r2, r2, r5
   d921a:	1880      	adds	r0, r0, r2
   d921c:	f141 0100 	adc.w	r1, r1, #0
   d9220:	fa03 f20e 	lsl.w	r2, r3, lr
   d9224:	1880      	adds	r0, r0, r2
   d9226:	fa43 f305 	asr.w	r3, r3, r5
   d922a:	4159      	adcs	r1, r3
   d922c:	e00e      	b.n	d924c <__adddf3+0xd0>
   d922e:	f1a5 0520 	sub.w	r5, r5, #32
   d9232:	f10e 0e20 	add.w	lr, lr, #32
   d9236:	2a01      	cmp	r2, #1
   d9238:	fa03 fc0e 	lsl.w	ip, r3, lr
   d923c:	bf28      	it	cs
   d923e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9242:	fa43 f305 	asr.w	r3, r3, r5
   d9246:	18c0      	adds	r0, r0, r3
   d9248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d924c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9250:	d507      	bpl.n	d9262 <__adddf3+0xe6>
   d9252:	f04f 0e00 	mov.w	lr, #0
   d9256:	f1dc 0c00 	rsbs	ip, ip, #0
   d925a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d925e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9266:	d31b      	bcc.n	d92a0 <__adddf3+0x124>
   d9268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d926c:	d30c      	bcc.n	d9288 <__adddf3+0x10c>
   d926e:	0849      	lsrs	r1, r1, #1
   d9270:	ea5f 0030 	movs.w	r0, r0, rrx
   d9274:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9278:	f104 0401 	add.w	r4, r4, #1
   d927c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9284:	f080 809a 	bcs.w	d93bc <__adddf3+0x240>
   d9288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d928c:	bf08      	it	eq
   d928e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9292:	f150 0000 	adcs.w	r0, r0, #0
   d9296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d929a:	ea41 0105 	orr.w	r1, r1, r5
   d929e:	bd30      	pop	{r4, r5, pc}
   d92a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d92a4:	4140      	adcs	r0, r0
   d92a6:	eb41 0101 	adc.w	r1, r1, r1
   d92aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d92ae:	f1a4 0401 	sub.w	r4, r4, #1
   d92b2:	d1e9      	bne.n	d9288 <__adddf3+0x10c>
   d92b4:	f091 0f00 	teq	r1, #0
   d92b8:	bf04      	itt	eq
   d92ba:	4601      	moveq	r1, r0
   d92bc:	2000      	moveq	r0, #0
   d92be:	fab1 f381 	clz	r3, r1
   d92c2:	bf08      	it	eq
   d92c4:	3320      	addeq	r3, #32
   d92c6:	f1a3 030b 	sub.w	r3, r3, #11
   d92ca:	f1b3 0220 	subs.w	r2, r3, #32
   d92ce:	da0c      	bge.n	d92ea <__adddf3+0x16e>
   d92d0:	320c      	adds	r2, #12
   d92d2:	dd08      	ble.n	d92e6 <__adddf3+0x16a>
   d92d4:	f102 0c14 	add.w	ip, r2, #20
   d92d8:	f1c2 020c 	rsb	r2, r2, #12
   d92dc:	fa01 f00c 	lsl.w	r0, r1, ip
   d92e0:	fa21 f102 	lsr.w	r1, r1, r2
   d92e4:	e00c      	b.n	d9300 <__adddf3+0x184>
   d92e6:	f102 0214 	add.w	r2, r2, #20
   d92ea:	bfd8      	it	le
   d92ec:	f1c2 0c20 	rsble	ip, r2, #32
   d92f0:	fa01 f102 	lsl.w	r1, r1, r2
   d92f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d92f8:	bfdc      	itt	le
   d92fa:	ea41 010c 	orrle.w	r1, r1, ip
   d92fe:	4090      	lslle	r0, r2
   d9300:	1ae4      	subs	r4, r4, r3
   d9302:	bfa2      	ittt	ge
   d9304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9308:	4329      	orrge	r1, r5
   d930a:	bd30      	popge	{r4, r5, pc}
   d930c:	ea6f 0404 	mvn.w	r4, r4
   d9310:	3c1f      	subs	r4, #31
   d9312:	da1c      	bge.n	d934e <__adddf3+0x1d2>
   d9314:	340c      	adds	r4, #12
   d9316:	dc0e      	bgt.n	d9336 <__adddf3+0x1ba>
   d9318:	f104 0414 	add.w	r4, r4, #20
   d931c:	f1c4 0220 	rsb	r2, r4, #32
   d9320:	fa20 f004 	lsr.w	r0, r0, r4
   d9324:	fa01 f302 	lsl.w	r3, r1, r2
   d9328:	ea40 0003 	orr.w	r0, r0, r3
   d932c:	fa21 f304 	lsr.w	r3, r1, r4
   d9330:	ea45 0103 	orr.w	r1, r5, r3
   d9334:	bd30      	pop	{r4, r5, pc}
   d9336:	f1c4 040c 	rsb	r4, r4, #12
   d933a:	f1c4 0220 	rsb	r2, r4, #32
   d933e:	fa20 f002 	lsr.w	r0, r0, r2
   d9342:	fa01 f304 	lsl.w	r3, r1, r4
   d9346:	ea40 0003 	orr.w	r0, r0, r3
   d934a:	4629      	mov	r1, r5
   d934c:	bd30      	pop	{r4, r5, pc}
   d934e:	fa21 f004 	lsr.w	r0, r1, r4
   d9352:	4629      	mov	r1, r5
   d9354:	bd30      	pop	{r4, r5, pc}
   d9356:	f094 0f00 	teq	r4, #0
   d935a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d935e:	bf06      	itte	eq
   d9360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9364:	3401      	addeq	r4, #1
   d9366:	3d01      	subne	r5, #1
   d9368:	e74e      	b.n	d9208 <__adddf3+0x8c>
   d936a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d936e:	bf18      	it	ne
   d9370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9374:	d029      	beq.n	d93ca <__adddf3+0x24e>
   d9376:	ea94 0f05 	teq	r4, r5
   d937a:	bf08      	it	eq
   d937c:	ea90 0f02 	teqeq	r0, r2
   d9380:	d005      	beq.n	d938e <__adddf3+0x212>
   d9382:	ea54 0c00 	orrs.w	ip, r4, r0
   d9386:	bf04      	itt	eq
   d9388:	4619      	moveq	r1, r3
   d938a:	4610      	moveq	r0, r2
   d938c:	bd30      	pop	{r4, r5, pc}
   d938e:	ea91 0f03 	teq	r1, r3
   d9392:	bf1e      	ittt	ne
   d9394:	2100      	movne	r1, #0
   d9396:	2000      	movne	r0, #0
   d9398:	bd30      	popne	{r4, r5, pc}
   d939a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d939e:	d105      	bne.n	d93ac <__adddf3+0x230>
   d93a0:	0040      	lsls	r0, r0, #1
   d93a2:	4149      	adcs	r1, r1
   d93a4:	bf28      	it	cs
   d93a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d93aa:	bd30      	pop	{r4, r5, pc}
   d93ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d93b0:	bf3c      	itt	cc
   d93b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d93b6:	bd30      	popcc	{r4, r5, pc}
   d93b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d93bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d93c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d93c4:	f04f 0000 	mov.w	r0, #0
   d93c8:	bd30      	pop	{r4, r5, pc}
   d93ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d93ce:	bf1a      	itte	ne
   d93d0:	4619      	movne	r1, r3
   d93d2:	4610      	movne	r0, r2
   d93d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d93d8:	bf1c      	itt	ne
   d93da:	460b      	movne	r3, r1
   d93dc:	4602      	movne	r2, r0
   d93de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93e2:	bf06      	itte	eq
   d93e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d93e8:	ea91 0f03 	teqeq	r1, r3
   d93ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d93f0:	bd30      	pop	{r4, r5, pc}
   d93f2:	bf00      	nop

000d93f4 <__aeabi_ui2d>:
   d93f4:	f090 0f00 	teq	r0, #0
   d93f8:	bf04      	itt	eq
   d93fa:	2100      	moveq	r1, #0
   d93fc:	4770      	bxeq	lr
   d93fe:	b530      	push	{r4, r5, lr}
   d9400:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9404:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9408:	f04f 0500 	mov.w	r5, #0
   d940c:	f04f 0100 	mov.w	r1, #0
   d9410:	e750      	b.n	d92b4 <__adddf3+0x138>
   d9412:	bf00      	nop

000d9414 <__aeabi_i2d>:
   d9414:	f090 0f00 	teq	r0, #0
   d9418:	bf04      	itt	eq
   d941a:	2100      	moveq	r1, #0
   d941c:	4770      	bxeq	lr
   d941e:	b530      	push	{r4, r5, lr}
   d9420:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9424:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d942c:	bf48      	it	mi
   d942e:	4240      	negmi	r0, r0
   d9430:	f04f 0100 	mov.w	r1, #0
   d9434:	e73e      	b.n	d92b4 <__adddf3+0x138>
   d9436:	bf00      	nop

000d9438 <__aeabi_f2d>:
   d9438:	0042      	lsls	r2, r0, #1
   d943a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d943e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9442:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9446:	bf1f      	itttt	ne
   d9448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d944c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9454:	4770      	bxne	lr
   d9456:	f092 0f00 	teq	r2, #0
   d945a:	bf14      	ite	ne
   d945c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9460:	4770      	bxeq	lr
   d9462:	b530      	push	{r4, r5, lr}
   d9464:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d946c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9470:	e720      	b.n	d92b4 <__adddf3+0x138>
   d9472:	bf00      	nop

000d9474 <__aeabi_ul2d>:
   d9474:	ea50 0201 	orrs.w	r2, r0, r1
   d9478:	bf08      	it	eq
   d947a:	4770      	bxeq	lr
   d947c:	b530      	push	{r4, r5, lr}
   d947e:	f04f 0500 	mov.w	r5, #0
   d9482:	e00a      	b.n	d949a <__aeabi_l2d+0x16>

000d9484 <__aeabi_l2d>:
   d9484:	ea50 0201 	orrs.w	r2, r0, r1
   d9488:	bf08      	it	eq
   d948a:	4770      	bxeq	lr
   d948c:	b530      	push	{r4, r5, lr}
   d948e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9492:	d502      	bpl.n	d949a <__aeabi_l2d+0x16>
   d9494:	4240      	negs	r0, r0
   d9496:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d949a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d949e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d94a6:	f43f aedc 	beq.w	d9262 <__adddf3+0xe6>
   d94aa:	f04f 0203 	mov.w	r2, #3
   d94ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94b2:	bf18      	it	ne
   d94b4:	3203      	addne	r2, #3
   d94b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94ba:	bf18      	it	ne
   d94bc:	3203      	addne	r2, #3
   d94be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d94c2:	f1c2 0320 	rsb	r3, r2, #32
   d94c6:	fa00 fc03 	lsl.w	ip, r0, r3
   d94ca:	fa20 f002 	lsr.w	r0, r0, r2
   d94ce:	fa01 fe03 	lsl.w	lr, r1, r3
   d94d2:	ea40 000e 	orr.w	r0, r0, lr
   d94d6:	fa21 f102 	lsr.w	r1, r1, r2
   d94da:	4414      	add	r4, r2
   d94dc:	e6c1      	b.n	d9262 <__adddf3+0xe6>
   d94de:	bf00      	nop

000d94e0 <__aeabi_dmul>:
   d94e0:	b570      	push	{r4, r5, r6, lr}
   d94e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d94e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d94ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d94ee:	bf1d      	ittte	ne
   d94f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d94f4:	ea94 0f0c 	teqne	r4, ip
   d94f8:	ea95 0f0c 	teqne	r5, ip
   d94fc:	f000 f8de 	bleq	d96bc <__aeabi_dmul+0x1dc>
   d9500:	442c      	add	r4, r5
   d9502:	ea81 0603 	eor.w	r6, r1, r3
   d9506:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d950a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d950e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9512:	bf18      	it	ne
   d9514:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d951c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9520:	d038      	beq.n	d9594 <__aeabi_dmul+0xb4>
   d9522:	fba0 ce02 	umull	ip, lr, r0, r2
   d9526:	f04f 0500 	mov.w	r5, #0
   d952a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d952e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9532:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9536:	f04f 0600 	mov.w	r6, #0
   d953a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d953e:	f09c 0f00 	teq	ip, #0
   d9542:	bf18      	it	ne
   d9544:	f04e 0e01 	orrne.w	lr, lr, #1
   d9548:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d954c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9550:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9554:	d204      	bcs.n	d9560 <__aeabi_dmul+0x80>
   d9556:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d955a:	416d      	adcs	r5, r5
   d955c:	eb46 0606 	adc.w	r6, r6, r6
   d9560:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9564:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9568:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d956c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9570:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9574:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9578:	bf88      	it	hi
   d957a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d957e:	d81e      	bhi.n	d95be <__aeabi_dmul+0xde>
   d9580:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9584:	bf08      	it	eq
   d9586:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d958a:	f150 0000 	adcs.w	r0, r0, #0
   d958e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9592:	bd70      	pop	{r4, r5, r6, pc}
   d9594:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9598:	ea46 0101 	orr.w	r1, r6, r1
   d959c:	ea40 0002 	orr.w	r0, r0, r2
   d95a0:	ea81 0103 	eor.w	r1, r1, r3
   d95a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d95a8:	bfc2      	ittt	gt
   d95aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d95ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d95b2:	bd70      	popgt	{r4, r5, r6, pc}
   d95b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95b8:	f04f 0e00 	mov.w	lr, #0
   d95bc:	3c01      	subs	r4, #1
   d95be:	f300 80ab 	bgt.w	d9718 <__aeabi_dmul+0x238>
   d95c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d95c6:	bfde      	ittt	le
   d95c8:	2000      	movle	r0, #0
   d95ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d95ce:	bd70      	pople	{r4, r5, r6, pc}
   d95d0:	f1c4 0400 	rsb	r4, r4, #0
   d95d4:	3c20      	subs	r4, #32
   d95d6:	da35      	bge.n	d9644 <__aeabi_dmul+0x164>
   d95d8:	340c      	adds	r4, #12
   d95da:	dc1b      	bgt.n	d9614 <__aeabi_dmul+0x134>
   d95dc:	f104 0414 	add.w	r4, r4, #20
   d95e0:	f1c4 0520 	rsb	r5, r4, #32
   d95e4:	fa00 f305 	lsl.w	r3, r0, r5
   d95e8:	fa20 f004 	lsr.w	r0, r0, r4
   d95ec:	fa01 f205 	lsl.w	r2, r1, r5
   d95f0:	ea40 0002 	orr.w	r0, r0, r2
   d95f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d95f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d95fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9600:	fa21 f604 	lsr.w	r6, r1, r4
   d9604:	eb42 0106 	adc.w	r1, r2, r6
   d9608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d960c:	bf08      	it	eq
   d960e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9612:	bd70      	pop	{r4, r5, r6, pc}
   d9614:	f1c4 040c 	rsb	r4, r4, #12
   d9618:	f1c4 0520 	rsb	r5, r4, #32
   d961c:	fa00 f304 	lsl.w	r3, r0, r4
   d9620:	fa20 f005 	lsr.w	r0, r0, r5
   d9624:	fa01 f204 	lsl.w	r2, r1, r4
   d9628:	ea40 0002 	orr.w	r0, r0, r2
   d962c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9634:	f141 0100 	adc.w	r1, r1, #0
   d9638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d963c:	bf08      	it	eq
   d963e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9642:	bd70      	pop	{r4, r5, r6, pc}
   d9644:	f1c4 0520 	rsb	r5, r4, #32
   d9648:	fa00 f205 	lsl.w	r2, r0, r5
   d964c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9650:	fa20 f304 	lsr.w	r3, r0, r4
   d9654:	fa01 f205 	lsl.w	r2, r1, r5
   d9658:	ea43 0302 	orr.w	r3, r3, r2
   d965c:	fa21 f004 	lsr.w	r0, r1, r4
   d9660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9664:	fa21 f204 	lsr.w	r2, r1, r4
   d9668:	ea20 0002 	bic.w	r0, r0, r2
   d966c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9674:	bf08      	it	eq
   d9676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d967a:	bd70      	pop	{r4, r5, r6, pc}
   d967c:	f094 0f00 	teq	r4, #0
   d9680:	d10f      	bne.n	d96a2 <__aeabi_dmul+0x1c2>
   d9682:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9686:	0040      	lsls	r0, r0, #1
   d9688:	eb41 0101 	adc.w	r1, r1, r1
   d968c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9690:	bf08      	it	eq
   d9692:	3c01      	subeq	r4, #1
   d9694:	d0f7      	beq.n	d9686 <__aeabi_dmul+0x1a6>
   d9696:	ea41 0106 	orr.w	r1, r1, r6
   d969a:	f095 0f00 	teq	r5, #0
   d969e:	bf18      	it	ne
   d96a0:	4770      	bxne	lr
   d96a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d96a6:	0052      	lsls	r2, r2, #1
   d96a8:	eb43 0303 	adc.w	r3, r3, r3
   d96ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d96b0:	bf08      	it	eq
   d96b2:	3d01      	subeq	r5, #1
   d96b4:	d0f7      	beq.n	d96a6 <__aeabi_dmul+0x1c6>
   d96b6:	ea43 0306 	orr.w	r3, r3, r6
   d96ba:	4770      	bx	lr
   d96bc:	ea94 0f0c 	teq	r4, ip
   d96c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d96c4:	bf18      	it	ne
   d96c6:	ea95 0f0c 	teqne	r5, ip
   d96ca:	d00c      	beq.n	d96e6 <__aeabi_dmul+0x206>
   d96cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96d0:	bf18      	it	ne
   d96d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d96d6:	d1d1      	bne.n	d967c <__aeabi_dmul+0x19c>
   d96d8:	ea81 0103 	eor.w	r1, r1, r3
   d96dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96e0:	f04f 0000 	mov.w	r0, #0
   d96e4:	bd70      	pop	{r4, r5, r6, pc}
   d96e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96ea:	bf06      	itte	eq
   d96ec:	4610      	moveq	r0, r2
   d96ee:	4619      	moveq	r1, r3
   d96f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d96f4:	d019      	beq.n	d972a <__aeabi_dmul+0x24a>
   d96f6:	ea94 0f0c 	teq	r4, ip
   d96fa:	d102      	bne.n	d9702 <__aeabi_dmul+0x222>
   d96fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9700:	d113      	bne.n	d972a <__aeabi_dmul+0x24a>
   d9702:	ea95 0f0c 	teq	r5, ip
   d9706:	d105      	bne.n	d9714 <__aeabi_dmul+0x234>
   d9708:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d970c:	bf1c      	itt	ne
   d970e:	4610      	movne	r0, r2
   d9710:	4619      	movne	r1, r3
   d9712:	d10a      	bne.n	d972a <__aeabi_dmul+0x24a>
   d9714:	ea81 0103 	eor.w	r1, r1, r3
   d9718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d971c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9724:	f04f 0000 	mov.w	r0, #0
   d9728:	bd70      	pop	{r4, r5, r6, pc}
   d972a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d972e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9732:	bd70      	pop	{r4, r5, r6, pc}

000d9734 <__aeabi_ddiv>:
   d9734:	b570      	push	{r4, r5, r6, lr}
   d9736:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d973a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d973e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9742:	bf1d      	ittte	ne
   d9744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9748:	ea94 0f0c 	teqne	r4, ip
   d974c:	ea95 0f0c 	teqne	r5, ip
   d9750:	f000 f8a7 	bleq	d98a2 <__aeabi_ddiv+0x16e>
   d9754:	eba4 0405 	sub.w	r4, r4, r5
   d9758:	ea81 0e03 	eor.w	lr, r1, r3
   d975c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9760:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9764:	f000 8088 	beq.w	d9878 <__aeabi_ddiv+0x144>
   d9768:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d976c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9770:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9774:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9778:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d977c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9780:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9784:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9788:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d978c:	429d      	cmp	r5, r3
   d978e:	bf08      	it	eq
   d9790:	4296      	cmpeq	r6, r2
   d9792:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9796:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d979a:	d202      	bcs.n	d97a2 <__aeabi_ddiv+0x6e>
   d979c:	085b      	lsrs	r3, r3, #1
   d979e:	ea4f 0232 	mov.w	r2, r2, rrx
   d97a2:	1ab6      	subs	r6, r6, r2
   d97a4:	eb65 0503 	sbc.w	r5, r5, r3
   d97a8:	085b      	lsrs	r3, r3, #1
   d97aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d97ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d97b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d97b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d97ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97be:	bf22      	ittt	cs
   d97c0:	1ab6      	subcs	r6, r6, r2
   d97c2:	4675      	movcs	r5, lr
   d97c4:	ea40 000c 	orrcs.w	r0, r0, ip
   d97c8:	085b      	lsrs	r3, r3, #1
   d97ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d97ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d97d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97d6:	bf22      	ittt	cs
   d97d8:	1ab6      	subcs	r6, r6, r2
   d97da:	4675      	movcs	r5, lr
   d97dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d97e0:	085b      	lsrs	r3, r3, #1
   d97e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d97e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d97ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97ee:	bf22      	ittt	cs
   d97f0:	1ab6      	subcs	r6, r6, r2
   d97f2:	4675      	movcs	r5, lr
   d97f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d97f8:	085b      	lsrs	r3, r3, #1
   d97fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d97fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d9802:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9806:	bf22      	ittt	cs
   d9808:	1ab6      	subcs	r6, r6, r2
   d980a:	4675      	movcs	r5, lr
   d980c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9810:	ea55 0e06 	orrs.w	lr, r5, r6
   d9814:	d018      	beq.n	d9848 <__aeabi_ddiv+0x114>
   d9816:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d981a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d981e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9822:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9826:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d982a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d982e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9832:	d1c0      	bne.n	d97b6 <__aeabi_ddiv+0x82>
   d9834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9838:	d10b      	bne.n	d9852 <__aeabi_ddiv+0x11e>
   d983a:	ea41 0100 	orr.w	r1, r1, r0
   d983e:	f04f 0000 	mov.w	r0, #0
   d9842:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9846:	e7b6      	b.n	d97b6 <__aeabi_ddiv+0x82>
   d9848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d984c:	bf04      	itt	eq
   d984e:	4301      	orreq	r1, r0
   d9850:	2000      	moveq	r0, #0
   d9852:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9856:	bf88      	it	hi
   d9858:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d985c:	f63f aeaf 	bhi.w	d95be <__aeabi_dmul+0xde>
   d9860:	ebb5 0c03 	subs.w	ip, r5, r3
   d9864:	bf04      	itt	eq
   d9866:	ebb6 0c02 	subseq.w	ip, r6, r2
   d986a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d986e:	f150 0000 	adcs.w	r0, r0, #0
   d9872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9876:	bd70      	pop	{r4, r5, r6, pc}
   d9878:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d987c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9880:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9884:	bfc2      	ittt	gt
   d9886:	ebd4 050c 	rsbsgt	r5, r4, ip
   d988a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d988e:	bd70      	popgt	{r4, r5, r6, pc}
   d9890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9894:	f04f 0e00 	mov.w	lr, #0
   d9898:	3c01      	subs	r4, #1
   d989a:	e690      	b.n	d95be <__aeabi_dmul+0xde>
   d989c:	ea45 0e06 	orr.w	lr, r5, r6
   d98a0:	e68d      	b.n	d95be <__aeabi_dmul+0xde>
   d98a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d98a6:	ea94 0f0c 	teq	r4, ip
   d98aa:	bf08      	it	eq
   d98ac:	ea95 0f0c 	teqeq	r5, ip
   d98b0:	f43f af3b 	beq.w	d972a <__aeabi_dmul+0x24a>
   d98b4:	ea94 0f0c 	teq	r4, ip
   d98b8:	d10a      	bne.n	d98d0 <__aeabi_ddiv+0x19c>
   d98ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d98be:	f47f af34 	bne.w	d972a <__aeabi_dmul+0x24a>
   d98c2:	ea95 0f0c 	teq	r5, ip
   d98c6:	f47f af25 	bne.w	d9714 <__aeabi_dmul+0x234>
   d98ca:	4610      	mov	r0, r2
   d98cc:	4619      	mov	r1, r3
   d98ce:	e72c      	b.n	d972a <__aeabi_dmul+0x24a>
   d98d0:	ea95 0f0c 	teq	r5, ip
   d98d4:	d106      	bne.n	d98e4 <__aeabi_ddiv+0x1b0>
   d98d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d98da:	f43f aefd 	beq.w	d96d8 <__aeabi_dmul+0x1f8>
   d98de:	4610      	mov	r0, r2
   d98e0:	4619      	mov	r1, r3
   d98e2:	e722      	b.n	d972a <__aeabi_dmul+0x24a>
   d98e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98e8:	bf18      	it	ne
   d98ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d98ee:	f47f aec5 	bne.w	d967c <__aeabi_dmul+0x19c>
   d98f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d98f6:	f47f af0d 	bne.w	d9714 <__aeabi_dmul+0x234>
   d98fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d98fe:	f47f aeeb 	bne.w	d96d8 <__aeabi_dmul+0x1f8>
   d9902:	e712      	b.n	d972a <__aeabi_dmul+0x24a>

000d9904 <__gedf2>:
   d9904:	f04f 3cff 	mov.w	ip, #4294967295
   d9908:	e006      	b.n	d9918 <__cmpdf2+0x4>
   d990a:	bf00      	nop

000d990c <__ledf2>:
   d990c:	f04f 0c01 	mov.w	ip, #1
   d9910:	e002      	b.n	d9918 <__cmpdf2+0x4>
   d9912:	bf00      	nop

000d9914 <__cmpdf2>:
   d9914:	f04f 0c01 	mov.w	ip, #1
   d9918:	f84d cd04 	str.w	ip, [sp, #-4]!
   d991c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9924:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9928:	bf18      	it	ne
   d992a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d992e:	d01b      	beq.n	d9968 <__cmpdf2+0x54>
   d9930:	b001      	add	sp, #4
   d9932:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9936:	bf0c      	ite	eq
   d9938:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d993c:	ea91 0f03 	teqne	r1, r3
   d9940:	bf02      	ittt	eq
   d9942:	ea90 0f02 	teqeq	r0, r2
   d9946:	2000      	moveq	r0, #0
   d9948:	4770      	bxeq	lr
   d994a:	f110 0f00 	cmn.w	r0, #0
   d994e:	ea91 0f03 	teq	r1, r3
   d9952:	bf58      	it	pl
   d9954:	4299      	cmppl	r1, r3
   d9956:	bf08      	it	eq
   d9958:	4290      	cmpeq	r0, r2
   d995a:	bf2c      	ite	cs
   d995c:	17d8      	asrcs	r0, r3, #31
   d995e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9962:	f040 0001 	orr.w	r0, r0, #1
   d9966:	4770      	bx	lr
   d9968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d996c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9970:	d102      	bne.n	d9978 <__cmpdf2+0x64>
   d9972:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9976:	d107      	bne.n	d9988 <__cmpdf2+0x74>
   d9978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d997c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9980:	d1d6      	bne.n	d9930 <__cmpdf2+0x1c>
   d9982:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9986:	d0d3      	beq.n	d9930 <__cmpdf2+0x1c>
   d9988:	f85d 0b04 	ldr.w	r0, [sp], #4
   d998c:	4770      	bx	lr
   d998e:	bf00      	nop

000d9990 <__aeabi_cdrcmple>:
   d9990:	4684      	mov	ip, r0
   d9992:	4610      	mov	r0, r2
   d9994:	4662      	mov	r2, ip
   d9996:	468c      	mov	ip, r1
   d9998:	4619      	mov	r1, r3
   d999a:	4663      	mov	r3, ip
   d999c:	e000      	b.n	d99a0 <__aeabi_cdcmpeq>
   d999e:	bf00      	nop

000d99a0 <__aeabi_cdcmpeq>:
   d99a0:	b501      	push	{r0, lr}
   d99a2:	f7ff ffb7 	bl	d9914 <__cmpdf2>
   d99a6:	2800      	cmp	r0, #0
   d99a8:	bf48      	it	mi
   d99aa:	f110 0f00 	cmnmi.w	r0, #0
   d99ae:	bd01      	pop	{r0, pc}

000d99b0 <__aeabi_dcmpeq>:
   d99b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99b4:	f7ff fff4 	bl	d99a0 <__aeabi_cdcmpeq>
   d99b8:	bf0c      	ite	eq
   d99ba:	2001      	moveq	r0, #1
   d99bc:	2000      	movne	r0, #0
   d99be:	f85d fb08 	ldr.w	pc, [sp], #8
   d99c2:	bf00      	nop

000d99c4 <__aeabi_dcmplt>:
   d99c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99c8:	f7ff ffea 	bl	d99a0 <__aeabi_cdcmpeq>
   d99cc:	bf34      	ite	cc
   d99ce:	2001      	movcc	r0, #1
   d99d0:	2000      	movcs	r0, #0
   d99d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d99d6:	bf00      	nop

000d99d8 <__aeabi_dcmple>:
   d99d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99dc:	f7ff ffe0 	bl	d99a0 <__aeabi_cdcmpeq>
   d99e0:	bf94      	ite	ls
   d99e2:	2001      	movls	r0, #1
   d99e4:	2000      	movhi	r0, #0
   d99e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d99ea:	bf00      	nop

000d99ec <__aeabi_dcmpge>:
   d99ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99f0:	f7ff ffce 	bl	d9990 <__aeabi_cdrcmple>
   d99f4:	bf94      	ite	ls
   d99f6:	2001      	movls	r0, #1
   d99f8:	2000      	movhi	r0, #0
   d99fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d99fe:	bf00      	nop

000d9a00 <__aeabi_dcmpgt>:
   d9a00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a04:	f7ff ffc4 	bl	d9990 <__aeabi_cdrcmple>
   d9a08:	bf34      	ite	cc
   d9a0a:	2001      	movcc	r0, #1
   d9a0c:	2000      	movcs	r0, #0
   d9a0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a12:	bf00      	nop

000d9a14 <__aeabi_dcmpun>:
   d9a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a1c:	d102      	bne.n	d9a24 <__aeabi_dcmpun+0x10>
   d9a1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9a22:	d10a      	bne.n	d9a3a <__aeabi_dcmpun+0x26>
   d9a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a2c:	d102      	bne.n	d9a34 <__aeabi_dcmpun+0x20>
   d9a2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9a32:	d102      	bne.n	d9a3a <__aeabi_dcmpun+0x26>
   d9a34:	f04f 0000 	mov.w	r0, #0
   d9a38:	4770      	bx	lr
   d9a3a:	f04f 0001 	mov.w	r0, #1
   d9a3e:	4770      	bx	lr

000d9a40 <__aeabi_d2iz>:
   d9a40:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9a44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9a48:	d215      	bcs.n	d9a76 <__aeabi_d2iz+0x36>
   d9a4a:	d511      	bpl.n	d9a70 <__aeabi_d2iz+0x30>
   d9a4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9a50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9a54:	d912      	bls.n	d9a7c <__aeabi_d2iz+0x3c>
   d9a56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9a5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a66:	fa23 f002 	lsr.w	r0, r3, r2
   d9a6a:	bf18      	it	ne
   d9a6c:	4240      	negne	r0, r0
   d9a6e:	4770      	bx	lr
   d9a70:	f04f 0000 	mov.w	r0, #0
   d9a74:	4770      	bx	lr
   d9a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9a7a:	d105      	bne.n	d9a88 <__aeabi_d2iz+0x48>
   d9a7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9a80:	bf08      	it	eq
   d9a82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9a86:	4770      	bx	lr
   d9a88:	f04f 0000 	mov.w	r0, #0
   d9a8c:	4770      	bx	lr
   d9a8e:	bf00      	nop

000d9a90 <__aeabi_d2uiz>:
   d9a90:	004a      	lsls	r2, r1, #1
   d9a92:	d211      	bcs.n	d9ab8 <__aeabi_d2uiz+0x28>
   d9a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9a98:	d211      	bcs.n	d9abe <__aeabi_d2uiz+0x2e>
   d9a9a:	d50d      	bpl.n	d9ab8 <__aeabi_d2uiz+0x28>
   d9a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9aa4:	d40e      	bmi.n	d9ac4 <__aeabi_d2uiz+0x34>
   d9aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9ab2:	fa23 f002 	lsr.w	r0, r3, r2
   d9ab6:	4770      	bx	lr
   d9ab8:	f04f 0000 	mov.w	r0, #0
   d9abc:	4770      	bx	lr
   d9abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9ac2:	d102      	bne.n	d9aca <__aeabi_d2uiz+0x3a>
   d9ac4:	f04f 30ff 	mov.w	r0, #4294967295
   d9ac8:	4770      	bx	lr
   d9aca:	f04f 0000 	mov.w	r0, #0
   d9ace:	4770      	bx	lr

000d9ad0 <__aeabi_d2f>:
   d9ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9ad4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9ad8:	bf24      	itt	cs
   d9ada:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9ade:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9ae2:	d90d      	bls.n	d9b00 <__aeabi_d2f+0x30>
   d9ae4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9ae8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9aec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9af0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9af4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9af8:	bf08      	it	eq
   d9afa:	f020 0001 	biceq.w	r0, r0, #1
   d9afe:	4770      	bx	lr
   d9b00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9b04:	d121      	bne.n	d9b4a <__aeabi_d2f+0x7a>
   d9b06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9b0a:	bfbc      	itt	lt
   d9b0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9b10:	4770      	bxlt	lr
   d9b12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9b16:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9b1a:	f1c2 0218 	rsb	r2, r2, #24
   d9b1e:	f1c2 0c20 	rsb	ip, r2, #32
   d9b22:	fa10 f30c 	lsls.w	r3, r0, ip
   d9b26:	fa20 f002 	lsr.w	r0, r0, r2
   d9b2a:	bf18      	it	ne
   d9b2c:	f040 0001 	orrne.w	r0, r0, #1
   d9b30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9b34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9b38:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9b3c:	ea40 000c 	orr.w	r0, r0, ip
   d9b40:	fa23 f302 	lsr.w	r3, r3, r2
   d9b44:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9b48:	e7cc      	b.n	d9ae4 <__aeabi_d2f+0x14>
   d9b4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9b4e:	d107      	bne.n	d9b60 <__aeabi_d2f+0x90>
   d9b50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9b54:	bf1e      	ittt	ne
   d9b56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9b5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9b5e:	4770      	bxne	lr
   d9b60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9b64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9b68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9b6c:	4770      	bx	lr
   d9b6e:	bf00      	nop

000d9b70 <asctime>:
   d9b70:	4b09      	ldr	r3, [pc, #36]	; (d9b98 <asctime+0x28>)
   d9b72:	b570      	push	{r4, r5, r6, lr}
   d9b74:	681c      	ldr	r4, [r3, #0]
   d9b76:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d9b78:	4606      	mov	r6, r0
   d9b7a:	b93d      	cbnz	r5, d9b8c <asctime+0x1c>
   d9b7c:	201a      	movs	r0, #26
   d9b7e:	f7fd fc8b 	bl	d7498 <malloc>
   d9b82:	221a      	movs	r2, #26
   d9b84:	6420      	str	r0, [r4, #64]	; 0x40
   d9b86:	4629      	mov	r1, r5
   d9b88:	f000 f93f 	bl	d9e0a <memset>
   d9b8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d9b8e:	4630      	mov	r0, r6
   d9b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9b94:	f000 b802 	b.w	d9b9c <asctime_r>
   d9b98:	2003dc18 	.word	0x2003dc18

000d9b9c <asctime_r>:
   d9b9c:	b510      	push	{r4, lr}
   d9b9e:	460c      	mov	r4, r1
   d9ba0:	6941      	ldr	r1, [r0, #20]
   d9ba2:	6903      	ldr	r3, [r0, #16]
   d9ba4:	6982      	ldr	r2, [r0, #24]
   d9ba6:	b086      	sub	sp, #24
   d9ba8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9bac:	9104      	str	r1, [sp, #16]
   d9bae:	6801      	ldr	r1, [r0, #0]
   d9bb0:	9103      	str	r1, [sp, #12]
   d9bb2:	6841      	ldr	r1, [r0, #4]
   d9bb4:	9102      	str	r1, [sp, #8]
   d9bb6:	6881      	ldr	r1, [r0, #8]
   d9bb8:	9101      	str	r1, [sp, #4]
   d9bba:	68c1      	ldr	r1, [r0, #12]
   d9bbc:	9100      	str	r1, [sp, #0]
   d9bbe:	4907      	ldr	r1, [pc, #28]	; (d9bdc <asctime_r+0x40>)
   d9bc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9bc4:	440b      	add	r3, r1
   d9bc6:	4906      	ldr	r1, [pc, #24]	; (d9be0 <asctime_r+0x44>)
   d9bc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9bcc:	440a      	add	r2, r1
   d9bce:	4620      	mov	r0, r4
   d9bd0:	4904      	ldr	r1, [pc, #16]	; (d9be4 <asctime_r+0x48>)
   d9bd2:	f7fd fc79 	bl	d74c8 <siprintf>
   d9bd6:	4620      	mov	r0, r4
   d9bd8:	b006      	add	sp, #24
   d9bda:	bd10      	pop	{r4, pc}
   d9bdc:	000db116 	.word	0x000db116
   d9be0:	000db101 	.word	0x000db101
   d9be4:	000db13a 	.word	0x000db13a

000d9be8 <__cxa_atexit>:
   d9be8:	b510      	push	{r4, lr}
   d9bea:	4c05      	ldr	r4, [pc, #20]	; (d9c00 <__cxa_atexit+0x18>)
   d9bec:	4613      	mov	r3, r2
   d9bee:	b12c      	cbz	r4, d9bfc <__cxa_atexit+0x14>
   d9bf0:	460a      	mov	r2, r1
   d9bf2:	4601      	mov	r1, r0
   d9bf4:	2002      	movs	r0, #2
   d9bf6:	f3af 8000 	nop.w
   d9bfa:	bd10      	pop	{r4, pc}
   d9bfc:	4620      	mov	r0, r4
   d9bfe:	bd10      	pop	{r4, pc}
   d9c00:	00000000 	.word	0x00000000

000d9c04 <localtime>:
   d9c04:	b538      	push	{r3, r4, r5, lr}
   d9c06:	4b07      	ldr	r3, [pc, #28]	; (d9c24 <localtime+0x20>)
   d9c08:	681c      	ldr	r4, [r3, #0]
   d9c0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9c0c:	4605      	mov	r5, r0
   d9c0e:	b91b      	cbnz	r3, d9c18 <localtime+0x14>
   d9c10:	2024      	movs	r0, #36	; 0x24
   d9c12:	f7fd fc41 	bl	d7498 <malloc>
   d9c16:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9c18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9c1a:	4628      	mov	r0, r5
   d9c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9c20:	f000 b802 	b.w	d9c28 <localtime_r>
   d9c24:	2003dc18 	.word	0x2003dc18

000d9c28 <localtime_r>:
   d9c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9c2c:	460c      	mov	r4, r1
   d9c2e:	4680      	mov	r8, r0
   d9c30:	f000 fc5a 	bl	da4e8 <__gettzinfo>
   d9c34:	4621      	mov	r1, r4
   d9c36:	4607      	mov	r7, r0
   d9c38:	4640      	mov	r0, r8
   d9c3a:	f000 fc59 	bl	da4f0 <gmtime_r>
   d9c3e:	6946      	ldr	r6, [r0, #20]
   d9c40:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9c44:	07b3      	lsls	r3, r6, #30
   d9c46:	4604      	mov	r4, r0
   d9c48:	d105      	bne.n	d9c56 <localtime_r+0x2e>
   d9c4a:	2264      	movs	r2, #100	; 0x64
   d9c4c:	fb96 f3f2 	sdiv	r3, r6, r2
   d9c50:	fb02 6313 	mls	r3, r2, r3, r6
   d9c54:	b94b      	cbnz	r3, d9c6a <localtime_r+0x42>
   d9c56:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9c5a:	fb96 f3f5 	sdiv	r3, r6, r5
   d9c5e:	fb05 6513 	mls	r5, r5, r3, r6
   d9c62:	fab5 f385 	clz	r3, r5
   d9c66:	095b      	lsrs	r3, r3, #5
   d9c68:	e000      	b.n	d9c6c <localtime_r+0x44>
   d9c6a:	2301      	movs	r3, #1
   d9c6c:	4a5f      	ldr	r2, [pc, #380]	; (d9dec <localtime_r+0x1c4>)
   d9c6e:	2530      	movs	r5, #48	; 0x30
   d9c70:	fb05 2503 	mla	r5, r5, r3, r2
   d9c74:	f000 fa6c 	bl	da150 <__tz_lock>
   d9c78:	f000 fa6c 	bl	da154 <_tzset_unlocked>
   d9c7c:	4b5c      	ldr	r3, [pc, #368]	; (d9df0 <localtime_r+0x1c8>)
   d9c7e:	681b      	ldr	r3, [r3, #0]
   d9c80:	b1f3      	cbz	r3, d9cc0 <localtime_r+0x98>
   d9c82:	687b      	ldr	r3, [r7, #4]
   d9c84:	429e      	cmp	r6, r3
   d9c86:	d105      	bne.n	d9c94 <localtime_r+0x6c>
   d9c88:	6839      	ldr	r1, [r7, #0]
   d9c8a:	f8d8 3000 	ldr.w	r3, [r8]
   d9c8e:	69fa      	ldr	r2, [r7, #28]
   d9c90:	b941      	cbnz	r1, d9ca4 <localtime_r+0x7c>
   d9c92:	e00a      	b.n	d9caa <localtime_r+0x82>
   d9c94:	4630      	mov	r0, r6
   d9c96:	f000 f9b3 	bl	da000 <__tzcalc_limits>
   d9c9a:	2800      	cmp	r0, #0
   d9c9c:	d1f4      	bne.n	d9c88 <localtime_r+0x60>
   d9c9e:	f04f 33ff 	mov.w	r3, #4294967295
   d9ca2:	e00d      	b.n	d9cc0 <localtime_r+0x98>
   d9ca4:	4293      	cmp	r3, r2
   d9ca6:	db08      	blt.n	d9cba <localtime_r+0x92>
   d9ca8:	e001      	b.n	d9cae <localtime_r+0x86>
   d9caa:	4293      	cmp	r3, r2
   d9cac:	da07      	bge.n	d9cbe <localtime_r+0x96>
   d9cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9cb0:	4293      	cmp	r3, r2
   d9cb2:	bfac      	ite	ge
   d9cb4:	2300      	movge	r3, #0
   d9cb6:	2301      	movlt	r3, #1
   d9cb8:	e002      	b.n	d9cc0 <localtime_r+0x98>
   d9cba:	2300      	movs	r3, #0
   d9cbc:	e000      	b.n	d9cc0 <localtime_r+0x98>
   d9cbe:	2301      	movs	r3, #1
   d9cc0:	6223      	str	r3, [r4, #32]
   d9cc2:	6a23      	ldr	r3, [r4, #32]
   d9cc4:	2b01      	cmp	r3, #1
   d9cc6:	bf0c      	ite	eq
   d9cc8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9cca:	6a39      	ldrne	r1, [r7, #32]
   d9ccc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9cd0:	203c      	movs	r0, #60	; 0x3c
   d9cd2:	fb91 f6f3 	sdiv	r6, r1, r3
   d9cd6:	fb03 1316 	mls	r3, r3, r6, r1
   d9cda:	6861      	ldr	r1, [r4, #4]
   d9cdc:	fb93 f2f0 	sdiv	r2, r3, r0
   d9ce0:	fb00 3012 	mls	r0, r0, r2, r3
   d9ce4:	6823      	ldr	r3, [r4, #0]
   d9ce6:	1a89      	subs	r1, r1, r2
   d9ce8:	68a2      	ldr	r2, [r4, #8]
   d9cea:	6061      	str	r1, [r4, #4]
   d9cec:	1a1b      	subs	r3, r3, r0
   d9cee:	1b92      	subs	r2, r2, r6
   d9cf0:	2b3b      	cmp	r3, #59	; 0x3b
   d9cf2:	6023      	str	r3, [r4, #0]
   d9cf4:	60a2      	str	r2, [r4, #8]
   d9cf6:	dd03      	ble.n	d9d00 <localtime_r+0xd8>
   d9cf8:	3101      	adds	r1, #1
   d9cfa:	6061      	str	r1, [r4, #4]
   d9cfc:	3b3c      	subs	r3, #60	; 0x3c
   d9cfe:	e004      	b.n	d9d0a <localtime_r+0xe2>
   d9d00:	2b00      	cmp	r3, #0
   d9d02:	da03      	bge.n	d9d0c <localtime_r+0xe4>
   d9d04:	3901      	subs	r1, #1
   d9d06:	6061      	str	r1, [r4, #4]
   d9d08:	333c      	adds	r3, #60	; 0x3c
   d9d0a:	6023      	str	r3, [r4, #0]
   d9d0c:	6863      	ldr	r3, [r4, #4]
   d9d0e:	2b3b      	cmp	r3, #59	; 0x3b
   d9d10:	dd03      	ble.n	d9d1a <localtime_r+0xf2>
   d9d12:	3201      	adds	r2, #1
   d9d14:	60a2      	str	r2, [r4, #8]
   d9d16:	3b3c      	subs	r3, #60	; 0x3c
   d9d18:	e004      	b.n	d9d24 <localtime_r+0xfc>
   d9d1a:	2b00      	cmp	r3, #0
   d9d1c:	da03      	bge.n	d9d26 <localtime_r+0xfe>
   d9d1e:	3a01      	subs	r2, #1
   d9d20:	60a2      	str	r2, [r4, #8]
   d9d22:	333c      	adds	r3, #60	; 0x3c
   d9d24:	6063      	str	r3, [r4, #4]
   d9d26:	68a3      	ldr	r3, [r4, #8]
   d9d28:	2b17      	cmp	r3, #23
   d9d2a:	dd22      	ble.n	d9d72 <localtime_r+0x14a>
   d9d2c:	69e2      	ldr	r2, [r4, #28]
   d9d2e:	3201      	adds	r2, #1
   d9d30:	61e2      	str	r2, [r4, #28]
   d9d32:	69a2      	ldr	r2, [r4, #24]
   d9d34:	3201      	adds	r2, #1
   d9d36:	2a06      	cmp	r2, #6
   d9d38:	bfc8      	it	gt
   d9d3a:	2200      	movgt	r2, #0
   d9d3c:	61a2      	str	r2, [r4, #24]
   d9d3e:	68e2      	ldr	r2, [r4, #12]
   d9d40:	3b18      	subs	r3, #24
   d9d42:	3201      	adds	r2, #1
   d9d44:	60a3      	str	r3, [r4, #8]
   d9d46:	6923      	ldr	r3, [r4, #16]
   d9d48:	60e2      	str	r2, [r4, #12]
   d9d4a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d9d4e:	428a      	cmp	r2, r1
   d9d50:	dd46      	ble.n	d9de0 <localtime_r+0x1b8>
   d9d52:	3301      	adds	r3, #1
   d9d54:	2b0c      	cmp	r3, #12
   d9d56:	bf0c      	ite	eq
   d9d58:	6963      	ldreq	r3, [r4, #20]
   d9d5a:	6123      	strne	r3, [r4, #16]
   d9d5c:	eba2 0201 	sub.w	r2, r2, r1
   d9d60:	60e2      	str	r2, [r4, #12]
   d9d62:	bf01      	itttt	eq
   d9d64:	3301      	addeq	r3, #1
   d9d66:	2200      	moveq	r2, #0
   d9d68:	6122      	streq	r2, [r4, #16]
   d9d6a:	6163      	streq	r3, [r4, #20]
   d9d6c:	bf08      	it	eq
   d9d6e:	61e2      	streq	r2, [r4, #28]
   d9d70:	e036      	b.n	d9de0 <localtime_r+0x1b8>
   d9d72:	2b00      	cmp	r3, #0
   d9d74:	da34      	bge.n	d9de0 <localtime_r+0x1b8>
   d9d76:	69e2      	ldr	r2, [r4, #28]
   d9d78:	3a01      	subs	r2, #1
   d9d7a:	61e2      	str	r2, [r4, #28]
   d9d7c:	69a2      	ldr	r2, [r4, #24]
   d9d7e:	3a01      	subs	r2, #1
   d9d80:	bf48      	it	mi
   d9d82:	2206      	movmi	r2, #6
   d9d84:	61a2      	str	r2, [r4, #24]
   d9d86:	68e2      	ldr	r2, [r4, #12]
   d9d88:	3318      	adds	r3, #24
   d9d8a:	3a01      	subs	r2, #1
   d9d8c:	60e2      	str	r2, [r4, #12]
   d9d8e:	60a3      	str	r3, [r4, #8]
   d9d90:	bb32      	cbnz	r2, d9de0 <localtime_r+0x1b8>
   d9d92:	6923      	ldr	r3, [r4, #16]
   d9d94:	3b01      	subs	r3, #1
   d9d96:	d401      	bmi.n	d9d9c <localtime_r+0x174>
   d9d98:	6123      	str	r3, [r4, #16]
   d9d9a:	e01d      	b.n	d9dd8 <localtime_r+0x1b0>
   d9d9c:	230b      	movs	r3, #11
   d9d9e:	6123      	str	r3, [r4, #16]
   d9da0:	6963      	ldr	r3, [r4, #20]
   d9da2:	1e5a      	subs	r2, r3, #1
   d9da4:	f012 0f03 	tst.w	r2, #3
   d9da8:	6162      	str	r2, [r4, #20]
   d9daa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9dae:	d105      	bne.n	d9dbc <localtime_r+0x194>
   d9db0:	2164      	movs	r1, #100	; 0x64
   d9db2:	fb93 f2f1 	sdiv	r2, r3, r1
   d9db6:	fb01 3212 	mls	r2, r1, r2, r3
   d9dba:	b94a      	cbnz	r2, d9dd0 <localtime_r+0x1a8>
   d9dbc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9dc0:	fb93 f2f1 	sdiv	r2, r3, r1
   d9dc4:	fb01 3312 	mls	r3, r1, r2, r3
   d9dc8:	fab3 f383 	clz	r3, r3
   d9dcc:	095b      	lsrs	r3, r3, #5
   d9dce:	e000      	b.n	d9dd2 <localtime_r+0x1aa>
   d9dd0:	2301      	movs	r3, #1
   d9dd2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9dd6:	61e3      	str	r3, [r4, #28]
   d9dd8:	6923      	ldr	r3, [r4, #16]
   d9dda:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9dde:	60e3      	str	r3, [r4, #12]
   d9de0:	f000 f9b7 	bl	da152 <__tz_unlock>
   d9de4:	4620      	mov	r0, r4
   d9de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9dea:	bf00      	nop
   d9dec:	000db2bc 	.word	0x000db2bc
   d9df0:	2003e7e4 	.word	0x2003e7e4

000d9df4 <memcpy>:
   d9df4:	b510      	push	{r4, lr}
   d9df6:	1e43      	subs	r3, r0, #1
   d9df8:	440a      	add	r2, r1
   d9dfa:	4291      	cmp	r1, r2
   d9dfc:	d004      	beq.n	d9e08 <memcpy+0x14>
   d9dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9e02:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9e06:	e7f8      	b.n	d9dfa <memcpy+0x6>
   d9e08:	bd10      	pop	{r4, pc}

000d9e0a <memset>:
   d9e0a:	4402      	add	r2, r0
   d9e0c:	4603      	mov	r3, r0
   d9e0e:	4293      	cmp	r3, r2
   d9e10:	d002      	beq.n	d9e18 <memset+0xe>
   d9e12:	f803 1b01 	strb.w	r1, [r3], #1
   d9e16:	e7fa      	b.n	d9e0e <memset+0x4>
   d9e18:	4770      	bx	lr
	...

000d9e1c <srand>:
   d9e1c:	b538      	push	{r3, r4, r5, lr}
   d9e1e:	4b12      	ldr	r3, [pc, #72]	; (d9e68 <srand+0x4c>)
   d9e20:	681c      	ldr	r4, [r3, #0]
   d9e22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9e24:	4605      	mov	r5, r0
   d9e26:	b9d3      	cbnz	r3, d9e5e <srand+0x42>
   d9e28:	2018      	movs	r0, #24
   d9e2a:	f7fd fb35 	bl	d7498 <malloc>
   d9e2e:	f243 330e 	movw	r3, #13070	; 0x330e
   d9e32:	63a0      	str	r0, [r4, #56]	; 0x38
   d9e34:	8003      	strh	r3, [r0, #0]
   d9e36:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9e3a:	8043      	strh	r3, [r0, #2]
   d9e3c:	f241 2334 	movw	r3, #4660	; 0x1234
   d9e40:	8083      	strh	r3, [r0, #4]
   d9e42:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9e46:	80c3      	strh	r3, [r0, #6]
   d9e48:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9e4c:	8103      	strh	r3, [r0, #8]
   d9e4e:	2305      	movs	r3, #5
   d9e50:	8143      	strh	r3, [r0, #10]
   d9e52:	230b      	movs	r3, #11
   d9e54:	8183      	strh	r3, [r0, #12]
   d9e56:	2201      	movs	r2, #1
   d9e58:	2300      	movs	r3, #0
   d9e5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9e60:	2200      	movs	r2, #0
   d9e62:	611d      	str	r5, [r3, #16]
   d9e64:	615a      	str	r2, [r3, #20]
   d9e66:	bd38      	pop	{r3, r4, r5, pc}
   d9e68:	2003dc18 	.word	0x2003dc18

000d9e6c <strcmp>:
   d9e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9e70:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9e74:	2a01      	cmp	r2, #1
   d9e76:	bf28      	it	cs
   d9e78:	429a      	cmpcs	r2, r3
   d9e7a:	d0f7      	beq.n	d9e6c <strcmp>
   d9e7c:	1ad0      	subs	r0, r2, r3
   d9e7e:	4770      	bx	lr

000d9e80 <strcpy>:
   d9e80:	4603      	mov	r3, r0
   d9e82:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9e86:	f803 2b01 	strb.w	r2, [r3], #1
   d9e8a:	2a00      	cmp	r2, #0
   d9e8c:	d1f9      	bne.n	d9e82 <strcpy+0x2>
   d9e8e:	4770      	bx	lr

000d9e90 <strlen>:
   d9e90:	4603      	mov	r3, r0
   d9e92:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9e96:	2a00      	cmp	r2, #0
   d9e98:	d1fb      	bne.n	d9e92 <strlen+0x2>
   d9e9a:	1a18      	subs	r0, r3, r0
   d9e9c:	3801      	subs	r0, #1
   d9e9e:	4770      	bx	lr

000d9ea0 <strncmp>:
   d9ea0:	b530      	push	{r4, r5, lr}
   d9ea2:	b182      	cbz	r2, d9ec6 <strncmp+0x26>
   d9ea4:	1e45      	subs	r5, r0, #1
   d9ea6:	3901      	subs	r1, #1
   d9ea8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9eac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9eb0:	42a3      	cmp	r3, r4
   d9eb2:	d106      	bne.n	d9ec2 <strncmp+0x22>
   d9eb4:	43ec      	mvns	r4, r5
   d9eb6:	4414      	add	r4, r2
   d9eb8:	42e0      	cmn	r0, r4
   d9eba:	d001      	beq.n	d9ec0 <strncmp+0x20>
   d9ebc:	2b00      	cmp	r3, #0
   d9ebe:	d1f3      	bne.n	d9ea8 <strncmp+0x8>
   d9ec0:	461c      	mov	r4, r3
   d9ec2:	1b18      	subs	r0, r3, r4
   d9ec4:	bd30      	pop	{r4, r5, pc}
   d9ec6:	4610      	mov	r0, r2
   d9ec8:	bd30      	pop	{r4, r5, pc}

000d9eca <strncpy>:
   d9eca:	b510      	push	{r4, lr}
   d9ecc:	4603      	mov	r3, r0
   d9ece:	b142      	cbz	r2, d9ee2 <strncpy+0x18>
   d9ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9ed4:	f803 4b01 	strb.w	r4, [r3], #1
   d9ed8:	3a01      	subs	r2, #1
   d9eda:	2c00      	cmp	r4, #0
   d9edc:	d1f7      	bne.n	d9ece <strncpy+0x4>
   d9ede:	441a      	add	r2, r3
   d9ee0:	e000      	b.n	d9ee4 <strncpy+0x1a>
   d9ee2:	bd10      	pop	{r4, pc}
   d9ee4:	4293      	cmp	r3, r2
   d9ee6:	d002      	beq.n	d9eee <strncpy+0x24>
   d9ee8:	f803 4b01 	strb.w	r4, [r3], #1
   d9eec:	e7fa      	b.n	d9ee4 <strncpy+0x1a>
   d9eee:	bd10      	pop	{r4, pc}

000d9ef0 <_strtoul_r>:
   d9ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9ef4:	4680      	mov	r8, r0
   d9ef6:	483c      	ldr	r0, [pc, #240]	; (d9fe8 <_strtoul_r+0xf8>)
   d9ef8:	f8d0 9000 	ldr.w	r9, [r0]
   d9efc:	460e      	mov	r6, r1
   d9efe:	4635      	mov	r5, r6
   d9f00:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9f04:	eb09 0004 	add.w	r0, r9, r4
   d9f08:	7840      	ldrb	r0, [r0, #1]
   d9f0a:	f000 0008 	and.w	r0, r0, #8
   d9f0e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d9f12:	b108      	cbz	r0, d9f18 <_strtoul_r+0x28>
   d9f14:	462e      	mov	r6, r5
   d9f16:	e7f2      	b.n	d9efe <_strtoul_r+0xe>
   d9f18:	2c2d      	cmp	r4, #45	; 0x2d
   d9f1a:	d103      	bne.n	d9f24 <_strtoul_r+0x34>
   d9f1c:	1cb5      	adds	r5, r6, #2
   d9f1e:	7874      	ldrb	r4, [r6, #1]
   d9f20:	2701      	movs	r7, #1
   d9f22:	e003      	b.n	d9f2c <_strtoul_r+0x3c>
   d9f24:	2c2b      	cmp	r4, #43	; 0x2b
   d9f26:	bf04      	itt	eq
   d9f28:	7874      	ldrbeq	r4, [r6, #1]
   d9f2a:	1cb5      	addeq	r5, r6, #2
   d9f2c:	b113      	cbz	r3, d9f34 <_strtoul_r+0x44>
   d9f2e:	2b10      	cmp	r3, #16
   d9f30:	d10a      	bne.n	d9f48 <_strtoul_r+0x58>
   d9f32:	e053      	b.n	d9fdc <_strtoul_r+0xec>
   d9f34:	2c30      	cmp	r4, #48	; 0x30
   d9f36:	d14f      	bne.n	d9fd8 <_strtoul_r+0xe8>
   d9f38:	7828      	ldrb	r0, [r5, #0]
   d9f3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9f3e:	2858      	cmp	r0, #88	; 0x58
   d9f40:	d145      	bne.n	d9fce <_strtoul_r+0xde>
   d9f42:	786c      	ldrb	r4, [r5, #1]
   d9f44:	2310      	movs	r3, #16
   d9f46:	3502      	adds	r5, #2
   d9f48:	f04f 3cff 	mov.w	ip, #4294967295
   d9f4c:	2600      	movs	r6, #0
   d9f4e:	fbbc fcf3 	udiv	ip, ip, r3
   d9f52:	fb03 fa0c 	mul.w	sl, r3, ip
   d9f56:	ea6f 0a0a 	mvn.w	sl, sl
   d9f5a:	4630      	mov	r0, r6
   d9f5c:	eb09 0e04 	add.w	lr, r9, r4
   d9f60:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9f64:	f01e 0f04 	tst.w	lr, #4
   d9f68:	d001      	beq.n	d9f6e <_strtoul_r+0x7e>
   d9f6a:	3c30      	subs	r4, #48	; 0x30
   d9f6c:	e00b      	b.n	d9f86 <_strtoul_r+0x96>
   d9f6e:	f01e 0e03 	ands.w	lr, lr, #3
   d9f72:	d01a      	beq.n	d9faa <_strtoul_r+0xba>
   d9f74:	f1be 0f01 	cmp.w	lr, #1
   d9f78:	bf0c      	ite	eq
   d9f7a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9f7e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9f82:	ebce 0404 	rsb	r4, lr, r4
   d9f86:	42a3      	cmp	r3, r4
   d9f88:	dd0f      	ble.n	d9faa <_strtoul_r+0xba>
   d9f8a:	2e00      	cmp	r6, #0
   d9f8c:	db08      	blt.n	d9fa0 <_strtoul_r+0xb0>
   d9f8e:	4560      	cmp	r0, ip
   d9f90:	d806      	bhi.n	d9fa0 <_strtoul_r+0xb0>
   d9f92:	d101      	bne.n	d9f98 <_strtoul_r+0xa8>
   d9f94:	4554      	cmp	r4, sl
   d9f96:	dc03      	bgt.n	d9fa0 <_strtoul_r+0xb0>
   d9f98:	fb03 4000 	mla	r0, r3, r0, r4
   d9f9c:	2601      	movs	r6, #1
   d9f9e:	e001      	b.n	d9fa4 <_strtoul_r+0xb4>
   d9fa0:	f04f 36ff 	mov.w	r6, #4294967295
   d9fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9fa8:	e7d8      	b.n	d9f5c <_strtoul_r+0x6c>
   d9faa:	2e00      	cmp	r6, #0
   d9fac:	da07      	bge.n	d9fbe <_strtoul_r+0xce>
   d9fae:	2322      	movs	r3, #34	; 0x22
   d9fb0:	f8c8 3000 	str.w	r3, [r8]
   d9fb4:	f04f 30ff 	mov.w	r0, #4294967295
   d9fb8:	b92a      	cbnz	r2, d9fc6 <_strtoul_r+0xd6>
   d9fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9fbe:	b107      	cbz	r7, d9fc2 <_strtoul_r+0xd2>
   d9fc0:	4240      	negs	r0, r0
   d9fc2:	b172      	cbz	r2, d9fe2 <_strtoul_r+0xf2>
   d9fc4:	b106      	cbz	r6, d9fc8 <_strtoul_r+0xd8>
   d9fc6:	1e69      	subs	r1, r5, #1
   d9fc8:	6011      	str	r1, [r2, #0]
   d9fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9fce:	2430      	movs	r4, #48	; 0x30
   d9fd0:	2b00      	cmp	r3, #0
   d9fd2:	d1b9      	bne.n	d9f48 <_strtoul_r+0x58>
   d9fd4:	2308      	movs	r3, #8
   d9fd6:	e7b7      	b.n	d9f48 <_strtoul_r+0x58>
   d9fd8:	230a      	movs	r3, #10
   d9fda:	e7b5      	b.n	d9f48 <_strtoul_r+0x58>
   d9fdc:	2c30      	cmp	r4, #48	; 0x30
   d9fde:	d0ab      	beq.n	d9f38 <_strtoul_r+0x48>
   d9fe0:	e7b2      	b.n	d9f48 <_strtoul_r+0x58>
   d9fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9fe6:	bf00      	nop
   d9fe8:	2003dbb4 	.word	0x2003dbb4

000d9fec <strtoul>:
   d9fec:	4613      	mov	r3, r2
   d9fee:	460a      	mov	r2, r1
   d9ff0:	4601      	mov	r1, r0
   d9ff2:	4802      	ldr	r0, [pc, #8]	; (d9ffc <strtoul+0x10>)
   d9ff4:	6800      	ldr	r0, [r0, #0]
   d9ff6:	f7ff bf7b 	b.w	d9ef0 <_strtoul_r>
   d9ffa:	bf00      	nop
   d9ffc:	2003dc18 	.word	0x2003dc18

000da000 <__tzcalc_limits>:
   da000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da004:	4604      	mov	r4, r0
   da006:	f000 fa6f 	bl	da4e8 <__gettzinfo>
   da00a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da00e:	429c      	cmp	r4, r3
   da010:	f340 8096 	ble.w	da140 <__tzcalc_limits+0x140>
   da014:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da018:	18e3      	adds	r3, r4, r3
   da01a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da01e:	109b      	asrs	r3, r3, #2
   da020:	f240 156d 	movw	r5, #365	; 0x16d
   da024:	fb05 3502 	mla	r5, r5, r2, r3
   da028:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da02c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da030:	fb92 f3f3 	sdiv	r3, r2, r3
   da034:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da038:	442b      	add	r3, r5
   da03a:	18a5      	adds	r5, r4, r2
   da03c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da040:	fb95 f5f2 	sdiv	r5, r5, r2
   da044:	441d      	add	r5, r3
   da046:	2364      	movs	r3, #100	; 0x64
   da048:	fb94 f7f2 	sdiv	r7, r4, r2
   da04c:	fb94 f6f3 	sdiv	r6, r4, r3
   da050:	fb02 4717 	mls	r7, r2, r7, r4
   da054:	fb03 4616 	mls	r6, r3, r6, r4
   da058:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da05c:	fab7 fe87 	clz	lr, r7
   da060:	9301      	str	r3, [sp, #4]
   da062:	f004 0303 	and.w	r3, r4, #3
   da066:	6044      	str	r4, [r0, #4]
   da068:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da06c:	4601      	mov	r1, r0
   da06e:	9300      	str	r3, [sp, #0]
   da070:	f04f 0c07 	mov.w	ip, #7
   da074:	7a0b      	ldrb	r3, [r1, #8]
   da076:	2b4a      	cmp	r3, #74	; 0x4a
   da078:	d10e      	bne.n	da098 <__tzcalc_limits+0x98>
   da07a:	694b      	ldr	r3, [r1, #20]
   da07c:	9a00      	ldr	r2, [sp, #0]
   da07e:	18ec      	adds	r4, r5, r3
   da080:	b902      	cbnz	r2, da084 <__tzcalc_limits+0x84>
   da082:	b906      	cbnz	r6, da086 <__tzcalc_limits+0x86>
   da084:	b927      	cbnz	r7, da090 <__tzcalc_limits+0x90>
   da086:	2b3b      	cmp	r3, #59	; 0x3b
   da088:	bfd4      	ite	le
   da08a:	2300      	movle	r3, #0
   da08c:	2301      	movgt	r3, #1
   da08e:	e000      	b.n	da092 <__tzcalc_limits+0x92>
   da090:	2300      	movs	r3, #0
   da092:	4423      	add	r3, r4
   da094:	3b01      	subs	r3, #1
   da096:	e03f      	b.n	da118 <__tzcalc_limits+0x118>
   da098:	2b44      	cmp	r3, #68	; 0x44
   da09a:	d102      	bne.n	da0a2 <__tzcalc_limits+0xa2>
   da09c:	694b      	ldr	r3, [r1, #20]
   da09e:	442b      	add	r3, r5
   da0a0:	e03a      	b.n	da118 <__tzcalc_limits+0x118>
   da0a2:	9b00      	ldr	r3, [sp, #0]
   da0a4:	b92b      	cbnz	r3, da0b2 <__tzcalc_limits+0xb2>
   da0a6:	2e00      	cmp	r6, #0
   da0a8:	bf0c      	ite	eq
   da0aa:	46f0      	moveq	r8, lr
   da0ac:	f04f 0801 	movne.w	r8, #1
   da0b0:	e000      	b.n	da0b4 <__tzcalc_limits+0xb4>
   da0b2:	46f0      	mov	r8, lr
   da0b4:	4b24      	ldr	r3, [pc, #144]	; (da148 <__tzcalc_limits+0x148>)
   da0b6:	68cc      	ldr	r4, [r1, #12]
   da0b8:	2230      	movs	r2, #48	; 0x30
   da0ba:	fb02 3808 	mla	r8, r2, r8, r3
   da0be:	f1a8 0a04 	sub.w	sl, r8, #4
   da0c2:	46a9      	mov	r9, r5
   da0c4:	2301      	movs	r3, #1
   da0c6:	42a3      	cmp	r3, r4
   da0c8:	da04      	bge.n	da0d4 <__tzcalc_limits+0xd4>
   da0ca:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da0ce:	3301      	adds	r3, #1
   da0d0:	44d9      	add	r9, fp
   da0d2:	e7f8      	b.n	da0c6 <__tzcalc_limits+0xc6>
   da0d4:	f109 0304 	add.w	r3, r9, #4
   da0d8:	fb93 fbfc 	sdiv	fp, r3, ip
   da0dc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da0e0:	2c01      	cmp	r4, #1
   da0e2:	ebca 0a03 	rsb	sl, sl, r3
   da0e6:	694b      	ldr	r3, [r1, #20]
   da0e8:	bfb8      	it	lt
   da0ea:	2401      	movlt	r4, #1
   da0ec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da0f0:	ebb3 0a0a 	subs.w	sl, r3, sl
   da0f4:	690b      	ldr	r3, [r1, #16]
   da0f6:	f104 34ff 	add.w	r4, r4, #4294967295
   da0fa:	f103 33ff 	add.w	r3, r3, #4294967295
   da0fe:	bf48      	it	mi
   da100:	f10a 0a07 	addmi.w	sl, sl, #7
   da104:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da108:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da10c:	4453      	add	r3, sl
   da10e:	42a3      	cmp	r3, r4
   da110:	db01      	blt.n	da116 <__tzcalc_limits+0x116>
   da112:	3b07      	subs	r3, #7
   da114:	e7fb      	b.n	da10e <__tzcalc_limits+0x10e>
   da116:	444b      	add	r3, r9
   da118:	698c      	ldr	r4, [r1, #24]
   da11a:	4a0c      	ldr	r2, [pc, #48]	; (da14c <__tzcalc_limits+0x14c>)
   da11c:	fb02 4303 	mla	r3, r2, r3, r4
   da120:	6a0c      	ldr	r4, [r1, #32]
   da122:	4423      	add	r3, r4
   da124:	f841 3f1c 	str.w	r3, [r1, #28]!
   da128:	9b01      	ldr	r3, [sp, #4]
   da12a:	4299      	cmp	r1, r3
   da12c:	d1a2      	bne.n	da074 <__tzcalc_limits+0x74>
   da12e:	69c3      	ldr	r3, [r0, #28]
   da130:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da132:	4293      	cmp	r3, r2
   da134:	bfac      	ite	ge
   da136:	2300      	movge	r3, #0
   da138:	2301      	movlt	r3, #1
   da13a:	6003      	str	r3, [r0, #0]
   da13c:	2001      	movs	r0, #1
   da13e:	e000      	b.n	da142 <__tzcalc_limits+0x142>
   da140:	2000      	movs	r0, #0
   da142:	b003      	add	sp, #12
   da144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da148:	000db2bc 	.word	0x000db2bc
   da14c:	00015180 	.word	0x00015180

000da150 <__tz_lock>:
   da150:	4770      	bx	lr

000da152 <__tz_unlock>:
   da152:	4770      	bx	lr

000da154 <_tzset_unlocked>:
   da154:	4b01      	ldr	r3, [pc, #4]	; (da15c <_tzset_unlocked+0x8>)
   da156:	6818      	ldr	r0, [r3, #0]
   da158:	f000 b802 	b.w	da160 <_tzset_unlocked_r>
   da15c:	2003dc18 	.word	0x2003dc18

000da160 <_tzset_unlocked_r>:
   da160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da164:	b08d      	sub	sp, #52	; 0x34
   da166:	4607      	mov	r7, r0
   da168:	f000 f9be 	bl	da4e8 <__gettzinfo>
   da16c:	49b0      	ldr	r1, [pc, #704]	; (da430 <_tzset_unlocked_r+0x2d0>)
   da16e:	4eb1      	ldr	r6, [pc, #708]	; (da434 <_tzset_unlocked_r+0x2d4>)
   da170:	4604      	mov	r4, r0
   da172:	4638      	mov	r0, r7
   da174:	f000 f9b0 	bl	da4d8 <_getenv_r>
   da178:	4605      	mov	r5, r0
   da17a:	b960      	cbnz	r0, da196 <_tzset_unlocked_r+0x36>
   da17c:	4bae      	ldr	r3, [pc, #696]	; (da438 <_tzset_unlocked_r+0x2d8>)
   da17e:	4aaf      	ldr	r2, [pc, #700]	; (da43c <_tzset_unlocked_r+0x2dc>)
   da180:	6018      	str	r0, [r3, #0]
   da182:	4baf      	ldr	r3, [pc, #700]	; (da440 <_tzset_unlocked_r+0x2e0>)
   da184:	6018      	str	r0, [r3, #0]
   da186:	4baf      	ldr	r3, [pc, #700]	; (da444 <_tzset_unlocked_r+0x2e4>)
   da188:	6830      	ldr	r0, [r6, #0]
   da18a:	601a      	str	r2, [r3, #0]
   da18c:	605a      	str	r2, [r3, #4]
   da18e:	f7fd f98b 	bl	d74a8 <free>
   da192:	6035      	str	r5, [r6, #0]
   da194:	e148      	b.n	da428 <_tzset_unlocked_r+0x2c8>
   da196:	6831      	ldr	r1, [r6, #0]
   da198:	b979      	cbnz	r1, da1ba <_tzset_unlocked_r+0x5a>
   da19a:	6830      	ldr	r0, [r6, #0]
   da19c:	f7fd f984 	bl	d74a8 <free>
   da1a0:	4628      	mov	r0, r5
   da1a2:	f7ff fe75 	bl	d9e90 <strlen>
   da1a6:	1c41      	adds	r1, r0, #1
   da1a8:	4638      	mov	r0, r7
   da1aa:	f7fd f9ad 	bl	d7508 <_malloc_r>
   da1ae:	6030      	str	r0, [r6, #0]
   da1b0:	b148      	cbz	r0, da1c6 <_tzset_unlocked_r+0x66>
   da1b2:	4629      	mov	r1, r5
   da1b4:	f7ff fe64 	bl	d9e80 <strcpy>
   da1b8:	e005      	b.n	da1c6 <_tzset_unlocked_r+0x66>
   da1ba:	f7ff fe57 	bl	d9e6c <strcmp>
   da1be:	2800      	cmp	r0, #0
   da1c0:	f000 8132 	beq.w	da428 <_tzset_unlocked_r+0x2c8>
   da1c4:	e7e9      	b.n	da19a <_tzset_unlocked_r+0x3a>
   da1c6:	782b      	ldrb	r3, [r5, #0]
   da1c8:	4a9f      	ldr	r2, [pc, #636]	; (da448 <_tzset_unlocked_r+0x2e8>)
   da1ca:	49a0      	ldr	r1, [pc, #640]	; (da44c <_tzset_unlocked_r+0x2ec>)
   da1cc:	2b3a      	cmp	r3, #58	; 0x3a
   da1ce:	bf08      	it	eq
   da1d0:	3501      	addeq	r5, #1
   da1d2:	ae0a      	add	r6, sp, #40	; 0x28
   da1d4:	4633      	mov	r3, r6
   da1d6:	4628      	mov	r0, r5
   da1d8:	f7fd f97e 	bl	d74d8 <siscanf>
   da1dc:	2800      	cmp	r0, #0
   da1de:	f340 8123 	ble.w	da428 <_tzset_unlocked_r+0x2c8>
   da1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da1e4:	18ef      	adds	r7, r5, r3
   da1e6:	5ceb      	ldrb	r3, [r5, r3]
   da1e8:	2b2d      	cmp	r3, #45	; 0x2d
   da1ea:	d103      	bne.n	da1f4 <_tzset_unlocked_r+0x94>
   da1ec:	3701      	adds	r7, #1
   da1ee:	f04f 35ff 	mov.w	r5, #4294967295
   da1f2:	e003      	b.n	da1fc <_tzset_unlocked_r+0x9c>
   da1f4:	2b2b      	cmp	r3, #43	; 0x2b
   da1f6:	bf08      	it	eq
   da1f8:	3701      	addeq	r7, #1
   da1fa:	2501      	movs	r5, #1
   da1fc:	f10d 0a20 	add.w	sl, sp, #32
   da200:	f10d 0b1e 	add.w	fp, sp, #30
   da204:	f04f 0800 	mov.w	r8, #0
   da208:	9603      	str	r6, [sp, #12]
   da20a:	f8cd a008 	str.w	sl, [sp, #8]
   da20e:	9601      	str	r6, [sp, #4]
   da210:	f8cd b000 	str.w	fp, [sp]
   da214:	4633      	mov	r3, r6
   da216:	aa07      	add	r2, sp, #28
   da218:	498d      	ldr	r1, [pc, #564]	; (da450 <_tzset_unlocked_r+0x2f0>)
   da21a:	f8ad 801e 	strh.w	r8, [sp, #30]
   da21e:	4638      	mov	r0, r7
   da220:	f8ad 8020 	strh.w	r8, [sp, #32]
   da224:	f7fd f958 	bl	d74d8 <siscanf>
   da228:	4540      	cmp	r0, r8
   da22a:	f340 80fd 	ble.w	da428 <_tzset_unlocked_r+0x2c8>
   da22e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da232:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da236:	f8df 9224 	ldr.w	r9, [pc, #548]	; da45c <_tzset_unlocked_r+0x2fc>
   da23a:	213c      	movs	r1, #60	; 0x3c
   da23c:	fb01 3302 	mla	r3, r1, r2, r3
   da240:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da244:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da248:	fb01 3302 	mla	r3, r1, r2, r3
   da24c:	435d      	muls	r5, r3
   da24e:	6225      	str	r5, [r4, #32]
   da250:	4d7c      	ldr	r5, [pc, #496]	; (da444 <_tzset_unlocked_r+0x2e4>)
   da252:	4b7d      	ldr	r3, [pc, #500]	; (da448 <_tzset_unlocked_r+0x2e8>)
   da254:	602b      	str	r3, [r5, #0]
   da256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da258:	497c      	ldr	r1, [pc, #496]	; (da44c <_tzset_unlocked_r+0x2ec>)
   da25a:	441f      	add	r7, r3
   da25c:	464a      	mov	r2, r9
   da25e:	4633      	mov	r3, r6
   da260:	4638      	mov	r0, r7
   da262:	f7fd f939 	bl	d74d8 <siscanf>
   da266:	4540      	cmp	r0, r8
   da268:	dc08      	bgt.n	da27c <_tzset_unlocked_r+0x11c>
   da26a:	682b      	ldr	r3, [r5, #0]
   da26c:	606b      	str	r3, [r5, #4]
   da26e:	4b72      	ldr	r3, [pc, #456]	; (da438 <_tzset_unlocked_r+0x2d8>)
   da270:	6a22      	ldr	r2, [r4, #32]
   da272:	601a      	str	r2, [r3, #0]
   da274:	4b72      	ldr	r3, [pc, #456]	; (da440 <_tzset_unlocked_r+0x2e0>)
   da276:	f8c3 8000 	str.w	r8, [r3]
   da27a:	e0d5      	b.n	da428 <_tzset_unlocked_r+0x2c8>
   da27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da27e:	f8c5 9004 	str.w	r9, [r5, #4]
   da282:	18fd      	adds	r5, r7, r3
   da284:	5cfb      	ldrb	r3, [r7, r3]
   da286:	2b2d      	cmp	r3, #45	; 0x2d
   da288:	d103      	bne.n	da292 <_tzset_unlocked_r+0x132>
   da28a:	3501      	adds	r5, #1
   da28c:	f04f 37ff 	mov.w	r7, #4294967295
   da290:	e003      	b.n	da29a <_tzset_unlocked_r+0x13a>
   da292:	2b2b      	cmp	r3, #43	; 0x2b
   da294:	bf08      	it	eq
   da296:	3501      	addeq	r5, #1
   da298:	2701      	movs	r7, #1
   da29a:	2300      	movs	r3, #0
   da29c:	f8ad 301c 	strh.w	r3, [sp, #28]
   da2a0:	f8ad 301e 	strh.w	r3, [sp, #30]
   da2a4:	f8ad 3020 	strh.w	r3, [sp, #32]
   da2a8:	930a      	str	r3, [sp, #40]	; 0x28
   da2aa:	9603      	str	r6, [sp, #12]
   da2ac:	f8cd a008 	str.w	sl, [sp, #8]
   da2b0:	9601      	str	r6, [sp, #4]
   da2b2:	f8cd b000 	str.w	fp, [sp]
   da2b6:	4633      	mov	r3, r6
   da2b8:	aa07      	add	r2, sp, #28
   da2ba:	4965      	ldr	r1, [pc, #404]	; (da450 <_tzset_unlocked_r+0x2f0>)
   da2bc:	4628      	mov	r0, r5
   da2be:	f7fd f90b 	bl	d74d8 <siscanf>
   da2c2:	2800      	cmp	r0, #0
   da2c4:	dc04      	bgt.n	da2d0 <_tzset_unlocked_r+0x170>
   da2c6:	6a23      	ldr	r3, [r4, #32]
   da2c8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da2cc:	63e3      	str	r3, [r4, #60]	; 0x3c
   da2ce:	e00e      	b.n	da2ee <_tzset_unlocked_r+0x18e>
   da2d0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da2d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da2d8:	213c      	movs	r1, #60	; 0x3c
   da2da:	fb01 3302 	mla	r3, r1, r2, r3
   da2de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da2e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da2e6:	fb01 3302 	mla	r3, r1, r2, r3
   da2ea:	435f      	muls	r7, r3
   da2ec:	63e7      	str	r7, [r4, #60]	; 0x3c
   da2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da2f0:	4627      	mov	r7, r4
   da2f2:	441d      	add	r5, r3
   da2f4:	f04f 0900 	mov.w	r9, #0
   da2f8:	782b      	ldrb	r3, [r5, #0]
   da2fa:	2b2c      	cmp	r3, #44	; 0x2c
   da2fc:	bf08      	it	eq
   da2fe:	3501      	addeq	r5, #1
   da300:	f895 8000 	ldrb.w	r8, [r5]
   da304:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da308:	d126      	bne.n	da358 <_tzset_unlocked_r+0x1f8>
   da30a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da30e:	9302      	str	r3, [sp, #8]
   da310:	ab09      	add	r3, sp, #36	; 0x24
   da312:	9300      	str	r3, [sp, #0]
   da314:	9603      	str	r6, [sp, #12]
   da316:	9601      	str	r6, [sp, #4]
   da318:	4633      	mov	r3, r6
   da31a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da31e:	494d      	ldr	r1, [pc, #308]	; (da454 <_tzset_unlocked_r+0x2f4>)
   da320:	4628      	mov	r0, r5
   da322:	f7fd f8d9 	bl	d74d8 <siscanf>
   da326:	2803      	cmp	r0, #3
   da328:	d17e      	bne.n	da428 <_tzset_unlocked_r+0x2c8>
   da32a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da32e:	1e4b      	subs	r3, r1, #1
   da330:	2b0b      	cmp	r3, #11
   da332:	d879      	bhi.n	da428 <_tzset_unlocked_r+0x2c8>
   da334:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da338:	1e53      	subs	r3, r2, #1
   da33a:	2b04      	cmp	r3, #4
   da33c:	d874      	bhi.n	da428 <_tzset_unlocked_r+0x2c8>
   da33e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da342:	2b06      	cmp	r3, #6
   da344:	d870      	bhi.n	da428 <_tzset_unlocked_r+0x2c8>
   da346:	f887 8008 	strb.w	r8, [r7, #8]
   da34a:	60f9      	str	r1, [r7, #12]
   da34c:	613a      	str	r2, [r7, #16]
   da34e:	617b      	str	r3, [r7, #20]
   da350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da352:	eb05 0803 	add.w	r8, r5, r3
   da356:	e02a      	b.n	da3ae <_tzset_unlocked_r+0x24e>
   da358:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da35c:	bf06      	itte	eq
   da35e:	3501      	addeq	r5, #1
   da360:	4643      	moveq	r3, r8
   da362:	2344      	movne	r3, #68	; 0x44
   da364:	220a      	movs	r2, #10
   da366:	a90b      	add	r1, sp, #44	; 0x2c
   da368:	4628      	mov	r0, r5
   da36a:	9305      	str	r3, [sp, #20]
   da36c:	f7ff fe3e 	bl	d9fec <strtoul>
   da370:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da374:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da378:	4545      	cmp	r5, r8
   da37a:	9b05      	ldr	r3, [sp, #20]
   da37c:	d114      	bne.n	da3a8 <_tzset_unlocked_r+0x248>
   da37e:	234d      	movs	r3, #77	; 0x4d
   da380:	f1b9 0f00 	cmp.w	r9, #0
   da384:	d107      	bne.n	da396 <_tzset_unlocked_r+0x236>
   da386:	7223      	strb	r3, [r4, #8]
   da388:	2303      	movs	r3, #3
   da38a:	60e3      	str	r3, [r4, #12]
   da38c:	2302      	movs	r3, #2
   da38e:	6123      	str	r3, [r4, #16]
   da390:	f8c4 9014 	str.w	r9, [r4, #20]
   da394:	e00b      	b.n	da3ae <_tzset_unlocked_r+0x24e>
   da396:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da39a:	230b      	movs	r3, #11
   da39c:	62a3      	str	r3, [r4, #40]	; 0x28
   da39e:	2301      	movs	r3, #1
   da3a0:	62e3      	str	r3, [r4, #44]	; 0x2c
   da3a2:	2300      	movs	r3, #0
   da3a4:	6323      	str	r3, [r4, #48]	; 0x30
   da3a6:	e002      	b.n	da3ae <_tzset_unlocked_r+0x24e>
   da3a8:	b280      	uxth	r0, r0
   da3aa:	723b      	strb	r3, [r7, #8]
   da3ac:	6178      	str	r0, [r7, #20]
   da3ae:	2302      	movs	r3, #2
   da3b0:	f8ad 301c 	strh.w	r3, [sp, #28]
   da3b4:	2300      	movs	r3, #0
   da3b6:	f8ad 301e 	strh.w	r3, [sp, #30]
   da3ba:	f8ad 3020 	strh.w	r3, [sp, #32]
   da3be:	930a      	str	r3, [sp, #40]	; 0x28
   da3c0:	f898 3000 	ldrb.w	r3, [r8]
   da3c4:	2b2f      	cmp	r3, #47	; 0x2f
   da3c6:	d10b      	bne.n	da3e0 <_tzset_unlocked_r+0x280>
   da3c8:	9603      	str	r6, [sp, #12]
   da3ca:	f8cd a008 	str.w	sl, [sp, #8]
   da3ce:	9601      	str	r6, [sp, #4]
   da3d0:	f8cd b000 	str.w	fp, [sp]
   da3d4:	4633      	mov	r3, r6
   da3d6:	aa07      	add	r2, sp, #28
   da3d8:	491f      	ldr	r1, [pc, #124]	; (da458 <_tzset_unlocked_r+0x2f8>)
   da3da:	4640      	mov	r0, r8
   da3dc:	f7fd f87c 	bl	d74d8 <siscanf>
   da3e0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da3e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da3e8:	213c      	movs	r1, #60	; 0x3c
   da3ea:	fb01 3302 	mla	r3, r1, r2, r3
   da3ee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da3f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da3f6:	fb01 3302 	mla	r3, r1, r2, r3
   da3fa:	61bb      	str	r3, [r7, #24]
   da3fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da3fe:	f109 0901 	add.w	r9, r9, #1
   da402:	f1b9 0f02 	cmp.w	r9, #2
   da406:	4445      	add	r5, r8
   da408:	f107 071c 	add.w	r7, r7, #28
   da40c:	f47f af74 	bne.w	da2f8 <_tzset_unlocked_r+0x198>
   da410:	6860      	ldr	r0, [r4, #4]
   da412:	f7ff fdf5 	bl	da000 <__tzcalc_limits>
   da416:	4b08      	ldr	r3, [pc, #32]	; (da438 <_tzset_unlocked_r+0x2d8>)
   da418:	6a22      	ldr	r2, [r4, #32]
   da41a:	601a      	str	r2, [r3, #0]
   da41c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da41e:	1a9b      	subs	r3, r3, r2
   da420:	4a07      	ldr	r2, [pc, #28]	; (da440 <_tzset_unlocked_r+0x2e0>)
   da422:	bf18      	it	ne
   da424:	2301      	movne	r3, #1
   da426:	6013      	str	r3, [r2, #0]
   da428:	b00d      	add	sp, #52	; 0x34
   da42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da42e:	bf00      	nop
   da430:	000db31c 	.word	0x000db31c
   da434:	2003e7e0 	.word	0x2003e7e0
   da438:	2003e7e8 	.word	0x2003e7e8
   da43c:	000db31f 	.word	0x000db31f
   da440:	2003e7e4 	.word	0x2003e7e4
   da444:	2003dc1c 	.word	0x2003dc1c
   da448:	2003e7d3 	.word	0x2003e7d3
   da44c:	000db323 	.word	0x000db323
   da450:	000db346 	.word	0x000db346
   da454:	000db332 	.word	0x000db332
   da458:	000db345 	.word	0x000db345
   da45c:	2003e7c8 	.word	0x2003e7c8

000da460 <_findenv_r>:
   da460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da464:	4607      	mov	r7, r0
   da466:	468b      	mov	fp, r1
   da468:	4690      	mov	r8, r2
   da46a:	f000 f8d9 	bl	da620 <__env_lock>
   da46e:	4b19      	ldr	r3, [pc, #100]	; (da4d4 <_findenv_r+0x74>)
   da470:	681d      	ldr	r5, [r3, #0]
   da472:	469a      	mov	sl, r3
   da474:	b13d      	cbz	r5, da486 <_findenv_r+0x26>
   da476:	465c      	mov	r4, fp
   da478:	4623      	mov	r3, r4
   da47a:	f813 2b01 	ldrb.w	r2, [r3], #1
   da47e:	b142      	cbz	r2, da492 <_findenv_r+0x32>
   da480:	2a3d      	cmp	r2, #61	; 0x3d
   da482:	461c      	mov	r4, r3
   da484:	d1f8      	bne.n	da478 <_findenv_r+0x18>
   da486:	4638      	mov	r0, r7
   da488:	f000 f8cb 	bl	da622 <__env_unlock>
   da48c:	2000      	movs	r0, #0
   da48e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da492:	ebcb 0404 	rsb	r4, fp, r4
   da496:	46a9      	mov	r9, r5
   da498:	f859 0b04 	ldr.w	r0, [r9], #4
   da49c:	2800      	cmp	r0, #0
   da49e:	d0f2      	beq.n	da486 <_findenv_r+0x26>
   da4a0:	4622      	mov	r2, r4
   da4a2:	4659      	mov	r1, fp
   da4a4:	f7ff fcfc 	bl	d9ea0 <strncmp>
   da4a8:	b988      	cbnz	r0, da4ce <_findenv_r+0x6e>
   da4aa:	f859 3c04 	ldr.w	r3, [r9, #-4]
   da4ae:	191e      	adds	r6, r3, r4
   da4b0:	5d1b      	ldrb	r3, [r3, r4]
   da4b2:	2b3d      	cmp	r3, #61	; 0x3d
   da4b4:	d10b      	bne.n	da4ce <_findenv_r+0x6e>
   da4b6:	f8da 3000 	ldr.w	r3, [sl]
   da4ba:	1aed      	subs	r5, r5, r3
   da4bc:	10ad      	asrs	r5, r5, #2
   da4be:	4638      	mov	r0, r7
   da4c0:	f8c8 5000 	str.w	r5, [r8]
   da4c4:	f000 f8ad 	bl	da622 <__env_unlock>
   da4c8:	1c70      	adds	r0, r6, #1
   da4ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da4ce:	464d      	mov	r5, r9
   da4d0:	e7e1      	b.n	da496 <_findenv_r+0x36>
   da4d2:	bf00      	nop
   da4d4:	2003dc64 	.word	0x2003dc64

000da4d8 <_getenv_r>:
   da4d8:	b507      	push	{r0, r1, r2, lr}
   da4da:	aa01      	add	r2, sp, #4
   da4dc:	f7ff ffc0 	bl	da460 <_findenv_r>
   da4e0:	b003      	add	sp, #12
   da4e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da4e8 <__gettzinfo>:
   da4e8:	4800      	ldr	r0, [pc, #0]	; (da4ec <__gettzinfo+0x4>)
   da4ea:	4770      	bx	lr
   da4ec:	2003dc24 	.word	0x2003dc24

000da4f0 <gmtime_r>:
   da4f0:	6802      	ldr	r2, [r0, #0]
   da4f2:	4b47      	ldr	r3, [pc, #284]	; (da610 <gmtime_r+0x120>)
   da4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   da4f6:	fb92 f4f3 	sdiv	r4, r2, r3
   da4fa:	fb03 2214 	mls	r2, r3, r4, r2
   da4fe:	2a00      	cmp	r2, #0
   da500:	bfbc      	itt	lt
   da502:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   da506:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   da50a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   da50e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   da512:	fb92 f3f0 	sdiv	r3, r2, r0
   da516:	fb00 2213 	mls	r2, r0, r3, r2
   da51a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   da51e:	bfac      	ite	ge
   da520:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   da524:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   da528:	608b      	str	r3, [r1, #8]
   da52a:	fb92 f3f0 	sdiv	r3, r2, r0
   da52e:	fb00 2213 	mls	r2, r0, r3, r2
   da532:	604b      	str	r3, [r1, #4]
   da534:	600a      	str	r2, [r1, #0]
   da536:	2307      	movs	r3, #7
   da538:	1ce2      	adds	r2, r4, #3
   da53a:	fb92 f3f3 	sdiv	r3, r2, r3
   da53e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da542:	1ad3      	subs	r3, r2, r3
   da544:	618b      	str	r3, [r1, #24]
   da546:	4b33      	ldr	r3, [pc, #204]	; (da614 <gmtime_r+0x124>)
   da548:	4d33      	ldr	r5, [pc, #204]	; (da618 <gmtime_r+0x128>)
   da54a:	fb94 f5f5 	sdiv	r5, r4, r5
   da54e:	fb03 4405 	mla	r4, r3, r5, r4
   da552:	f648 62ac 	movw	r2, #36524	; 0x8eac
   da556:	fbb4 f2f2 	udiv	r2, r4, r2
   da55a:	4422      	add	r2, r4
   da55c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   da560:	fbb4 f3f7 	udiv	r3, r4, r7
   da564:	1ad2      	subs	r2, r2, r3
   da566:	482d      	ldr	r0, [pc, #180]	; (da61c <gmtime_r+0x12c>)
   da568:	fbb4 f0f0 	udiv	r0, r4, r0
   da56c:	f648 6694 	movw	r6, #36500	; 0x8e94
   da570:	1a13      	subs	r3, r2, r0
   da572:	fbb3 f6f6 	udiv	r6, r3, r6
   da576:	4434      	add	r4, r6
   da578:	f240 126d 	movw	r2, #365	; 0x16d
   da57c:	fbb3 f0f2 	udiv	r0, r3, r2
   da580:	fbb3 f3f7 	udiv	r3, r3, r7
   da584:	1ae3      	subs	r3, r4, r3
   da586:	fb02 3310 	mls	r3, r2, r0, r3
   da58a:	2499      	movs	r4, #153	; 0x99
   da58c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   da590:	3202      	adds	r2, #2
   da592:	fbb2 f2f4 	udiv	r2, r2, r4
   da596:	2a0a      	cmp	r2, #10
   da598:	fb04 f402 	mul.w	r4, r4, r2
   da59c:	f104 0602 	add.w	r6, r4, #2
   da5a0:	f04f 0405 	mov.w	r4, #5
   da5a4:	fbb6 f4f4 	udiv	r4, r6, r4
   da5a8:	bf34      	ite	cc
   da5aa:	2602      	movcc	r6, #2
   da5ac:	f06f 0609 	mvncs.w	r6, #9
   da5b0:	4416      	add	r6, r2
   da5b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da5b6:	fb02 0505 	mla	r5, r2, r5, r0
   da5ba:	1c5f      	adds	r7, r3, #1
   da5bc:	2e01      	cmp	r6, #1
   da5be:	bf98      	it	ls
   da5c0:	3501      	addls	r5, #1
   da5c2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   da5c6:	eba7 0704 	sub.w	r7, r7, r4
   da5ca:	d302      	bcc.n	da5d2 <gmtime_r+0xe2>
   da5cc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   da5d0:	e014      	b.n	da5fc <gmtime_r+0x10c>
   da5d2:	0782      	lsls	r2, r0, #30
   da5d4:	d105      	bne.n	da5e2 <gmtime_r+0xf2>
   da5d6:	2464      	movs	r4, #100	; 0x64
   da5d8:	fbb0 f2f4 	udiv	r2, r0, r4
   da5dc:	fb04 0212 	mls	r2, r4, r2, r0
   da5e0:	b94a      	cbnz	r2, da5f6 <gmtime_r+0x106>
   da5e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da5e6:	fbb0 f4f2 	udiv	r4, r0, r2
   da5ea:	fb02 0014 	mls	r0, r2, r4, r0
   da5ee:	fab0 f280 	clz	r2, r0
   da5f2:	0952      	lsrs	r2, r2, #5
   da5f4:	e000      	b.n	da5f8 <gmtime_r+0x108>
   da5f6:	2201      	movs	r2, #1
   da5f8:	333b      	adds	r3, #59	; 0x3b
   da5fa:	441a      	add	r2, r3
   da5fc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   da600:	2300      	movs	r3, #0
   da602:	61ca      	str	r2, [r1, #28]
   da604:	614d      	str	r5, [r1, #20]
   da606:	610e      	str	r6, [r1, #16]
   da608:	60cf      	str	r7, [r1, #12]
   da60a:	620b      	str	r3, [r1, #32]
   da60c:	4608      	mov	r0, r1
   da60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da610:	00015180 	.word	0x00015180
   da614:	fffdc54f 	.word	0xfffdc54f
   da618:	00023ab1 	.word	0x00023ab1
   da61c:	00023ab0 	.word	0x00023ab0

000da620 <__env_lock>:
   da620:	4770      	bx	lr

000da622 <__env_unlock>:
   da622:	4770      	bx	lr

000da624 <dynalib_user>:
   da624:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da634:	0000 0000                                   ....

000da638 <_ZZ13telemetrySendPKcS0_zE12__FUNCTION__>:
   da638:	6574 656c 656d 7274 5379 6e65 0064          telemetrySend.

000da646 <_ZZ5setupE12__FUNCTION__>:
   da646:	6573 7574 0070                              setup.

000da64c <_ZZ12MQTTcallbackPcPhjE12__FUNCTION__>:
   da64c:	514d 5454 6163 6c6c 6162 6b63 6c00               MQTTcallback.

000da659 <_ZZ4loopE12__FUNCTION__>:
   da659:	6f6c 706f 5b00 7325 255d 2a2e 0073 4552     loop.[%s]%.*s.RE
   da669:	0044 5247 4545 004e 4c42 4555 4100 4157     D.GREEN.BLUE.AWA
   da679:	454b 4100 4c53 4545 0050 4e55 4e4b 574f     KE.ASLEEP.UNKNOW
   da689:	004e 6573 7574 2870 0a29 4f00 6f6f 7370     N.setup()..Ooops
   da699:	202c 6f6e 4220 4f4e 3530 2035 6564 6574     , no BNO055 dete
   da6a9:	7463 6465 2e20 2e2e 4320 6568 6b63 7920     cted ... Check y
   da6b9:	756f 2072 6977 6972 676e 6f20 2072 3249     our wiring or I2
   da6c9:	2043 4441 5244 0021 255b 5d73 6e62 206f     C ADDR!.[%s]bno 
   da6d9:	6572 6461 0079 255b 5d73 6772 2062 6572     ready.[%s]rgb re
   da6e9:	6461 0079 255b 5d73 716d 7474 7220 6165     ady.[%s]mqtt rea
   da6f9:	7964 6300 6c6f 726f 6600 6e75 5b00 7325     dy.color.fun.[%s
   da709:	205d 7570 6c62 7369 2068 6568 6c6c 006f     ] publish hello.
   da719:	255b 5d73 4d20 5451 2054 4146 4c49 4445     [%s] MQTT FAILED
   da729:	7420 206f 6f63 6e6e 6365 0074 255b 5d73      to connect.[%s]
   da739:	3269 2063 6c73 7661 2065 6572 6461 0079     i2c slave ready.
   da749:	255b 5d73 6f6c 2077 6f70 6577 2072 6572     [%s]low power re
   da759:	6461 0079 255b 5d73 6269 7375 7220 6165     ady.[%s]ibus rea
   da769:	7964 5b00 7325 705d 6469 2073 6572 6461     dy.[%s]pids read
   da779:	0079 6573 7574 2870 6320 6d6f 6c70 7465     y.setup( complet
   da789:	2065 0a29 5b00 6c25 5d75 6c63 6569 746e     e )..[%lu]client
   da799:	6620 6961 656c 2064 6f74 6320 6e6f 656e      failed to conne
   da7a9:	7463 5b00 6c25 5d75 7020 6275 696c 6873     ct.[%lu] publish
   da7b9:	6820 6c65 6f6c 5b00 6c25 5d75 4d20 5451      hello.[%lu] MQT
   da7c9:	2054 4146 4c49 4445 7420 206f 6f63 6e6e     T FAILED to conn
   da7d9:	6365 0074 5541 4f54 414d 4954 0043 414d     ect.AUTOMATIC.MA
   da7e9:	554e 4c41 6d00 7361 6574 2072 7075 6164     NUAL.master upda
   da7f9:	6574 2064 7525 7420 206f 7525 5b00 7325     ted %u to %u.[%s
   da809:	635d 696c 6e65 2074 6166 6c69 6465 7420     ]client failed t
   da819:	206f 6f63 6e6e 6365 0074 207b 7422 6d69     o connect.{ "tim
   da829:	7365 6174 706d 3a22 2520 756c 202c 6d22     estamp": %lu, "m
   da839:	6c69 696c 2273 203a 6c25 2c75 2020 6e22     illis": %lu,  "n
   da849:	6d61 2265 223a 6d69 2275 202c 7422 7079     ame":"imu", "typ
   da859:	2265 203a 6c25 2c75 2220 6d69 7475 6d69     e": %lu, "imutim
   da869:	2265 253a 756c 202c 5822 3a22 2520 2c66     e":%lu, "X": %f,
   da879:	2220 2259 253a 2c66 2220 225a 3a20 2520      "Y":%f, "Z" : %
   da889:	2066 007d 6f72 6f62 2f74 6d69 0075 207b     f }.robot/imu.{ 
   da899:	7422 6d69 7365 6174 706d 3a22 2520 756c     "timestamp": %lu
   da8a9:	202c 6d22 6c69 696c 2273 203a 6c25 2c75     , "millis": %lu,
   da8b9:	2020 6e22 6d61 2265 223a 6d69 2275 202c       "name":"imu", 
   da8c9:	7422 7079 2265 203a 5622 4345 4f54 5f52     "type": "VECTOR_
   da8d9:	5947 4f52 4353 504f 2245 202c 5822 3a22     GYROSCOPE", "X":
   da8e9:	2520 2c66 2220 2259 253a 2c66 2220 225a      %f, "Y":%f, "Z"
   da8f9:	3a20 2520 2066 007d 207b 7422 6d69 7365      : %f }.{ "times
   da909:	6174 706d 3a22 2520 756c 202c 6d22 6c69     tamp": %lu, "mil
   da919:	696c 2273 203a 6c25 2c75 2220 7974 6570     lis": %lu, "type
   da929:	3a22 6922 7542 2273 202c 6e22 6d61 2265     ":"iBus", "name"
   da939:	223a 4269 7375 2c22 2220 3043 3a22 6425     :"iBus", "C0":%d
   da949:	222c 3143 3a22 6425 222c 3243 3a22 6425     ,"C1":%d,"C2":%d
   da959:	222c 3343 3a22 6425 222c 3443 3a22 6425     ,"C3":%d,"C4":%d
   da969:	222c 3543 3a22 6425 222c 3643 3a22 6425     ,"C5":%d,"C6":%d
   da979:	222c 3743 3a22 6425 222c 3843 3a22 6425     ,"C7":%d,"C8":%d
   da989:	222c 3943 3a22 6425 7d20 7200 626f 746f     ,"C9":%d }.robot
   da999:	692f 7542 0073 6972 6867 5374 7465 6f70     /iBus.rightSetpo
   da9a9:	6e69 2074 7266 6d6f 5220 2058 203d 6625     int from RX = %f
   da9b9:	6c00 6665 5374 7465 6f70 6e69 2074 7266     .leftSetpoint fr
   da9c9:	6d6f 5220 2058 203d 6625 5300 4154 5452     om RX = %f.START
   da9d9:	6220 6c61 6e61 6563 6e49 7570 2074 7266      balanceInput fr
   da9e9:	6d6f 5220 2058 203d 6625 7b00 2220 6974     om RX = %f.{ "ti
   da9f9:	656d 7473 6d61 2270 203a 6c25 2c75 2220     mestamp": %lu, "
   daa09:	696d 6c6c 7369 3a22 2520 756c 202c 7422     millis": %lu, "t
   daa19:	7079 2265 203a 7422 7365 2274 7d20 7200     ype": "test" }.r
   daa29:	626f 746f 742f 7365 0074 6162 616c 636e     obot/test.balanc
   daa39:	2065 6f67 7365 6120 7463 7669 3a65 2020     e goes active:  
   daa49:	6425 202c 6425 6200 6c61 6e61 6563 6720     %d, %d.balance g
   daa59:	656f 2073 6469 656c 203a 6425 202c 6425     oes idle: %d, %d
   daa69:	7b00 2220 6974 656d 7473 6d61 2270 203a     .{ "timestamp": 
   daa79:	6c25 2c75 2220 696d 6c6c 7369 3a22 2520     %lu, "millis": %
   daa89:	756c 202c 7422 7079 2265 223a 6970 2264     lu, "type":"pid"
   daa99:	202c 6e22 6d61 2265 223a 6162 616c 636e     , "name":"balanc
   daaa9:	5065 6469 2c22 2220 6e49 7570 2274 3a20     ePid", "Input" :
   daab9:	2520 2c66 2220 6553 7074 696f 746e 2022      %f, "Setpoint" 
   daac9:	3a20 2520 2c66 2220 754f 7074 7475 2022      : %f, "Output" 
   daad9:	203a 6625 202c 4b22 2270 253a 2c66 2220     : %f, "Kp":%f, "
   daae9:	694b 3a22 6625 202c 4b22 2264 253a 2c66     Ki":%f, "Kd":%f,
   daaf9:	2220 6f6d 6564 3a22 2522 2273 2020 007d      "mode":"%s"  }.
   dab09:	6f72 6f62 2f74 6162 616c 636e 5065 6469     robot/balancePid
   dab19:	7b00 2220 6974 656d 7473 6d61 2270 203a     .{ "timestamp": 
   dab29:	6c25 2c75 2220 696d 6c6c 7369 3a22 6c25     %lu, "millis":%l
   dab39:	2c75 2220 7974 6570 3a22 7022 6469 2c22     u, "type":"pid",
   dab49:	2220 616e 656d 3a22 6c22 6665 5074 6469      "name":"leftPid
   dab59:	2c22 2220 6e49 7570 2274 3a20 2520 2c66     ", "Input" : %f,
   dab69:	2220 6553 7074 696f 746e 2022 3a20 2520      "Setpoint"  : %
   dab79:	2c66 2220 754f 7074 7475 2022 203a 6625     f, "Output" : %f
   dab89:	202c 4b22 2270 253a 2c66 2220 694b 3a22     , "Kp":%f, "Ki":
   dab99:	6625 202c 4b22 2264 253a 2c66 2220 6f6d     %f, "Kd":%f, "mo
   daba9:	6564 3a22 2522 2273 2020 007d 6f72 6f62     de":"%s"  }.robo
   dabb9:	2f74 656c 7466 6950 0064 207b 7422 6d69     t/leftPid.{ "tim
   dabc9:	7365 6174 706d 3a22 2520 756c 202c 6d22     estamp": %lu, "m
   dabd9:	6c69 696c 2273 203a 6c25 2c75 2220 7974     illis": %lu, "ty
   dabe9:	6570 3a22 7022 776f 7265 2c22 2220 616e     pe":"power", "na
   dabf9:	656d 3a22 6c22 6665 5074 776f 7265 2c22     me":"leftPower",
   dac09:	2220 6f70 6577 2272 3a20 2520 2066 7d20      "power" : %f  }
   dac19:	7200 626f 746f 6c2f 6665 5074 776f 7265     .robot/leftPower
   dac29:	7b00 2220 6974 656d 7473 6d61 2270 203a     .{ "timestamp": 
   dac39:	6c25 2c75 2220 696d 6c6c 7369 3a22 6c25     %lu, "millis":%l
   dac49:	2c75 2220 7974 6570 3a22 7022 6469 2c22     u, "type":"pid",
   dac59:	2220 616e 656d 3a22 7222 6769 7468 6950      "name":"rightPi
   dac69:	2264 202c 4922 706e 7475 2022 203a 6625     d", "Input" : %f
   dac79:	202c 5322 7465 6f70 6e69 2274 2020 203a     , "Setpoint"  : 
   dac89:	6625 202c 4f22 7475 7570 2274 3a20 2520     %f, "Output" : %
   dac99:	2c66 2220 704b 3a22 6625 202c 4b22 2269     f, "Kp":%f, "Ki"
   daca9:	253a 2c66 2220 644b 3a22 6625 202c 6d22     :%f, "Kd":%f, "m
   dacb9:	646f 2265 223a 7325 2022 7d20 7200 626f     ode":"%s"  }.rob
   dacc9:	746f 722f 6769 7468 6950 0064 207b 7422     ot/rightPid.{ "t
   dacd9:	6d69 7365 6174 706d 3a22 2520 756c 202c     imestamp": %lu, 
   dace9:	6d22 6c69 696c 2273 203a 6c25 2c75 2220     "millis": %lu, "
   dacf9:	7974 6570 3a22 7022 776f 7265 2c22 2220     type":"power", "
   dad09:	616e 656d 3a22 7222 6769 7468 6f50 6577     name":"rightPowe
   dad19:	2272 202c 7022 776f 7265 2022 203a 6625     r", "power" : %f
   dad29:	2020 007d 6f72 6f62 2f74 6972 6867 5074       }.robot/rightP
   dad39:	776f 7265 7b00 2220 6974 656d 7473 6d61     ower.{ "timestam
   dad49:	2270 203a 6c25 2c75 2220 696d 6c6c 7369     p": %lu, "millis
   dad59:	3a22 2520 756c 202c 2220 7974 6570 3a22     ": %lu,  "type":
   dad69:	7022 776f 7265 2c22 2220 616e 656d 3a22     "power", "name":
   dad79:	6c22 6665 5074 776f 7265 2c22 2220 6f70     "leftPower", "po
   dad89:	6577 2272 3a20 2520 2066 7d20 4500 7473     wer" : %f  }.Est
   dad99:	6d69 7461 6465 7020 6572 732d 6163 656c     imated pre-scale
   dada9:	203a 4600 6e69 6c61 7020 6572 732d 6163     : .Final pre-sca
   dadb9:	656c 203a 0000 4d04 5451 0454 0600 514d     le: ...MQTT...MQ
   dadc9:	7349 7064 4203 4f4e 3530 0035 0000 0000          Isdp.BNO055....

000dadd8 <_ZTV15Adafruit_BNO055>:
	...
   dade0:	40d9 000d 539d 000d 40bb 000d 6ca9 000d     .@...S...@...l..
   dadf0:	69d1 000d                                   .i..

000dadf4 <_ZTV8I2CSlave>:
	...
   dadfc:	6d15 000d 6d35 000d                         .m..5m..

000dae04 <_ZTVN5spark12NetworkClassE>:
	...
   dae0c:	7529 000d 7533 000d 753d 000d 7547 000d     )u..3u..=u..Gu..
   dae1c:	7551 000d 755d 000d 7569 000d 7575 000d     Qu..]u..iu..uu..
   dae2c:	757d 000d 7587 000d 7591 000d               }u...u...u..

000dae38 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dae40:	76f9 000d 76ff 000d 7be7 000d 770d 000d     .v...v...{...w..
   dae50:	76fb 000d                                   .v..

000dae54 <_ZTV9TCPClient>:
	...
   dae5c:	6191 000d 61c5 000d 7671 000d 768b 000d     .a...a..qv...v..
   dae6c:	7a8d 000d 77df 000d 77b1 000d 76b5 000d     .z...w...w...v..
   dae7c:	7969 000d 7865 000d 7813 000d 7a5d 000d     iy..ex...x..]z..
   dae8c:	76b7 000d 76ef 000d 769d 000d 7711 000d     .v...v...v...w..
   dae9c:	7791 000d 6977 6972 676e 7200 6365 2076     .w..wiring.recv 
   daeac:	7265 6f72 2072 203d 6425 0000               error = %d..

000daeb8 <_ZTVN5spark9MeshClassE>:
	...
   daec0:	7c5d 000d 7c53 000d 7c49 000d 7c3f 000d     ]|..S|..I|..?|..
   daed0:	7c33 000d 7c27 000d 7c1b 000d 7c13 000d     3|..'|...|...|..
   daee0:	7c09 000d 7bff 000d 7591 000d               .|...{...u..

000daeec <_ZTVN5spark9WiFiClassE>:
	...
   daef4:	7df1 000d 7de7 000d 7ddd 000d 7d93 000d     .}...}...}...}..
   daf04:	7dd1 000d 7dc5 000d 7db9 000d 7db1 000d     .}...}...}...}..
   daf14:	7da7 000d 7d9d 000d 7591 000d               .}...}...u..

000daf20 <_ZTV7TwoWire>:
	...
   daf28:	7e11 000d 7e5b 000d 7e33 000d 7e13 000d     .~..[~..3~...~..
   daf38:	7e3b 000d 7e43 000d 7e4b 000d 7e53 000d     ;~..C~..K~..S~..

000daf48 <_ZTV11USARTSerial>:
	...
   daf50:	7f35 000d 7f85 000d 7f93 000d 85ef 000d     5...............
   daf60:	7f49 000d 7f6b 000d 7f57 000d 7f7f 000d     I...k...W.......
   daf70:	7f37 000d 7f3b 000d                         7...;...

000daf78 <_ZTV9USBSerial>:
	...
   daf80:	807d 000d 80cd 000d 80db 000d 85ef 000d     }...............
   daf90:	80b9 000d 807f 000d 8095 000d 80c7 000d     ................
   dafa0:	80ab 000d 8079 000d                         ....y...

000dafa8 <_ZTV9IPAddress>:
	...
   dafb0:	8199 000d 8189 000d 818b 000d 2b25 3330     ............%+03
   dafc0:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   dafd0:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   dafe0:	656d 6200 7561 0064 6553 6972 6c61 5300     me.baud.Serial.S
   daff0:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
   db000:	006d 6d63 0064 6e68 0064 7473 6d72 6600     m.cmd.hnd.strm.f
   db010:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   db020:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   db030:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   db040:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   db050:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   db060:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   db070:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   db080:	0020 0a0d 6c00 006e 6e66 6300 646f 0065      ....ln.fn.code.
   db090:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   db0a0:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   db0b0:	0072 6170 696e 0063 6c61 006c 616e 006e     r.panic.all.nan.
   db0c0:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000db0cc <_ZTVN5spark13EthernetClassE>:
	...
   db0d4:	8ba3 000d 8b99 000d 8b8f 000d 8b85 000d     ................
   db0e4:	8b79 000d 8b6d 000d 8b61 000d 8b59 000d     y...m...a...Y...
   db0f4:	8b4f 000d 8b45 000d 7591 000d               O...E....u..

000db100 <_ZSt7nothrow>:
	...

000db101 <day_name.4725>:
   db101:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db111:	6972 6153 4a74                                   riSat

000db116 <mon_name.4726>:
   db116:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db126:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db136:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   db146:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   db156:	6425 000a                                   %d..

000db15a <_ctype_>:
   db15a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db16a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db17a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db18a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db19a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db1aa:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db1ba:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db1ca:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db1da:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db25c <__sf_fake_stdin>:
	...

000db27c <__sf_fake_stdout>:
	...

000db29c <__sf_fake_stderr>:
	...

000db2bc <__month_lengths>:
   db2bc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   db2cc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db2dc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db2ec:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   db2fc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db30c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db31c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   db32c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   db33c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   db34c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000db358 <link_const_variable_data_end>:
   db358:	000d53b1 	.word	0x000d53b1
   db35c:	000d5981 	.word	0x000d5981
   db360:	000d5d11 	.word	0x000d5d11
   db364:	000d5eaf 	.word	0x000d5eaf
   db368:	000d6075 	.word	0x000d6075
   db36c:	000d618b 	.word	0x000d618b
   db370:	000d69cb 	.word	0x000d69cb
   db374:	000d6cfb 	.word	0x000d6cfb
   db378:	000d6cff 	.word	0x000d6cff
   db37c:	000d6d05 	.word	0x000d6d05
   db380:	000d6ee1 	.word	0x000d6ee1
   db384:	000d6ee5 	.word	0x000d6ee5
   db388:	000d6ee9 	.word	0x000d6ee9
   db38c:	000d765d 	.word	0x000d765d
   db390:	000d7d29 	.word	0x000d7d29
   db394:	000d7dfd 	.word	0x000d7dfd
   db398:	000d8425 	.word	0x000d8425
   db39c:	000d85c5 	.word	0x000d85c5
   db3a0:	000d85d9 	.word	0x000d85d9
   db3a4:	000d88e9 	.word	0x000d88e9
   db3a8:	000d8b11 	.word	0x000d8b11
   db3ac:	000d8bad 	.word	0x000d8bad
   db3b0:	000d8dbd 	.word	0x000d8dbd
   db3b4:	000d8e41 	.word	0x000d8e41
   db3b8:	000d8f05 	.word	0x000d8f05
   db3bc:	000d8fc9 	.word	0x000d8fc9
