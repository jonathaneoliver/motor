
/home/joliver/photon3/motor4/target/1.5.1/argon/motor4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006a00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000daa20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000098  2003daf8  000daa24  0001daf8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000c60  2003db90  2003db90  0002db90  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000daabc  000daabc  0002aabc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000daae4  000daae4  0002aae4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013d90d  00000000  00000000  0002aae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a32e  00000000  00000000  001683f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003138  00000000  00000000  00182723  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0004367b  00000000  00000000  0018585b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00044014  00000000  00000000  001c8ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00111a95  00000000  00000000  0020ceea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00028aea  00000000  00000000  0031e97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005a20  00000000  00000000  00347469  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f148  00000000  00000000  0034ce8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fe5b 	bl	d9cec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fe60 	bl	d9d02 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003daf8 	.word	0x2003daf8
   d404c:	000daa24 	.word	0x000daa24
   d4050:	2003db90 	.word	0x2003db90
   d4054:	2003db90 	.word	0x2003db90
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 fa9d 	bl	d859c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000daa18 	.word	0x000daa18
   d4084:	000da9b4 	.word	0x000da9b4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bafe 	b.w	d4688 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fc17 	bl	d48c0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 ba43 	b.w	d8520 <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 bb41 	b.w	d7720 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f003 bb3f 	b.w	d7720 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f003 bb45 	b.w	d7730 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f003 bb43 	b.w	d7730 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40ba:	4770      	bx	lr

000d40bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40bc:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40be:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40c0:	6898      	ldr	r0, [r3, #8]
   d40c2:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40c4:	f012 0f01 	tst.w	r2, #1
   d40c8:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40cc:	bf18      	it	ne
   d40ce:	5881      	ldrne	r1, [r0, r2]
   d40d0:	4410      	add	r0, r2
   d40d2:	bf18      	it	ne
   d40d4:	58cb      	ldrne	r3, [r1, r3]
   d40d6:	4718      	bx	r3

000d40d8 <_ZN15Adafruit_BNO055D1Ev>:

    uint16_t accel_radius;
    uint16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
   d40d8:	4770      	bx	lr
	...

000d40dc <_Z12MQTTcallbackPcPhj>:
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    char p[length + 1];
   d40de:	f102 0308 	add.w	r3, r2, #8
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40e2:	b083      	sub	sp, #12
    char p[length + 1];
   d40e4:	f023 0307 	bic.w	r3, r3, #7
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40e8:	af02      	add	r7, sp, #8
    char p[length + 1];
   d40ea:	ebad 0d03 	sub.w	sp, sp, r3
   d40ee:	ac02      	add	r4, sp, #8
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40f0:	4615      	mov	r5, r2
    char p[length + 1];
    memcpy(p, payload, length);
   d40f2:	4620      	mov	r0, r4
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40f4:	460e      	mov	r6, r1
    char p[length + 1];
    memcpy(p, payload, length);
   d40f6:	f005 fdf9 	bl	d9cec <memcpy>
    p[length] = 0;
   d40fa:	2300      	movs	r3, #0
   d40fc:	5563      	strb	r3, [r4, r5]
    Serial.printlnf("[%s]%.*s",__FUNCTION__,length, payload);
   d40fe:	f004 f92f 	bl	d8360 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4102:	4a14      	ldr	r2, [pc, #80]	; (d4154 <_Z12MQTTcallbackPcPhj+0x78>)
   d4104:	4b14      	ldr	r3, [pc, #80]	; (d4158 <_Z12MQTTcallbackPcPhj+0x7c>)
   d4106:	2101      	movs	r1, #1
   d4108:	e88d 0060 	stmia.w	sp, {r5, r6}
   d410c:	f004 fc5a 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>

    if (!strcmp(p, "RED"))
   d4110:	4912      	ldr	r1, [pc, #72]	; (d415c <_Z12MQTTcallbackPcPhj+0x80>)
   d4112:	4620      	mov	r0, r4
   d4114:	f005 fe26 	bl	d9d64 <strcmp>
   d4118:	4602      	mov	r2, r0
   d411a:	b910      	cbnz	r0, d4122 <_Z12MQTTcallbackPcPhj+0x46>
        RGB.color(255, 0, 0);
   d411c:	4601      	mov	r1, r0
   d411e:	20ff      	movs	r0, #255	; 0xff
   d4120:	e010      	b.n	d4144 <_Z12MQTTcallbackPcPhj+0x68>
    else if (!strcmp(p, "GREEN"))
   d4122:	490f      	ldr	r1, [pc, #60]	; (d4160 <_Z12MQTTcallbackPcPhj+0x84>)
   d4124:	4620      	mov	r0, r4
   d4126:	f005 fe1d 	bl	d9d64 <strcmp>
   d412a:	4602      	mov	r2, r0
   d412c:	b908      	cbnz	r0, d4132 <_Z12MQTTcallbackPcPhj+0x56>
        RGB.color(0, 255, 0);
   d412e:	21ff      	movs	r1, #255	; 0xff
   d4130:	e008      	b.n	d4144 <_Z12MQTTcallbackPcPhj+0x68>
    else if (!strcmp(p, "BLUE"))
   d4132:	490c      	ldr	r1, [pc, #48]	; (d4164 <_Z12MQTTcallbackPcPhj+0x88>)
   d4134:	4620      	mov	r0, r4
   d4136:	f005 fe15 	bl	d9d64 <strcmp>
        RGB.color(0, 0, 255);
   d413a:	22ff      	movs	r2, #255	; 0xff

    if (!strcmp(p, "RED"))
        RGB.color(255, 0, 0);
    else if (!strcmp(p, "GREEN"))
        RGB.color(0, 255, 0);
    else if (!strcmp(p, "BLUE"))
   d413c:	4601      	mov	r1, r0
   d413e:	b108      	cbz	r0, d4144 <_Z12MQTTcallbackPcPhj+0x68>
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
   d4140:	4611      	mov	r1, r2
   d4142:	4610      	mov	r0, r2
   d4144:	f004 fa6c 	bl	d8620 <_ZN8RGBClass5colorEiii>
    delay(100);
   d4148:	2064      	movs	r0, #100	; 0x64
   d414a:	f004 fb07 	bl	d875c <delay>
}
   d414e:	3704      	adds	r7, #4
   d4150:	46bd      	mov	sp, r7
   d4152:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4154:	000d9e29 	.word	0x000d9e29
   d4158:	000d9df7 	.word	0x000d9df7
   d415c:	000d9e32 	.word	0x000d9e32
   d4160:	000d9e36 	.word	0x000d9e36
   d4164:	000d9e3c 	.word	0x000d9e3c

000d4168 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4168:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d416a:	b510      	push	{r4, lr}
   d416c:	4604      	mov	r4, r0
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d416e:	d905      	bls.n	d417c <nrf_gpio_pin_read+0x14>
   d4170:	4a09      	ldr	r2, [pc, #36]	; (d4198 <nrf_gpio_pin_read+0x30>)
   d4172:	2100      	movs	r1, #0
   d4174:	200a      	movs	r0, #10
   d4176:	f003 fa35 	bl	d75e4 <panic_>
   d417a:	e001      	b.n	d4180 <nrf_gpio_pin_read+0x18>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d417c:	281f      	cmp	r0, #31
   d417e:	d903      	bls.n	d4188 <nrf_gpio_pin_read+0x20>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4180:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
   d4184:	4b05      	ldr	r3, [pc, #20]	; (d419c <nrf_gpio_pin_read+0x34>)
   d4186:	e001      	b.n	d418c <nrf_gpio_pin_read+0x24>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4188:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d418c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4190:	40e0      	lsrs	r0, r4
}
   d4192:	f000 0001 	and.w	r0, r0, #1
   d4196:	bd10      	pop	{r4, pc}
   d4198:	000d74a5 	.word	0x000d74a5
   d419c:	50000300 	.word	0x50000300

000d41a0 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d41a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d41a2:	4b26      	ldr	r3, [pc, #152]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x9c>)
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d41a4:	4e26      	ldr	r6, [pc, #152]	; (d4240 <_ZN7Encoder16interruptHandlerEv+0xa0>)
   d41a6:	685b      	ldr	r3, [r3, #4]
		ticks=System.ticks();
   d41a8:	6183      	str	r3, [r0, #24]
   d41aa:	8903      	ldrh	r3, [r0, #8]
   d41ac:	6832      	ldr	r2, [r6, #0]
   d41ae:	011b      	lsls	r3, r3, #4
   d41b0:	18d1      	adds	r1, r2, r3
   d41b2:	5cd5      	ldrb	r5, [r2, r3]
   d41b4:	784b      	ldrb	r3, [r1, #1]
   d41b6:	f003 031f 	and.w	r3, r3, #31
   d41ba:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d41be:	4604      	mov	r4, r0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d41c0:	4628      	mov	r0, r5
   d41c2:	f7ff ffd1 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41c6:	4628      	mov	r0, r5
   d41c8:	f7ff ffce 	bl	d4168 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d41cc:	89a3      	ldrh	r3, [r4, #12]
   d41ce:	6832      	ldr	r2, [r6, #0]
   d41d0:	011b      	lsls	r3, r3, #4
   d41d2:	18d1      	adds	r1, r2, r3
   d41d4:	5cd5      	ldrb	r5, [r2, r3]
   d41d6:	784b      	ldrb	r3, [r1, #1]
   d41d8:	f003 031f 	and.w	r3, r3, #31
   d41dc:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d41e0:	4607      	mov	r7, r0

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d41e2:	4628      	mov	r0, r5
   d41e4:	f7ff ffc0 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41e8:	4628      	mov	r0, r5
   d41ea:	f7ff ffbd 	bl	d4168 <nrf_gpio_pin_read>
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d41ee:	7c23      	ldrb	r3, [r4, #16]
		if (p1val) newState |= 4;
   d41f0:	f017 0fff 	tst.w	r7, #255	; 0xff
private:
	void interruptHandler() {
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d41f4:	f003 0303 	and.w	r3, r3, #3

private:
	void interruptHandler() {
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d41f8:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
   d41fa:	bf18      	it	ne
   d41fc:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) newState |= 8;
   d4200:	b108      	cbz	r0, d4206 <_ZN7Encoder16interruptHandlerEv+0x66>
   d4202:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   d4206:	109a      	asrs	r2, r3, #2
		switch (newState) {
   d4208:	3b01      	subs	r3, #1
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
		if (p2val) newState |= 8;
		state = (newState >> 2);
   d420a:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   d420c:	2b0d      	cmp	r3, #13
   d420e:	d814      	bhi.n	d423a <_ZN7Encoder16interruptHandlerEv+0x9a>
   d4210:	e8df f003 	tbb	[pc, r3]
   d4214:	0a0d0a07 	.word	0x0a0d0a07
   d4218:	07071013 	.word	0x07071013
   d421c:	0d0a1310 	.word	0x0d0a1310
   d4220:	070a      	.short	0x070a
			case 1: case 7: case 8: case 14:
				position++;
   d4222:	6963      	ldr	r3, [r4, #20]
   d4224:	3301      	adds	r3, #1
   d4226:	e007      	b.n	d4238 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 2: case 4: case 11: case 13:
				position--;
   d4228:	6963      	ldr	r3, [r4, #20]
   d422a:	3b01      	subs	r3, #1
   d422c:	e004      	b.n	d4238 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 3: case 12:
				position += 2;
   d422e:	6963      	ldr	r3, [r4, #20]
   d4230:	3302      	adds	r3, #2
   d4232:	e001      	b.n	d4238 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 6: case 9:
				position -= 2;
   d4234:	6963      	ldr	r3, [r4, #20]
   d4236:	3b02      	subs	r3, #2
   d4238:	6163      	str	r3, [r4, #20]
   d423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d423c:	e0001000 	.word	0xe0001000
   d4240:	2003dd98 	.word	0x2003dd98

000d4244 <_Z6setPwmP16Adafruit_DCMotori.part.2>:
/******************************************
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
   d4244:	b510      	push	{r4, lr}
{  
  if( power==0 ) {
    motor->setSpeed(abs(power));
   d4246:	2900      	cmp	r1, #0
   d4248:	bfb8      	it	lt
   d424a:	4249      	neglt	r1, r1
/******************************************
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
   d424c:	4604      	mov	r4, r0
{  
  if( power==0 ) {
    motor->setSpeed(abs(power));
   d424e:	b2c9      	uxtb	r1, r1
   d4250:	f001 ffa6 	bl	d61a0 <_ZN16Adafruit_DCMotor8setSpeedEh>
#if 1
    motor->run(FORWARD);
   d4254:	4620      	mov	r0, r4
   d4256:	2101      	movs	r1, #1
   d4258:	f001 ff7c 	bl	d6154 <_ZN16Adafruit_DCMotor3runEh>
  {
    motor->run(BACKWARD);
    motor->setSpeed(abs(power));      
  }
  return power;
}
   d425c:	bd10      	pop	{r4, pc}

000d425e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d425e:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4260:	b538      	push	{r3, r4, r5, lr}
   d4262:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4264:	d005      	beq.n	d4272 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4266:	2a03      	cmp	r2, #3
   d4268:	d00f      	beq.n	d428a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d426a:	2a01      	cmp	r2, #1
   d426c:	d111      	bne.n	d4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d426e:	680b      	ldr	r3, [r1, #0]
   d4270:	e009      	b.n	d4286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4272:	200c      	movs	r0, #12
   d4274:	680d      	ldr	r5, [r1, #0]
   d4276:	f7ff ff10 	bl	d409a <_Znwj>
   d427a:	4603      	mov	r3, r0
   d427c:	b118      	cbz	r0, d4286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d427e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4286:	6023      	str	r3, [r4, #0]
   d4288:	e003      	b.n	d4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d428a:	210c      	movs	r1, #12
   d428c:	6800      	ldr	r0, [r0, #0]
   d428e:	f004 fe2f 	bl	d8ef0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4292:	2000      	movs	r0, #0
   d4294:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4298 <_Z13SleepStateStr12sleepState_t>:

#define SLEEPSTATE_PIN A0

const char * SleepStateStr( sleepState_t sleepState )
{
  switch (sleepState) 
   d4298:	b130      	cbz	r0, d42a8 <_Z13SleepStateStr12sleepState_t+0x10>
      break;
    case ASLEEP:
      return "ASLEEP";
      break;
    default:
      return "UNKNOWN";
   d429a:	4a04      	ldr	r2, [pc, #16]	; (d42ac <_Z13SleepStateStr12sleepState_t+0x14>)
   d429c:	4b04      	ldr	r3, [pc, #16]	; (d42b0 <_Z13SleepStateStr12sleepState_t+0x18>)
   d429e:	2801      	cmp	r0, #1
   d42a0:	bf0c      	ite	eq
   d42a2:	4618      	moveq	r0, r3
   d42a4:	4610      	movne	r0, r2
   d42a6:	4770      	bx	lr
const char * SleepStateStr( sleepState_t sleepState )
{
  switch (sleepState) 
  {
    case AWAKE:
      return "AWAKE";
   d42a8:	4802      	ldr	r0, [pc, #8]	; (d42b4 <_Z13SleepStateStr12sleepState_t+0x1c>)
      break;
    default:
      return "UNKNOWN";
      break;
  }
}
   d42aa:	4770      	bx	lr
   d42ac:	000d9e4e 	.word	0x000d9e4e
   d42b0:	000d9e47 	.word	0x000d9e47
   d42b4:	000d9e41 	.word	0x000d9e41

000d42b8 <_Z6setPwmP16Adafruit_DCMotori>:
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
{  
   d42b8:	b538      	push	{r3, r4, r5, lr}
  if( power==0 ) {
   d42ba:	1e0c      	subs	r4, r1, #0
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int power )
{  
   d42bc:	4605      	mov	r5, r0
  if( power==0 ) {
   d42be:	d102      	bne.n	d42c6 <_Z6setPwmP16Adafruit_DCMotori+0xe>
   d42c0:	f7ff ffc0 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.2>
   d42c4:	e00d      	b.n	d42e2 <_Z6setPwmP16Adafruit_DCMotori+0x2a>
    motor->run(FORWARD);
#else
    motor->run(RELEASE);
#endif
  }
  else if( power>0 ) {
   d42c6:	dd04      	ble.n	d42d2 <_Z6setPwmP16Adafruit_DCMotori+0x1a>
    motor->run(FORWARD);
   d42c8:	2101      	movs	r1, #1
   d42ca:	f001 ff43 	bl	d6154 <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(power));
   d42ce:	b2e1      	uxtb	r1, r4
   d42d0:	e004      	b.n	d42dc <_Z6setPwmP16Adafruit_DCMotori+0x24>
  }
  else
  {
    motor->run(BACKWARD);
   d42d2:	2102      	movs	r1, #2
   d42d4:	f001 ff3e 	bl	d6154 <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(power));      
   d42d8:	4261      	negs	r1, r4
   d42da:	b2c9      	uxtb	r1, r1
   d42dc:	4628      	mov	r0, r5
   d42de:	f001 ff5f 	bl	d61a0 <_ZN16Adafruit_DCMotor8setSpeedEh>
  }
  return power;
}
   d42e2:	4620      	mov	r0, r4
   d42e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d42e8 <_Z14setTargetSpeedi>:

int setTargetSpeed( int speed )
{  
   d42e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42ea:	4604      	mov	r4, r0
  VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), speed) ) ;
   d42ec:	f004 f838 	bl	d8360 <_Z16_fetch_usbserialv>
   d42f0:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42f2:	f003 f8df 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d42f6:	4b0a      	ldr	r3, [pc, #40]	; (d4320 <_Z14setTargetSpeedi+0x38>)
   d42f8:	4a0a      	ldr	r2, [pc, #40]	; (d4324 <_Z14setTargetSpeedi+0x3c>)
   d42fa:	e88d 0011 	stmia.w	sp, {r0, r4}
   d42fe:	2101      	movs	r1, #1
   d4300:	4628      	mov	r0, r5
   d4302:	f004 fb5f 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
  leftSetpoint=rightSetpoint=speed;
   d4306:	4620      	mov	r0, r4
   d4308:	f005 f934 	bl	d9574 <__aeabi_i2d>
   d430c:	4b06      	ldr	r3, [pc, #24]	; (d4328 <_Z14setTargetSpeedi+0x40>)
   d430e:	e9c3 0100 	strd	r0, r1, [r3]
   d4312:	4b06      	ldr	r3, [pc, #24]	; (d432c <_Z14setTargetSpeedi+0x44>)
   d4314:	e9c3 0100 	strd	r0, r1, [r3]
  return speed;
}
   d4318:	4620      	mov	r0, r4
   d431a:	b003      	add	sp, #12
   d431c:	bd30      	pop	{r4, r5, pc}
   d431e:	bf00      	nop
   d4320:	000d9dd8 	.word	0x000d9dd8
   d4324:	000d9e56 	.word	0x000d9e56
   d4328:	2003dda0 	.word	0x2003dda0
   d432c:	2003dcb8 	.word	0x2003dcb8

000d4330 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4330:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4332:	b089      	sub	sp, #36	; 0x24
   d4334:	4604      	mov	r4, r0
   d4336:	a802      	add	r0, sp, #8
   d4338:	e880 0006 	stmia.w	r0, {r1, r2}
   d433c:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d433e:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4340:	2300      	movs	r3, #0
   d4342:	460f      	mov	r7, r1
   d4344:	9e03      	ldr	r6, [sp, #12]
   d4346:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4348:	f7ff fea7 	bl	d409a <_Znwj>
   d434c:	b110      	cbz	r0, d4354 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d434e:	6007      	str	r7, [r0, #0]
   d4350:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4352:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4354:	4b0c      	ldr	r3, [pc, #48]	; (d4388 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d4356:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d4358:	4b0c      	ldr	r3, [pc, #48]	; (d438c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x5c>)
   d435a:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d435c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4360:	9004      	str	r0, [sp, #16]
   d4362:	9300      	str	r3, [sp, #0]
   d4364:	4620      	mov	r0, r4
   d4366:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d436a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d436e:	a904      	add	r1, sp, #16
   d4370:	f004 f9b2 	bl	d86d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4374:	9b06      	ldr	r3, [sp, #24]
   d4376:	4604      	mov	r4, r0
   d4378:	b11b      	cbz	r3, d4382 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d437a:	a904      	add	r1, sp, #16
   d437c:	2203      	movs	r2, #3
   d437e:	4608      	mov	r0, r1
   d4380:	4798      	blx	r3
}
   d4382:	4620      	mov	r0, r4
   d4384:	b009      	add	sp, #36	; 0x24
   d4386:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4388:	000d40bd 	.word	0x000d40bd
   d438c:	000d425f 	.word	0x000d425f

000d4390 <_ZN7EncoderC1Ett>:
#endif

class Encoder
{
public:
	Encoder(pin_t pin1, pin_t pin2) {
   d4390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4394:	460f      	mov	r7, r1
   d4396:	4604      	mov	r4, r0
   d4398:	b089      	sub	sp, #36	; 0x24
   d439a:	4616      	mov	r6, r2
		pinMode(pin1, INPUT_PULLUP);
   d439c:	2102      	movs	r1, #2
   d439e:	4638      	mov	r0, r7
   d43a0:	f004 fd74 	bl	d8e8c <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   d43a4:	2102      	movs	r1, #2
   d43a6:	4630      	mov	r0, r6
   d43a8:	f004 fd70 	bl	d8e8c <pinMode>

		pin1_register = PIN_TO_BASEREG(pin1);
   d43ac:	2300      	movs	r3, #0
   d43ae:	6023      	str	r3, [r4, #0]
		pin1_bitmask = PIN_TO_BITMASK(pin1);
		pin2_register = PIN_TO_BASEREG(pin2);
   d43b0:	6063      	str	r3, [r4, #4]
		pin2_bitmask = PIN_TO_BITMASK(pin2);
		position = 0;
   d43b2:	6163      	str	r3, [r4, #20]
		ticks = 0;
   d43b4:	61a3      	str	r3, [r4, #24]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d43b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43ba:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d4468 <_ZN7EncoderC1Ett+0xd8>
	Encoder(pin_t pin1, pin_t pin2) {
		pinMode(pin1, INPUT_PULLUP);
		pinMode(pin2, INPUT_PULLUP);

		pin1_register = PIN_TO_BASEREG(pin1);
		pin1_bitmask = PIN_TO_BITMASK(pin1);
   d43be:	60a7      	str	r7, [r4, #8]
		pin2_register = PIN_TO_BASEREG(pin2);
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   d43c0:	60e6      	str	r6, [r4, #12]
   d43c2:	f003 f86f 	bl	d74a4 <HAL_Delay_Microseconds>
   d43c6:	8923      	ldrh	r3, [r4, #8]
   d43c8:	f8d9 2000 	ldr.w	r2, [r9]
   d43cc:	011b      	lsls	r3, r3, #4
   d43ce:	18d1      	adds	r1, r2, r3
   d43d0:	5cd5      	ldrb	r5, [r2, r3]
   d43d2:	784b      	ldrb	r3, [r1, #1]
   d43d4:	f003 031f 	and.w	r3, r3, #31
   d43d8:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d43dc:	4628      	mov	r0, r5
   d43de:	f7ff fec3 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d43e2:	4628      	mov	r0, r5
   d43e4:	f7ff fec0 	bl	d4168 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43e8:	89a3      	ldrh	r3, [r4, #12]
   d43ea:	f8d9 2000 	ldr.w	r2, [r9]
   d43ee:	011b      	lsls	r3, r3, #4
   d43f0:	18d1      	adds	r1, r2, r3
   d43f2:	5cd5      	ldrb	r5, [r2, r3]
   d43f4:	784b      	ldrb	r3, [r1, #1]
   d43f6:	f003 031f 	and.w	r3, r3, #31
   d43fa:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
		ticks = 0;
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
   d43fe:	f110 0800 	adds.w	r8, r0, #0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4402:	4628      	mov	r0, r5
   d4404:	bf18      	it	ne
   d4406:	f04f 0801 	movne.w	r8, #1
   d440a:	f7ff fead 	bl	d4168 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d440e:	4628      	mov	r0, r5
   d4410:	f7ff feaa 	bl	d4168 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d4414:	b118      	cbz	r0, d441e <_ZN7EncoderC1Ett+0x8e>
   d4416:	f048 0802 	orr.w	r8, r8, #2
   d441a:	fa5f f888 	uxtb.w	r8, r8
		state = s;
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d441e:	2500      	movs	r5, #0
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
		state = s;
   d4420:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d4424:	f04f 38ff 	mov.w	r8, #4294967295
   d4428:	e88d 0120 	stmia.w	sp, {r5, r8}
   d442c:	f8df 903c 	ldr.w	r9, [pc, #60]	; d446c <_ZN7EncoderC1Ett+0xdc>
   d4430:	f8cd 9010 	str.w	r9, [sp, #16]
   d4434:	9505      	str	r5, [sp, #20]
   d4436:	9502      	str	r5, [sp, #8]
   d4438:	aa04      	add	r2, sp, #16
   d443a:	4623      	mov	r3, r4
   d443c:	ca06      	ldmia	r2, {r1, r2}
   d443e:	4638      	mov	r0, r7
   d4440:	f7ff ff76 	bl	d4330 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   d4444:	e88d 0120 	stmia.w	sp, {r5, r8}
   d4448:	f8cd 9018 	str.w	r9, [sp, #24]
   d444c:	9507      	str	r5, [sp, #28]
   d444e:	9502      	str	r5, [sp, #8]
   d4450:	aa08      	add	r2, sp, #32
   d4452:	4623      	mov	r3, r4
   d4454:	e912 0006 	ldmdb	r2, {r1, r2}
   d4458:	4630      	mov	r0, r6
   d445a:	f7ff ff69 	bl	d4330 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
	}
   d445e:	4620      	mov	r0, r4
   d4460:	b009      	add	sp, #36	; 0x24
   d4462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4466:	bf00      	nop
   d4468:	2003dd98 	.word	0x2003dd98
   d446c:	000d41a1 	.word	0x000d41a1

000d4470 <_ZN5Print8printlnfIIPKcmEEEjS2_DpT_>:
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4470:	b507      	push	{r0, r1, r2, lr}
    {
        return this->printf_impl(true, format, args...);
   d4472:	9300      	str	r3, [sp, #0]
   d4474:	4613      	mov	r3, r2
   d4476:	460a      	mov	r2, r1
   d4478:	2101      	movs	r1, #1
   d447a:	f004 faa3 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
    }
   d447e:	b003      	add	sp, #12
   d4480:	f85d fb04 	ldr.w	pc, [sp], #4

000d4484 <_Z16SleepStateTogglev>:




void SleepStateToggle()
{
   d4484:	b530      	push	{r4, r5, lr}
  // debounce
  if ( millis()-sleepStateTime < 1000 )
   d4486:	4c2a      	ldr	r4, [pc, #168]	; (d4530 <_Z16SleepStateTogglev+0xac>)




void SleepStateToggle()
{
   d4488:	b089      	sub	sp, #36	; 0x24

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d448a:	f003 f813 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
  // debounce
  if ( millis()-sleepStateTime < 1000 )
   d448e:	6823      	ldr	r3, [r4, #0]
   d4490:	1ac0      	subs	r0, r0, r3
   d4492:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4496:	d20b      	bcs.n	d44b0 <_Z16SleepStateTogglev+0x2c>
  {
    // ignore this
    VERBOSE(  Serial.printlnf( "[%s] %d -> debounce ", __FUNCTION__, millis()) ) ;
   d4498:	f003 ff62 	bl	d8360 <_Z16_fetch_usbserialv>
   d449c:	4604      	mov	r4, r0
   d449e:	f003 f809 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d44a2:	4a24      	ldr	r2, [pc, #144]	; (d4534 <_Z16SleepStateTogglev+0xb0>)
   d44a4:	4924      	ldr	r1, [pc, #144]	; (d4538 <_Z16SleepStateTogglev+0xb4>)
   d44a6:	4603      	mov	r3, r0
   d44a8:	4620      	mov	r0, r4
   d44aa:	f7ff ffe1 	bl	d4470 <_ZN5Print8printlnfIIPKcmEEEjS2_DpT_>
    return;
   d44ae:	e03c      	b.n	d452a <_Z16SleepStateTogglev+0xa6>
   d44b0:	f003 f800 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
  }

  sleepStateTime=millis();
   d44b4:	6020      	str	r0, [r4, #0]
  

  if ( sleepState==AWAKE )
   d44b6:	4c21      	ldr	r4, [pc, #132]	; (d453c <_Z16SleepStateTogglev+0xb8>)
   d44b8:	7823      	ldrb	r3, [r4, #0]
   d44ba:	bb1b      	cbnz	r3, d4504 <_Z16SleepStateTogglev+0x80>
  {

    VERBOSE( Serial.printlnf( "[%s] %d enter sleep mode for 60 seconds or A0 falling", __FUNCTION__, millis() ) );
   d44bc:	f003 ff50 	bl	d8360 <_Z16_fetch_usbserialv>
   d44c0:	4605      	mov	r5, r0
   d44c2:	f002 fff7 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d44c6:	4a1b      	ldr	r2, [pc, #108]	; (d4534 <_Z16SleepStateTogglev+0xb0>)
   d44c8:	491d      	ldr	r1, [pc, #116]	; (d4540 <_Z16SleepStateTogglev+0xbc>)
   d44ca:	4603      	mov	r3, r0
   d44cc:	4628      	mov	r0, r5
   d44ce:	f7ff ffcf 	bl	d4470 <_ZN5Print8printlnfIIPKcmEEEjS2_DpT_>

    delay(100);
   d44d2:	2064      	movs	r0, #100	; 0x64
   d44d4:	f004 f942 	bl	d875c <delay>
   d44d8:	4b1a      	ldr	r3, [pc, #104]	; (d4544 <_Z16SleepStateTogglev+0xc0>)
    sleepState=ASLEEP;
   d44da:	2201      	movs	r2, #1
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	7022      	strb	r2, [r4, #0]
   d44e0:	2113      	movs	r1, #19
   d44e2:	f8ad 1016 	strh.w	r1, [sp, #22]
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d44e6:	9302      	str	r3, [sp, #8]
   d44e8:	2102      	movs	r1, #2
   d44ea:	233c      	movs	r3, #60	; 0x3c
   d44ec:	f88d 1015 	strb.w	r1, [sp, #21]
   d44f0:	e88d 000c 	stmia.w	sp, {r2, r3}
   d44f4:	f10d 0116 	add.w	r1, sp, #22
   d44f8:	f10d 0315 	add.w	r3, sp, #21
   d44fc:	a806      	add	r0, sp, #24
   d44fe:	f004 fb7f 	bl	d8c00 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d4502:	e001      	b.n	d4508 <_Z16SleepStateTogglev+0x84>
    System.sleep(SLEEPSTATE_PIN, FALLING, 60 );
  } 
  else
  {
    /* this is the default when woken from System.sleep() by timer or interrupt from pin */
    sleepState=AWAKE;
   d4504:	2300      	movs	r3, #0
   d4506:	7023      	strb	r3, [r4, #0]
  }

  VERBOSE(  Serial.printlnf( "[%s] %d ->%s ", __FUNCTION__, millis(), SleepStateStr(sleepState)) ) ;
   d4508:	f003 ff2a 	bl	d8360 <_Z16_fetch_usbserialv>
   d450c:	4605      	mov	r5, r0
   d450e:	f002 ffd1 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4512:	4601      	mov	r1, r0
   d4514:	7820      	ldrb	r0, [r4, #0]
   d4516:	f7ff febf 	bl	d4298 <_Z13SleepStateStr12sleepState_t>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d451a:	4b06      	ldr	r3, [pc, #24]	; (d4534 <_Z16SleepStateTogglev+0xb0>)
   d451c:	9001      	str	r0, [sp, #4]
   d451e:	9100      	str	r1, [sp, #0]
   d4520:	4a09      	ldr	r2, [pc, #36]	; (d4548 <_Z16SleepStateTogglev+0xc4>)
   d4522:	2101      	movs	r1, #1
   d4524:	4628      	mov	r0, r5
   d4526:	f004 fa4d 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
}
   d452a:	b009      	add	sp, #36	; 0x24
   d452c:	bd30      	pop	{r4, r5, pc}
   d452e:	bf00      	nop
   d4530:	2003dc20 	.word	0x2003dc20
   d4534:	000d9e09 	.word	0x000d9e09
   d4538:	000d9e66 	.word	0x000d9e66
   d453c:	2003ddd0 	.word	0x2003ddd0
   d4540:	000d9e7b 	.word	0x000d9e7b
   d4544:	2003dd10 	.word	0x2003dd10
   d4548:	000d9eb1 	.word	0x000d9eb1

000d454c <_Z15SleepStateCheckv>:

void SleepStateCheck(void)
{
   d454c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
   d454e:	2013      	movs	r0, #19
   d4550:	f004 fcad 	bl	d8eae <digitalRead>
   d4554:	b9d8      	cbnz	r0, d458e <_Z15SleepStateCheckv+0x42>
  {
    VERBOSE(  Serial.printlnf( "[%s] %d sleepState=%s (%d) ", __FUNCTION__, millis(), SleepStateStr(sleepState), digitalRead(SLEEPSTATE_PIN) ) );
   d4556:	f003 ff03 	bl	d8360 <_Z16_fetch_usbserialv>
   d455a:	4604      	mov	r4, r0
   d455c:	f002 ffaa 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4560:	4b0c      	ldr	r3, [pc, #48]	; (d4594 <_Z15SleepStateCheckv+0x48>)
   d4562:	4605      	mov	r5, r0
   d4564:	7818      	ldrb	r0, [r3, #0]
   d4566:	f7ff fe97 	bl	d4298 <_Z13SleepStateStr12sleepState_t>
   d456a:	4606      	mov	r6, r0
   d456c:	2013      	movs	r0, #19
   d456e:	f004 fc9e 	bl	d8eae <digitalRead>
   d4572:	e88d 0060 	stmia.w	sp, {r5, r6}
   d4576:	9002      	str	r0, [sp, #8]
   d4578:	4b07      	ldr	r3, [pc, #28]	; (d4598 <_Z15SleepStateCheckv+0x4c>)
   d457a:	4a08      	ldr	r2, [pc, #32]	; (d459c <_Z15SleepStateCheckv+0x50>)
   d457c:	2101      	movs	r1, #1
   d457e:	4620      	mov	r0, r4
   d4580:	f004 fa20 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
    SleepStateToggle();  
  }
}
   d4584:	b004      	add	sp, #16
   d4586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void SleepStateCheck(void)
{
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
  {
    VERBOSE(  Serial.printlnf( "[%s] %d sleepState=%s (%d) ", __FUNCTION__, millis(), SleepStateStr(sleepState), digitalRead(SLEEPSTATE_PIN) ) );
    SleepStateToggle();  
   d458a:	f7ff bf7b 	b.w	d4484 <_Z16SleepStateTogglev>
  }
}
   d458e:	b004      	add	sp, #16
   d4590:	bd70      	pop	{r4, r5, r6, pc}
   d4592:	bf00      	nop
   d4594:	2003ddd0 	.word	0x2003ddd0
   d4598:	000d9de7 	.word	0x000d9de7
   d459c:	000d9ebf 	.word	0x000d9ebf

000d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>:
   d45a0:	4613      	mov	r3, r2
   d45a2:	460a      	mov	r2, r1
   d45a4:	2101      	movs	r1, #1
   d45a6:	f004 ba0d 	b.w	d89c4 <_ZN5Print11printf_implEbPKcz>
	...

000d45ac <_Z14SleepStateInitv>:

void SleepStateInit()
{
   d45ac:	b508      	push	{r3, lr}
  VERBOSE( Serial.printlnf( "[%s]", __FUNCTION__ ) );
   d45ae:	f003 fed7 	bl	d8360 <_Z16_fetch_usbserialv>
   d45b2:	4905      	ldr	r1, [pc, #20]	; (d45c8 <_Z14SleepStateInitv+0x1c>)
   d45b4:	4a05      	ldr	r2, [pc, #20]	; (d45cc <_Z14SleepStateInitv+0x20>)
   d45b6:	f7ff fff3 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
   d45ba:	2102      	movs	r1, #2
   d45bc:	2013      	movs	r0, #19
}
   d45be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void SleepStateInit()
{
  VERBOSE( Serial.printlnf( "[%s]", __FUNCTION__ ) );
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
   d45c2:	f004 bc63 	b.w	d8e8c <pinMode>
   d45c6:	bf00      	nop
   d45c8:	000d9edb 	.word	0x000d9edb
   d45cc:	000d9e1a 	.word	0x000d9e1a

000d45d0 <_Z13telemetrySendPKcS0_z>:
  leftSetpoint=rightSetpoint=speed;
  return speed;
}

void telemetrySend( const char *name, const char *format, ...)
{
   d45d0:	b40e      	push	{r1, r2, r3}
   d45d2:	b510      	push	{r4, lr}
   d45d4:	4604      	mov	r4, r0
   d45d6:	b0c3      	sub	sp, #268	; 0x10c
#ifdef MQTT_ENABLE
      if (MQTTclient.isConnected())
   d45d8:	4822      	ldr	r0, [pc, #136]	; (d4664 <_Z13telemetrySendPKcS0_z+0x94>)
   d45da:	f002 f885 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d45de:	b168      	cbz	r0, d45fc <_Z13telemetrySendPKcS0_z+0x2c>
      {
        char buffer[256];
        va_list args;
        va_start (args, format);
   d45e0:	ab46      	add	r3, sp, #280	; 0x118
        vsnprintf (buffer, sizeof(buffer), format, args);
   d45e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
#ifdef MQTT_ENABLE
      if (MQTTclient.isConnected())
      {
        char buffer[256];
        va_list args;
        va_start (args, format);
   d45e4:	9301      	str	r3, [sp, #4]
        vsnprintf (buffer, sizeof(buffer), format, args);
   d45e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45ea:	a802      	add	r0, sp, #8
   d45ec:	f003 f8b0 	bl	d7750 <vsnprintf>
        va_end (args);
#if 1
        MQTTclient.publish( name, buffer );
   d45f0:	aa02      	add	r2, sp, #8
   d45f2:	4621      	mov	r1, r4
   d45f4:	481b      	ldr	r0, [pc, #108]	; (d4664 <_Z13telemetrySendPKcS0_z+0x94>)
   d45f6:	f002 f9db 	bl	d69b0 <_ZN4MQTT7publishEPKcS1_>
   d45fa:	e02d      	b.n	d4658 <_Z13telemetrySendPKcS0_z+0x88>
#endif
      }
      else 
      {
        Serial.printlnf("[%s]client failed to connect",__FUNCTION__);
   d45fc:	f003 feb0 	bl	d8360 <_Z16_fetch_usbserialv>
   d4600:	4a19      	ldr	r2, [pc, #100]	; (d4668 <_Z13telemetrySendPKcS0_z+0x98>)
   d4602:	491a      	ldr	r1, [pc, #104]	; (d466c <_Z13telemetrySendPKcS0_z+0x9c>)
   d4604:	f7ff ffcc 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4608:	a802      	add	r0, sp, #8
   d460a:	f002 fffb 	bl	d7604 <spark_deviceID>
        // connect to the server
        MQTTclient.connect(System.deviceID());
   d460e:	9902      	ldr	r1, [sp, #8]
   d4610:	4814      	ldr	r0, [pc, #80]	; (d4664 <_Z13telemetrySendPKcS0_z+0x94>)
   d4612:	f002 f94d 	bl	d68b0 <_ZN4MQTT7connectEPKc>
   d4616:	a802      	add	r0, sp, #8
   d4618:	f004 fa2a 	bl	d8a70 <_ZN6StringD1Ev>
        Serial.printlnf("[%s]mqtt ready",__FUNCTION__);    
   d461c:	f003 fea0 	bl	d8360 <_Z16_fetch_usbserialv>
   d4620:	4a11      	ldr	r2, [pc, #68]	; (d4668 <_Z13telemetrySendPKcS0_z+0x98>)
   d4622:	4913      	ldr	r1, [pc, #76]	; (d4670 <_Z13telemetrySendPKcS0_z+0xa0>)
   d4624:	f7ff ffbc 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

        // publish/subscribe
        if (MQTTclient.isConnected()) {
   d4628:	480e      	ldr	r0, [pc, #56]	; (d4664 <_Z13telemetrySendPKcS0_z+0x94>)
   d462a:	f002 f85d 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d462e:	b168      	cbz	r0, d464c <_Z13telemetrySendPKcS0_z+0x7c>
          MQTTclient.subscribe("color");//color is the topic that photon is subscribed
   d4630:	4910      	ldr	r1, [pc, #64]	; (d4674 <_Z13telemetrySendPKcS0_z+0xa4>)
   d4632:	480c      	ldr	r0, [pc, #48]	; (d4664 <_Z13telemetrySendPKcS0_z+0x94>)
   d4634:	f002 fb2f 	bl	d6c96 <_ZN4MQTT9subscribeEPKc>
          MQTTclient.publish("fun", "hello");//publishing a data "hello" to the topic "fun"
   d4638:	4a0f      	ldr	r2, [pc, #60]	; (d4678 <_Z13telemetrySendPKcS0_z+0xa8>)
   d463a:	4910      	ldr	r1, [pc, #64]	; (d467c <_Z13telemetrySendPKcS0_z+0xac>)
   d463c:	4809      	ldr	r0, [pc, #36]	; (d4664 <_Z13telemetrySendPKcS0_z+0x94>)
   d463e:	f002 f9b7 	bl	d69b0 <_ZN4MQTT7publishEPKcS1_>
          Serial.printlnf("[%s] publish hello",__FUNCTION__);
   d4642:	f003 fe8d 	bl	d8360 <_Z16_fetch_usbserialv>
   d4646:	4a08      	ldr	r2, [pc, #32]	; (d4668 <_Z13telemetrySendPKcS0_z+0x98>)
   d4648:	490d      	ldr	r1, [pc, #52]	; (d4680 <_Z13telemetrySendPKcS0_z+0xb0>)
   d464a:	e003      	b.n	d4654 <_Z13telemetrySendPKcS0_z+0x84>
        }
        else
        {
          Serial.printlnf("[%s] MQTT FAILED to connect",__FUNCTION__);    
   d464c:	f003 fe88 	bl	d8360 <_Z16_fetch_usbserialv>
   d4650:	4a05      	ldr	r2, [pc, #20]	; (d4668 <_Z13telemetrySendPKcS0_z+0x98>)
   d4652:	490c      	ldr	r1, [pc, #48]	; (d4684 <_Z13telemetrySendPKcS0_z+0xb4>)
   d4654:	f7ff ffa4 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
        }
      }
#endif      
}
   d4658:	b043      	add	sp, #268	; 0x10c
   d465a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d465e:	b003      	add	sp, #12
   d4660:	4770      	bx	lr
   d4662:	bf00      	nop
   d4664:	2003dbb8 	.word	0x2003dbb8
   d4668:	000d9dc4 	.word	0x000d9dc4
   d466c:	000d9ee0 	.word	0x000d9ee0
   d4670:	000d9efd 	.word	0x000d9efd
   d4674:	000d9f0c 	.word	0x000d9f0c
   d4678:	000d9f23 	.word	0x000d9f23
   d467c:	000d9f12 	.word	0x000d9f12
   d4680:	000d9f16 	.word	0x000d9f16
   d4684:	000d9f29 	.word	0x000d9f29

000d4688 <setup>:
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
}



void setup() {
   d4688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Serial.begin(115200);
   d468a:	f003 fe69 	bl	d8360 <_Z16_fetch_usbserialv>
   d468e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4692:	f003 fe59 	bl	d8348 <_ZN9USBSerial5beginEl>

  Serial.printlnf("setup()\n");
   d4696:	f003 fe63 	bl	d8360 <_Z16_fetch_usbserialv>
   d469a:	2101      	movs	r1, #1
   d469c:	4a68      	ldr	r2, [pc, #416]	; (d4840 <setup+0x1b8>)
   d469e:	f004 f991 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>

  //Serial.printlnf("[%s]wating for wifi",__FUNCTION__);    
  //waitUntil(WiFi.ready);
  //Serial.printlnf("[%s]wating for wifi ready",__FUNCTION__);    

  if(!bno.begin())
   d46a2:	210c      	movs	r1, #12
   d46a4:	4867      	ldr	r0, [pc, #412]	; (d4844 <setup+0x1bc>)
   d46a6:	f002 fb7e 	bl	d6da6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d46aa:	b928      	cbnz	r0, d46b8 <setup+0x30>
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d46ac:	f003 fe58 	bl	d8360 <_Z16_fetch_usbserialv>
   d46b0:	4965      	ldr	r1, [pc, #404]	; (d4848 <setup+0x1c0>)
   d46b2:	f004 f87c 	bl	d87ae <_ZN5Print5printEPKc>
   d46b6:	e7fe      	b.n	d46b6 <setup+0x2e>
    while(1) ;
  }
  //bno.setExtCrystalUse(true);

  delay(100);
   d46b8:	2064      	movs	r0, #100	; 0x64
   d46ba:	f004 f84f 	bl	d875c <delay>
  Serial.printlnf("[%s]bno ready",__FUNCTION__);    
   d46be:	f003 fe4f 	bl	d8360 <_Z16_fetch_usbserialv>
   d46c2:	4a62      	ldr	r2, [pc, #392]	; (d484c <setup+0x1c4>)
   d46c4:	4962      	ldr	r1, [pc, #392]	; (d4850 <setup+0x1c8>)
   d46c6:	f7ff ff6b 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  RGB.control(true);
   d46ca:	2001      	movs	r0, #1
   d46cc:	f003 ff98 	bl	d8600 <_ZN8RGBClass7controlEb>
  Serial.printlnf("[%s]rgb ready",__FUNCTION__);    
   d46d0:	f003 fe46 	bl	d8360 <_Z16_fetch_usbserialv>
   d46d4:	4a5d      	ldr	r2, [pc, #372]	; (d484c <setup+0x1c4>)
   d46d6:	495f      	ldr	r1, [pc, #380]	; (d4854 <setup+0x1cc>)
   d46d8:	f7ff ff62 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d46dc:	4668      	mov	r0, sp
   d46de:	f002 ff91 	bl	d7604 <spark_deviceID>

#ifdef MQTT_ENABLE
  // connect to the server
  MQTTclient.connect(System.deviceID());
   d46e2:	9900      	ldr	r1, [sp, #0]
   d46e4:	485c      	ldr	r0, [pc, #368]	; (d4858 <setup+0x1d0>)
   d46e6:	f002 f8e3 	bl	d68b0 <_ZN4MQTT7connectEPKc>
   d46ea:	4668      	mov	r0, sp
   d46ec:	f004 f9c0 	bl	d8a70 <_ZN6StringD1Ev>
  Serial.printlnf("[%s]mqtt ready",__FUNCTION__);    
   d46f0:	f003 fe36 	bl	d8360 <_Z16_fetch_usbserialv>
   d46f4:	4a55      	ldr	r2, [pc, #340]	; (d484c <setup+0x1c4>)
   d46f6:	4959      	ldr	r1, [pc, #356]	; (d485c <setup+0x1d4>)
   d46f8:	f7ff ff52 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  // publish/subscribe
  if (MQTTclient.isConnected()) {
   d46fc:	4856      	ldr	r0, [pc, #344]	; (d4858 <setup+0x1d0>)
   d46fe:	f001 fff3 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d4702:	b168      	cbz	r0, d4720 <setup+0x98>
    MQTTclient.subscribe("color");//color is the topic that photon is subscribed
   d4704:	4956      	ldr	r1, [pc, #344]	; (d4860 <setup+0x1d8>)
   d4706:	4854      	ldr	r0, [pc, #336]	; (d4858 <setup+0x1d0>)
   d4708:	f002 fac5 	bl	d6c96 <_ZN4MQTT9subscribeEPKc>
    MQTTclient.publish("fun", "hello");//publishing a data "hello" to the topic "fun"
   d470c:	4a55      	ldr	r2, [pc, #340]	; (d4864 <setup+0x1dc>)
   d470e:	4956      	ldr	r1, [pc, #344]	; (d4868 <setup+0x1e0>)
   d4710:	4851      	ldr	r0, [pc, #324]	; (d4858 <setup+0x1d0>)
   d4712:	f002 f94d 	bl	d69b0 <_ZN4MQTT7publishEPKcS1_>
    Serial.printlnf("[%s] publish hello",__FUNCTION__);
   d4716:	f003 fe23 	bl	d8360 <_Z16_fetch_usbserialv>
   d471a:	4a4c      	ldr	r2, [pc, #304]	; (d484c <setup+0x1c4>)
   d471c:	4953      	ldr	r1, [pc, #332]	; (d486c <setup+0x1e4>)
   d471e:	e003      	b.n	d4728 <setup+0xa0>
  }
  else
  {
    Serial.printlnf("[%s] MQTT FAILED to connect",__FUNCTION__);    
   d4720:	f003 fe1e 	bl	d8360 <_Z16_fetch_usbserialv>
   d4724:	4a49      	ldr	r2, [pc, #292]	; (d484c <setup+0x1c4>)
   d4726:	4952      	ldr	r1, [pc, #328]	; (d4870 <setup+0x1e8>)
   d4728:	f7ff ff3a 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  }
#endif

	device.begin();
   d472c:	4851      	ldr	r0, [pc, #324]	; (d4874 <setup+0x1ec>)
   d472e:	f002 fc9f 	bl	d7070 <_ZN8I2CSlave5beginEv>
  Serial.printlnf("[%s]i2c slave ready",__FUNCTION__);    
   d4732:	f003 fe15 	bl	d8360 <_Z16_fetch_usbserialv>
   d4736:	4a45      	ldr	r2, [pc, #276]	; (d484c <setup+0x1c4>)
   d4738:	494f      	ldr	r1, [pc, #316]	; (d4878 <setup+0x1f0>)
   d473a:	f7ff ff31 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  SleepStateInit();
   d473e:	f7ff ff35 	bl	d45ac <_Z14SleepStateInitv>
  Serial.printlnf("[%s]low power ready",__FUNCTION__);    
   d4742:	f003 fe0d 	bl	d8360 <_Z16_fetch_usbserialv>
   d4746:	4a41      	ldr	r2, [pc, #260]	; (d484c <setup+0x1c4>)
   d4748:	494c      	ldr	r1, [pc, #304]	; (d487c <setup+0x1f4>)
   d474a:	f7ff ff29 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  delay(1000);
#endif



  IBus.begin(Serial1);
   d474e:	f003 fd7f 	bl	d8250 <_Z22__fetch_global_Serial1v>
   d4752:	4601      	mov	r1, r0
   d4754:	484a      	ldr	r0, [pc, #296]	; (d4880 <setup+0x1f8>)
   d4756:	f001 fe1f 	bl	d6398 <_ZN10FlySkyIBus5beginER11USARTSerial>
  Serial.printlnf("[%s]ibus ready",__FUNCTION__);    
   d475a:	f003 fe01 	bl	d8360 <_Z16_fetch_usbserialv>
   d475e:	4a3b      	ldr	r2, [pc, #236]	; (d484c <setup+0x1c4>)
   d4760:	4948      	ldr	r1, [pc, #288]	; (d4884 <setup+0x1fc>)
   d4762:	f7ff ff1d 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  Serial.printlnf(__FUNCTION__);
   d4766:	f003 fdfb 	bl	d8360 <_Z16_fetch_usbserialv>
   d476a:	4a38      	ldr	r2, [pc, #224]	; (d484c <setup+0x1c4>)
   d476c:	2101      	movs	r1, #1
   d476e:	f004 f929 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
  
  shield.begin();
   d4772:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   d4776:	4844      	ldr	r0, [pc, #272]	; (d4888 <setup+0x200>)
   d4778:	f001 fc4f 	bl	d601a <_ZN20Adafruit_MotorShield5beginEt>

  balanceSetpoint=0;
   d477c:	4b43      	ldr	r3, [pc, #268]	; (d488c <setup+0x204>)
  balancePID.SetMode(PID::AUTOMATIC);
   d477e:	4844      	ldr	r0, [pc, #272]	; (d4890 <setup+0x208>)

  Serial.printlnf(__FUNCTION__);
  
  shield.begin();

  balanceSetpoint=0;
   d4780:	2400      	movs	r4, #0
   d4782:	2500      	movs	r5, #0
  balancePID.SetMode(PID::AUTOMATIC);
   d4784:	2101      	movs	r1, #1

  Serial.printlnf(__FUNCTION__);
  
  shield.begin();

  balanceSetpoint=0;
   d4786:	e9c3 4500 	strd	r4, r5, [r3]
  balancePID.SetMode(PID::AUTOMATIC);
   d478a:	f001 f99f 	bl	d5acc <_ZN3PID7SetModeENS_6mode_tE>
  balancePID.SetOutputLimits(-255, 255);
   d478e:	ed9f 1b28 	vldr	d1, [pc, #160]	; d4830 <setup+0x1a8>
   d4792:	ed9f 0b29 	vldr	d0, [pc, #164]	; d4838 <setup+0x1b0>
   d4796:	483e      	ldr	r0, [pc, #248]	; (d4890 <setup+0x208>)
   d4798:	f001 f92e 	bl	d59f8 <_ZN3PID15SetOutputLimitsEdd>
  balancePID.SetSampleTime(50);
   d479c:	2132      	movs	r1, #50	; 0x32
   d479e:	483c      	ldr	r0, [pc, #240]	; (d4890 <setup+0x208>)
   d47a0:	f001 f904 	bl	d59ac <_ZN3PID13SetSampleTimeEi>

  leftSetpoint=0;
   d47a4:	4b3b      	ldr	r3, [pc, #236]	; (d4894 <setup+0x20c>)
   d47a6:	e9c3 4500 	strd	r4, r5, [r3]
  rightSetpoint=0;
   d47aa:	4b3b      	ldr	r3, [pc, #236]	; (d4898 <setup+0x210>)
   d47ac:	e9c3 4500 	strd	r4, r5, [r3]

  speed=0;
   d47b0:	4b3a      	ldr	r3, [pc, #232]	; (d489c <setup+0x214>)
   d47b2:	2600      	movs	r6, #0
   d47b4:	601e      	str	r6, [r3, #0]
   d47b6:	4b3a      	ldr	r3, [pc, #232]	; (d48a0 <setup+0x218>)
   d47b8:	4631      	mov	r1, r6
   d47ba:	6818      	ldr	r0, [r3, #0]
   d47bc:	f7ff fd42 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.2>
  leftPower=setPwm( leftMotor, 0);
   d47c0:	4b38      	ldr	r3, [pc, #224]	; (d48a4 <setup+0x21c>)
   d47c2:	e9c3 4500 	strd	r4, r5, [r3]
   d47c6:	4b38      	ldr	r3, [pc, #224]	; (d48a8 <setup+0x220>)
   d47c8:	4631      	mov	r1, r6
   d47ca:	6818      	ldr	r0, [r3, #0]
   d47cc:	f7ff fd3a 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.2>
  rightPower=setPwm( rightMotor, 0);
   d47d0:	4b36      	ldr	r3, [pc, #216]	; (d48ac <setup+0x224>)

  leftPID.SetMode(PID::AUTOMATIC);
   d47d2:	4837      	ldr	r0, [pc, #220]	; (d48b0 <setup+0x228>)
   d47d4:	2101      	movs	r1, #1
  leftSetpoint=0;
  rightSetpoint=0;

  speed=0;
  leftPower=setPwm( leftMotor, 0);
  rightPower=setPwm( rightMotor, 0);
   d47d6:	e9c3 4500 	strd	r4, r5, [r3]

  leftPID.SetMode(PID::AUTOMATIC);
   d47da:	f001 f977 	bl	d5acc <_ZN3PID7SetModeENS_6mode_tE>
  leftPID.SetOutputLimits(-255, 255);
   d47de:	ed9f 1b14 	vldr	d1, [pc, #80]	; d4830 <setup+0x1a8>
   d47e2:	ed9f 0b15 	vldr	d0, [pc, #84]	; d4838 <setup+0x1b0>
   d47e6:	4832      	ldr	r0, [pc, #200]	; (d48b0 <setup+0x228>)
   d47e8:	f001 f906 	bl	d59f8 <_ZN3PID15SetOutputLimitsEdd>
  leftPID.SetSampleTime(100);
   d47ec:	2164      	movs	r1, #100	; 0x64
   d47ee:	4830      	ldr	r0, [pc, #192]	; (d48b0 <setup+0x228>)
   d47f0:	f001 f8dc 	bl	d59ac <_ZN3PID13SetSampleTimeEi>

  rightPID.SetMode(PID::AUTOMATIC);
   d47f4:	2101      	movs	r1, #1
   d47f6:	482f      	ldr	r0, [pc, #188]	; (d48b4 <setup+0x22c>)
   d47f8:	f001 f968 	bl	d5acc <_ZN3PID7SetModeENS_6mode_tE>
  rightPID.SetOutputLimits(-255, 255);
   d47fc:	ed9f 1b0c 	vldr	d1, [pc, #48]	; d4830 <setup+0x1a8>
   d4800:	ed9f 0b0d 	vldr	d0, [pc, #52]	; d4838 <setup+0x1b0>
   d4804:	482b      	ldr	r0, [pc, #172]	; (d48b4 <setup+0x22c>)
   d4806:	f001 f8f7 	bl	d59f8 <_ZN3PID15SetOutputLimitsEdd>
  rightPID.SetSampleTime(100);
   d480a:	2164      	movs	r1, #100	; 0x64
   d480c:	4829      	ldr	r0, [pc, #164]	; (d48b4 <setup+0x22c>)
   d480e:	f001 f8cd 	bl	d59ac <_ZN3PID13SetSampleTimeEi>
  Serial.printlnf("[%s]pids ready",__FUNCTION__);    
   d4812:	f003 fda5 	bl	d8360 <_Z16_fetch_usbserialv>
   d4816:	4a0d      	ldr	r2, [pc, #52]	; (d484c <setup+0x1c4>)
   d4818:	4927      	ldr	r1, [pc, #156]	; (d48b8 <setup+0x230>)
   d481a:	f7ff fec1 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  
  Serial.printlnf("setup( complete )\n");
   d481e:	f003 fd9f 	bl	d8360 <_Z16_fetch_usbserialv>
   d4822:	4a26      	ldr	r2, [pc, #152]	; (d48bc <setup+0x234>)
   d4824:	2101      	movs	r1, #1
   d4826:	f004 f8cd 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>

}
   d482a:	b004      	add	sp, #16
   d482c:	bd70      	pop	{r4, r5, r6, pc}
   d482e:	bf00      	nop
   d4830:	00000000 	.word	0x00000000
   d4834:	406fe000 	.word	0x406fe000
   d4838:	00000000 	.word	0x00000000
   d483c:	c06fe000 	.word	0xc06fe000
   d4840:	000d9f45 	.word	0x000d9f45
   d4844:	2003dcd0 	.word	0x2003dcd0
   d4848:	000d9f4e 	.word	0x000d9f4e
   d484c:	000d9dd2 	.word	0x000d9dd2
   d4850:	000d9f8b 	.word	0x000d9f8b
   d4854:	000d9f99 	.word	0x000d9f99
   d4858:	2003dbb8 	.word	0x2003dbb8
   d485c:	000d9efd 	.word	0x000d9efd
   d4860:	000d9f0c 	.word	0x000d9f0c
   d4864:	000d9f23 	.word	0x000d9f23
   d4868:	000d9f12 	.word	0x000d9f12
   d486c:	000d9f16 	.word	0x000d9f16
   d4870:	000d9f29 	.word	0x000d9f29
   d4874:	2003db94 	.word	0x2003db94
   d4878:	000d9fa7 	.word	0x000d9fa7
   d487c:	000d9fbb 	.word	0x000d9fbb
   d4880:	2003e2d8 	.word	0x2003e2d8
   d4884:	000d9fcf 	.word	0x000d9fcf
   d4888:	2003ddd8 	.word	0x2003ddd8
   d488c:	2003dcc8 	.word	0x2003dcc8
   d4890:	2003dc30 	.word	0x2003dc30
   d4894:	2003dcb8 	.word	0x2003dcb8
   d4898:	2003dda0 	.word	0x2003dda0
   d489c:	2003de50 	.word	0x2003de50
   d48a0:	2003dd0c 	.word	0x2003dd0c
   d48a4:	2003dbb0 	.word	0x2003dbb0
   d48a8:	2003dc10 	.word	0x2003dc10
   d48ac:	2003dd90 	.word	0x2003dd90
   d48b0:	2003de70 	.word	0x2003de70
   d48b4:	2003dd18 	.word	0x2003dd18
   d48b8:	000d9fde 	.word	0x000d9fde
   d48bc:	000d9fed 	.word	0x000d9fed

000d48c0 <loop>:
}



void loop() 
{
   d48c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48c4:	ed2d 8b0c 	vpush	{d8-d13}
   d48c8:	b09b      	sub	sp, #108	; 0x6c
  static bool TxOn=false;

  SleepStateCheck();
   d48ca:	f7ff fe3f 	bl	d454c <_Z15SleepStateCheckv>

	uint16_t regAddr;
	while(device.getRegisterSet(regAddr)) {
   d48ce:	f10d 0142 	add.w	r1, sp, #66	; 0x42
   d48d2:	48a3      	ldr	r0, [pc, #652]	; (d4b60 <loop+0x2a0>)
   d48d4:	f002 fbef 	bl	d70b6 <_ZN8I2CSlave14getRegisterSetERt>
   d48d8:	b180      	cbz	r0, d48fc <loop+0x3c>
		// regAddr was updated from the I2C master
		Serial.printlnf("master updated %u to %u", regAddr, device.getRegister(regAddr));
   d48da:	f003 fd41 	bl	d8360 <_Z16_fetch_usbserialv>
   d48de:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
   d48e2:	4605      	mov	r5, r0
   d48e4:	4621      	mov	r1, r4
   d48e6:	489e      	ldr	r0, [pc, #632]	; (d4b60 <loop+0x2a0>)
   d48e8:	f002 fbd6 	bl	d7098 <_ZNK8I2CSlave11getRegisterEt>
   d48ec:	4623      	mov	r3, r4
   d48ee:	9000      	str	r0, [sp, #0]
   d48f0:	4a9c      	ldr	r2, [pc, #624]	; (d4b64 <loop+0x2a4>)
   d48f2:	2101      	movs	r1, #1
   d48f4:	4628      	mov	r0, r5
   d48f6:	f004 f865 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
   d48fa:	e7e8      	b.n	d48ce <loop+0xe>
	}

#ifdef MQTT_ENABLE
  if (MQTTclient.isConnected())
   d48fc:	489a      	ldr	r0, [pc, #616]	; (d4b68 <loop+0x2a8>)
   d48fe:	f001 fef3 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d4902:	b118      	cbz	r0, d490c <loop+0x4c>
  {
    MQTTclient.loop();
   d4904:	4898      	ldr	r0, [pc, #608]	; (d4b68 <loop+0x2a8>)
   d4906:	f002 f89a 	bl	d6a3e <_ZN4MQTT4loopEv>
   d490a:	e02d      	b.n	d4968 <loop+0xa8>
  }
  else
  {
    Serial.printlnf("[%s]client failed to connect",__FUNCTION__);
   d490c:	f003 fd28 	bl	d8360 <_Z16_fetch_usbserialv>
   d4910:	4a96      	ldr	r2, [pc, #600]	; (d4b6c <loop+0x2ac>)
   d4912:	4997      	ldr	r1, [pc, #604]	; (d4b70 <loop+0x2b0>)
   d4914:	f7ff fe44 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d4918:	a811      	add	r0, sp, #68	; 0x44
   d491a:	f002 fe73 	bl	d7604 <spark_deviceID>
  #ifdef MQTT_ENABLE
    // connect to the server
    MQTTclient.connect(System.deviceID());
   d491e:	9911      	ldr	r1, [sp, #68]	; 0x44
   d4920:	4891      	ldr	r0, [pc, #580]	; (d4b68 <loop+0x2a8>)
   d4922:	f001 ffc5 	bl	d68b0 <_ZN4MQTT7connectEPKc>
   d4926:	a811      	add	r0, sp, #68	; 0x44
   d4928:	f004 f8a2 	bl	d8a70 <_ZN6StringD1Ev>
    Serial.printlnf("[%s]mqtt ready",__FUNCTION__);    
   d492c:	f003 fd18 	bl	d8360 <_Z16_fetch_usbserialv>
   d4930:	4a8e      	ldr	r2, [pc, #568]	; (d4b6c <loop+0x2ac>)
   d4932:	4990      	ldr	r1, [pc, #576]	; (d4b74 <loop+0x2b4>)
   d4934:	f7ff fe34 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

    // publish/subscribe
    if (MQTTclient.isConnected()) {
   d4938:	488b      	ldr	r0, [pc, #556]	; (d4b68 <loop+0x2a8>)
   d493a:	f001 fed5 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d493e:	b168      	cbz	r0, d495c <loop+0x9c>
      MQTTclient.subscribe("color");//color is the topic that photon is subscribed
   d4940:	498d      	ldr	r1, [pc, #564]	; (d4b78 <loop+0x2b8>)
   d4942:	4889      	ldr	r0, [pc, #548]	; (d4b68 <loop+0x2a8>)
   d4944:	f002 f9a7 	bl	d6c96 <_ZN4MQTT9subscribeEPKc>
      MQTTclient.publish("fun", "hello");//publishing a data "hello" to the topic "fun"
   d4948:	4a8c      	ldr	r2, [pc, #560]	; (d4b7c <loop+0x2bc>)
   d494a:	498d      	ldr	r1, [pc, #564]	; (d4b80 <loop+0x2c0>)
   d494c:	4886      	ldr	r0, [pc, #536]	; (d4b68 <loop+0x2a8>)
   d494e:	f002 f82f 	bl	d69b0 <_ZN4MQTT7publishEPKcS1_>
      Serial.printlnf("[%s] publish hello",__FUNCTION__);
   d4952:	f003 fd05 	bl	d8360 <_Z16_fetch_usbserialv>
   d4956:	4a85      	ldr	r2, [pc, #532]	; (d4b6c <loop+0x2ac>)
   d4958:	498a      	ldr	r1, [pc, #552]	; (d4b84 <loop+0x2c4>)
   d495a:	e003      	b.n	d4964 <loop+0xa4>
    }
    else
    {
      Serial.printlnf("[%s] MQTT FAILED to connect",__FUNCTION__);    
   d495c:	f003 fd00 	bl	d8360 <_Z16_fetch_usbserialv>
   d4960:	4a82      	ldr	r2, [pc, #520]	; (d4b6c <loop+0x2ac>)
   d4962:	4989      	ldr	r1, [pc, #548]	; (d4b88 <loop+0x2c8>)
   d4964:	f7ff fe1c 	bl	d45a0 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
#endif


  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d4968:	a911      	add	r1, sp, #68	; 0x44
   d496a:	4888      	ldr	r0, [pc, #544]	; (d4b8c <loop+0x2cc>)
#if 1
  static double prevZ=0.0;

  if ( prevZ != event.orientation.z )
   d496c:	4c88      	ldr	r4, [pc, #544]	; (d4b90 <loop+0x2d0>)
#endif


  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d496e:	f002 fb19 	bl	d6fa4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
#if 1
  static double prevZ=0.0;

  if ( prevZ != event.orientation.z )
   d4972:	9818      	ldr	r0, [sp, #96]	; 0x60
   d4974:	f004 fe10 	bl	d9598 <__aeabi_f2d>
   d4978:	e9d4 2300 	ldrd	r2, r3, [r4]
   d497c:	f005 f8c8 	bl	d9b10 <__aeabi_dcmpeq>
   d4980:	4605      	mov	r5, r0
   d4982:	2800      	cmp	r0, #0
   d4984:	d144      	bne.n	d4a10 <loop+0x150>
    bno.getCalibration(&system, &gyro, &accel, &mag);
    Serial.printlnf("CALIBRATION: Sys=%d\tGyro=%d\tAccel=%d\tMag=%d", system, gyro, accel, mag );
    imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
    Serial.printlnf("X: %f\tY: %f\tZ: %f", euler.x(), euler.y(), euler.z() );
#else
    VERBOSE( Serial.printlnf("(%d) Z: %f", millis(), event.orientation.z ) );
   d4986:	f003 fceb 	bl	d8360 <_Z16_fetch_usbserialv>
   d498a:	4606      	mov	r6, r0
   d498c:	f002 fd92 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4990:	4607      	mov	r7, r0
   d4992:	9818      	ldr	r0, [sp, #96]	; 0x60
   d4994:	f004 fe00 	bl	d9598 <__aeabi_f2d>
   d4998:	463b      	mov	r3, r7
   d499a:	e9cd 0100 	strd	r0, r1, [sp]
   d499e:	4a7d      	ldr	r2, [pc, #500]	; (d4b94 <loop+0x2d4>)
   d49a0:	2101      	movs	r1, #1
   d49a2:	4630      	mov	r0, r6
   d49a4:	f004 f80e 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>

    //VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));
   d49a8:	ed9f 7a7b 	vldr	s14, [pc, #492]	; d4b98 <loop+0x2d8>
   d49ac:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
   d49b0:	486b      	ldr	r0, [pc, #428]	; (d4b60 <loop+0x2a0>)
   d49b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   d49b6:	4629      	mov	r1, r5
   d49b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d49bc:	ee17 2a90 	vmov	r2, s15
   d49c0:	f002 fb72 	bl	d70a8 <_ZN8I2CSlave11setRegisterEtm>
   d49c4:	f002 fd76 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d49c8:	4605      	mov	r5, r0

    telemetrySend( "imu", "{ '_time': '%lu', 'type': 'imu', 'X': '%f', 'Y':'%f', Z' : '%f' }",millis(), event.orientation.x, event.orientation.y, event.orientation.z );
   d49ca:	9818      	ldr	r0, [sp, #96]	; 0x60
   d49cc:	f004 fde4 	bl	d9598 <__aeabi_f2d>
   d49d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d49d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   d49d6:	f004 fddf 	bl	d9598 <__aeabi_f2d>
   d49da:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d49de:	9816      	ldr	r0, [sp, #88]	; 0x58
   d49e0:	f004 fdda 	bl	d9598 <__aeabi_f2d>
   d49e4:	462a      	mov	r2, r5
   d49e6:	e9cd 0100 	strd	r0, r1, [sp]
   d49ea:	496c      	ldr	r1, [pc, #432]	; (d4b9c <loop+0x2dc>)
   d49ec:	486c      	ldr	r0, [pc, #432]	; (d4ba0 <loop+0x2e0>)
   d49ee:	f7ff fdef 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
    balanceInput=balanceCorrection( event.orientation.z );
   d49f2:	9818      	ldr	r0, [sp, #96]	; 0x60
   d49f4:	f004 fdd0 	bl	d9598 <__aeabi_f2d>
   d49f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d49fc:	2200      	movs	r2, #0
   d49fe:	4606      	mov	r6, r0
   d4a00:	460f      	mov	r7, r1
   d4a02:	f004 fc69 	bl	d92d8 <__aeabi_dsub>
   d4a06:	4b67      	ldr	r3, [pc, #412]	; (d4ba4 <loop+0x2e4>)

    prevZ = event.orientation.z;
   d4a08:	e9c4 6700 	strd	r6, r7, [r4]

    //VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));

    telemetrySend( "imu", "{ '_time': '%lu', 'type': 'imu', 'X': '%f', 'Y':'%f', Z' : '%f' }",millis(), event.orientation.x, event.orientation.y, event.orientation.z );
    balanceInput=balanceCorrection( event.orientation.z );
   d4a0c:	e9c3 0100 	strd	r0, r1, [r3]

#endif

  //if ( digitalRead(RX_ENABLE) ) 
  { 
    IBus.loop();
   d4a10:	4865      	ldr	r0, [pc, #404]	; (d4ba8 <loop+0x2e8>)
   d4a12:	f001 fccf 	bl	d63b4 <_ZN10FlySkyIBus4loopEv>
   d4a16:	f002 fd4d 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>

    // TX ON ( top left switch )
    telemetrySend( "iBus", "{ \"_time\": \"%lu\", \"type\":\"iBus\", \"name\":\"iBus\", \"0\" : \"%x\", \"1\"  : \"%x\", \"2\" : \"%x\", \"3\":\"%x\", \"4\":\"%x\", \"5\":\"%x\", \"6\":\"%x\", \"7\":\"%x\", \"8\":\"%x\", \"9\":\"%x\" }", millis(), IBus.readChannel(0),IBus.readChannel(1),IBus.readChannel(2),IBus.readChannel(3),IBus.readChannel(4),IBus.readChannel(5),IBus.readChannel(6),IBus.readChannel(7),IBus.readChannel(8),IBus.readChannel(9) );
   d4a1a:	2100      	movs	r1, #0
   d4a1c:	4604      	mov	r4, r0
   d4a1e:	4862      	ldr	r0, [pc, #392]	; (d4ba8 <loop+0x2e8>)
   d4a20:	f001 fd2a 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a24:	2101      	movs	r1, #1
   d4a26:	4605      	mov	r5, r0
   d4a28:	485f      	ldr	r0, [pc, #380]	; (d4ba8 <loop+0x2e8>)
   d4a2a:	f001 fd25 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a2e:	2102      	movs	r1, #2
   d4a30:	4606      	mov	r6, r0
   d4a32:	485d      	ldr	r0, [pc, #372]	; (d4ba8 <loop+0x2e8>)
   d4a34:	f001 fd20 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a38:	2103      	movs	r1, #3
   d4a3a:	4607      	mov	r7, r0
   d4a3c:	485a      	ldr	r0, [pc, #360]	; (d4ba8 <loop+0x2e8>)
   d4a3e:	f001 fd1b 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a42:	2104      	movs	r1, #4
   d4a44:	4680      	mov	r8, r0
   d4a46:	4858      	ldr	r0, [pc, #352]	; (d4ba8 <loop+0x2e8>)
   d4a48:	f001 fd16 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a4c:	2105      	movs	r1, #5
   d4a4e:	4681      	mov	r9, r0
   d4a50:	4855      	ldr	r0, [pc, #340]	; (d4ba8 <loop+0x2e8>)
   d4a52:	f001 fd11 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a56:	2106      	movs	r1, #6
   d4a58:	4682      	mov	sl, r0
   d4a5a:	4853      	ldr	r0, [pc, #332]	; (d4ba8 <loop+0x2e8>)
   d4a5c:	f001 fd0c 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a60:	2107      	movs	r1, #7
   d4a62:	4683      	mov	fp, r0
   d4a64:	4850      	ldr	r0, [pc, #320]	; (d4ba8 <loop+0x2e8>)
   d4a66:	f001 fd07 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a6a:	2108      	movs	r1, #8
   d4a6c:	900f      	str	r0, [sp, #60]	; 0x3c
   d4a6e:	484e      	ldr	r0, [pc, #312]	; (d4ba8 <loop+0x2e8>)
   d4a70:	f001 fd02 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a74:	2109      	movs	r1, #9
   d4a76:	900e      	str	r0, [sp, #56]	; 0x38
   d4a78:	484b      	ldr	r0, [pc, #300]	; (d4ba8 <loop+0x2e8>)
   d4a7a:	f001 fcfd 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4a82:	9008      	str	r0, [sp, #32]
   d4a84:	9207      	str	r2, [sp, #28]
   d4a86:	9306      	str	r3, [sp, #24]
   d4a88:	4622      	mov	r2, r4
   d4a8a:	e88d 03c0 	stmia.w	sp, {r6, r7, r8, r9}
   d4a8e:	462b      	mov	r3, r5
   d4a90:	4946      	ldr	r1, [pc, #280]	; (d4bac <loop+0x2ec>)
   d4a92:	4847      	ldr	r0, [pc, #284]	; (d4bb0 <loop+0x2f0>)
   d4a94:	f8cd b014 	str.w	fp, [sp, #20]
   d4a98:	f8cd a010 	str.w	sl, [sp, #16]
   d4a9c:	f7ff fd98 	bl	d45d0 <_Z13telemetrySendPKcS0_z>

    if ( IBus.readChannel(5)==0x7d0 )
   d4aa0:	2105      	movs	r1, #5
   d4aa2:	4841      	ldr	r0, [pc, #260]	; (d4ba8 <loop+0x2e8>)
   d4aa4:	4e43      	ldr	r6, [pc, #268]	; (d4bb4 <loop+0x2f4>)
   d4aa6:	4c44      	ldr	r4, [pc, #272]	; (d4bb8 <loop+0x2f8>)
   d4aa8:	f001 fce6 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4aac:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4ab0:	f040 8092 	bne.w	d4bd8 <loop+0x318>
    {
      static double prevLeftSetpoint=-1;
      static double prevRightSetpoint=-1;
      
      TxOn=true;
   d4ab4:	2101      	movs	r1, #1
      mode=DRIVE;

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d4ab6:	483c      	ldr	r0, [pc, #240]	; (d4ba8 <loop+0x2e8>)
    if ( IBus.readChannel(5)==0x7d0 )
    {
      static double prevLeftSetpoint=-1;
      static double prevRightSetpoint=-1;
      
      TxOn=true;
   d4ab8:	7031      	strb	r1, [r6, #0]
      mode=DRIVE;
   d4aba:	7021      	strb	r1, [r4, #0]

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d4abc:	f001 fcdc 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4ac0:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4ac4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4ac8:	da04      	bge.n	d4ad4 <loop+0x214>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d4aca:	4b3c      	ldr	r3, [pc, #240]	; (d4bbc <loop+0x2fc>)
   d4acc:	4298      	cmp	r0, r3
   d4ace:	bfb8      	it	lt
   d4ad0:	4618      	movlt	r0, r3
   d4ad2:	e001      	b.n	d4ad8 <loop+0x218>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4ad8:	f004 fd4c 	bl	d9574 <__aeabi_i2d>
   d4adc:	4d38      	ldr	r5, [pc, #224]	; (d4bc0 <loop+0x300>)
      if ( rightSetpoint != prevRightSetpoint ) {
   d4ade:	4e39      	ldr	r6, [pc, #228]	; (d4bc4 <loop+0x304>)
      
      TxOn=true;
      mode=DRIVE;

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d4ae0:	e9c5 0100 	strd	r0, r1, [r5]
      if ( rightSetpoint != prevRightSetpoint ) {
   d4ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4ae8:	f005 f812 	bl	d9b10 <__aeabi_dcmpeq>
   d4aec:	b968      	cbnz	r0, d4b0a <loop+0x24a>
        Serial.printlnf("rightSetpoint from RX = %f", rightSetpoint );
   d4aee:	f003 fc37 	bl	d8360 <_Z16_fetch_usbserialv>
   d4af2:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4af6:	2101      	movs	r1, #1
   d4af8:	e9cd 2300 	strd	r2, r3, [sp]
   d4afc:	4a32      	ldr	r2, [pc, #200]	; (d4bc8 <loop+0x308>)
   d4afe:	f003 ff61 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
        prevRightSetpoint=rightSetpoint;
   d4b02:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4b06:	e9c6 2300 	strd	r2, r3, [r6]
      }

      // left
      leftSetpoint=double(max( min( IBus.readChannel(2)-0x5dc, SPEED_MAX ), SPEED_MIN ));
   d4b0a:	2102      	movs	r1, #2
   d4b0c:	4826      	ldr	r0, [pc, #152]	; (d4ba8 <loop+0x2e8>)
   d4b0e:	f001 fcb3 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4b12:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
   d4b16:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4b1a:	da04      	bge.n	d4b26 <loop+0x266>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d4b1c:	4b27      	ldr	r3, [pc, #156]	; (d4bbc <loop+0x2fc>)
   d4b1e:	4298      	cmp	r0, r3
   d4b20:	bfb8      	it	lt
   d4b22:	4618      	movlt	r0, r3
   d4b24:	e001      	b.n	d4b2a <loop+0x26a>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4b26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4b2a:	f004 fd23 	bl	d9574 <__aeabi_i2d>
   d4b2e:	4d27      	ldr	r5, [pc, #156]	; (d4bcc <loop+0x30c>)
      if ( leftSetpoint != prevLeftSetpoint ){
   d4b30:	4e27      	ldr	r6, [pc, #156]	; (d4bd0 <loop+0x310>)
        Serial.printlnf("rightSetpoint from RX = %f", rightSetpoint );
        prevRightSetpoint=rightSetpoint;
      }

      // left
      leftSetpoint=double(max( min( IBus.readChannel(2)-0x5dc, SPEED_MAX ), SPEED_MIN ));
   d4b32:	e9c5 0100 	strd	r0, r1, [r5]
      if ( leftSetpoint != prevLeftSetpoint ){
   d4b36:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4b3a:	f004 ffe9 	bl	d9b10 <__aeabi_dcmpeq>
   d4b3e:	2800      	cmp	r0, #0
   d4b40:	d154      	bne.n	d4bec <loop+0x32c>
        Serial.printlnf("leftSetpoint from RX = %f", leftSetpoint );
   d4b42:	f003 fc0d 	bl	d8360 <_Z16_fetch_usbserialv>
   d4b46:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4b4a:	2101      	movs	r1, #1
   d4b4c:	e9cd 2300 	strd	r2, r3, [sp]
   d4b50:	4a20      	ldr	r2, [pc, #128]	; (d4bd4 <loop+0x314>)
   d4b52:	f003 ff37 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
        prevLeftSetpoint=leftSetpoint;
   d4b56:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4b5a:	e9c6 2300 	strd	r2, r3, [r6]
   d4b5e:	e045      	b.n	d4bec <loop+0x32c>
   d4b60:	2003db94 	.word	0x2003db94
   d4b64:	000da011 	.word	0x000da011
   d4b68:	2003dbb8 	.word	0x2003dbb8
   d4b6c:	000d9e04 	.word	0x000d9e04
   d4b70:	000d9ee0 	.word	0x000d9ee0
   d4b74:	000d9efd 	.word	0x000d9efd
   d4b78:	000d9f0c 	.word	0x000d9f0c
   d4b7c:	000d9f23 	.word	0x000d9f23
   d4b80:	000d9f12 	.word	0x000d9f12
   d4b84:	000d9f16 	.word	0x000d9f16
   d4b88:	000d9f29 	.word	0x000d9f29
   d4b8c:	2003dcd0 	.word	0x2003dcd0
   d4b90:	2003ddb8 	.word	0x2003ddb8
   d4b94:	000da029 	.word	0x000da029
   d4b98:	42c80000 	.word	0x42c80000
   d4b9c:	000da034 	.word	0x000da034
   d4ba0:	000da076 	.word	0x000da076
   d4ba4:	2003dce8 	.word	0x2003dce8
   d4ba8:	2003e2d8 	.word	0x2003e2d8
   d4bac:	000da07a 	.word	0x000da07a
   d4bb0:	000da116 	.word	0x000da116
   d4bb4:	2003dca8 	.word	0x2003dca8
   d4bb8:	2003dce0 	.word	0x2003dce0
   d4bbc:	fffffe0c 	.word	0xfffffe0c
   d4bc0:	2003dda0 	.word	0x2003dda0
   d4bc4:	2003db10 	.word	0x2003db10
   d4bc8:	000da11b 	.word	0x000da11b
   d4bcc:	2003dcb8 	.word	0x2003dcb8
   d4bd0:	2003db00 	.word	0x2003db00
   d4bd4:	000da136 	.word	0x000da136
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
   d4bd8:	7833      	ldrb	r3, [r6, #0]
   d4bda:	b13b      	cbz	r3, d4bec <loop+0x32c>
   d4bdc:	2105      	movs	r1, #5
   d4bde:	489f      	ldr	r0, [pc, #636]	; (d4e5c <loop+0x59c>)
   d4be0:	f001 fc4a 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4be4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4be8:	f040 84eb 	bne.w	d55c2 <loop+0xd02>
      TxOn=false;
      speed=setTargetSpeed(0);
      mode=IDLE;
    }

    if ( IBus.readChannel(8)==0x7d0 )
   d4bec:	2108      	movs	r1, #8
   d4bee:	489b      	ldr	r0, [pc, #620]	; (d4e5c <loop+0x59c>)
   d4bf0:	f001 fc42 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4bf4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4bf8:	d12d      	bne.n	d4c56 <loop+0x396>
    {
      if( (mode!=BALANCE_INIT) && (mode!=BALANCE_ACTIVE) )
   d4bfa:	7823      	ldrb	r3, [r4, #0]
   d4bfc:	4d98      	ldr	r5, [pc, #608]	; (d4e60 <loop+0x5a0>)
   d4bfe:	3b02      	subs	r3, #2
   d4c00:	2b01      	cmp	r3, #1
   d4c02:	d90c      	bls.n	d4c1e <loop+0x35e>
      {
        mode=BALANCE_INIT;
   d4c04:	4b97      	ldr	r3, [pc, #604]	; (d4e64 <loop+0x5a4>)
   d4c06:	2202      	movs	r2, #2
   d4c08:	701a      	strb	r2, [r3, #0]
        Serial.printlnf("START balanceInput from RX = %f", balanceInput );
   d4c0a:	f003 fba9 	bl	d8360 <_Z16_fetch_usbserialv>
   d4c0e:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4c12:	2101      	movs	r1, #1
   d4c14:	e9cd 2300 	strd	r2, r3, [sp]
   d4c18:	4a93      	ldr	r2, [pc, #588]	; (d4e68 <loop+0x5a8>)
   d4c1a:	f003 fed3 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
      }
      // OK use RC input for balance target angle
      balanceInput=(90.0*(IBus.readChannel(1)-0x5dc))/500.0;
   d4c1e:	2101      	movs	r1, #1
   d4c20:	488e      	ldr	r0, [pc, #568]	; (d4e5c <loop+0x59c>)
   d4c22:	f001 fc29 	bl	d6478 <_ZN10FlySkyIBus11readChannelEh>
   d4c26:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
   d4c2a:	f004 fca3 	bl	d9574 <__aeabi_i2d>
   d4c2e:	2200      	movs	r2, #0
   d4c30:	4b8e      	ldr	r3, [pc, #568]	; (d4e6c <loop+0x5ac>)
   d4c32:	f004 fd05 	bl	d9640 <__aeabi_dmul>
   d4c36:	2200      	movs	r2, #0
   d4c38:	4b8d      	ldr	r3, [pc, #564]	; (d4e70 <loop+0x5b0>)
   d4c3a:	f004 fe2b 	bl	d9894 <__aeabi_ddiv>
   d4c3e:	e9c5 0100 	strd	r0, r1, [r5]
      Serial.printlnf("balanceInput from RX = %f", balanceInput );
   d4c42:	f003 fb8d 	bl	d8360 <_Z16_fetch_usbserialv>
   d4c46:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4c4a:	2101      	movs	r1, #1
   d4c4c:	e9cd 2300 	strd	r2, r3, [sp]
   d4c50:	4a88      	ldr	r2, [pc, #544]	; (d4e74 <loop+0x5b4>)
   d4c52:	f003 feb7 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
    }
  }



  if (Serial.available())
   d4c56:	f003 fb83 	bl	d8360 <_Z16_fetch_usbserialv>
   d4c5a:	6803      	ldr	r3, [r0, #0]
   d4c5c:	691b      	ldr	r3, [r3, #16]
   d4c5e:	4798      	blx	r3
   d4c60:	2800      	cmp	r0, #0
   d4c62:	f000 80ac 	beq.w	d4dbe <loop+0x4fe>
  {
    int inByte = Serial.read();
   d4c66:	f003 fb7b 	bl	d8360 <_Z16_fetch_usbserialv>
   d4c6a:	6803      	ldr	r3, [r0, #0]
   d4c6c:	695b      	ldr	r3, [r3, #20]
   d4c6e:	4798      	blx	r3
   d4c70:	4605      	mov	r5, r0
    VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), inByte) ) ;
   d4c72:	f003 fb75 	bl	d8360 <_Z16_fetch_usbserialv>
   d4c76:	4606      	mov	r6, r0
   d4c78:	f002 fc1c 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4c7c:	4b7e      	ldr	r3, [pc, #504]	; (d4e78 <loop+0x5b8>)
   d4c7e:	4a7f      	ldr	r2, [pc, #508]	; (d4e7c <loop+0x5bc>)
   d4c80:	e88d 0021 	stmia.w	sp, {r0, r5}
   d4c84:	2101      	movs	r1, #1
   d4c86:	4630      	mov	r0, r6
   d4c88:	f003 fe9c 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
    switch (inByte)
   d4c8c:	2d33      	cmp	r5, #51	; 0x33
   d4c8e:	d056      	beq.n	d4d3e <loop+0x47e>
   d4c90:	dc34      	bgt.n	d4cfc <loop+0x43c>
   d4c92:	2d31      	cmp	r5, #49	; 0x31
   d4c94:	d04b      	beq.n	d4d2e <loop+0x46e>
   d4c96:	dc4e      	bgt.n	d4d36 <loop+0x476>
   d4c98:	2d20      	cmp	r5, #32
   d4c9a:	f040 8090 	bne.w	d4dbe <loop+0x4fe>
    {
        case ' ':
          // reset PID
          leftPID.SetMode(PID::MANUAL);
   d4c9e:	2100      	movs	r1, #0
   d4ca0:	4877      	ldr	r0, [pc, #476]	; (d4e80 <loop+0x5c0>)
   d4ca2:	f000 ff13 	bl	d5acc <_ZN3PID7SetModeENS_6mode_tE>
          leftOutput=0;
   d4ca6:	4b77      	ldr	r3, [pc, #476]	; (d4e84 <loop+0x5c4>)
   d4ca8:	2600      	movs	r6, #0
   d4caa:	2700      	movs	r7, #0
   d4cac:	e9c3 6700 	strd	r6, r7, [r3]
          leftPower=0;
   d4cb0:	4b75      	ldr	r3, [pc, #468]	; (d4e88 <loop+0x5c8>)
   d4cb2:	e9c3 6700 	strd	r6, r7, [r3]
   d4cb6:	4b75      	ldr	r3, [pc, #468]	; (d4e8c <loop+0x5cc>)
   d4cb8:	2100      	movs	r1, #0
   d4cba:	6818      	ldr	r0, [r3, #0]
   d4cbc:	f7ff fac2 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.2>
          setPwm( leftMotor, leftOutput);

          rightPID.SetMode(PID::MANUAL);
   d4cc0:	2100      	movs	r1, #0
   d4cc2:	4873      	ldr	r0, [pc, #460]	; (d4e90 <loop+0x5d0>)
   d4cc4:	f000 ff02 	bl	d5acc <_ZN3PID7SetModeENS_6mode_tE>
          rightOutput=0;
   d4cc8:	4b72      	ldr	r3, [pc, #456]	; (d4e94 <loop+0x5d4>)
   d4cca:	e9c3 6700 	strd	r6, r7, [r3]
          rightPower=0;
   d4cce:	4b72      	ldr	r3, [pc, #456]	; (d4e98 <loop+0x5d8>)
   d4cd0:	e9c3 6700 	strd	r6, r7, [r3]
   d4cd4:	4b71      	ldr	r3, [pc, #452]	; (d4e9c <loop+0x5dc>)
   d4cd6:	2100      	movs	r1, #0
   d4cd8:	6818      	ldr	r0, [r3, #0]
   d4cda:	f7ff fab3 	bl	d4244 <_Z6setPwmP16Adafruit_DCMotori.part.2>
          setPwm( rightMotor, rightOutput);

          speed=setTargetSpeed(0);
   d4cde:	2000      	movs	r0, #0
   d4ce0:	f7ff fb02 	bl	d42e8 <_Z14setTargetSpeedi>
   d4ce4:	4b6e      	ldr	r3, [pc, #440]	; (d4ea0 <loop+0x5e0>)
          leftPID.SetMode(PID::AUTOMATIC);
   d4ce6:	2101      	movs	r1, #1
          rightPID.SetMode(PID::MANUAL);
          rightOutput=0;
          rightPower=0;
          setPwm( rightMotor, rightOutput);

          speed=setTargetSpeed(0);
   d4ce8:	6018      	str	r0, [r3, #0]
          leftPID.SetMode(PID::AUTOMATIC);
   d4cea:	4865      	ldr	r0, [pc, #404]	; (d4e80 <loop+0x5c0>)
   d4cec:	f000 feee 	bl	d5acc <_ZN3PID7SetModeENS_6mode_tE>
          rightPID.SetMode(PID::AUTOMATIC);
   d4cf0:	2101      	movs	r1, #1
   d4cf2:	4867      	ldr	r0, [pc, #412]	; (d4e90 <loop+0x5d0>)
   d4cf4:	f000 feea 	bl	d5acc <_ZN3PID7SetModeENS_6mode_tE>

          mode=IDLE;
   d4cf8:	2300      	movs	r3, #0
   d4cfa:	e034      	b.n	d4d66 <loop+0x4a6>

  if (Serial.available())
  {
    int inByte = Serial.read();
    VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), inByte) ) ;
    switch (inByte)
   d4cfc:	2d36      	cmp	r5, #54	; 0x36
   d4cfe:	d026      	beq.n	d4d4e <loop+0x48e>
   d4d00:	dc0e      	bgt.n	d4d20 <loop+0x460>
   d4d02:	2d35      	cmp	r5, #53	; 0x35
   d4d04:	d15b      	bne.n	d4dbe <loop+0x4fe>
        case '3':
          speed=setTargetSpeed(-speed);
          mode=DRIVE;
          break;
        case '5':
          VERBOSE(  Serial.printlnf( "[%s] %d -> BALANCE_INIT  ", __FUNCTION__, millis()) ) ;
   d4d06:	f003 fb2b 	bl	d8360 <_Z16_fetch_usbserialv>
   d4d0a:	4605      	mov	r5, r0
   d4d0c:	f002 fbd2 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4d10:	4a59      	ldr	r2, [pc, #356]	; (d4e78 <loop+0x5b8>)
   d4d12:	4964      	ldr	r1, [pc, #400]	; (d4ea4 <loop+0x5e4>)
   d4d14:	4603      	mov	r3, r0
   d4d16:	4628      	mov	r0, r5
   d4d18:	f7ff fbaa 	bl	d4470 <_ZN5Print8printlnfIIPKcmEEEjS2_DpT_>
          mode=BALANCE_INIT;
   d4d1c:	2302      	movs	r3, #2
   d4d1e:	e022      	b.n	d4d66 <loop+0x4a6>

  if (Serial.available())
  {
    int inByte = Serial.read();
    VERBOSE(  Serial.printlnf( "[%s] %d -> %d  ", __FUNCTION__, millis(), inByte) ) ;
    switch (inByte)
   d4d20:	2d38      	cmp	r5, #56	; 0x38
   d4d22:	d022      	beq.n	d4d6a <loop+0x4aa>
   d4d24:	2d39      	cmp	r5, #57	; 0x39
   d4d26:	d14a      	bne.n	d4dbe <loop+0x4fe>
            serialTime = 0;

          }
          break;              
        case '9':
          SleepStateToggle();
   d4d28:	f7ff fbac 	bl	d4484 <_Z16SleepStateTogglev>
          break;
   d4d2c:	e047      	b.n	d4dbe <loop+0x4fe>

          mode=IDLE;

          break;
        case '1':
          speed=setTargetSpeed(speed-SPEED_DELTA);
   d4d2e:	4d5c      	ldr	r5, [pc, #368]	; (d4ea0 <loop+0x5e0>)
   d4d30:	6828      	ldr	r0, [r5, #0]
   d4d32:	380a      	subs	r0, #10
   d4d34:	e006      	b.n	d4d44 <loop+0x484>
          mode=DRIVE;
          break;
        case '2':
          speed=setTargetSpeed(speed+SPEED_DELTA);
   d4d36:	4d5a      	ldr	r5, [pc, #360]	; (d4ea0 <loop+0x5e0>)
   d4d38:	6828      	ldr	r0, [r5, #0]
   d4d3a:	300a      	adds	r0, #10
   d4d3c:	e002      	b.n	d4d44 <loop+0x484>
          mode=DRIVE;
          break;
        case '3':
          speed=setTargetSpeed(-speed);
   d4d3e:	4d58      	ldr	r5, [pc, #352]	; (d4ea0 <loop+0x5e0>)
   d4d40:	6828      	ldr	r0, [r5, #0]
   d4d42:	4240      	negs	r0, r0
   d4d44:	f7ff fad0 	bl	d42e8 <_Z14setTargetSpeedi>
          mode=DRIVE;
   d4d48:	2301      	movs	r3, #1
        case '2':
          speed=setTargetSpeed(speed+SPEED_DELTA);
          mode=DRIVE;
          break;
        case '3':
          speed=setTargetSpeed(-speed);
   d4d4a:	6028      	str	r0, [r5, #0]
   d4d4c:	e00b      	b.n	d4d66 <loop+0x4a6>
        case '5':
          VERBOSE(  Serial.printlnf( "[%s] %d -> BALANCE_INIT  ", __FUNCTION__, millis()) ) ;
          mode=BALANCE_INIT;
          break;         
        case '6':
          VERBOSE(  Serial.printlnf( "[%s] %d -> MQTT_TEST  ", __FUNCTION__, millis()) ) ;
   d4d4e:	f003 fb07 	bl	d8360 <_Z16_fetch_usbserialv>
   d4d52:	4605      	mov	r5, r0
   d4d54:	f002 fbae 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4d58:	4a47      	ldr	r2, [pc, #284]	; (d4e78 <loop+0x5b8>)
   d4d5a:	4953      	ldr	r1, [pc, #332]	; (d4ea8 <loop+0x5e8>)
   d4d5c:	4603      	mov	r3, r0
   d4d5e:	4628      	mov	r0, r5
   d4d60:	f7ff fb86 	bl	d4470 <_ZN5Print8printlnfIIPKcmEEEjS2_DpT_>
          mode=MQTT_TEST;
   d4d64:	2308      	movs	r3, #8
   d4d66:	7023      	strb	r3, [r4, #0]
          break;              
   d4d68:	e029      	b.n	d4dbe <loop+0x4fe>
        case '8':
          if( mode==AUTOTUNE) {
   d4d6a:	7823      	ldrb	r3, [r4, #0]
   d4d6c:	4e3d      	ldr	r6, [pc, #244]	; (d4e64 <loop+0x5a4>)
   d4d6e:	4d4f      	ldr	r5, [pc, #316]	; (d4eac <loop+0x5ec>)
   d4d70:	2b07      	cmp	r3, #7
   d4d72:	d106      	bne.n	d4d82 <loop+0x4c2>
            aTune.Cancel();
   d4d74:	484e      	ldr	r0, [pc, #312]	; (d4eb0 <loop+0x5f0>)
   d4d76:	f000 ff31 	bl	d5bdc <_ZN9PID_ATune6CancelEv>
            tuning = false;
   d4d7a:	2300      	movs	r3, #0
   d4d7c:	702b      	strb	r3, [r5, #0]
            mode=IDLE;
   d4d7e:	7033      	strb	r3, [r6, #0]
   d4d80:	e01d      	b.n	d4dbe <loop+0x4fe>
          }
          else
          {
            mode=AUTOTUNE;
   d4d82:	2307      	movs	r3, #7
   d4d84:	7033      	strb	r3, [r6, #0]
            //Set the output to the desired starting frequency.
            leftOutput=aTuneStartValue;
   d4d86:	4b4b      	ldr	r3, [pc, #300]	; (d4eb4 <loop+0x5f4>)
   d4d88:	e9d3 0100 	ldrd	r0, r1, [r3]
   d4d8c:	4b3d      	ldr	r3, [pc, #244]	; (d4e84 <loop+0x5c4>)
   d4d8e:	e9c3 0100 	strd	r0, r1, [r3]
            aTune.SetNoiseBand(aTuneNoise);
   d4d92:	4b49      	ldr	r3, [pc, #292]	; (d4eb8 <loop+0x5f8>)
   d4d94:	4846      	ldr	r0, [pc, #280]	; (d4eb0 <loop+0x5f0>)
   d4d96:	ed93 0b00 	vldr	d0, [r3]
   d4d9a:	f001 f906 	bl	d5faa <_ZN9PID_ATune12SetNoiseBandEd>
            aTune.SetOutputStep(aTuneStep);
   d4d9e:	4b47      	ldr	r3, [pc, #284]	; (d4ebc <loop+0x5fc>)
   d4da0:	4843      	ldr	r0, [pc, #268]	; (d4eb0 <loop+0x5f0>)
   d4da2:	ed93 0b00 	vldr	d0, [r3]
   d4da6:	f001 f8fd 	bl	d5fa4 <_ZN9PID_ATune13SetOutputStepEd>
            aTune.SetLookbackSec((int)aTuneLookBack);
   d4daa:	4b45      	ldr	r3, [pc, #276]	; (d4ec0 <loop+0x600>)
   d4dac:	4840      	ldr	r0, [pc, #256]	; (d4eb0 <loop+0x5f0>)
   d4dae:	6819      	ldr	r1, [r3, #0]
   d4db0:	f001 f8fe 	bl	d5fb0 <_ZN9PID_ATune14SetLookbackSecEi>

            tuning=true;
   d4db4:	2301      	movs	r3, #1
   d4db6:	702b      	strb	r3, [r5, #0]
            serialTime = 0;
   d4db8:	4b42      	ldr	r3, [pc, #264]	; (d4ec4 <loop+0x604>)
   d4dba:	2200      	movs	r2, #0
   d4dbc:	601a      	str	r2, [r3, #0]

	inline int32_t read(void) {
		noInterrupts();
   d4dbe:	f003 fc5a 	bl	d8676 <_Z12noInterruptsv>
		int32_t ret = position;
   d4dc2:	4b41      	ldr	r3, [pc, #260]	; (d4ec8 <loop+0x608>)
   d4dc4:	f8d3 a014 	ldr.w	sl, [r3, #20]
		interrupts();
   d4dc8:	f003 fc57 	bl	d867a <_Z10interruptsv>
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
	}

	inline int32_t read(void) {
		noInterrupts();
   d4dcc:	f003 fc53 	bl	d8676 <_Z12noInterruptsv>
		int32_t ret = position;
   d4dd0:	4b3e      	ldr	r3, [pc, #248]	; (d4ecc <loop+0x60c>)
   d4dd2:	695b      	ldr	r3, [r3, #20]
   d4dd4:	930e      	str	r3, [sp, #56]	; 0x38
		interrupts();
   d4dd6:	f003 fc50 	bl	d867a <_Z10interruptsv>
   d4dda:	f002 fb6b 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
  }

  long newLeftPosition = leftEnc.read();
  long newRightPosition = rightEnc.read();
  int now=millis();
  switch(mode)
   d4dde:	7823      	ldrb	r3, [r4, #0]
   d4de0:	3b01      	subs	r3, #1
   d4de2:	4683      	mov	fp, r0
   d4de4:	2b07      	cmp	r3, #7
   d4de6:	f200 83f6 	bhi.w	d55d6 <loop+0xd16>
   d4dea:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4dee:	00f1      	.short	0x00f1
   d4df0:	0077001b 	.word	0x0077001b
   d4df4:	03f403f4 	.word	0x03f403f4
   d4df8:	02c803f4 	.word	0x02c803f4
   d4dfc:	0008      	.short	0x0008
  {
    case MQTT_TEST:
      VERBOSE(  Serial.printlnf( "[%s] %d -> MQTT_TEST  ", __FUNCTION__, millis()) ) ;
   d4dfe:	f003 faaf 	bl	d8360 <_Z16_fetch_usbserialv>
   d4e02:	4604      	mov	r4, r0
   d4e04:	f002 fb56 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4e08:	4a1b      	ldr	r2, [pc, #108]	; (d4e78 <loop+0x5b8>)
   d4e0a:	4927      	ldr	r1, [pc, #156]	; (d4ea8 <loop+0x5e8>)
   d4e0c:	4603      	mov	r3, r0
   d4e0e:	4620      	mov	r0, r4
   d4e10:	f7ff fb2e 	bl	d4470 <_ZN5Print8printlnfIIPKcmEEEjS2_DpT_>
   d4e14:	f002 fb4e 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
      telemetrySend( "test", "{ '_time': '%lu', 'type': 'test' }",millis() );
   d4e18:	492d      	ldr	r1, [pc, #180]	; (d4ed0 <loop+0x610>)
   d4e1a:	4602      	mov	r2, r0
   d4e1c:	482d      	ldr	r0, [pc, #180]	; (d4ed4 <loop+0x614>)
   d4e1e:	f7ff fbd7 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
      break;
   d4e22:	e3d8      	b.n	d55d6 <loop+0xd16>

    case BALANCE_INIT:
      // wait for robot to be vertical then start balancing
      if ( abs(balanceInput)<BALANCE_THRESHOLD_START )
   d4e24:	4d0e      	ldr	r5, [pc, #56]	; (d4e60 <loop+0x5a0>)
   d4e26:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4e2a:	f004 feb9 	bl	d9ba0 <__aeabi_d2iz>
   d4e2e:	3001      	adds	r0, #1
   d4e30:	2802      	cmp	r0, #2
   d4e32:	f200 83d0 	bhi.w	d55d6 <loop+0xd16>
      {
        // start balancing
        mode=BALANCE_ACTIVE;
   d4e36:	2303      	movs	r3, #3
   d4e38:	7023      	strb	r3, [r4, #0]
        Serial.printlnf( "balance goes active:  %d, %d", millis(), balanceInput ) ;
   d4e3a:	f003 fa91 	bl	d8360 <_Z16_fetch_usbserialv>
   d4e3e:	4604      	mov	r4, r0
   d4e40:	f002 fb38 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4e44:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4e48:	2101      	movs	r1, #1
   d4e4a:	e9cd 2300 	strd	r2, r3, [sp]
   d4e4e:	4603      	mov	r3, r0
   d4e50:	4a21      	ldr	r2, [pc, #132]	; (d4ed8 <loop+0x618>)
   d4e52:	4620      	mov	r0, r4
   d4e54:	f003 fdb6 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
   d4e58:	e3bd      	b.n	d55d6 <loop+0xd16>
   d4e5a:	bf00      	nop
   d4e5c:	2003e2d8 	.word	0x2003e2d8
   d4e60:	2003dce8 	.word	0x2003dce8
   d4e64:	2003dce0 	.word	0x2003dce0
   d4e68:	000da150 	.word	0x000da150
   d4e6c:	40568000 	.word	0x40568000
   d4e70:	407f4000 	.word	0x407f4000
   d4e74:	000da156 	.word	0x000da156
   d4e78:	000d9e04 	.word	0x000d9e04
   d4e7c:	000d9e56 	.word	0x000d9e56
   d4e80:	2003de70 	.word	0x2003de70
   d4e84:	2003ddb0 	.word	0x2003ddb0
   d4e88:	2003dbb0 	.word	0x2003dbb0
   d4e8c:	2003dd0c 	.word	0x2003dd0c
   d4e90:	2003dd18 	.word	0x2003dd18
   d4e94:	2003ddc0 	.word	0x2003ddc0
   d4e98:	2003dd90 	.word	0x2003dd90
   d4e9c:	2003dc10 	.word	0x2003dc10
   d4ea0:	2003de50 	.word	0x2003de50
   d4ea4:	000da170 	.word	0x000da170
   d4ea8:	000da18a 	.word	0x000da18a
   d4eac:	2003dc14 	.word	0x2003dc14
   d4eb0:	2003dee8 	.word	0x2003dee8
   d4eb4:	2003de48 	.word	0x2003de48
   d4eb8:	2003db20 	.word	0x2003db20
   d4ebc:	2003db18 	.word	0x2003db18
   d4ec0:	2003daf8 	.word	0x2003daf8
   d4ec4:	2003dcb0 	.word	0x2003dcb0
   d4ec8:	2003de54 	.word	0x2003de54
   d4ecc:	2003dcf0 	.word	0x2003dcf0
   d4ed0:	000da1a1 	.word	0x000da1a1
   d4ed4:	000da1c4 	.word	0x000da1c4
   d4ed8:	000da1c9 	.word	0x000da1c9
      }
      break;
    case BALANCE_ACTIVE:
      if ( abs(balanceInput)>BALANCE_THRESHOLD_MAX )
   d4edc:	4daa      	ldr	r5, [pc, #680]	; (d5188 <loop+0x8c8>)
   d4ede:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4ee2:	f004 fe5d 	bl	d9ba0 <__aeabi_d2iz>
   d4ee6:	2800      	cmp	r0, #0
   d4ee8:	bfb8      	it	lt
   d4eea:	4240      	neglt	r0, r0
   d4eec:	280e      	cmp	r0, #14
   d4eee:	dd10      	ble.n	d4f12 <loop+0x652>
      {
        // too far gone - give up - go idle
        mode=BALANCE_INIT;
   d4ef0:	2302      	movs	r3, #2
   d4ef2:	7023      	strb	r3, [r4, #0]
        Serial.printlnf( "balance goes idle: %d, %d", millis(), balanceInput ) ;
   d4ef4:	f003 fa34 	bl	d8360 <_Z16_fetch_usbserialv>
   d4ef8:	4604      	mov	r4, r0
   d4efa:	f002 fadb 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4efe:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4f02:	2101      	movs	r1, #1
   d4f04:	e9cd 2300 	strd	r2, r3, [sp]
   d4f08:	4603      	mov	r3, r0
   d4f0a:	4aa0      	ldr	r2, [pc, #640]	; (d518c <loop+0x8cc>)
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	f003 fd59 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
      }
    #if 1
      //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
      if ( balancePID.Compute() )
   d4f12:	489f      	ldr	r0, [pc, #636]	; (d5190 <loop+0x8d0>)
   d4f14:	f000 fc62 	bl	d57dc <_ZN3PID7ComputeEv>
   d4f18:	2800      	cmp	r0, #0
   d4f1a:	d059      	beq.n	d4fd0 <loop+0x710>
      {
        leftSetpoint=balanceOutput;
   d4f1c:	4c9d      	ldr	r4, [pc, #628]	; (d5194 <loop+0x8d4>)
   d4f1e:	499e      	ldr	r1, [pc, #632]	; (d5198 <loop+0x8d8>)
        rightSetpoint=balanceOutput;

        Serial.printlnf( "balancePid { \"_time\": \"%lu\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\" }", millis(), balanceInput, balanceSetpoint, balanceOutput  ) ;
   d4f20:	4e9e      	ldr	r6, [pc, #632]	; (d519c <loop+0x8dc>)
      }
    #if 1
      //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
      if ( balancePID.Compute() )
      {
        leftSetpoint=balanceOutput;
   d4f22:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4f26:	e9c1 2300 	strd	r2, r3, [r1]
        rightSetpoint=balanceOutput;
   d4f2a:	499d      	ldr	r1, [pc, #628]	; (d51a0 <loop+0x8e0>)
   d4f2c:	e9c1 2300 	strd	r2, r3, [r1]

        Serial.printlnf( "balancePid { \"_time\": \"%lu\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\" }", millis(), balanceInput, balanceSetpoint, balanceOutput  ) ;
   d4f30:	f003 fa16 	bl	d8360 <_Z16_fetch_usbserialv>
   d4f34:	4607      	mov	r7, r0
   d4f36:	f002 fabd 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4f3a:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4f3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d4f42:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4f4a:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4f4e:	2101      	movs	r1, #1
   d4f50:	e9cd 2300 	strd	r2, r3, [sp]
   d4f54:	4603      	mov	r3, r0
   d4f56:	4a93      	ldr	r2, [pc, #588]	; (d51a4 <loop+0x8e4>)
   d4f58:	4638      	mov	r0, r7
   d4f5a:	f003 fd33 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
   d4f5e:	f002 faa9 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   d4f62:	4607      	mov	r7, r0

        telemetrySend( "balancePid", "{ \"_time\": \"%lu\", \"type\":\"pid\", \"name\":\"balancePid\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\", \"Kp\":\"%f\", \"Ki\":\"%f\", \"Kd\":\"%f\", \"mode\":\"%s\"  }", millis(), balanceInput, balanceSetpoint, balanceOutput, balancePID.GetKp(), balancePID.GetKi(), balancePID.GetKd(), (balancePID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d4f64:	488a      	ldr	r0, [pc, #552]	; (d5190 <loop+0x8d0>)
   d4f66:	e9d5 8900 	ldrd	r8, r9, [r5]
   d4f6a:	ed96 bb00 	vldr	d11, [r6]
   d4f6e:	e9d4 4500 	ldrd	r4, r5, [r4]
   d4f72:	f000 fe25 	bl	d5bc0 <_ZN3PID5GetKpEv>
   d4f76:	4886      	ldr	r0, [pc, #536]	; (d5190 <loop+0x8d0>)
   d4f78:	eeb0 8a40 	vmov.f32	s16, s0
   d4f7c:	eef0 8a60 	vmov.f32	s17, s1
   d4f80:	f000 fe21 	bl	d5bc6 <_ZN3PID5GetKiEv>
   d4f84:	4882      	ldr	r0, [pc, #520]	; (d5190 <loop+0x8d0>)
   d4f86:	eeb0 9a40 	vmov.f32	s18, s0
   d4f8a:	eef0 9a60 	vmov.f32	s19, s1
   d4f8e:	f000 fe1d 	bl	d5bcc <_ZN3PID5GetKdEv>
   d4f92:	487f      	ldr	r0, [pc, #508]	; (d5190 <loop+0x8d0>)
   d4f94:	eeb0 aa40 	vmov.f32	s20, s0
   d4f98:	eef0 aa60 	vmov.f32	s21, s1
   d4f9c:	f000 fe19 	bl	d5bd2 <_ZN3PID7GetModeEv>
   d4fa0:	4a81      	ldr	r2, [pc, #516]	; (d51a8 <loop+0x8e8>)
   d4fa2:	4b82      	ldr	r3, [pc, #520]	; (d51ac <loop+0x8ec>)
   d4fa4:	4982      	ldr	r1, [pc, #520]	; (d51b0 <loop+0x8f0>)
   d4fa6:	2801      	cmp	r0, #1
   d4fa8:	bf0c      	ite	eq
   d4faa:	4618      	moveq	r0, r3
   d4fac:	4610      	movne	r0, r2
   d4fae:	900c      	str	r0, [sp, #48]	; 0x30
   d4fb0:	ed8d ab0a 	vstr	d10, [sp, #40]	; 0x28
   d4fb4:	ed8d 9b08 	vstr	d9, [sp, #32]
   d4fb8:	ed8d 8b06 	vstr	d8, [sp, #24]
   d4fbc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d4fc0:	ed8d bb02 	vstr	d11, [sp, #8]
   d4fc4:	e9cd 8900 	strd	r8, r9, [sp]
   d4fc8:	463a      	mov	r2, r7
   d4fca:	487a      	ldr	r0, [pc, #488]	; (d51b4 <loop+0x8f4>)
   d4fcc:	f7ff fb00 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
      }
    #endif
      // break;
    case DRIVE:
    #if 1
      if ( oldLeftTime==0 )
   d4fd0:	4b79      	ldr	r3, [pc, #484]	; (d51b8 <loop+0x8f8>)
   d4fd2:	681a      	ldr	r2, [r3, #0]
   d4fd4:	b91a      	cbnz	r2, d4fde <loop+0x71e>
      {
        // do nothing
        oldLeftPosition = newLeftPosition;
   d4fd6:	4a79      	ldr	r2, [pc, #484]	; (d51bc <loop+0x8fc>)
   d4fd8:	f8c2 a000 	str.w	sl, [r2]
   d4fdc:	e0bf      	b.n	d515e <loop+0x89e>
        oldLeftTime = now;
      } 
      else if (now-oldLeftTime>0)
   d4fde:	ebc2 080b 	rsb	r8, r2, fp
   d4fe2:	f1b8 0f00 	cmp.w	r8, #0
   d4fe6:	f340 80bc 	ble.w	d5162 <loop+0x8a2>
      {  
        //Serial.printlnf( "[%s]%d", __FUNCTION__, now-oldLeftTime );
        leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(now-oldLeftTime)));
   d4fea:	4f74      	ldr	r7, [pc, #464]	; (d51bc <loop+0x8fc>)
   d4fec:	4e74      	ldr	r6, [pc, #464]	; (d51c0 <loop+0x900>)
   d4fee:	6838      	ldr	r0, [r7, #0]
   d4ff0:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4ff4:	ebc0 000a 	rsb	r0, r0, sl
   d4ff8:	4358      	muls	r0, r3
   d4ffa:	f004 fabb 	bl	d9574 <__aeabi_i2d>
   d4ffe:	4604      	mov	r4, r0
   d5000:	4640      	mov	r0, r8
   d5002:	460d      	mov	r5, r1
   d5004:	f004 fab6 	bl	d9574 <__aeabi_i2d>
   d5008:	2200      	movs	r2, #0
   d500a:	4b6e      	ldr	r3, [pc, #440]	; (d51c4 <loop+0x904>)
   d500c:	f004 fb18 	bl	d9640 <__aeabi_dmul>
   d5010:	4602      	mov	r2, r0
   d5012:	460b      	mov	r3, r1
   d5014:	4620      	mov	r0, r4
   d5016:	4629      	mov	r1, r5
   d5018:	f004 fc3c 	bl	d9894 <__aeabi_ddiv>
   d501c:	e9c6 0100 	strd	r0, r1, [r6]
        //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
        if ( leftPID.Compute() )
   d5020:	4869      	ldr	r0, [pc, #420]	; (d51c8 <loop+0x908>)
   d5022:	f000 fbdb 	bl	d57dc <_ZN3PID7ComputeEv>
   d5026:	4635      	mov	r5, r6
   d5028:	970f      	str	r7, [sp, #60]	; 0x3c
   d502a:	2800      	cmp	r0, #0
   d502c:	f000 8099 	beq.w	d5162 <loop+0x8a2>
   d5030:	f002 fa40 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
        {
          telemetrySend( "leftPid", "{ \"_time\": \"%lu\", \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\", \"Kp\":\"%f\", \"Ki\":\"%f\", \"Kd\":\"%f\", \"mode\":\"%s\"  }", millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d5034:	4f58      	ldr	r7, [pc, #352]	; (d5198 <loop+0x8d8>)
   d5036:	4c65      	ldr	r4, [pc, #404]	; (d51cc <loop+0x90c>)
   d5038:	4606      	mov	r6, r0
   d503a:	4863      	ldr	r0, [pc, #396]	; (d51c8 <loop+0x908>)
   d503c:	ed97 9b00 	vldr	d9, [r7]
   d5040:	ed94 ab00 	vldr	d10, [r4]
   d5044:	ed95 8b00 	vldr	d8, [r5]
   d5048:	f000 fdba 	bl	d5bc0 <_ZN3PID5GetKpEv>
   d504c:	485e      	ldr	r0, [pc, #376]	; (d51c8 <loop+0x908>)
   d504e:	eeb0 ba40 	vmov.f32	s22, s0
   d5052:	eef0 ba60 	vmov.f32	s23, s1
   d5056:	f000 fdb6 	bl	d5bc6 <_ZN3PID5GetKiEv>
   d505a:	485b      	ldr	r0, [pc, #364]	; (d51c8 <loop+0x908>)
   d505c:	eeb0 ca40 	vmov.f32	s24, s0
   d5060:	eef0 ca60 	vmov.f32	s25, s1
   d5064:	f000 fdb2 	bl	d5bcc <_ZN3PID5GetKdEv>
   d5068:	4857      	ldr	r0, [pc, #348]	; (d51c8 <loop+0x908>)
   d506a:	eeb0 da40 	vmov.f32	s26, s0
   d506e:	eef0 da60 	vmov.f32	s27, s1
   d5072:	f000 fdae 	bl	d5bd2 <_ZN3PID7GetModeEv>
   d5076:	4b4c      	ldr	r3, [pc, #304]	; (d51a8 <loop+0x8e8>)
   d5078:	4a4c      	ldr	r2, [pc, #304]	; (d51ac <loop+0x8ec>)
   d507a:	4955      	ldr	r1, [pc, #340]	; (d51d0 <loop+0x910>)
   d507c:	2801      	cmp	r0, #1
   d507e:	bf0c      	ite	eq
   d5080:	4610      	moveq	r0, r2
   d5082:	4618      	movne	r0, r3
   d5084:	46a0      	mov	r8, r4

          leftPower=adjustSpeed( leftPower, leftOutput );
   d5086:	4c53      	ldr	r4, [pc, #332]	; (d51d4 <loop+0x914>)
        //Serial.printlnf( "[%s]%d", __FUNCTION__, now-oldLeftTime );
        leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(now-oldLeftTime)));
        //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
        if ( leftPID.Compute() )
        {
          telemetrySend( "leftPid", "{ \"_time\": \"%lu\", \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\", \"Kp\":\"%f\", \"Ki\":\"%f\", \"Kd\":\"%f\", \"mode\":\"%s\"  }", millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d5088:	900c      	str	r0, [sp, #48]	; 0x30
   d508a:	4632      	mov	r2, r6
   d508c:	4852      	ldr	r0, [pc, #328]	; (d51d8 <loop+0x918>)
   d508e:	ed8d db0a 	vstr	d13, [sp, #40]	; 0x28
   d5092:	ed8d cb08 	vstr	d12, [sp, #32]
   d5096:	ed8d bb06 	vstr	d11, [sp, #24]
   d509a:	ed8d ab04 	vstr	d10, [sp, #16]
   d509e:	ed8d 9b02 	vstr	d9, [sp, #8]
   d50a2:	ed8d 8b00 	vstr	d8, [sp]
   d50a6:	f7ff fa93 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d50aa:	e9d8 2300 	ldrd	r2, r3, [r8]
   d50ae:	e9d4 0100 	ldrd	r0, r1, [r4]
   d50b2:	f004 f913 	bl	d92dc <__adddf3>
   d50b6:	a330      	add	r3, pc, #192	; (adr r3, d5178 <loop+0x8b8>)
   d50b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50bc:	46b9      	mov	r9, r7
   d50be:	4606      	mov	r6, r0
   d50c0:	460f      	mov	r7, r1
   d50c2:	f004 fd2f 	bl	d9b24 <__aeabi_dcmplt>
   d50c6:	b158      	cbz	r0, d50e0 <loop+0x820>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d50c8:	a32d      	add	r3, pc, #180	; (adr r3, d5180 <loop+0x8c0>)
   d50ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50ce:	4630      	mov	r0, r6
   d50d0:	4639      	mov	r1, r7
   d50d2:	f004 fd45 	bl	d9b60 <__aeabi_dcmpgt>
   d50d6:	b930      	cbnz	r0, d50e6 <loop+0x826>
   d50d8:	a729      	add	r7, pc, #164	; (adr r7, d5180 <loop+0x8c0>)
   d50da:	e9d7 6700 	ldrd	r6, r7, [r7]
   d50de:	e002      	b.n	d50e6 <loop+0x826>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d50e0:	a725      	add	r7, pc, #148	; (adr r7, d5178 <loop+0x8b8>)
   d50e2:	e9d7 6700 	ldrd	r6, r7, [r7]
        if ( leftPID.Compute() )
        {
          telemetrySend( "leftPid", "{ \"_time\": \"%lu\", \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\", \"Kp\":\"%f\", \"Ki\":\"%f\", \"Kd\":\"%f\", \"mode\":\"%s\"  }", millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;

          leftPower=adjustSpeed( leftPower, leftOutput );
          setPwm( leftMotor, leftPower );
   d50e6:	4639      	mov	r1, r7
        //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
        if ( leftPID.Compute() )
        {
          telemetrySend( "leftPid", "{ \"_time\": \"%lu\", \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\", \"Kp\":\"%f\", \"Ki\":\"%f\", \"Kd\":\"%f\", \"mode\":\"%s\"  }", millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;

          leftPower=adjustSpeed( leftPower, leftOutput );
   d50e8:	e9c4 6700 	strd	r6, r7, [r4]
          setPwm( leftMotor, leftPower );
   d50ec:	4630      	mov	r0, r6
   d50ee:	f004 fd57 	bl	d9ba0 <__aeabi_d2iz>
   d50f2:	4b3a      	ldr	r3, [pc, #232]	; (d51dc <loop+0x91c>)
   d50f4:	4601      	mov	r1, r0
   d50f6:	6818      	ldr	r0, [r3, #0]
   d50f8:	f7ff f8de 	bl	d42b8 <_Z6setPwmP16Adafruit_DCMotori>
          //Serial.printlnf( "[%s]%d left power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, now, power, newLeftPosition-oldLeftPosition, newLeftPosition, leftInput );
          VERBOSE( Serial.printlnf( "[%s] %d - left pid input=%f, setpoint=%f, output=%f", __FUNCTION__, now, leftInput, leftSetpoint, leftOutput) );
   d50fc:	f003 f930 	bl	d8360 <_Z16_fetch_usbserialv>
   d5100:	e9d8 2300 	ldrd	r2, r3, [r8]
   d5104:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5108:	e9d9 2300 	ldrd	r2, r3, [r9]
   d510c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d5110:	e9d5 2300 	ldrd	r2, r3, [r5]
   d5114:	2101      	movs	r1, #1
   d5116:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d511a:	f8cd b000 	str.w	fp, [sp]
   d511e:	4b30      	ldr	r3, [pc, #192]	; (d51e0 <loop+0x920>)
   d5120:	4a30      	ldr	r2, [pc, #192]	; (d51e4 <loop+0x924>)
   d5122:	f003 fc4f 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
   d5126:	f002 f9c5 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
          telemetrySend( "leftPower", "{ \"_time\": \"%lu\", \"type\":\"power\", \"name\":\"leftPower\", \"power\" : \"%f\"  }", millis(), leftPower ) ;
   d512a:	e9d4 2300 	ldrd	r2, r3, [r4]
   d512e:	492e      	ldr	r1, [pc, #184]	; (d51e8 <loop+0x928>)
   d5130:	e9cd 2300 	strd	r2, r3, [sp]
   d5134:	4602      	mov	r2, r0
   d5136:	482d      	ldr	r0, [pc, #180]	; (d51ec <loop+0x92c>)
   d5138:	f7ff fa4a 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
          VERBOSE( Serial.printlnf( "[%s] %d - left power=%f", __FUNCTION__, now, leftPower) );
   d513c:	f003 f910 	bl	d8360 <_Z16_fetch_usbserialv>
   d5140:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5144:	2101      	movs	r1, #1
   d5146:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d514a:	f8cd b000 	str.w	fp, [sp]
   d514e:	4b24      	ldr	r3, [pc, #144]	; (d51e0 <loop+0x920>)
   d5150:	4a27      	ldr	r2, [pc, #156]	; (d51f0 <loop+0x930>)
   d5152:	f003 fc37 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>

          oldLeftPosition = newLeftPosition;
   d5156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5158:	f8c3 a000 	str.w	sl, [r3]
          oldLeftTime = now;
   d515c:	4b16      	ldr	r3, [pc, #88]	; (d51b8 <loop+0x8f8>)
   d515e:	f8c3 b000 	str.w	fp, [r3]
      }

    #endif

    #if 1
      if ( oldRightTime==0 )
   d5162:	4b24      	ldr	r3, [pc, #144]	; (d51f4 <loop+0x934>)
   d5164:	681e      	ldr	r6, [r3, #0]
   d5166:	2e00      	cmp	r6, #0
   d5168:	d148      	bne.n	d51fc <loop+0x93c>
      {
        // do nothing
        oldRightPosition = newRightPosition;
   d516a:	4a23      	ldr	r2, [pc, #140]	; (d51f8 <loop+0x938>)
   d516c:	990e      	ldr	r1, [sp, #56]	; 0x38
   d516e:	6011      	str	r1, [r2, #0]
   d5170:	e224      	b.n	d55bc <loop+0xcfc>
   d5172:	bf00      	nop
   d5174:	f3af 8000 	nop.w
   d5178:	00000000 	.word	0x00000000
   d517c:	406fe000 	.word	0x406fe000
   d5180:	00000000 	.word	0x00000000
   d5184:	c06fe000 	.word	0xc06fe000
   d5188:	2003dce8 	.word	0x2003dce8
   d518c:	000da1e6 	.word	0x000da1e6
   d5190:	2003dc30 	.word	0x2003dc30
   d5194:	2003dc18 	.word	0x2003dc18
   d5198:	2003dcb8 	.word	0x2003dcb8
   d519c:	2003dcc8 	.word	0x2003dcc8
   d51a0:	2003dda0 	.word	0x2003dda0
   d51a4:	000da200 	.word	0x000da200
   d51a8:	000da00a 	.word	0x000da00a
   d51ac:	000da000 	.word	0x000da000
   d51b0:	000da253 	.word	0x000da253
   d51b4:	000da2ed 	.word	0x000da2ed
   d51b8:	2003dcc0 	.word	0x2003dcc0
   d51bc:	2003ddd4 	.word	0x2003ddd4
   d51c0:	2003dc28 	.word	0x2003dc28
   d51c4:	4092c000 	.word	0x4092c000
   d51c8:	2003de70 	.word	0x2003de70
   d51cc:	2003ddb0 	.word	0x2003ddb0
   d51d0:	000da2f8 	.word	0x000da2f8
   d51d4:	2003dbb0 	.word	0x2003dbb0
   d51d8:	000da38f 	.word	0x000da38f
   d51dc:	2003dd0c 	.word	0x2003dd0c
   d51e0:	000d9e04 	.word	0x000d9e04
   d51e4:	000da397 	.word	0x000da397
   d51e8:	000da3cb 	.word	0x000da3cb
   d51ec:	000da413 	.word	0x000da413
   d51f0:	000da41d 	.word	0x000da41d
   d51f4:	2003dda8 	.word	0x2003dda8
   d51f8:	2003dcac 	.word	0x2003dcac
        oldRightTime = now;
      } 
      else if (now-oldRightTime>0)
   d51fc:	ebc6 060b 	rsb	r6, r6, fp
   d5200:	2e00      	cmp	r6, #0
   d5202:	f340 81e8 	ble.w	d55d6 <loop+0xd16>
      {  
        rightInput = (((newRightPosition-oldRightPosition)*60000)/(18.75*64*(now-oldRightTime)));
   d5206:	f8df 932c 	ldr.w	r9, [pc, #812]	; d5534 <loop+0xc74>
   d520a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d520c:	f8d9 0000 	ldr.w	r0, [r9]
   d5210:	4faf      	ldr	r7, [pc, #700]	; (d54d0 <loop+0xc10>)
   d5212:	1a18      	subs	r0, r3, r0
   d5214:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5218:	4358      	muls	r0, r3
   d521a:	f004 f9ab 	bl	d9574 <__aeabi_i2d>
   d521e:	4604      	mov	r4, r0
   d5220:	4630      	mov	r0, r6
   d5222:	460d      	mov	r5, r1
   d5224:	f004 f9a6 	bl	d9574 <__aeabi_i2d>
   d5228:	2200      	movs	r2, #0
   d522a:	4baa      	ldr	r3, [pc, #680]	; (d54d4 <loop+0xc14>)
   d522c:	f004 fa08 	bl	d9640 <__aeabi_dmul>
   d5230:	4602      	mov	r2, r0
   d5232:	460b      	mov	r3, r1
   d5234:	4620      	mov	r0, r4
   d5236:	4629      	mov	r1, r5
   d5238:	f004 fb2c 	bl	d9894 <__aeabi_ddiv>
   d523c:	e9c7 0100 	strd	r0, r1, [r7]


        if ( rightPID.Compute() )
   d5240:	48a5      	ldr	r0, [pc, #660]	; (d54d8 <loop+0xc18>)
   d5242:	f000 facb 	bl	d57dc <_ZN3PID7ComputeEv>
   d5246:	463d      	mov	r5, r7
   d5248:	2800      	cmp	r0, #0
   d524a:	f000 81c4 	beq.w	d55d6 <loop+0xd16>
   d524e:	f002 f931 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
        {
            telemetrySend( "rightPid", "{ \"_time\": %lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }"        , millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d5252:	4ea2      	ldr	r6, [pc, #648]	; (d54dc <loop+0xc1c>)
   d5254:	4ca2      	ldr	r4, [pc, #648]	; (d54e0 <loop+0xc20>)
   d5256:	4607      	mov	r7, r0
   d5258:	489f      	ldr	r0, [pc, #636]	; (d54d8 <loop+0xc18>)
   d525a:	ed96 9b00 	vldr	d9, [r6]
   d525e:	ed94 ab00 	vldr	d10, [r4]
   d5262:	ed95 8b00 	vldr	d8, [r5]
   d5266:	f000 fcab 	bl	d5bc0 <_ZN3PID5GetKpEv>
   d526a:	489b      	ldr	r0, [pc, #620]	; (d54d8 <loop+0xc18>)
   d526c:	eeb0 ba40 	vmov.f32	s22, s0
   d5270:	eef0 ba60 	vmov.f32	s23, s1
   d5274:	f000 fca7 	bl	d5bc6 <_ZN3PID5GetKiEv>
   d5278:	4897      	ldr	r0, [pc, #604]	; (d54d8 <loop+0xc18>)
   d527a:	eeb0 ca40 	vmov.f32	s24, s0
   d527e:	eef0 ca60 	vmov.f32	s25, s1
   d5282:	f000 fca3 	bl	d5bcc <_ZN3PID5GetKdEv>
   d5286:	4894      	ldr	r0, [pc, #592]	; (d54d8 <loop+0xc18>)
   d5288:	eeb0 da40 	vmov.f32	s26, s0
   d528c:	eef0 da60 	vmov.f32	s27, s1
   d5290:	f000 fc9f 	bl	d5bd2 <_ZN3PID7GetModeEv>
   d5294:	4b93      	ldr	r3, [pc, #588]	; (d54e4 <loop+0xc24>)
   d5296:	4a94      	ldr	r2, [pc, #592]	; (d54e8 <loop+0xc28>)
   d5298:	4994      	ldr	r1, [pc, #592]	; (d54ec <loop+0xc2c>)
   d529a:	2801      	cmp	r0, #1
   d529c:	bf0c      	ite	eq
   d529e:	4610      	moveq	r0, r2
   d52a0:	4618      	movne	r0, r3
   d52a2:	46a0      	mov	r8, r4

            rightPower=adjustSpeed( rightPower, rightOutput );
   d52a4:	4c92      	ldr	r4, [pc, #584]	; (d54f0 <loop+0xc30>)
        rightInput = (((newRightPosition-oldRightPosition)*60000)/(18.75*64*(now-oldRightTime)));


        if ( rightPID.Compute() )
        {
            telemetrySend( "rightPid", "{ \"_time\": %lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }"        , millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d52a6:	900c      	str	r0, [sp, #48]	; 0x30
   d52a8:	463a      	mov	r2, r7
   d52aa:	4892      	ldr	r0, [pc, #584]	; (d54f4 <loop+0xc34>)
   d52ac:	ed8d db0a 	vstr	d13, [sp, #40]	; 0x28
   d52b0:	ed8d cb08 	vstr	d12, [sp, #32]
   d52b4:	ed8d bb06 	vstr	d11, [sp, #24]
   d52b8:	ed8d ab04 	vstr	d10, [sp, #16]
   d52bc:	ed8d 9b02 	vstr	d9, [sp, #8]
   d52c0:	ed8d 8b00 	vstr	d8, [sp]
   d52c4:	f7ff f984 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d52c8:	e9d8 2300 	ldrd	r2, r3, [r8]
   d52cc:	e9d4 0100 	ldrd	r0, r1, [r4]
   d52d0:	f004 f804 	bl	d92dc <__adddf3>
   d52d4:	a37a      	add	r3, pc, #488	; (adr r3, d54c0 <loop+0xc00>)
   d52d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52da:	46b2      	mov	sl, r6
   d52dc:	460f      	mov	r7, r1
   d52de:	4606      	mov	r6, r0
   d52e0:	f004 fc20 	bl	d9b24 <__aeabi_dcmplt>
   d52e4:	b158      	cbz	r0, d52fe <loop+0xa3e>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d52e6:	a378      	add	r3, pc, #480	; (adr r3, d54c8 <loop+0xc08>)
   d52e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52ec:	4630      	mov	r0, r6
   d52ee:	4639      	mov	r1, r7
   d52f0:	f004 fc36 	bl	d9b60 <__aeabi_dcmpgt>
   d52f4:	b930      	cbnz	r0, d5304 <loop+0xa44>
   d52f6:	a774      	add	r7, pc, #464	; (adr r7, d54c8 <loop+0xc08>)
   d52f8:	e9d7 6700 	ldrd	r6, r7, [r7]
   d52fc:	e002      	b.n	d5304 <loop+0xa44>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d52fe:	a770      	add	r7, pc, #448	; (adr r7, d54c0 <loop+0xc00>)
   d5300:	e9d7 6700 	ldrd	r6, r7, [r7]
        if ( rightPID.Compute() )
        {
            telemetrySend( "rightPid", "{ \"_time\": %lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }"        , millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;

            rightPower=adjustSpeed( rightPower, rightOutput );
            setPwm( rightMotor, rightPower);
   d5304:	4639      	mov	r1, r7

        if ( rightPID.Compute() )
        {
            telemetrySend( "rightPid", "{ \"_time\": %lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }"        , millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;

            rightPower=adjustSpeed( rightPower, rightOutput );
   d5306:	e9c4 6700 	strd	r6, r7, [r4]
            setPwm( rightMotor, rightPower);
   d530a:	4630      	mov	r0, r6
   d530c:	f004 fc48 	bl	d9ba0 <__aeabi_d2iz>
   d5310:	4b79      	ldr	r3, [pc, #484]	; (d54f8 <loop+0xc38>)
   d5312:	4601      	mov	r1, r0
   d5314:	6818      	ldr	r0, [r3, #0]
   d5316:	f7fe ffcf 	bl	d42b8 <_Z6setPwmP16Adafruit_DCMotori>
   d531a:	f002 f8cb 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
            //Serial.printlnf( "[%s]%d right power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, time, power, newRightPosition-oldRightPosition, newRightPosition, rightInput);
            telemetrySend( "rightPower", "{ \"_time\": \"%lu\", \"type\":\"power\", \"name\":\"rightPower\", \"power\" : \"%f\"  }", millis(), rightPower ) ;
   d531e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5322:	4976      	ldr	r1, [pc, #472]	; (d54fc <loop+0xc3c>)
   d5324:	e9cd 2300 	strd	r2, r3, [sp]
   d5328:	4602      	mov	r2, r0
   d532a:	4875      	ldr	r0, [pc, #468]	; (d5500 <loop+0xc40>)
   d532c:	f7ff f950 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
            VERBOSE( Serial.printlnf( "[%s] %d - right pid input=%f, setpoint=%f, output=%f", __FUNCTION__, now, rightInput, rightSetpoint, rightOutput) );
   d5330:	f003 f816 	bl	d8360 <_Z16_fetch_usbserialv>
   d5334:	e9d8 2300 	ldrd	r2, r3, [r8]
   d5338:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d533c:	e9da 2300 	ldrd	r2, r3, [sl]
   d5340:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d5344:	e9d5 2300 	ldrd	r2, r3, [r5]
   d5348:	2101      	movs	r1, #1
   d534a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d534e:	f8cd b000 	str.w	fp, [sp]
   d5352:	4b6c      	ldr	r3, [pc, #432]	; (d5504 <loop+0xc44>)
   d5354:	4a6c      	ldr	r2, [pc, #432]	; (d5508 <loop+0xc48>)
   d5356:	f003 fb35 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
            VERBOSE( Serial.printlnf( "[%s] %d - right power=%f", __FUNCTION__, now, rightPower) );
   d535a:	f003 f801 	bl	d8360 <_Z16_fetch_usbserialv>
   d535e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5362:	2101      	movs	r1, #1
   d5364:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5368:	f8cd b000 	str.w	fp, [sp]
   d536c:	4b65      	ldr	r3, [pc, #404]	; (d5504 <loop+0xc44>)
   d536e:	4a67      	ldr	r2, [pc, #412]	; (d550c <loop+0xc4c>)
   d5370:	f003 fb28 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>

            oldRightPosition = newRightPosition;
   d5374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5376:	f8c9 3000 	str.w	r3, [r9]
            oldRightTime = now; 
   d537a:	4b65      	ldr	r3, [pc, #404]	; (d5510 <loop+0xc50>)
   d537c:	e11e      	b.n	d55bc <loop+0xcfc>
      }
    
    #endif      
      break; 
    case AUTOTUNE:
      if ( oldLeftTime==0 )
   d537e:	4b65      	ldr	r3, [pc, #404]	; (d5514 <loop+0xc54>)
   d5380:	681d      	ldr	r5, [r3, #0]
   d5382:	b91d      	cbnz	r5, d538c <loop+0xacc>
      {
        // do nothing
        oldLeftPosition = newLeftPosition;
   d5384:	4a64      	ldr	r2, [pc, #400]	; (d5518 <loop+0xc58>)
   d5386:	f8c2 a000 	str.w	sl, [r2]
   d538a:	e117      	b.n	d55bc <loop+0xcfc>
        oldLeftTime = now;
      } 
      else if (now-oldLeftTime>0)
   d538c:	1b45      	subs	r5, r0, r5
   d538e:	2d00      	cmp	r5, #0
   d5390:	f340 8121 	ble.w	d55d6 <loop+0xd16>
      {  
        //Serial.printlnf( "[%s]%d", __FUNCTION__, now-oldLeftTime );
        leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(now-oldLeftTime)));
   d5394:	f8df 9180 	ldr.w	r9, [pc, #384]	; d5518 <loop+0xc58>
   d5398:	4e60      	ldr	r6, [pc, #384]	; (d551c <loop+0xc5c>)
   d539a:	f8d9 0000 	ldr.w	r0, [r9]
   d539e:	f64e 2360 	movw	r3, #60000	; 0xea60
   d53a2:	ebc0 000a 	rsb	r0, r0, sl
   d53a6:	4358      	muls	r0, r3
   d53a8:	f004 f8e4 	bl	d9574 <__aeabi_i2d>
   d53ac:	4607      	mov	r7, r0
   d53ae:	4628      	mov	r0, r5
   d53b0:	4688      	mov	r8, r1
   d53b2:	f004 f8df 	bl	d9574 <__aeabi_i2d>
   d53b6:	2200      	movs	r2, #0
   d53b8:	4b46      	ldr	r3, [pc, #280]	; (d54d4 <loop+0xc14>)
   d53ba:	4d59      	ldr	r5, [pc, #356]	; (d5520 <loop+0xc60>)
   d53bc:	f004 f940 	bl	d9640 <__aeabi_dmul>
   d53c0:	4602      	mov	r2, r0
   d53c2:	460b      	mov	r3, r1
   d53c4:	4638      	mov	r0, r7
   d53c6:	4641      	mov	r1, r8
   d53c8:	f004 fa64 	bl	d9894 <__aeabi_ddiv>
   d53cc:	e9c6 0100 	strd	r0, r1, [r6]
        //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );

        if ((aTune.Runtime())!=0)
   d53d0:	4854      	ldr	r0, [pc, #336]	; (d5524 <loop+0xc64>)
   d53d2:	f8df 8164 	ldr.w	r8, [pc, #356]	; d5538 <loop+0xc78>
   d53d6:	f000 fc43 	bl	d5c60 <_ZN9PID_ATune7RuntimeEv>
   d53da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   d53de:	46b1      	mov	r9, r6
   d53e0:	2800      	cmp	r0, #0
   d53e2:	d04e      	beq.n	d5482 <loop+0xbc2>
        {
          //we're done, set the tuning parameters
          tuning = false;
   d53e4:	4b50      	ldr	r3, [pc, #320]	; (d5528 <loop+0xc68>)
   d53e6:	2600      	movs	r6, #0
   d53e8:	701e      	strb	r6, [r3, #0]
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE COMPLETE Kp=%f, Ki=%f, Kd=%f", __FUNCTION__, now, aTune.GetKp(), aTune.GetKi(), aTune.GetKd()) );
   d53ea:	f002 ffb9 	bl	d8360 <_Z16_fetch_usbserialv>
   d53ee:	4607      	mov	r7, r0
   d53f0:	484c      	ldr	r0, [pc, #304]	; (d5524 <loop+0xc64>)
   d53f2:	f000 fd85 	bl	d5f00 <_ZN9PID_ATune5GetKpEv>
   d53f6:	484b      	ldr	r0, [pc, #300]	; (d5524 <loop+0xc64>)
   d53f8:	eeb0 8a40 	vmov.f32	s16, s0
   d53fc:	eef0 8a60 	vmov.f32	s17, s1
   d5400:	f000 fd9a 	bl	d5f38 <_ZN9PID_ATune5GetKiEv>
   d5404:	4847      	ldr	r0, [pc, #284]	; (d5524 <loop+0xc64>)
   d5406:	eeb0 9a40 	vmov.f32	s18, s0
   d540a:	eef0 9a60 	vmov.f32	s19, s1
   d540e:	f000 fdb1 	bl	d5f74 <_ZN9PID_ATune5GetKdEv>
   d5412:	4b3c      	ldr	r3, [pc, #240]	; (d5504 <loop+0xc44>)
   d5414:	4a45      	ldr	r2, [pc, #276]	; (d552c <loop+0xc6c>)
   d5416:	f8cd b000 	str.w	fp, [sp]
   d541a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d541e:	2101      	movs	r1, #1
   d5420:	4638      	mov	r0, r7
   d5422:	ed8d 9b04 	vstr	d9, [sp, #16]
   d5426:	ed8d 8b02 	vstr	d8, [sp, #8]
   d542a:	f003 facb 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
          mode=IDLE;
   d542e:	7026      	strb	r6, [r4, #0]
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d5430:	2200      	movs	r2, #0
   d5432:	2300      	movs	r3, #0
   d5434:	e9d5 0100 	ldrd	r0, r1, [r5]
   d5438:	f003 ff50 	bl	d92dc <__adddf3>
   d543c:	a320      	add	r3, pc, #128	; (adr r3, d54c0 <loop+0xc00>)
   d543e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5442:	4606      	mov	r6, r0
   d5444:	460f      	mov	r7, r1
   d5446:	f004 fb6d 	bl	d9b24 <__aeabi_dcmplt>
   d544a:	b158      	cbz	r0, d5464 <loop+0xba4>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d544c:	a31e      	add	r3, pc, #120	; (adr r3, d54c8 <loop+0xc08>)
   d544e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5452:	4630      	mov	r0, r6
   d5454:	4639      	mov	r1, r7
   d5456:	f004 fb83 	bl	d9b60 <__aeabi_dcmpgt>
   d545a:	b930      	cbnz	r0, d546a <loop+0xbaa>
   d545c:	a71a      	add	r7, pc, #104	; (adr r7, d54c8 <loop+0xc08>)
   d545e:	e9d7 6700 	ldrd	r6, r7, [r7]
   d5462:	e002      	b.n	d546a <loop+0xbaa>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5464:	a716      	add	r7, pc, #88	; (adr r7, d54c0 <loop+0xc00>)
   d5466:	e9d7 6700 	ldrd	r6, r7, [r7]
          //we're done, set the tuning parameters
          tuning = false;
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE COMPLETE Kp=%f, Ki=%f, Kd=%f", __FUNCTION__, now, aTune.GetKp(), aTune.GetKi(), aTune.GetKd()) );
          mode=IDLE;
          leftPower=adjustSpeed( leftPower, 0 );
          setPwm( leftMotor, leftPower );          
   d546a:	4639      	mov	r1, r7
        {
          //we're done, set the tuning parameters
          tuning = false;
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE COMPLETE Kp=%f, Ki=%f, Kd=%f", __FUNCTION__, now, aTune.GetKp(), aTune.GetKi(), aTune.GetKd()) );
          mode=IDLE;
          leftPower=adjustSpeed( leftPower, 0 );
   d546c:	e9c5 6700 	strd	r6, r7, [r5]
          setPwm( leftMotor, leftPower );          
   d5470:	4630      	mov	r0, r6
   d5472:	f004 fb95 	bl	d9ba0 <__aeabi_d2iz>
   d5476:	4601      	mov	r1, r0
   d5478:	f8d8 0000 	ldr.w	r0, [r8]
   d547c:	f7fe ff1c 	bl	d42b8 <_Z6setPwmP16Adafruit_DCMotori>
   d5480:	e0a9      	b.n	d55d6 <loop+0xd16>
        }
        else
        {
          leftPower=adjustSpeed( leftPower, leftOutput );
   d5482:	4c2b      	ldr	r4, [pc, #172]	; (d5530 <loop+0xc70>)
double leftPower=0.0;
double rightPower=0.0;

double adjustSpeed( double speed, double increment )
{
  double new_speed=max(min((speed+increment), 255), -255); 
   d5484:	e9d5 0100 	ldrd	r0, r1, [r5]
   d5488:	e9d4 2300 	ldrd	r2, r3, [r4]
   d548c:	f003 ff26 	bl	d92dc <__adddf3>
   d5490:	a30b      	add	r3, pc, #44	; (adr r3, d54c0 <loop+0xc00>)
   d5492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5496:	4606      	mov	r6, r0
   d5498:	460f      	mov	r7, r1
   d549a:	f004 fb43 	bl	d9b24 <__aeabi_dcmplt>
   d549e:	2800      	cmp	r0, #0
   d54a0:	d04c      	beq.n	d553c <loop+0xc7c>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d54a2:	a309      	add	r3, pc, #36	; (adr r3, d54c8 <loop+0xc08>)
   d54a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d54a8:	4630      	mov	r0, r6
   d54aa:	4639      	mov	r1, r7
   d54ac:	f004 fb58 	bl	d9b60 <__aeabi_dcmpgt>
   d54b0:	2800      	cmp	r0, #0
   d54b2:	d146      	bne.n	d5542 <loop+0xc82>
   d54b4:	a704      	add	r7, pc, #16	; (adr r7, d54c8 <loop+0xc08>)
   d54b6:	e9d7 6700 	ldrd	r6, r7, [r7]
   d54ba:	e042      	b.n	d5542 <loop+0xc82>
   d54bc:	f3af 8000 	nop.w
   d54c0:	00000000 	.word	0x00000000
   d54c4:	406fe000 	.word	0x406fe000
   d54c8:	00000000 	.word	0x00000000
   d54cc:	c06fe000 	.word	0xc06fe000
   d54d0:	2003ddc8 	.word	0x2003ddc8
   d54d4:	4092c000 	.word	0x4092c000
   d54d8:	2003dd18 	.word	0x2003dd18
   d54dc:	2003dda0 	.word	0x2003dda0
   d54e0:	2003ddc0 	.word	0x2003ddc0
   d54e4:	000da00a 	.word	0x000da00a
   d54e8:	000da000 	.word	0x000da000
   d54ec:	000da435 	.word	0x000da435
   d54f0:	2003dd90 	.word	0x2003dd90
   d54f4:	000da4bf 	.word	0x000da4bf
   d54f8:	2003dc10 	.word	0x2003dc10
   d54fc:	000da4c8 	.word	0x000da4c8
   d5500:	000da511 	.word	0x000da511
   d5504:	000d9e04 	.word	0x000d9e04
   d5508:	000da51c 	.word	0x000da51c
   d550c:	000da551 	.word	0x000da551
   d5510:	2003dda8 	.word	0x2003dda8
   d5514:	2003dcc0 	.word	0x2003dcc0
   d5518:	2003ddd4 	.word	0x2003ddd4
   d551c:	2003dc28 	.word	0x2003dc28
   d5520:	2003dbb0 	.word	0x2003dbb0
   d5524:	2003dee8 	.word	0x2003dee8
   d5528:	2003dc14 	.word	0x2003dc14
   d552c:	000da56a 	.word	0x000da56a
   d5530:	2003ddb0 	.word	0x2003ddb0
   d5534:	2003dcac 	.word	0x2003dcac
   d5538:	2003dd0c 	.word	0x2003dd0c

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d553c:	a730      	add	r7, pc, #192	; (adr r7, d5600 <loop+0xd40>)
   d553e:	e9d7 6700 	ldrd	r6, r7, [r7]
          setPwm( leftMotor, leftPower );          
        }
        else
        {
          leftPower=adjustSpeed( leftPower, leftOutput );
          setPwm( leftMotor, leftPower );
   d5542:	4639      	mov	r1, r7
          leftPower=adjustSpeed( leftPower, 0 );
          setPwm( leftMotor, leftPower );          
        }
        else
        {
          leftPower=adjustSpeed( leftPower, leftOutput );
   d5544:	e9c5 6700 	strd	r6, r7, [r5]
          setPwm( leftMotor, leftPower );
   d5548:	4630      	mov	r0, r6
   d554a:	f004 fb29 	bl	d9ba0 <__aeabi_d2iz>
   d554e:	4601      	mov	r1, r0
   d5550:	f8d8 0000 	ldr.w	r0, [r8]
   d5554:	f7fe feb0 	bl	d42b8 <_Z6setPwmP16Adafruit_DCMotori>
          //Serial.printlnf( "[%s]%d left power=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, now, power, newLeftPosition-oldLeftPosition, newLeftPosition, leftInput );
          VERBOSE( Serial.printlnf( "[%s] %d - left pid AUTOTUNE RUNNING input=%f, setpoint=%f, output=%f", __FUNCTION__, now, leftInput, leftSetpoint, leftOutput) );
   d5558:	f002 ff02 	bl	d8360 <_Z16_fetch_usbserialv>
   d555c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d5560:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5564:	4b1e      	ldr	r3, [pc, #120]	; (d55e0 <loop+0xd20>)
   d5566:	e9d3 2300 	ldrd	r2, r3, [r3]
   d556a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d556e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d5572:	2101      	movs	r1, #1
   d5574:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5578:	f8cd b000 	str.w	fp, [sp]
   d557c:	4b19      	ldr	r3, [pc, #100]	; (d55e4 <loop+0xd24>)
   d557e:	4a1a      	ldr	r2, [pc, #104]	; (d55e8 <loop+0xd28>)
   d5580:	f003 fa20 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>
   d5584:	f001 ff96 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
          telemetrySend( "leftPower", "{ \"_time\": \"%lu\", \"type\":\"power\", \"name\":\"leftPower\", \"power\" : \"%f\"  }", millis(), leftPower ) ;
   d5588:	e9d5 2300 	ldrd	r2, r3, [r5]
   d558c:	4917      	ldr	r1, [pc, #92]	; (d55ec <loop+0xd2c>)
   d558e:	e9cd 2300 	strd	r2, r3, [sp]
   d5592:	4602      	mov	r2, r0
   d5594:	4816      	ldr	r0, [pc, #88]	; (d55f0 <loop+0xd30>)
   d5596:	f7ff f81b 	bl	d45d0 <_Z13telemetrySendPKcS0_z>
          VERBOSE( Serial.printlnf( "[%s] %d - left power=%f", __FUNCTION__, now, leftPower) );
   d559a:	f002 fee1 	bl	d8360 <_Z16_fetch_usbserialv>
   d559e:	e9d5 2300 	ldrd	r2, r3, [r5]
   d55a2:	2101      	movs	r1, #1
   d55a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d55a8:	f8cd b000 	str.w	fp, [sp]
   d55ac:	4b0d      	ldr	r3, [pc, #52]	; (d55e4 <loop+0xd24>)
   d55ae:	4a11      	ldr	r2, [pc, #68]	; (d55f4 <loop+0xd34>)
   d55b0:	f003 fa08 	bl	d89c4 <_ZN5Print11printf_implEbPKcz>

          oldLeftPosition = newLeftPosition;
   d55b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d55b6:	f8c3 a000 	str.w	sl, [r3]
          oldLeftTime = now;
   d55ba:	4b0f      	ldr	r3, [pc, #60]	; (d55f8 <loop+0xd38>)
   d55bc:	f8c3 b000 	str.w	fp, [r3]
        }
      }
      break;
  }

}
   d55c0:	e009      	b.n	d55d6 <loop+0xd16>
        prevLeftSetpoint=leftSetpoint;
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
    {
      TxOn=false;
   d55c2:	2500      	movs	r5, #0
      speed=setTargetSpeed(0);
   d55c4:	4628      	mov	r0, r5
        prevLeftSetpoint=leftSetpoint;
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
    {
      TxOn=false;
   d55c6:	7035      	strb	r5, [r6, #0]
      speed=setTargetSpeed(0);
   d55c8:	f7fe fe8e 	bl	d42e8 <_Z14setTargetSpeedi>
   d55cc:	4b0b      	ldr	r3, [pc, #44]	; (d55fc <loop+0xd3c>)
      mode=IDLE;
   d55ce:	7025      	strb	r5, [r4, #0]
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
    {
      TxOn=false;
      speed=setTargetSpeed(0);
   d55d0:	6018      	str	r0, [r3, #0]
   d55d2:	f7ff bb0b 	b.w	d4bec <loop+0x32c>
        }
      }
      break;
  }

}
   d55d6:	b01b      	add	sp, #108	; 0x6c
   d55d8:	ecbd 8b0c 	vpop	{d8-d13}
   d55dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55e0:	2003dcb8 	.word	0x2003dcb8
   d55e4:	000d9e04 	.word	0x000d9e04
   d55e8:	000da5a3 	.word	0x000da5a3
   d55ec:	000da3cb 	.word	0x000da3cb
   d55f0:	000da413 	.word	0x000da413
   d55f4:	000da41d 	.word	0x000da41d
   d55f8:	2003dcc0 	.word	0x2003dcc0
   d55fc:	2003de50 	.word	0x2003de50
   d5600:	00000000 	.word	0x00000000
   d5604:	406fe000 	.word	0x406fe000

000d5608 <_ZN15Adafruit_BNO055D0Ev>:
   d5608:	b510      	push	{r4, lr}
   d560a:	2110      	movs	r1, #16
   d560c:	4604      	mov	r4, r0
   d560e:	f003 fc6f 	bl	d8ef0 <_ZdlPvj>
   d5612:	4620      	mov	r0, r4
   d5614:	bd10      	pop	{r4, pc}
	...

000d5618 <_GLOBAL__sub_I_leftPower>:
   d5618:	b570      	push	{r4, r5, r6, lr}
   d561a:	ed2d 8b06 	vpush	{d8-d10}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d561e:	4b52      	ldr	r3, [pc, #328]	; (d5768 <_GLOBAL__sub_I_leftPower+0x150>)
const double kp=0.256, ki=0.10, kd=0.0;
double leftSetpoint, leftInput, leftOutput;
double rightSetpoint, rightInput, rightOutput;

//Specify the links and initial tuning parameters
PID leftPID(&leftInput, &leftOutput, &leftSetpoint, kp, ki, kd, PID::DIRECT);
   d5620:	4e52      	ldr	r6, [pc, #328]	; (d576c <_GLOBAL__sub_I_leftPower+0x154>)
   d5622:	4d53      	ldr	r5, [pc, #332]	; (d5770 <_GLOBAL__sub_I_leftPower+0x158>)
        }
      }
      break;
  }

}
   d5624:	b082      	sub	sp, #8
   d5626:	2400      	movs	r4, #0
const double kp=0.256, ki=0.10, kd=0.0;
double leftSetpoint, leftInput, leftOutput;
double rightSetpoint, rightInput, rightOutput;

//Specify the links and initial tuning parameters
PID leftPID(&leftInput, &leftOutput, &leftSetpoint, kp, ki, kd, PID::DIRECT);
   d5628:	ed9f 8b45 	vldr	d8, [pc, #276]	; d5740 <_GLOBAL__sub_I_leftPower+0x128>
   d562c:	601c      	str	r4, [r3, #0]
   d562e:	ed9f ab46 	vldr	d10, [pc, #280]	; d5748 <_GLOBAL__sub_I_leftPower+0x130>

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5632:	f001 ff5f 	bl	d74f4 <HAL_Pin_Map>
   d5636:	eeb0 2a48 	vmov.f32	s4, s16
   d563a:	eef0 2a68 	vmov.f32	s5, s17
   d563e:	eeb0 1a4a 	vmov.f32	s2, s20
   d5642:	eef0 1a6a 	vmov.f32	s3, s21
   d5646:	ed9f 9b42 	vldr	d9, [pc, #264]	; d5750 <_GLOBAL__sub_I_leftPower+0x138>
   d564a:	4b4a      	ldr	r3, [pc, #296]	; (d5774 <_GLOBAL__sub_I_leftPower+0x15c>)
   d564c:	eeb0 0a49 	vmov.f32	s0, s18
   d5650:	eef0 0a69 	vmov.f32	s1, s19
   d5654:	6018      	str	r0, [r3, #0]
   d5656:	4632      	mov	r2, r6
   d5658:	9400      	str	r4, [sp, #0]
   d565a:	4629      	mov	r1, r5
   d565c:	4b46      	ldr	r3, [pc, #280]	; (d5778 <_GLOBAL__sub_I_leftPower+0x160>)
   d565e:	4847      	ldr	r0, [pc, #284]	; (d577c <_GLOBAL__sub_I_leftPower+0x164>)
   d5660:	f000 fa6a 	bl	d5b38 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
PID rightPID(&rightInput, &rightOutput, &rightSetpoint, kp, ki, kd, PID::DIRECT);
   d5664:	eeb0 2a48 	vmov.f32	s4, s16
   d5668:	eef0 2a68 	vmov.f32	s5, s17
   d566c:	eeb0 1a4a 	vmov.f32	s2, s20
   d5670:	eef0 1a6a 	vmov.f32	s3, s21
   d5674:	eeb0 0a49 	vmov.f32	s0, s18
   d5678:	eef0 0a69 	vmov.f32	s1, s19
   d567c:	9400      	str	r4, [sp, #0]
   d567e:	4b40      	ldr	r3, [pc, #256]	; (d5780 <_GLOBAL__sub_I_leftPower+0x168>)
   d5680:	4a40      	ldr	r2, [pc, #256]	; (d5784 <_GLOBAL__sub_I_leftPower+0x16c>)
   d5682:	4941      	ldr	r1, [pc, #260]	; (d5788 <_GLOBAL__sub_I_leftPower+0x170>)
   d5684:	4841      	ldr	r0, [pc, #260]	; (d578c <_GLOBAL__sub_I_leftPower+0x174>)
   d5686:	f000 fa57 	bl	d5b38 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
//double outputStart=5;
double aTuneStep=200, aTuneNoise=20, aTuneStartValue=0;
unsigned int aTuneLookBack=20;
boolean tuning = false;

PID_ATune aTune(&leftInput, &leftOutput);
   d568a:	4632      	mov	r2, r6
   d568c:	4629      	mov	r1, r5
   d568e:	4840      	ldr	r0, [pc, #256]	; (d5790 <_GLOBAL__sub_I_leftPower+0x178>)
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d5690:	4d40      	ldr	r5, [pc, #256]	; (d5794 <_GLOBAL__sub_I_leftPower+0x17c>)
//double outputStart=5;
double aTuneStep=200, aTuneNoise=20, aTuneStartValue=0;
unsigned int aTuneLookBack=20;
boolean tuning = false;

PID_ATune aTune(&leftInput, &leftOutput);
   d5692:	f000 fc9f 	bl	d5fd4 <_ZN9PID_ATuneC1EPdS0_>
#define BALANCE_THRESHOLD_MAX (14)

//  balancing PID
const double bkp=2.0, bki=0.5, bkd=0;
double balanceSetpoint, balanceInput, balanceOutput;
PID balancePID(&balanceInput, &balanceOutput, &balanceSetpoint, bkp, bki, bkd, PID::DIRECT);
   d5696:	eeb0 2a48 	vmov.f32	s4, s16
   d569a:	eef0 2a68 	vmov.f32	s5, s17
   d569e:	ed9f 1b2e 	vldr	d1, [pc, #184]	; d5758 <_GLOBAL__sub_I_leftPower+0x140>
   d56a2:	ed9f 0b2f 	vldr	d0, [pc, #188]	; d5760 <_GLOBAL__sub_I_leftPower+0x148>
   d56a6:	4b3c      	ldr	r3, [pc, #240]	; (d5798 <_GLOBAL__sub_I_leftPower+0x180>)
   d56a8:	9400      	str	r4, [sp, #0]
   d56aa:	4a3c      	ldr	r2, [pc, #240]	; (d579c <_GLOBAL__sub_I_leftPower+0x184>)
   d56ac:	493c      	ldr	r1, [pc, #240]	; (d57a0 <_GLOBAL__sub_I_leftPower+0x188>)
   d56ae:	483d      	ldr	r0, [pc, #244]	; (d57a4 <_GLOBAL__sub_I_leftPower+0x18c>)
long oldRightPosition  = 0;
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
   d56b0:	4c3d      	ldr	r4, [pc, #244]	; (d57a8 <_GLOBAL__sub_I_leftPower+0x190>)
#define BALANCE_THRESHOLD_MAX (14)

//  balancing PID
const double bkp=2.0, bki=0.5, bkd=0;
double balanceSetpoint, balanceInput, balanceOutput;
PID balancePID(&balanceInput, &balanceOutput, &balanceSetpoint, bkp, bki, bkd, PID::DIRECT);
   d56b2:	f000 fa41 	bl	d5b38 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>



// Change these two numbers to the pins connected to your encoder.
// Both pins must have interrupt capability
Encoder rightEnc(D6, D8);
   d56b6:	2208      	movs	r2, #8
   d56b8:	2106      	movs	r1, #6
   d56ba:	483c      	ldr	r0, [pc, #240]	; (d57ac <_GLOBAL__sub_I_leftPower+0x194>)
   d56bc:	f7fe fe68 	bl	d4390 <_ZN7EncoderC1Ett>
//Encoder rightEnc(D8, D6);
Encoder leftEnc(D5, D4);
   d56c0:	2204      	movs	r2, #4
   d56c2:	2105      	movs	r1, #5
   d56c4:	483a      	ldr	r0, [pc, #232]	; (d57b0 <_GLOBAL__sub_I_leftPower+0x198>)
   d56c6:	f7fe fe63 	bl	d4390 <_ZN7EncoderC1Ett>
long oldRightPosition  = 0;
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
   d56ca:	2160      	movs	r1, #96	; 0x60
   d56cc:	4620      	mov	r0, r4
   d56ce:	f000 fd17 	bl	d6100 <_ZN20Adafruit_MotorShieldC1Eh>
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d56d2:	2103      	movs	r1, #3
   d56d4:	4620      	mov	r0, r4
   d56d6:	f000 fcd9 	bl	d608c <_ZN20Adafruit_MotorShield8getMotorEh>
   d56da:	4b36      	ldr	r3, [pc, #216]	; (d57b4 <_GLOBAL__sub_I_leftPower+0x19c>)
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d56dc:	2104      	movs	r1, #4
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d56de:	6018      	str	r0, [r3, #0]
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d56e0:	4620      	mov	r0, r4
   d56e2:	f000 fcd3 	bl	d608c <_ZN20Adafruit_MotorShield8getMotorEh>
   d56e6:	4b34      	ldr	r3, [pc, #208]	; (d57b8 <_GLOBAL__sub_I_leftPower+0x1a0>)
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d56e8:	4c34      	ldr	r4, [pc, #208]	; (d57bc <_GLOBAL__sub_I_leftPower+0x1a4>)
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d56ea:	6018      	str	r0, [r3, #0]
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d56ec:	2228      	movs	r2, #40	; 0x28
   d56ee:	2137      	movs	r1, #55	; 0x37
   d56f0:	4628      	mov	r0, r5
   d56f2:	f001 fb0b 	bl	d6d0c <_ZN15Adafruit_BNO055C1Elh>
   d56f6:	4622      	mov	r2, r4
   d56f8:	4931      	ldr	r1, [pc, #196]	; (d57c0 <_GLOBAL__sub_I_leftPower+0x1a8>)
   d56fa:	4628      	mov	r0, r5
   d56fc:	f003 fbea 	bl	d8ed4 <__aeabi_atexit>

unsigned long serialTime; //this will help us know when to talk with processing

I2CSlave device(Wire1, 0x10, 10);
   d5700:	f003 fb68 	bl	d8dd4 <_Z20__fetch_global_Wire1v>
   d5704:	4d2f      	ldr	r5, [pc, #188]	; (d57c4 <_GLOBAL__sub_I_leftPower+0x1ac>)
   d5706:	230a      	movs	r3, #10
   d5708:	4601      	mov	r1, r0
   d570a:	2210      	movs	r2, #16
   d570c:	4628      	mov	r0, r5
   d570e:	f001 fc99 	bl	d7044 <_ZN8I2CSlaveC1ER7TwoWirehj>
   d5712:	4628      	mov	r0, r5
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);
   d5714:	4d2c      	ldr	r5, [pc, #176]	; (d57c8 <_GLOBAL__sub_I_leftPower+0x1b0>)

Adafruit_BNO055 bno = Adafruit_BNO055(55);

unsigned long serialTime; //this will help us know when to talk with processing

I2CSlave device(Wire1, 0x10, 10);
   d5716:	492d      	ldr	r1, [pc, #180]	; (d57cc <_GLOBAL__sub_I_leftPower+0x1b4>)
   d5718:	4622      	mov	r2, r4
   d571a:	f003 fbdb 	bl	d8ed4 <__aeabi_atexit>
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);
   d571e:	4b2c      	ldr	r3, [pc, #176]	; (d57d0 <_GLOBAL__sub_I_leftPower+0x1b8>)
   d5720:	492c      	ldr	r1, [pc, #176]	; (d57d4 <_GLOBAL__sub_I_leftPower+0x1bc>)
   d5722:	f240 725b 	movw	r2, #1883	; 0x75b
   d5726:	4628      	mov	r0, r5
   d5728:	f000 fef6 	bl	d6518 <_ZN4MQTTC1EPhtPFvPcS0_jE>
   d572c:	492a      	ldr	r1, [pc, #168]	; (d57d8 <_GLOBAL__sub_I_leftPower+0x1c0>)
   d572e:	4622      	mov	r2, r4
   d5730:	4628      	mov	r0, r5
        }
      }
      break;
  }

}
   d5732:	b002      	add	sp, #8
   d5734:	ecbd 8b06 	vpop	{d8-d10}
   d5738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 192,168,1,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);
   d573c:	f003 bbca 	b.w	d8ed4 <__aeabi_atexit>
	...
   d5748:	9999999a 	.word	0x9999999a
   d574c:	3fb99999 	.word	0x3fb99999
   d5750:	d2f1a9fc 	.word	0xd2f1a9fc
   d5754:	3fd0624d 	.word	0x3fd0624d
   d5758:	00000000 	.word	0x00000000
   d575c:	3fe00000 	.word	0x3fe00000
   d5760:	00000000 	.word	0x00000000
   d5764:	40000000 	.word	0x40000000
   d5768:	2003dd10 	.word	0x2003dd10
   d576c:	2003ddb0 	.word	0x2003ddb0
   d5770:	2003dc28 	.word	0x2003dc28
   d5774:	2003dd98 	.word	0x2003dd98
   d5778:	2003dcb8 	.word	0x2003dcb8
   d577c:	2003de70 	.word	0x2003de70
   d5780:	2003dda0 	.word	0x2003dda0
   d5784:	2003ddc0 	.word	0x2003ddc0
   d5788:	2003ddc8 	.word	0x2003ddc8
   d578c:	2003dd18 	.word	0x2003dd18
   d5790:	2003dee8 	.word	0x2003dee8
   d5794:	2003dcd0 	.word	0x2003dcd0
   d5798:	2003dcc8 	.word	0x2003dcc8
   d579c:	2003dc18 	.word	0x2003dc18
   d57a0:	2003dce8 	.word	0x2003dce8
   d57a4:	2003dc30 	.word	0x2003dc30
   d57a8:	2003ddd8 	.word	0x2003ddd8
   d57ac:	2003dcf0 	.word	0x2003dcf0
   d57b0:	2003de54 	.word	0x2003de54
   d57b4:	2003dd0c 	.word	0x2003dd0c
   d57b8:	2003dc10 	.word	0x2003dc10
   d57bc:	2003db90 	.word	0x2003db90
   d57c0:	000d40d9 	.word	0x000d40d9
   d57c4:	2003db94 	.word	0x2003db94
   d57c8:	2003dbb8 	.word	0x2003dbb8
   d57cc:	000d7011 	.word	0x000d7011
   d57d0:	000d40dd 	.word	0x000d40dd
   d57d4:	2003db08 	.word	0x2003db08
   d57d8:	000d6c9d 	.word	0x000d6c9d

000d57dc <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
   d57dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if(!inAuto) return false;
   d57e0:	f890 5070 	ldrb.w	r5, [r0, #112]	; 0x70
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
   d57e4:	b087      	sub	sp, #28
   d57e6:	4604      	mov	r4, r0
   if(!inAuto) return false;
   d57e8:	b90d      	cbnz	r5, d57ee <_ZN3PID7ComputeEv+0x12>
   d57ea:	2500      	movs	r5, #0
   d57ec:	e06f      	b.n	d58ce <_ZN3PID7ComputeEv+0xf2>
   d57ee:	f001 fe61 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
   unsigned long now = millis();
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   d57f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d57f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d57f6:	9003      	str	r0, [sp, #12]
   d57f8:	1ac3      	subs	r3, r0, r3
   d57fa:	4293      	cmp	r3, r2
   d57fc:	d3f5      	bcc.n	d57ea <_ZN3PID7ComputeEv+0xe>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
   d57fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
      double error = *mySetpoint - input;
   d5800:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   unsigned long now = millis();
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
   d5802:	e9d3 8900 	ldrd	r8, r9, [r3]
      double error = *mySetpoint - input;
   d5806:	e9d1 0100 	ldrd	r0, r1, [r1]
   d580a:	4642      	mov	r2, r8
   d580c:	464b      	mov	r3, r9
   d580e:	f003 fd63 	bl	d92d8 <__aeabi_dsub>
      ITerm+= (ki * error);
   d5812:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
      double error = *mySetpoint - input;
   d5816:	e9cd 0104 	strd	r0, r1, [sp, #16]
      ITerm+= (ki * error);
   d581a:	f003 ff11 	bl	d9640 <__aeabi_dmul>
   d581e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d5822:	f003 fd5b 	bl	d92dc <__adddf3>
      if(ITerm > outMax) ITerm= outMax;
   d5826:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
   d582a:	4606      	mov	r6, r0
   d582c:	460f      	mov	r7, r1
   d582e:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
      if(ITerm > outMax) ITerm= outMax;
   d5832:	4652      	mov	r2, sl
   d5834:	465b      	mov	r3, fp
   d5836:	f004 f993 	bl	d9b60 <__aeabi_dcmpgt>
   d583a:	b110      	cbz	r0, d5842 <_ZN3PID7ComputeEv+0x66>
   d583c:	e9c4 ab12 	strd	sl, fp, [r4, #72]	; 0x48
   d5840:	e00e      	b.n	d5860 <_ZN3PID7ComputeEv+0x84>
      else if(ITerm < outMin) ITerm= outMin;
   d5842:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
   d5846:	4630      	mov	r0, r6
   d5848:	ec53 2b17 	vmov	r2, r3, d7
   d584c:	4639      	mov	r1, r7
   d584e:	ed8d 7b00 	vstr	d7, [sp]
   d5852:	f004 f967 	bl	d9b24 <__aeabi_dcmplt>
   d5856:	b118      	cbz	r0, d5860 <_ZN3PID7ComputeEv+0x84>
   d5858:	ed9d 7b00 	vldr	d7, [sp]
   d585c:	ed84 7b12 	vstr	d7, [r4, #72]	; 0x48
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
   d5860:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d5864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5868:	f003 feea 	bl	d9640 <__aeabi_dmul>
   d586c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d5870:	f003 fd34 	bl	d92dc <__adddf3>
   d5874:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
   d5878:	4606      	mov	r6, r0
   d587a:	460f      	mov	r7, r1
   d587c:	4640      	mov	r0, r8
   d587e:	4649      	mov	r1, r9
   d5880:	f003 fd2a 	bl	d92d8 <__aeabi_dsub>
   d5884:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   d5888:	f003 feda 	bl	d9640 <__aeabi_dmul>
   d588c:	4602      	mov	r2, r0
   d588e:	460b      	mov	r3, r1
   d5890:	4630      	mov	r0, r6
   d5892:	4639      	mov	r1, r7
   d5894:	f003 fd20 	bl	d92d8 <__aeabi_dsub>
   d5898:	4606      	mov	r6, r0
   d589a:	460f      	mov	r7, r1
      
	  if(output > outMax) output = outMax;
   d589c:	4602      	mov	r2, r0
   d589e:	460b      	mov	r3, r1
   d58a0:	4650      	mov	r0, sl
   d58a2:	4659      	mov	r1, fp
   d58a4:	f004 f93e 	bl	d9b24 <__aeabi_dcmplt>
   d58a8:	b950      	cbnz	r0, d58c0 <_ZN3PID7ComputeEv+0xe4>
      else if(output < outMin) output = outMin;
   d58aa:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
   d58ae:	4630      	mov	r0, r6
   d58b0:	4652      	mov	r2, sl
   d58b2:	465b      	mov	r3, fp
   d58b4:	4639      	mov	r1, r7
   d58b6:	f004 f935 	bl	d9b24 <__aeabi_dcmplt>
   d58ba:	b908      	cbnz	r0, d58c0 <_ZN3PID7ComputeEv+0xe4>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
   d58bc:	46b2      	mov	sl, r6
   d58be:	46bb      	mov	fp, r7
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
   d58c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d58c2:	e9c3 ab00 	strd	sl, fp, [r3]
	  
      /*Remember some variables for next time*/
      lastInput = input;
   d58c6:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
      lastTime = now;
   d58ca:	9b03      	ldr	r3, [sp, #12]
   d58cc:	6423      	str	r3, [r4, #64]	; 0x40
	  return true;
   }
   else return false;
}
   d58ce:	4628      	mov	r0, r5
   d58d0:	b007      	add	sp, #28
   d58d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d58d8 <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
   d58d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d58dc:	ec55 4b10 	vmov	r4, r5, d0
   d58e0:	4682      	mov	sl, r0
   if (Kp<0 || Ki<0 || Kd<0) return;
   d58e2:	2200      	movs	r2, #0
   d58e4:	2300      	movs	r3, #0
   d58e6:	ee10 0a10 	vmov	r0, s0
   d58ea:	4629      	mov	r1, r5
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
   d58ec:	ec59 8b11 	vmov	r8, r9, d1
   d58f0:	ec57 6b12 	vmov	r6, r7, d2
   if (Kp<0 || Ki<0 || Kd<0) return;
   d58f4:	f004 f916 	bl	d9b24 <__aeabi_dcmplt>
   d58f8:	2800      	cmp	r0, #0
   d58fa:	d151      	bne.n	d59a0 <_ZN3PID10SetTuningsEddd+0xc8>
   d58fc:	2200      	movs	r2, #0
   d58fe:	2300      	movs	r3, #0
   d5900:	4640      	mov	r0, r8
   d5902:	4649      	mov	r1, r9
   d5904:	f004 f90e 	bl	d9b24 <__aeabi_dcmplt>
   d5908:	2800      	cmp	r0, #0
   d590a:	d149      	bne.n	d59a0 <_ZN3PID10SetTuningsEddd+0xc8>
   d590c:	2200      	movs	r2, #0
   d590e:	2300      	movs	r3, #0
   d5910:	4630      	mov	r0, r6
   d5912:	4639      	mov	r1, r7
   d5914:	f004 f906 	bl	d9b24 <__aeabi_dcmplt>
   d5918:	2800      	cmp	r0, #0
   d591a:	d141      	bne.n	d59a0 <_ZN3PID10SetTuningsEddd+0xc8>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   d591c:	e9ca 8902 	strd	r8, r9, [sl, #8]
   d5920:	e9ca 6704 	strd	r6, r7, [sl, #16]
   d5924:	e9ca 4500 	strd	r4, r5, [sl]
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d5928:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   d592c:	f003 fe12 	bl	d9554 <__aeabi_ui2d>
   d5930:	2200      	movs	r2, #0
   d5932:	4b1d      	ldr	r3, [pc, #116]	; (d59a8 <_ZN3PID10SetTuningsEddd+0xd0>)
   d5934:	f003 ffae 	bl	d9894 <__aeabi_ddiv>
   kp = Kp;
   d5938:	e9ca 4506 	strd	r4, r5, [sl, #24]
{
   if (Kp<0 || Ki<0 || Kd<0) return;
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d593c:	e9cd 0100 	strd	r0, r1, [sp]
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   d5940:	4602      	mov	r2, r0
   d5942:	460b      	mov	r3, r1
   d5944:	4640      	mov	r0, r8
   d5946:	4649      	mov	r1, r9
   d5948:	f003 fe7a 	bl	d9640 <__aeabi_dmul>
   d594c:	4680      	mov	r8, r0
   d594e:	4689      	mov	r9, r1
   kd = Kd / SampleTimeInSec;
   d5950:	e9dd 2300 	ldrd	r2, r3, [sp]
   d5954:	4630      	mov	r0, r6
   d5956:	4639      	mov	r1, r7
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   d5958:	e9ca 8908 	strd	r8, r9, [sl, #32]
   kd = Kd / SampleTimeInSec;
   d595c:	f003 ff9a 	bl	d9894 <__aeabi_ddiv>
 
  if(controllerDirection ==REVERSE)
   d5960:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
   d5964:	4606      	mov	r6, r0
   d5966:	460f      	mov	r7, r1
 
  if(controllerDirection ==REVERSE)
   d5968:	2b01      	cmp	r3, #1
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
   d596a:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
 
  if(controllerDirection ==REVERSE)
   d596e:	d117      	bne.n	d59a0 <_ZN3PID10SetTuningsEddd+0xc8>
   {
      kp = (0 - kp);
   d5970:	4622      	mov	r2, r4
   d5972:	462b      	mov	r3, r5
   d5974:	2000      	movs	r0, #0
   d5976:	2100      	movs	r1, #0
   d5978:	f003 fcae 	bl	d92d8 <__aeabi_dsub>
      ki = (0 - ki);
   d597c:	4642      	mov	r2, r8
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
 
  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
   d597e:	e9ca 0106 	strd	r0, r1, [sl, #24]
      ki = (0 - ki);
   d5982:	464b      	mov	r3, r9
   d5984:	2000      	movs	r0, #0
   d5986:	2100      	movs	r1, #0
   d5988:	f003 fca6 	bl	d92d8 <__aeabi_dsub>
      kd = (0 - kd);
   d598c:	4632      	mov	r2, r6
   kd = Kd / SampleTimeInSec;
 
  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
      ki = (0 - ki);
   d598e:	e9ca 0108 	strd	r0, r1, [sl, #32]
      kd = (0 - kd);
   d5992:	463b      	mov	r3, r7
   d5994:	2000      	movs	r0, #0
   d5996:	2100      	movs	r1, #0
   d5998:	f003 fc9e 	bl	d92d8 <__aeabi_dsub>
   d599c:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
   }
}
   d59a0:	b002      	add	sp, #8
   d59a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d59a6:	bf00      	nop
   d59a8:	408f4000 	.word	0x408f4000

000d59ac <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   d59ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (NewSampleTime > 0)
   d59ae:	1e0d      	subs	r5, r1, #0
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   d59b0:	4604      	mov	r4, r0
   if (NewSampleTime > 0)
   d59b2:	dd20      	ble.n	d59f6 <_ZN3PID13SetSampleTimeEi+0x4a>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
   d59b4:	4628      	mov	r0, r5
   d59b6:	f003 fddd 	bl	d9574 <__aeabi_i2d>
   d59ba:	4606      	mov	r6, r0
   d59bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   d59be:	460f      	mov	r7, r1
   d59c0:	f003 fdc8 	bl	d9554 <__aeabi_ui2d>
   d59c4:	4602      	mov	r2, r0
   d59c6:	460b      	mov	r3, r1
   d59c8:	4630      	mov	r0, r6
   d59ca:	4639      	mov	r1, r7
   d59cc:	f003 ff62 	bl	d9894 <__aeabi_ddiv>
      ki *= ratio;
   d59d0:	4602      	mov	r2, r0
   d59d2:	460b      	mov	r3, r1
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
   d59d4:	4606      	mov	r6, r0
   d59d6:	460f      	mov	r7, r1
      ki *= ratio;
   d59d8:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   d59dc:	f003 fe30 	bl	d9640 <__aeabi_dmul>
      kd /= ratio;
   d59e0:	4632      	mov	r2, r6
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
      ki *= ratio;
   d59e2:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd /= ratio;
   d59e6:	463b      	mov	r3, r7
   d59e8:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   d59ec:	f003 ff52 	bl	d9894 <__aeabi_ddiv>
   d59f0:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
      SampleTime = (unsigned long)NewSampleTime;
   d59f4:	65a5      	str	r5, [r4, #88]	; 0x58
   d59f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59f8 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   d59f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59fc:	ec55 4b10 	vmov	r4, r5, d0
   d5a00:	ec57 6b11 	vmov	r6, r7, d1
   d5a04:	4682      	mov	sl, r0
   if(Min >= Max) return;
   d5a06:	ee11 2a10 	vmov	r2, s2
   d5a0a:	463b      	mov	r3, r7
   d5a0c:	ee10 0a10 	vmov	r0, s0
   d5a10:	4629      	mov	r1, r5
   d5a12:	f004 f89b 	bl	d9b4c <__aeabi_dcmpge>
   d5a16:	2800      	cmp	r0, #0
   d5a18:	d133      	bne.n	d5a82 <_ZN3PID15SetOutputLimitsEdd+0x8a>
   outMin = Min;
   outMax = Max;
 
   if(inAuto)
   d5a1a:	f89a 3070 	ldrb.w	r3, [sl, #112]	; 0x70
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   d5a1e:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
   outMax = Max;
   d5a22:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
 
   if(inAuto)
   d5a26:	b363      	cbz	r3, d5a82 <_ZN3PID15SetOutputLimitsEdd+0x8a>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   d5a28:	f8da b038 	ldr.w	fp, [sl, #56]	; 0x38
   d5a2c:	e9db 8900 	ldrd	r8, r9, [fp]
   d5a30:	4630      	mov	r0, r6
   d5a32:	4642      	mov	r2, r8
   d5a34:	464b      	mov	r3, r9
   d5a36:	4639      	mov	r1, r7
   d5a38:	f004 f874 	bl	d9b24 <__aeabi_dcmplt>
   d5a3c:	b110      	cbz	r0, d5a44 <_ZN3PID15SetOutputLimitsEdd+0x4c>
   d5a3e:	e9cb 6700 	strd	r6, r7, [fp]
   d5a42:	e008      	b.n	d5a56 <_ZN3PID15SetOutputLimitsEdd+0x5e>
	   else if(*myOutput < outMin) *myOutput = outMin;
   d5a44:	4642      	mov	r2, r8
   d5a46:	464b      	mov	r3, r9
   d5a48:	4620      	mov	r0, r4
   d5a4a:	4629      	mov	r1, r5
   d5a4c:	f004 f888 	bl	d9b60 <__aeabi_dcmpgt>
   d5a50:	b108      	cbz	r0, d5a56 <_ZN3PID15SetOutputLimitsEdd+0x5e>
   d5a52:	e9cb 4500 	strd	r4, r5, [fp]
	 
	   if(ITerm > outMax) ITerm= outMax;
   d5a56:	e9da 6712 	ldrd	r6, r7, [sl, #72]	; 0x48
   d5a5a:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
   d5a5e:	4630      	mov	r0, r6
   d5a60:	4622      	mov	r2, r4
   d5a62:	462b      	mov	r3, r5
   d5a64:	4639      	mov	r1, r7
   d5a66:	f004 f87b 	bl	d9b60 <__aeabi_dcmpgt>
   d5a6a:	b940      	cbnz	r0, d5a7e <_ZN3PID15SetOutputLimitsEdd+0x86>
	   else if(ITerm < outMin) ITerm= outMin;
   d5a6c:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
   d5a70:	4630      	mov	r0, r6
   d5a72:	4622      	mov	r2, r4
   d5a74:	462b      	mov	r3, r5
   d5a76:	4639      	mov	r1, r7
   d5a78:	f004 f854 	bl	d9b24 <__aeabi_dcmplt>
   d5a7c:	b108      	cbz	r0, d5a82 <_ZN3PID15SetOutputLimitsEdd+0x8a>
   d5a7e:	e9ca 4512 	strd	r4, r5, [sl, #72]	; 0x48
   d5a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5a86 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   d5a86:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
   ITerm = *myOutput;
   d5a8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5a8c:	e9d3 6700 	ldrd	r6, r7, [r3]
   d5a90:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
   lastInput = *myInput;
   d5a94:	6b43      	ldr	r3, [r0, #52]	; 0x34
   if(ITerm > outMax) ITerm = outMax;
   d5a96:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   ITerm = *myOutput;
   lastInput = *myInput;
   d5a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   d5a9e:	4604      	mov	r4, r0
   ITerm = *myOutput;
   lastInput = *myInput;
   d5aa0:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
   if(ITerm > outMax) ITerm = outMax;
   d5aa4:	4639      	mov	r1, r7
   d5aa6:	4642      	mov	r2, r8
   d5aa8:	464b      	mov	r3, r9
   d5aaa:	4630      	mov	r0, r6
   d5aac:	f004 f858 	bl	d9b60 <__aeabi_dcmpgt>
   d5ab0:	b940      	cbnz	r0, d5ac4 <_ZN3PID10InitializeEv+0x3e>
   else if(ITerm < outMin) ITerm = outMin;
   d5ab2:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
   d5ab6:	4630      	mov	r0, r6
   d5ab8:	4642      	mov	r2, r8
   d5aba:	464b      	mov	r3, r9
   d5abc:	4639      	mov	r1, r7
   d5abe:	f004 f831 	bl	d9b24 <__aeabi_dcmplt>
   d5ac2:	b108      	cbz	r0, d5ac8 <_ZN3PID10InitializeEv+0x42>
   d5ac4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   d5ac8:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

000d5acc <_ZN3PID7SetModeENS_6mode_tE>:
 * Allows the controller Mode to be set to MANUAL (0) or AUTOMATIC (1)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(mode_t Mode)
{
   d5acc:	b538      	push	{r3, r4, r5, lr}
    bool newAuto = (Mode == AUTOMATIC);
   d5ace:	1e4b      	subs	r3, r1, #1
   d5ad0:	425d      	negs	r5, r3
   d5ad2:	415d      	adcs	r5, r3
    if(newAuto == !inAuto)
   d5ad4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   d5ad8:	f083 0301 	eor.w	r3, r3, #1
   d5adc:	429d      	cmp	r5, r3
 * Allows the controller Mode to be set to MANUAL (0) or AUTOMATIC (1)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(mode_t Mode)
{
   d5ade:	4604      	mov	r4, r0
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto == !inAuto)
   d5ae0:	d101      	bne.n	d5ae6 <_ZN3PID7SetModeENS_6mode_tE+0x1a>
    {  /*we just went from manual to auto*/
        PID::Initialize();
   d5ae2:	f7ff ffd0 	bl	d5a86 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
   d5ae6:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
   d5aea:	bd38      	pop	{r3, r4, r5, pc}

000d5aec <_ZN3PID22SetControllerDirectionENS_11direction_tE>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   d5aec:	b538      	push	{r3, r4, r5, lr}
   if(inAuto && Direction !=controllerDirection)
   d5aee:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   d5af2:	4604      	mov	r4, r0
   d5af4:	460d      	mov	r5, r1
   if(inAuto && Direction !=controllerDirection)
   d5af6:	b1d3      	cbz	r3, d5b2e <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   d5af8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d5afa:	4299      	cmp	r1, r3
   d5afc:	d017      	beq.n	d5b2e <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   {
	  kp = (0 - kp);
   d5afe:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   d5b02:	2100      	movs	r1, #0
   d5b04:	2000      	movs	r0, #0
   d5b06:	f003 fbe7 	bl	d92d8 <__aeabi_dsub>
      ki = (0 - ki);
   d5b0a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   if(inAuto && Direction !=controllerDirection)
   {
	  kp = (0 - kp);
   d5b0e:	e9c4 0106 	strd	r0, r1, [r4, #24]
      ki = (0 - ki);
   d5b12:	2000      	movs	r0, #0
   d5b14:	2100      	movs	r1, #0
   d5b16:	f003 fbdf 	bl	d92d8 <__aeabi_dsub>
      kd = (0 - kd);
   d5b1a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
void PID::SetControllerDirection(direction_t Direction)
{
   if(inAuto && Direction !=controllerDirection)
   {
	  kp = (0 - kp);
      ki = (0 - ki);
   d5b1e:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd = (0 - kd);
   d5b22:	2000      	movs	r0, #0
   d5b24:	2100      	movs	r1, #0
   d5b26:	f003 fbd7 	bl	d92d8 <__aeabi_dsub>
   d5b2a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
   }   
   controllerDirection = Direction;
   d5b2e:	6325      	str	r5, [r4, #48]	; 0x30
   d5b30:	bd38      	pop	{r3, r4, r5, pc}
   d5b32:	0000      	movs	r0, r0
   d5b34:	0000      	movs	r0, r0
	...

000d5b38 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d5b38:	b510      	push	{r4, lr}
   d5b3a:	ed2d 8b06 	vpush	{d8-d10}
   d5b3e:	eeb0 8a40 	vmov.f32	s16, s0
   d5b42:	eef0 8a60 	vmov.f32	s17, s1
   d5b46:	eeb0 9a41 	vmov.f32	s18, s2
   d5b4a:	eef0 9a61 	vmov.f32	s19, s3
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
    myInput = Input;
    mySetpoint = Setpoint;
   d5b4e:	63c3      	str	r3, [r0, #60]	; 0x3c
	inAuto = false;
   d5b50:	2300      	movs	r3, #0
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
   d5b52:	6382      	str	r2, [r0, #56]	; 0x38
    myInput = Input;
    mySetpoint = Setpoint;
	inAuto = false;
   d5b54:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   d5b58:	2200      	movs	r2, #0
   d5b5a:	2300      	movs	r3, #0
   d5b5c:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d5b60:	eeb0 aa42 	vmov.f32	s20, s4
   d5b64:	eef0 aa62 	vmov.f32	s21, s5
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   outMax = Max;
   d5b68:	a313      	add	r3, pc, #76	; (adr r3, d5bb8 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE+0x80>)
   d5b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b6e:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d5b72:	2364      	movs	r3, #100	; 0x64

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d5b74:	4604      	mov	r4, r0
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d5b76:	6583      	str	r3, [r0, #88]	; 0x58
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
    myInput = Input;
   d5b78:	6341      	str	r1, [r0, #52]	; 0x34
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
   d5b7a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   d5b7e:	f7ff ffb5 	bl	d5aec <_ZN3PID22SetControllerDirectionENS_11direction_tE>
    PID::SetTunings(Kp, Ki, Kd);
   d5b82:	eeb0 2a4a 	vmov.f32	s4, s20
   d5b86:	eef0 2a6a 	vmov.f32	s5, s21
   d5b8a:	eeb0 1a49 	vmov.f32	s2, s18
   d5b8e:	eef0 1a69 	vmov.f32	s3, s19
   d5b92:	eeb0 0a48 	vmov.f32	s0, s16
   d5b96:	eef0 0a68 	vmov.f32	s1, s17
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	f7ff fe9c 	bl	d58d8 <_ZN3PID10SetTuningsEddd>
   d5ba0:	f001 fc88 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>

    lastTime = millis()-SampleTime;				
}
   d5ba4:	ecbd 8b06 	vpop	{d8-d10}
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd);

    lastTime = millis()-SampleTime;				
   d5ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d5baa:	1ac0      	subs	r0, r0, r3
   d5bac:	6420      	str	r0, [r4, #64]	; 0x40
}
   d5bae:	4620      	mov	r0, r4
   d5bb0:	bd10      	pop	{r4, pc}
   d5bb2:	bf00      	nop
   d5bb4:	f3af 8000 	nop.w
   d5bb8:	00000000 	.word	0x00000000
   d5bbc:	406fe000 	.word	0x406fe000

000d5bc0 <_ZN3PID5GetKpEv>:
/* Status Funcions*************************************************************
 * Just because you set the Kp=-1 doesn't mean it actually happened.  these
 * functions query the internal state of the PID.  they're here for display 
 * purposes.  this are the functions the PID Front-end uses for example
 ******************************************************************************/
double PID::GetKp(){ return  dispKp; }
   d5bc0:	ed90 0b00 	vldr	d0, [r0]
   d5bc4:	4770      	bx	lr

000d5bc6 <_ZN3PID5GetKiEv>:
double PID::GetKi(){ return  dispKi;}
   d5bc6:	ed90 0b02 	vldr	d0, [r0, #8]
   d5bca:	4770      	bx	lr

000d5bcc <_ZN3PID5GetKdEv>:
double PID::GetKd(){ return  dispKd;}
   d5bcc:	ed90 0b04 	vldr	d0, [r0, #16]
   d5bd0:	4770      	bx	lr

000d5bd2 <_ZN3PID7GetModeEv>:
int PID::GetMode(){ return  inAuto ? AUTOMATIC : MANUAL;}
   d5bd2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
   d5bd6:	4770      	bx	lr

000d5bd8 <_GLOBAL__sub_I__ZN3PIDC2EPdS0_S0_dddNS_11direction_tE>:
   d5bd8:	f001 bc8c 	b.w	d74f4 <HAL_Pin_Map>

000d5bdc <_ZN9PID_ATune6CancelEv>:



void PID_ATune::Cancel()
{
	running = false;
   d5bdc:	2300      	movs	r3, #0
   d5bde:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   d5be2:	4770      	bx	lr
   d5be4:	0000      	movs	r0, r0
	...

000d5be8 <_ZN9PID_ATune8FinishUpEv>:
  }
   justchanged=false;
	return 0;
}
void PID_ATune::FinishUp()
{
   d5be8:	b5d0      	push	{r4, r6, r7, lr}
   d5bea:	4604      	mov	r4, r0
	  *output = outputStart;
   d5bec:	6883      	ldr	r3, [r0, #8]
   d5bee:	e9d0 01f6 	ldrd	r0, r1, [r0, #984]	; 0x3d8
   d5bf2:	e9c3 0100 	strd	r0, r1, [r3]
      //we can generate tuning parameters!
      Ku = 4*(2*oStep)/((absMax-absMin)*3.14159);
   d5bf6:	e9d4 23f4 	ldrd	r2, r3, [r4, #976]	; 0x3d0
   d5bfa:	4610      	mov	r0, r2
   d5bfc:	4619      	mov	r1, r3
   d5bfe:	f003 fb6d 	bl	d92dc <__adddf3>
   d5c02:	2200      	movs	r2, #0
   d5c04:	4b14      	ldr	r3, [pc, #80]	; (d5c58 <_ZN9PID_ATune8FinishUpEv+0x70>)
   d5c06:	f003 fd1b 	bl	d9640 <__aeabi_dmul>
   d5c0a:	e9d4 23f2 	ldrd	r2, r3, [r4, #968]	; 0x3c8
   d5c0e:	4606      	mov	r6, r0
   d5c10:	460f      	mov	r7, r1
   d5c12:	e9d4 01f0 	ldrd	r0, r1, [r4, #960]	; 0x3c0
   d5c16:	f003 fb5f 	bl	d92d8 <__aeabi_dsub>
   d5c1a:	a30d      	add	r3, pc, #52	; (adr r3, d5c50 <_ZN9PID_ATune8FinishUpEv+0x68>)
   d5c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c20:	f003 fd0e 	bl	d9640 <__aeabi_dmul>
   d5c24:	4602      	mov	r2, r0
   d5c26:	460b      	mov	r3, r1
   d5c28:	4630      	mov	r0, r6
   d5c2a:	4639      	mov	r1, r7
   d5c2c:	f003 fe32 	bl	d9894 <__aeabi_ddiv>
      Pu = (double)(peak1-peak2) / 1000;
   d5c30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
void PID_ATune::FinishUp()
{
	  *output = outputStart;
      //we can generate tuning parameters!
      Ku = 4*(2*oStep)/((absMax-absMin)*3.14159);
   d5c32:	e9c4 01f8 	strd	r0, r1, [r4, #992]	; 0x3e0
      Pu = (double)(peak1-peak2) / 1000;
   d5c36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5c38:	1ac0      	subs	r0, r0, r3
   d5c3a:	f003 fc8b 	bl	d9554 <__aeabi_ui2d>
   d5c3e:	2200      	movs	r2, #0
   d5c40:	4b06      	ldr	r3, [pc, #24]	; (d5c5c <_ZN9PID_ATune8FinishUpEv+0x74>)
   d5c42:	f003 fe27 	bl	d9894 <__aeabi_ddiv>
   d5c46:	e9c4 01fa 	strd	r0, r1, [r4, #1000]	; 0x3e8
   d5c4a:	bdd0      	pop	{r4, r6, r7, pc}
   d5c4c:	f3af 8000 	nop.w
   d5c50:	f01b866e 	.word	0xf01b866e
   d5c54:	400921f9 	.word	0x400921f9
   d5c58:	40100000 	.word	0x40100000
   d5c5c:	408f4000 	.word	0x408f4000

000d5c60 <_ZN9PID_ATune7RuntimeEv>:
{
	running = false;
} 
 
int PID_ATune::Runtime()
{
   d5c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	justevaled=false;
	if(peakCount>9 && running)
   d5c64:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
	running = false;
} 
 
int PID_ATune::Runtime()
{
	justevaled=false;
   d5c68:	2300      	movs	r3, #0
	if(peakCount>9 && running)
   d5c6a:	2a09      	cmp	r2, #9
{
	running = false;
} 
 
int PID_ATune::Runtime()
{
   d5c6c:	4682      	mov	sl, r0
	justevaled=false;
   d5c6e:	f880 33bd 	strb.w	r3, [r0, #957]	; 0x3bd
	if(peakCount>9 && running)
   d5c72:	dd07      	ble.n	d5c84 <_ZN9PID_ATune7RuntimeEv+0x24>
   d5c74:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   d5c78:	b122      	cbz	r2, d5c84 <_ZN9PID_ATune7RuntimeEv+0x24>
	{
		running = false;
   d5c7a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		FinishUp();
   d5c7e:	f7ff ffb3 	bl	d5be8 <_ZN9PID_ATune8FinishUpEv>
   d5c82:	e12f      	b.n	d5ee4 <_ZN9PID_ATune7RuntimeEv+0x284>
   d5c84:	f001 fc16 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
		return 1;
	}
	unsigned long now = millis();
	
	if((now-lastTime)<(unsigned long)sampleTime) return false;
   d5c88:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
   d5c8c:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
   d5c90:	1ac3      	subs	r3, r0, r3
   d5c92:	4293      	cmp	r3, r2
   d5c94:	4683      	mov	fp, r0
   d5c96:	d201      	bcs.n	d5c9c <_ZN9PID_ATune7RuntimeEv+0x3c>
   d5c98:	2000      	movs	r0, #0
   d5c9a:	e128      	b.n	d5eee <_ZN9PID_ATune7RuntimeEv+0x28e>
	lastTime = now;
	double refVal = *input;
   d5c9c:	f8da 3004 	ldr.w	r3, [sl, #4]
		return 1;
	}
	unsigned long now = millis();
	
	if((now-lastTime)<(unsigned long)sampleTime) return false;
	lastTime = now;
   d5ca0:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
	double refVal = *input;
   d5ca4:	e9d3 4500 	ldrd	r4, r5, [r3]
	justevaled=true;
	if(!running)
   d5ca8:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
	unsigned long now = millis();
	
	if((now-lastTime)<(unsigned long)sampleTime) return false;
	lastTime = now;
	double refVal = *input;
	justevaled=true;
   d5cac:	2201      	movs	r2, #1
   d5cae:	f88a 23bd 	strb.w	r2, [sl, #957]	; 0x3bd
	if(!running)
   d5cb2:	b9d3      	cbnz	r3, d5cea <_ZN9PID_ATune7RuntimeEv+0x8a>
	{ //initialize working variables the first time around
		peakType = 0;
		peakCount=0;
		justchanged=false;
		absMax=refVal;
   d5cb4:	e9ca 45f0 	strd	r4, r5, [sl, #960]	; 0x3c0
		absMin=refVal;
   d5cb8:	e9ca 45f2 	strd	r4, r5, [sl, #968]	; 0x3c8
		setpoint = refVal;
   d5cbc:	e9ca 4504 	strd	r4, r5, [sl, #16]
		running = true;
		outputStart = *output;
   d5cc0:	f8da 6008 	ldr.w	r6, [sl, #8]
	lastTime = now;
	double refVal = *input;
	justevaled=true;
	if(!running)
	{ //initialize working variables the first time around
		peakType = 0;
   d5cc4:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
		peakCount=0;
   d5cc8:	f8ca 33b8 	str.w	r3, [sl, #952]	; 0x3b8
		justchanged=false;
   d5ccc:	f88a 33bc 	strb.w	r3, [sl, #956]	; 0x3bc
		absMax=refVal;
		absMin=refVal;
		setpoint = refVal;
		running = true;
   d5cd0:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
		outputStart = *output;
   d5cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
		*output = outputStart+oStep;
   d5cd8:	e9da 01f4 	ldrd	r0, r1, [sl, #976]	; 0x3d0
		justchanged=false;
		absMax=refVal;
		absMin=refVal;
		setpoint = refVal;
		running = true;
		outputStart = *output;
   d5cdc:	e9ca 23f6 	strd	r2, r3, [sl, #984]	; 0x3d8
		*output = outputStart+oStep;
   d5ce0:	f003 fafc 	bl	d92dc <__adddf3>
   d5ce4:	e9c6 0100 	strd	r0, r1, [r6]
   d5ce8:	e011      	b.n	d5d0e <_ZN9PID_ATune7RuntimeEv+0xae>
	}
	else
	{
		if(refVal>absMax)absMax=refVal;
   d5cea:	e9da 23f0 	ldrd	r2, r3, [sl, #960]	; 0x3c0
   d5cee:	4620      	mov	r0, r4
   d5cf0:	4629      	mov	r1, r5
   d5cf2:	f003 ff35 	bl	d9b60 <__aeabi_dcmpgt>
   d5cf6:	b108      	cbz	r0, d5cfc <_ZN9PID_ATune7RuntimeEv+0x9c>
   d5cf8:	e9ca 45f0 	strd	r4, r5, [sl, #960]	; 0x3c0
		if(refVal<absMin)absMin=refVal;
   d5cfc:	e9da 23f2 	ldrd	r2, r3, [sl, #968]	; 0x3c8
   d5d00:	4620      	mov	r0, r4
   d5d02:	4629      	mov	r1, r5
   d5d04:	f003 ff0e 	bl	d9b24 <__aeabi_dcmplt>
   d5d08:	b108      	cbz	r0, d5d0e <_ZN9PID_ATune7RuntimeEv+0xae>
   d5d0a:	e9ca 45f2 	strd	r4, r5, [sl, #968]	; 0x3c8
	}
	
	//oscillate the output base on the input's relation to the setpoint
	
	if(refVal>setpoint+noiseBand) *output = outputStart-oStep;
   d5d0e:	e9da 6704 	ldrd	r6, r7, [sl, #16]
   d5d12:	e9da 8906 	ldrd	r8, r9, [sl, #24]
   d5d16:	4630      	mov	r0, r6
   d5d18:	4642      	mov	r2, r8
   d5d1a:	464b      	mov	r3, r9
   d5d1c:	4639      	mov	r1, r7
   d5d1e:	f003 fadd 	bl	d92dc <__adddf3>
   d5d22:	4602      	mov	r2, r0
   d5d24:	460b      	mov	r3, r1
   d5d26:	4620      	mov	r0, r4
   d5d28:	4629      	mov	r1, r5
   d5d2a:	f003 ff19 	bl	d9b60 <__aeabi_dcmpgt>
   d5d2e:	b140      	cbz	r0, d5d42 <_ZN9PID_ATune7RuntimeEv+0xe2>
   d5d30:	e9da 23f4 	ldrd	r2, r3, [sl, #976]	; 0x3d0
   d5d34:	e9da 01f6 	ldrd	r0, r1, [sl, #984]	; 0x3d8
   d5d38:	f8da 6008 	ldr.w	r6, [sl, #8]
   d5d3c:	f003 facc 	bl	d92d8 <__aeabi_dsub>
   d5d40:	e014      	b.n	d5d6c <_ZN9PID_ATune7RuntimeEv+0x10c>
	else if (refVal<setpoint-noiseBand) *output = outputStart+oStep;
   d5d42:	4642      	mov	r2, r8
   d5d44:	464b      	mov	r3, r9
   d5d46:	4630      	mov	r0, r6
   d5d48:	4639      	mov	r1, r7
   d5d4a:	f003 fac5 	bl	d92d8 <__aeabi_dsub>
   d5d4e:	4602      	mov	r2, r0
   d5d50:	460b      	mov	r3, r1
   d5d52:	4620      	mov	r0, r4
   d5d54:	4629      	mov	r1, r5
   d5d56:	f003 fee5 	bl	d9b24 <__aeabi_dcmplt>
   d5d5a:	b148      	cbz	r0, d5d70 <_ZN9PID_ATune7RuntimeEv+0x110>
   d5d5c:	e9da 23f4 	ldrd	r2, r3, [sl, #976]	; 0x3d0
   d5d60:	e9da 01f6 	ldrd	r0, r1, [sl, #984]	; 0x3d8
   d5d64:	f8da 6008 	ldr.w	r6, [sl, #8]
   d5d68:	f003 fab8 	bl	d92dc <__adddf3>
   d5d6c:	e9c6 0100 	strd	r0, r1, [r6]
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5d70:	f8da 7038 	ldr.w	r7, [sl, #56]	; 0x38
	if(refVal>setpoint+noiseBand) *output = outputStart-oStep;
	else if (refVal<setpoint-noiseBand) *output = outputStart+oStep;
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
   d5d74:	2301      	movs	r3, #1
   d5d76:	eb0a 06c7 	add.w	r6, sl, r7, lsl #3
   d5d7a:	f88a 3000 	strb.w	r3, [sl]
   d5d7e:	f88a 3001 	strb.w	r3, [sl, #1]
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5d82:	f107 38ff 	add.w	r8, r7, #4294967295
   d5d86:	3648      	adds	r6, #72	; 0x48
   d5d88:	f1b8 0f00 	cmp.w	r8, #0
   d5d8c:	db28      	blt.n	d5de0 <_ZN9PID_ATune7RuntimeEv+0x180>
  {
    double val = lastInputs[i];
   d5d8e:	ed16 7b04 	vldr	d7, [r6, #-16]
    if(isMax) isMax = refVal>val;
   d5d92:	f89a 3000 	ldrb.w	r3, [sl]
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
  {
    double val = lastInputs[i];
   d5d96:	ed8d 7b00 	vstr	d7, [sp]
    if(isMax) isMax = refVal>val;
   d5d9a:	b15b      	cbz	r3, d5db4 <_ZN9PID_ATune7RuntimeEv+0x154>
   d5d9c:	ec53 2b17 	vmov	r2, r3, d7
   d5da0:	4620      	mov	r0, r4
   d5da2:	4629      	mov	r1, r5
   d5da4:	f04f 0901 	mov.w	r9, #1
   d5da8:	f003 feda 	bl	d9b60 <__aeabi_dcmpgt>
   d5dac:	b900      	cbnz	r0, d5db0 <_ZN9PID_ATune7RuntimeEv+0x150>
   d5dae:	4681      	mov	r9, r0
   d5db0:	f88a 9000 	strb.w	r9, [sl]
    if(isMin) isMin = refVal<val;
   d5db4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   d5db8:	b15b      	cbz	r3, d5dd2 <_ZN9PID_ATune7RuntimeEv+0x172>
   d5dba:	e9dd 2300 	ldrd	r2, r3, [sp]
   d5dbe:	4620      	mov	r0, r4
   d5dc0:	4629      	mov	r1, r5
   d5dc2:	f04f 0901 	mov.w	r9, #1
   d5dc6:	f003 fead 	bl	d9b24 <__aeabi_dcmplt>
   d5dca:	b900      	cbnz	r0, d5dce <_ZN9PID_ATune7RuntimeEv+0x16e>
   d5dcc:	4681      	mov	r9, r0
   d5dce:	f88a 9001 	strb.w	r9, [sl, #1]
    lastInputs[i+1] = lastInputs[i];
   d5dd2:	ed9d 7b00 	vldr	d7, [sp]
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5dd6:	f108 38ff 	add.w	r8, r8, #4294967295
  {
    double val = lastInputs[i];
    if(isMax) isMax = refVal>val;
    if(isMin) isMin = refVal<val;
    lastInputs[i+1] = lastInputs[i];
   d5dda:	ed26 7b02 	vstmdb	r6!, {d7}
	
	
  //bool isMax=true, isMin=true;
  isMax=true;isMin=true;
  //id peaks
  for(int i=nLookBack-1;i>=0;i--)
   d5dde:	e7d3      	b.n	d5d88 <_ZN9PID_ATune7RuntimeEv+0x128>
    if(isMax) isMax = refVal>val;
    if(isMin) isMin = refVal<val;
    lastInputs[i+1] = lastInputs[i];
  }
  lastInputs[0] = refVal;  
  if(nLookBack<9)
   d5de0:	2f08      	cmp	r7, #8
    double val = lastInputs[i];
    if(isMax) isMax = refVal>val;
    if(isMin) isMin = refVal<val;
    lastInputs[i+1] = lastInputs[i];
  }
  lastInputs[0] = refVal;  
   d5de2:	e9ca 4510 	strd	r4, r5, [sl, #64]	; 0x40
  if(nLookBack<9)
   d5de6:	f77f af57 	ble.w	d5c98 <_ZN9PID_ATune7RuntimeEv+0x38>
  {  //we don't want to trust the maxes or mins until the inputs array has been filled
	return 0;
	}
  
  if(isMax)
   d5dea:	f89a 3000 	ldrb.w	r3, [sl]
   d5dee:	b1bb      	cbz	r3, d5e20 <_ZN9PID_ATune7RuntimeEv+0x1c0>
  {
    if(peakType==0)peakType=1;
   d5df0:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5df4:	b913      	cbnz	r3, d5dfc <_ZN9PID_ATune7RuntimeEv+0x19c>
   d5df6:	2301      	movs	r3, #1
   d5df8:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
    if(peakType==-1)
   d5dfc:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5e00:	3301      	adds	r3, #1
   d5e02:	d108      	bne.n	d5e16 <_ZN9PID_ATune7RuntimeEv+0x1b6>
    {
      peakType = 1;
   d5e04:	2301      	movs	r3, #1
   d5e06:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
      justchanged=true;
   d5e0a:	f88a 33bc 	strb.w	r3, [sl, #956]	; 0x3bc
      peak2 = peak1;
   d5e0e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   d5e12:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
    }
    peak1 = now;
   d5e16:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
    peaks[peakCount] = refVal;
   d5e1a:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
   d5e1e:	e01c      	b.n	d5e5a <_ZN9PID_ATune7RuntimeEv+0x1fa>
   
  }
  else if(isMin)
   d5e20:	f89a 3001 	ldrb.w	r3, [sl, #1]
   d5e24:	b1eb      	cbz	r3, d5e62 <_ZN9PID_ATune7RuntimeEv+0x202>
  {
    if(peakType==0)peakType=-1;
   d5e26:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   d5e2a:	b91b      	cbnz	r3, d5e34 <_ZN9PID_ATune7RuntimeEv+0x1d4>
   d5e2c:	f04f 33ff 	mov.w	r3, #4294967295
   d5e30:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
    if(peakType==1)
   d5e34:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
   d5e38:	2a01      	cmp	r2, #1
   d5e3a:	d10a      	bne.n	d5e52 <_ZN9PID_ATune7RuntimeEv+0x1f2>
    {
      peakType=-1;
   d5e3c:	f04f 33ff 	mov.w	r3, #4294967295
   d5e40:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
      peakCount++;
   d5e44:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
      justchanged=true;
   d5e48:	f88a 23bc 	strb.w	r2, [sl, #956]	; 0x3bc
  {
    if(peakType==0)peakType=-1;
    if(peakType==1)
    {
      peakType=-1;
      peakCount++;
   d5e4c:	3301      	adds	r3, #1
   d5e4e:	f8ca 33b8 	str.w	r3, [sl, #952]	; 0x3b8
      justchanged=true;
    }
    
    if(peakCount<10)peaks[peakCount] = refVal;
   d5e52:	f8da 33b8 	ldr.w	r3, [sl, #952]	; 0x3b8
   d5e56:	2b09      	cmp	r3, #9
   d5e58:	dc03      	bgt.n	d5e62 <_ZN9PID_ATune7RuntimeEv+0x202>
   d5e5a:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   d5e5e:	e9c3 45da 	strd	r4, r5, [r3, #872]	; 0x368
  }
  
  if(justchanged && peakCount>2)
   d5e62:	f89a 33bc 	ldrb.w	r3, [sl, #956]	; 0x3bc
   d5e66:	2b00      	cmp	r3, #0
   d5e68:	d03e      	beq.n	d5ee8 <_ZN9PID_ATune7RuntimeEv+0x288>
   d5e6a:	f8da 43b8 	ldr.w	r4, [sl, #952]	; 0x3b8
   d5e6e:	2c02      	cmp	r4, #2
   d5e70:	dd3a      	ble.n	d5ee8 <_ZN9PID_ATune7RuntimeEv+0x288>
   d5e72:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
  { //we've transitioned.  check if we can autotune based on the last peaks
    double avgSeparation = (abs(peaks[peakCount-1]-peaks[peakCount-2])+abs(peaks[peakCount-2]-peaks[peakCount-3]))/2;
   d5e76:	e9d4 67d6 	ldrd	r6, r7, [r4, #856]	; 0x358
    if( avgSeparation < 0.05*(absMax-absMin))
   d5e7a:	e9d4 01d8 	ldrd	r0, r1, [r4, #864]	; 0x360
   d5e7e:	4632      	mov	r2, r6
   d5e80:	463b      	mov	r3, r7
   d5e82:	f003 fa29 	bl	d92d8 <__aeabi_dsub>
   d5e86:	f003 fe8b 	bl	d9ba0 <__aeabi_d2iz>
   d5e8a:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
   d5e8e:	e9d4 23d4 	ldrd	r2, r3, [r4, #848]	; 0x350
   d5e92:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
   d5e96:	4639      	mov	r1, r7
   d5e98:	4630      	mov	r0, r6
   d5e9a:	f003 fa1d 	bl	d92d8 <__aeabi_dsub>
   d5e9e:	f003 fe7f 	bl	d9ba0 <__aeabi_d2iz>
   d5ea2:	2800      	cmp	r0, #0
   d5ea4:	bfb8      	it	lt
   d5ea6:	4240      	neglt	r0, r0
   d5ea8:	4428      	add	r0, r5
   d5eaa:	1040      	asrs	r0, r0, #1
   d5eac:	f003 fb62 	bl	d9574 <__aeabi_i2d>
   d5eb0:	e9da 23f2 	ldrd	r2, r3, [sl, #968]	; 0x3c8
   d5eb4:	4604      	mov	r4, r0
   d5eb6:	460d      	mov	r5, r1
   d5eb8:	e9da 01f0 	ldrd	r0, r1, [sl, #960]	; 0x3c0
   d5ebc:	f003 fa0c 	bl	d92d8 <__aeabi_dsub>
   d5ec0:	a30d      	add	r3, pc, #52	; (adr r3, d5ef8 <_ZN9PID_ATune7RuntimeEv+0x298>)
   d5ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ec6:	f003 fbbb 	bl	d9640 <__aeabi_dmul>
   d5eca:	4602      	mov	r2, r0
   d5ecc:	460b      	mov	r3, r1
   d5ece:	4620      	mov	r0, r4
   d5ed0:	4629      	mov	r1, r5
   d5ed2:	f003 fe27 	bl	d9b24 <__aeabi_dcmplt>
   d5ed6:	b138      	cbz	r0, d5ee8 <_ZN9PID_ATune7RuntimeEv+0x288>
    {
		FinishUp();
   d5ed8:	4650      	mov	r0, sl
   d5eda:	f7ff fe85 	bl	d5be8 <_ZN9PID_ATune8FinishUpEv>
      running = false;
   d5ede:	2300      	movs	r3, #0
   d5ee0:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
	  return 1;
   d5ee4:	2001      	movs	r0, #1
   d5ee6:	e002      	b.n	d5eee <_ZN9PID_ATune7RuntimeEv+0x28e>
	 
    }
  }
   justchanged=false;
   d5ee8:	2000      	movs	r0, #0
   d5eea:	f88a 03bc 	strb.w	r0, [sl, #956]	; 0x3bc
	return 0;
}
   d5eee:	b003      	add	sp, #12
   d5ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ef4:	f3af 8000 	nop.w
   d5ef8:	9999999a 	.word	0x9999999a
   d5efc:	3fa99999 	.word	0x3fa99999

000d5f00 <_ZN9PID_ATune5GetKpEv>:
      Ku = 4*(2*oStep)/((absMax-absMin)*3.14159);
      Pu = (double)(peak1-peak2) / 1000;
}

double PID_ATune::GetKp()
{
   d5f00:	b508      	push	{r3, lr}
	return controlType==1 ? 0.6 * Ku : 0.4 * Ku;
   d5f02:	6a03      	ldr	r3, [r0, #32]
   d5f04:	2b01      	cmp	r3, #1
   d5f06:	d103      	bne.n	d5f10 <_ZN9PID_ATune5GetKpEv+0x10>
   d5f08:	a307      	add	r3, pc, #28	; (adr r3, d5f28 <_ZN9PID_ATune5GetKpEv+0x28>)
   d5f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f0e:	e002      	b.n	d5f16 <_ZN9PID_ATune5GetKpEv+0x16>
   d5f10:	a307      	add	r3, pc, #28	; (adr r3, d5f30 <_ZN9PID_ATune5GetKpEv+0x30>)
   d5f12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f16:	e9d0 01f8 	ldrd	r0, r1, [r0, #992]	; 0x3e0
   d5f1a:	f003 fb91 	bl	d9640 <__aeabi_dmul>
}
   d5f1e:	ec41 0b10 	vmov	d0, r0, r1
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	f3af 8000 	nop.w
   d5f28:	33333333 	.word	0x33333333
   d5f2c:	3fe33333 	.word	0x3fe33333
   d5f30:	9999999a 	.word	0x9999999a
   d5f34:	3fd99999 	.word	0x3fd99999

000d5f38 <_ZN9PID_ATune5GetKiEv>:

double PID_ATune::GetKi()
{
   d5f38:	b510      	push	{r4, lr}
	return controlType==1? 1.2*Ku / Pu : 0.48 * Ku / Pu;  // Ki = Kc/Ti
   d5f3a:	6a03      	ldr	r3, [r0, #32]
   d5f3c:	2b01      	cmp	r3, #1
{
	return controlType==1 ? 0.6 * Ku : 0.4 * Ku;
}

double PID_ATune::GetKi()
{
   d5f3e:	4604      	mov	r4, r0
	return controlType==1? 1.2*Ku / Pu : 0.48 * Ku / Pu;  // Ki = Kc/Ti
   d5f40:	d103      	bne.n	d5f4a <_ZN9PID_ATune5GetKiEv+0x12>
   d5f42:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5f46:	4b0a      	ldr	r3, [pc, #40]	; (d5f70 <_ZN9PID_ATune5GetKiEv+0x38>)
   d5f48:	e002      	b.n	d5f50 <_ZN9PID_ATune5GetKiEv+0x18>
   d5f4a:	a307      	add	r3, pc, #28	; (adr r3, d5f68 <_ZN9PID_ATune5GetKiEv+0x30>)
   d5f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f50:	e9d4 01f8 	ldrd	r0, r1, [r4, #992]	; 0x3e0
   d5f54:	f003 fb74 	bl	d9640 <__aeabi_dmul>
   d5f58:	e9d4 23fa 	ldrd	r2, r3, [r4, #1000]	; 0x3e8
   d5f5c:	f003 fc9a 	bl	d9894 <__aeabi_ddiv>
}
   d5f60:	ec41 0b10 	vmov	d0, r0, r1
   d5f64:	bd10      	pop	{r4, pc}
   d5f66:	bf00      	nop
   d5f68:	eb851eb8 	.word	0xeb851eb8
   d5f6c:	3fdeb851 	.word	0x3fdeb851
   d5f70:	3ff33333 	.word	0x3ff33333

000d5f74 <_ZN9PID_ATune5GetKdEv>:

double PID_ATune::GetKd()
{
   d5f74:	b510      	push	{r4, lr}
	return controlType==1? 0.075 * Ku * Pu : 0;  //Kd = Kc * Td
   d5f76:	6a03      	ldr	r3, [r0, #32]
   d5f78:	2b01      	cmp	r3, #1
{
	return controlType==1? 1.2*Ku / Pu : 0.48 * Ku / Pu;  // Ki = Kc/Ti
}

double PID_ATune::GetKd()
{
   d5f7a:	4604      	mov	r4, r0
	return controlType==1? 0.075 * Ku * Pu : 0;  //Kd = Kc * Td
   d5f7c:	d10b      	bne.n	d5f96 <_ZN9PID_ATune5GetKdEv+0x22>
   d5f7e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d5f82:	4b07      	ldr	r3, [pc, #28]	; (d5fa0 <_ZN9PID_ATune5GetKdEv+0x2c>)
   d5f84:	e9d0 01f8 	ldrd	r0, r1, [r0, #992]	; 0x3e0
   d5f88:	f003 fb5a 	bl	d9640 <__aeabi_dmul>
   d5f8c:	e9d4 23fa 	ldrd	r2, r3, [r4, #1000]	; 0x3e8
   d5f90:	f003 fb56 	bl	d9640 <__aeabi_dmul>
   d5f94:	e001      	b.n	d5f9a <_ZN9PID_ATune5GetKdEv+0x26>
   d5f96:	2000      	movs	r0, #0
   d5f98:	2100      	movs	r1, #0
}
   d5f9a:	ec41 0b10 	vmov	d0, r0, r1
   d5f9e:	bd10      	pop	{r4, pc}
   d5fa0:	3fb33333 	.word	0x3fb33333

000d5fa4 <_ZN9PID_ATune13SetOutputStepEd>:

void PID_ATune::SetOutputStep(double Step)
{
	oStep = Step;
   d5fa4:	ed80 0bf4 	vstr	d0, [r0, #976]	; 0x3d0
   d5fa8:	4770      	bx	lr

000d5faa <_ZN9PID_ATune12SetNoiseBandEd>:
	return controlType;
}
	
void PID_ATune::SetNoiseBand(double Band)
{
	noiseBand = Band;
   d5faa:	ed80 0b06 	vstr	d0, [r0, #24]
   d5fae:	4770      	bx	lr

000d5fb0 <_ZN9PID_ATune14SetLookbackSecEi>:
	return noiseBand;
}

void PID_ATune::SetLookbackSec(int value)
{
    if (value<1) value = 1;
   d5fb0:	2900      	cmp	r1, #0
   d5fb2:	dd02      	ble.n	d5fba <_ZN9PID_ATune14SetLookbackSecEi+0xa>
	
	if(value<25)
   d5fb4:	2918      	cmp	r1, #24
   d5fb6:	dc06      	bgt.n	d5fc6 <_ZN9PID_ATune14SetLookbackSecEi+0x16>
   d5fb8:	e000      	b.n	d5fbc <_ZN9PID_ATune14SetLookbackSecEi+0xc>
	return noiseBand;
}

void PID_ATune::SetLookbackSec(int value)
{
    if (value<1) value = 1;
   d5fba:	2101      	movs	r1, #1
	
	if(value<25)
	{
		nLookBack = value * 4;
   d5fbc:	0089      	lsls	r1, r1, #2
		sampleTime = 250;
   d5fbe:	23fa      	movs	r3, #250	; 0xfa
{
    if (value<1) value = 1;
	
	if(value<25)
	{
		nLookBack = value * 4;
   d5fc0:	6381      	str	r1, [r0, #56]	; 0x38
		sampleTime = 250;
   d5fc2:	6343      	str	r3, [r0, #52]	; 0x34
   d5fc4:	4770      	bx	lr
	}
	else
	{
		nLookBack = 100;
   d5fc6:	2364      	movs	r3, #100	; 0x64
   d5fc8:	6383      	str	r3, [r0, #56]	; 0x38
		sampleTime = value*10;
   d5fca:	230a      	movs	r3, #10
   d5fcc:	4359      	muls	r1, r3
   d5fce:	6341      	str	r1, [r0, #52]	; 0x34
   d5fd0:	4770      	bx	lr
	...

000d5fd4 <_ZN9PID_ATuneC1EPdS0_>:

PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
	output = Output;
	controlType =0 ; //default to PI
   d5fd4:	2300      	movs	r3, #0
#include <PID-AutoTune/PID-AutoTune.h>
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
   d5fd6:	b5d0      	push	{r4, r6, r7, lr}
{
	input = Input;
	output = Output;
	controlType =0 ; //default to PI
   d5fd8:	6203      	str	r3, [r0, #32]
	noiseBand = 0.5;
	running = false;
   d5fda:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
	output = Output;
	controlType =0 ; //default to PI
	noiseBand = 0.5;
   d5fde:	4f09      	ldr	r7, [pc, #36]	; (d6004 <_ZN9PID_ATuneC1EPdS0_+0x30>)
	running = false;
	oStep = 30;
   d5fe0:	4b09      	ldr	r3, [pc, #36]	; (d6008 <_ZN9PID_ATuneC1EPdS0_+0x34>)
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
	output = Output;
   d5fe2:	6082      	str	r2, [r0, #8]
	controlType =0 ; //default to PI
	noiseBand = 0.5;
   d5fe4:	2600      	movs	r6, #0
	running = false;
	oStep = 30;
   d5fe6:	2200      	movs	r2, #0
#include <PID-AutoTune/PID-AutoTune.h>
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
{
	input = Input;
   d5fe8:	6041      	str	r1, [r0, #4]
	output = Output;
	controlType =0 ; //default to PI
	noiseBand = 0.5;
   d5fea:	e9c0 6706 	strd	r6, r7, [r0, #24]
	running = false;
	oStep = 30;
   d5fee:	e9c0 23f4 	strd	r2, r3, [r0, #976]	; 0x3d0
	SetLookbackSec(10);
   d5ff2:	210a      	movs	r1, #10
#include <PID-AutoTune/PID-AutoTune.h>
#include "application.h"

PID_ATune::PID_ATune(double* Input, double* Output)
   d5ff4:	4604      	mov	r4, r0
	output = Output;
	controlType =0 ; //default to PI
	noiseBand = 0.5;
	running = false;
	oStep = 30;
	SetLookbackSec(10);
   d5ff6:	f7ff ffdb 	bl	d5fb0 <_ZN9PID_ATune14SetLookbackSecEi>
   d5ffa:	f001 fa5b 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
	lastTime = millis();
   d5ffe:	6320      	str	r0, [r4, #48]	; 0x30
	
}
   d6000:	4620      	mov	r0, r4
   d6002:	bdd0      	pop	{r4, r6, r7, pc}
   d6004:	3fe00000 	.word	0x3fe00000
   d6008:	403e0000 	.word	0x403e0000

000d600c <_GLOBAL__sub_I__ZN9PID_ATuneC2EPdS0_>:
   d600c:	f001 ba72 	b.w	d74f4 <HAL_Pin_Map>

000d6010 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>:
  } else
    _pwm.setPWM(pin, 0, value);
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
   d6010:	2300      	movs	r3, #0
   d6012:	461a      	mov	r2, r3
   d6014:	306c      	adds	r0, #108	; 0x6c
   d6016:	f000 b8d0 	b.w	d61ba <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d601a <_ZN20Adafruit_MotorShield5beginEt>:
Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
  _addr = addr;
  _pwm = Adafruit_PWMServoDriver(_addr);
}

void Adafruit_MotorShield::begin(uint16_t freq) {
   d601a:	b570      	push	{r4, r5, r6, lr}
   d601c:	4606      	mov	r6, r0
   d601e:	460c      	mov	r4, r1
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
   d6020:	f106 056c 	add.w	r5, r6, #108	; 0x6c
  _pwm = Adafruit_PWMServoDriver(_addr);
}

void Adafruit_MotorShield::begin(uint16_t freq) {
  // init PWM w/_freq
  Wire.begin();
   d6024:	f002 feb0 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6028:	f002 f85c 	bl	d80e4 <_ZN7TwoWire5beginEv>
  _pwm.begin();
   d602c:	4628      	mov	r0, r5
   d602e:	f000 f92d 	bl	d628c <_ZN23Adafruit_PWMServoDriver5beginEv>
  _freq = freq;
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d6032:	ee07 4a90 	vmov	s15, r4

void Adafruit_MotorShield::begin(uint16_t freq) {
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
  _freq = freq;
   d6036:	8074      	strh	r4, [r6, #2]
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d6038:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d603c:	4628      	mov	r0, r5
   d603e:	f000 f931 	bl	d62a4 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>
   d6042:	2400      	movs	r4, #0
  for (uint8_t i=0; i<16; i++)
    _pwm.setPWM(i, 0, 0);
   d6044:	2300      	movs	r3, #0
   d6046:	b2e1      	uxtb	r1, r4
   d6048:	461a      	mov	r2, r3
   d604a:	4628      	mov	r0, r5
   d604c:	3401      	adds	r4, #1
   d604e:	f000 f8b4 	bl	d61ba <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
  _freq = freq;
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
  for (uint8_t i=0; i<16; i++)
   d6052:	2c10      	cmp	r4, #16
   d6054:	d1f6      	bne.n	d6044 <_ZN20Adafruit_MotorShield5beginEt+0x2a>
    _pwm.setPWM(i, 0, 0);
}
   d6056:	bd70      	pop	{r4, r5, r6, pc}

000d6058 <_ZN20Adafruit_MotorShield6setPWMEht>:

void Adafruit_MotorShield::setPWM(uint8_t pin, uint16_t value) {
  if (value > 4095) {
   d6058:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
  for (uint8_t i=0; i<16; i++)
    _pwm.setPWM(i, 0, 0);
}

void Adafruit_MotorShield::setPWM(uint8_t pin, uint16_t value) {
   d605c:	4613      	mov	r3, r2
   d605e:	f100 006c 	add.w	r0, r0, #108	; 0x6c
  if (value > 4095) {
    _pwm.setPWM(pin, 4096, 0);
   d6062:	bf26      	itte	cs
   d6064:	2300      	movcs	r3, #0
   d6066:	f44f 5280 	movcs.w	r2, #4096	; 0x1000
  } else
    _pwm.setPWM(pin, 0, value);
   d606a:	2200      	movcc	r2, #0
   d606c:	f000 b8a5 	b.w	d61ba <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d6070 <_ZN20Adafruit_MotorShield6setPinEhb>:
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
   d6070:	b410      	push	{r4}
  if (value == LOW)
   d6072:	b91a      	cbnz	r2, d607c <_ZN20Adafruit_MotorShield6setPinEhb+0xc>
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
}
   d6074:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6078:	f7ff bfca 	b.w	d6010 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
   d607c:	2300      	movs	r3, #0
   d607e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d6082:	306c      	adds	r0, #108	; 0x6c
}
   d6084:	f85d 4b04 	ldr.w	r4, [sp], #4
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
   d6088:	f000 b897 	b.w	d61ba <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d608c <_ZN20Adafruit_MotorShield8getMotorEh>:
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
  if (num > 4) return NULL;
   d608c:	2904      	cmp	r1, #4
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
   d608e:	b530      	push	{r4, r5, lr}
  if (num > 4) return NULL;
   d6090:	d82d      	bhi.n	d60ee <_ZN20Adafruit_MotorShield8getMotorEh+0x62>

  num--;
   d6092:	3901      	subs	r1, #1
   d6094:	b2c9      	uxtb	r1, r1

  if (dcmotors[num].motornum == 0) {
   d6096:	230c      	movs	r3, #12
   d6098:	fb03 0201 	mla	r2, r3, r1, r0
   d609c:	7b14      	ldrb	r4, [r2, #12]
   d609e:	bb0c      	cbnz	r4, d60e4 <_ZN20Adafruit_MotorShield8getMotorEh+0x58>
    // not init'd yet!
    dcmotors[num].motornum = num;
   d60a0:	7311      	strb	r1, [r2, #12]
   d60a2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   d60a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    dcmotors[num].MC = this;
   d60aa:	6090      	str	r0, [r2, #8]
    uint8_t pwm=8, in1=10, in2=9;
    if (num == 0) {
   d60ac:	b169      	cbz	r1, d60ca <_ZN20Adafruit_MotorShield8getMotorEh+0x3e>
      pwm = 8; in2 = 9; in1 = 10;
    } else if (num == 1) {
   d60ae:	2901      	cmp	r1, #1
   d60b0:	d00f      	beq.n	d60d2 <_ZN20Adafruit_MotorShield8getMotorEh+0x46>
      pwm = 13; in2 = 12; in1 = 11;
    } else if (num == 2) {
   d60b2:	2902      	cmp	r1, #2
   d60b4:	d010      	beq.n	d60d8 <_ZN20Adafruit_MotorShield8getMotorEh+0x4c>
      pwm = 2; in2 = 3; in1 = 4;
    } else if (num == 3) {
   d60b6:	2903      	cmp	r1, #3
      pwm = 7; in2 = 6; in1 = 5;
   d60b8:	bf15      	itete	ne
   d60ba:	2309      	movne	r3, #9
   d60bc:	2306      	moveq	r3, #6
   d60be:	240a      	movne	r4, #10
   d60c0:	2405      	moveq	r4, #5
   d60c2:	bf14      	ite	ne
   d60c4:	2508      	movne	r5, #8
   d60c6:	2507      	moveq	r5, #7
   d60c8:	e009      	b.n	d60de <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    // not init'd yet!
    dcmotors[num].motornum = num;
    dcmotors[num].MC = this;
    uint8_t pwm=8, in1=10, in2=9;
    if (num == 0) {
      pwm = 8; in2 = 9; in1 = 10;
   d60ca:	2309      	movs	r3, #9
   d60cc:	240a      	movs	r4, #10
   d60ce:	2508      	movs	r5, #8
   d60d0:	e005      	b.n	d60de <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    } else if (num == 1) {
      pwm = 13; in2 = 12; in1 = 11;
   d60d2:	240b      	movs	r4, #11
   d60d4:	250d      	movs	r5, #13
   d60d6:	e002      	b.n	d60de <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    } else if (num == 2) {
      pwm = 2; in2 = 3; in1 = 4;
   d60d8:	2303      	movs	r3, #3
   d60da:	2404      	movs	r4, #4
   d60dc:	460d      	mov	r5, r1
    } else if (num == 3) {
      pwm = 7; in2 = 6; in1 = 5;
    }
    dcmotors[num].PWMpin = pwm;
   d60de:	7115      	strb	r5, [r2, #4]
    dcmotors[num].IN1pin = in1;
   d60e0:	7154      	strb	r4, [r2, #5]
    dcmotors[num].IN2pin = in2;
   d60e2:	7193      	strb	r3, [r2, #6]
  }
  return &dcmotors[num];
   d60e4:	230c      	movs	r3, #12
   d60e6:	fb03 0001 	mla	r0, r3, r1, r0
   d60ea:	3004      	adds	r0, #4
   d60ec:	bd30      	pop	{r4, r5, pc}
  else
    _pwm.setPWM(pin, 4096, 0);
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
  if (num > 4) return NULL;
   d60ee:	2000      	movs	r0, #0
    dcmotors[num].PWMpin = pwm;
    dcmotors[num].IN1pin = in1;
    dcmotors[num].IN2pin = in2;
  }
  return &dcmotors[num];
}
   d60f0:	bd30      	pop	{r4, r5, pc}

000d60f2 <_ZN16Adafruit_DCMotorC1Ev>:
/******************************************
               MOTORS
******************************************/

Adafruit_DCMotor::Adafruit_DCMotor(void) {
  MC = NULL;
   d60f2:	2200      	movs	r2, #0
   d60f4:	6042      	str	r2, [r0, #4]
  motornum = 0;
   d60f6:	7202      	strb	r2, [r0, #8]
  PWMpin = IN1pin = IN2pin = 0;
   d60f8:	7082      	strb	r2, [r0, #2]
   d60fa:	7042      	strb	r2, [r0, #1]
   d60fc:	7002      	strb	r2, [r0, #0]
}
   d60fe:	4770      	bx	lr

000d6100 <_ZN20Adafruit_MotorShieldC1Eh>:
uint8_t microstepcurve[] = {0, 50, 98, 142, 180, 212, 236, 250, 255};
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d6100:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6102:	1d03      	adds	r3, r0, #4
   d6104:	460d      	mov	r5, r1
   d6106:	4604      	mov	r4, r0
   d6108:	f100 0134 	add.w	r1, r0, #52	; 0x34
   d610c:	4618      	mov	r0, r3
   d610e:	f7ff fff0 	bl	d60f2 <_ZN16Adafruit_DCMotorC1Ev>
   d6112:	330c      	adds	r3, #12
   d6114:	428b      	cmp	r3, r1
   d6116:	d1f9      	bne.n	d610c <_ZN20Adafruit_MotorShieldC1Eh+0xc>
/******************************************
               STEPPERS
******************************************/

Adafruit_StepperMotor::Adafruit_StepperMotor(void) {
  revsteps = steppernum = currentstep = 0;
   d6118:	2300      	movs	r3, #0
   d611a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   d611e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   d6122:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   d6126:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   d612a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   d612e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
uint8_t microstepcurve[] = {0, 50, 98, 142, 180, 212, 236, 250, 255};
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d6132:	2140      	movs	r1, #64	; 0x40
   d6134:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d6138:	f000 f83d 	bl	d61b6 <_ZN23Adafruit_PWMServoDriverC1Eh>
  _addr = addr;
   d613c:	7025      	strb	r5, [r4, #0]
  _pwm = Adafruit_PWMServoDriver(_addr);
   d613e:	4629      	mov	r1, r5
   d6140:	a801      	add	r0, sp, #4
   d6142:	f000 f838 	bl	d61b6 <_ZN23Adafruit_PWMServoDriverC1Eh>
   d6146:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d614a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   d614e:	4620      	mov	r0, r4
   d6150:	b003      	add	sp, #12
   d6152:	bd30      	pop	{r4, r5, pc}

000d6154 <_ZN16Adafruit_DCMotor3runEh>:
  motornum = 0;
  PWMpin = IN1pin = IN2pin = 0;
}

void Adafruit_DCMotor::run(uint8_t cmd) {
  switch (cmd) {
   d6154:	2902      	cmp	r1, #2
  MC = NULL;
  motornum = 0;
  PWMpin = IN1pin = IN2pin = 0;
}

void Adafruit_DCMotor::run(uint8_t cmd) {
   d6156:	b538      	push	{r3, r4, r5, lr}
   d6158:	4604      	mov	r4, r0
   d615a:	460d      	mov	r5, r1
  switch (cmd) {
   d615c:	d00a      	beq.n	d6174 <_ZN16Adafruit_DCMotor3runEh+0x20>
   d615e:	2904      	cmp	r1, #4
   d6160:	d013      	beq.n	d618a <_ZN16Adafruit_DCMotor3runEh+0x36>
   d6162:	2901      	cmp	r1, #1
   d6164:	d11b      	bne.n	d619e <_ZN16Adafruit_DCMotor3runEh+0x4a>
   d6166:	7881      	ldrb	r1, [r0, #2]
   d6168:	6840      	ldr	r0, [r0, #4]
   d616a:	f7ff ff51 	bl	d6010 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
  case FORWARD:
    MC->setPin(IN2pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN1pin, HIGH);
   d616e:	462a      	mov	r2, r5
   d6170:	7861      	ldrb	r1, [r4, #1]
   d6172:	e005      	b.n	d6180 <_ZN16Adafruit_DCMotor3runEh+0x2c>
   d6174:	7841      	ldrb	r1, [r0, #1]
   d6176:	6840      	ldr	r0, [r0, #4]
   d6178:	f7ff ff4a 	bl	d6010 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
    break;
  case BACKWARD:
    MC->setPin(IN1pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN2pin, HIGH);
   d617c:	78a1      	ldrb	r1, [r4, #2]
   d617e:	2201      	movs	r2, #1
   d6180:	6860      	ldr	r0, [r4, #4]
  case RELEASE:
    MC->setPin(IN1pin, LOW);
    MC->setPin(IN2pin, LOW);
    break;
  }
}
   d6182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MC->setPin(IN2pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN1pin, HIGH);
    break;
  case BACKWARD:
    MC->setPin(IN1pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN2pin, HIGH);
   d6186:	f7ff bf73 	b.w	d6070 <_ZN20Adafruit_MotorShield6setPinEhb>
   d618a:	7841      	ldrb	r1, [r0, #1]
   d618c:	6840      	ldr	r0, [r0, #4]
   d618e:	f7ff ff3f 	bl	d6010 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
   d6192:	78a1      	ldrb	r1, [r4, #2]
   d6194:	6860      	ldr	r0, [r4, #4]
  case RELEASE:
    MC->setPin(IN1pin, LOW);
    MC->setPin(IN2pin, LOW);
    break;
  }
}
   d6196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d619a:	f7ff bf39 	b.w	d6010 <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
   d619e:	bd38      	pop	{r3, r4, r5, pc}

000d61a0 <_ZN16Adafruit_DCMotor8setSpeedEh>:

void Adafruit_DCMotor::setSpeed(uint8_t speed) {
  MC->setPWM(PWMpin, speed*16);
   d61a0:	010a      	lsls	r2, r1, #4
   d61a2:	7801      	ldrb	r1, [r0, #0]
   d61a4:	6840      	ldr	r0, [r0, #4]
   d61a6:	f7ff bf57 	b.w	d6058 <_ZN20Adafruit_MotorShield6setPWMEht>

000d61aa <_GLOBAL__sub_I_microstepcurve>:
   d61aa:	f001 b9a3 	b.w	d74f4 <HAL_Pin_Map>

000d61ae <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d61ae:	6803      	ldr	r3, [r0, #0]
   d61b0:	b2c9      	uxtb	r1, r1
   d61b2:	689b      	ldr	r3, [r3, #8]
   d61b4:	4718      	bx	r3

000d61b6 <_ZN23Adafruit_PWMServoDriverC1Eh>:
#include "Adafruit_PWMServoDriver.h"
#include "application.h"
#include "math.h"

Adafruit_PWMServoDriver::Adafruit_PWMServoDriver(uint8_t addr) {
  _i2caddr = addr;
   d61b6:	7001      	strb	r1, [r0, #0]
}
   d61b8:	4770      	bx	lr

000d61ba <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>:
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}

void Adafruit_PWMServoDriver::setPWM(uint8_t num, uint16_t on, uint16_t off) {
   d61ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61bc:	4607      	mov	r7, r0
   d61be:	4615      	mov	r5, r2
   d61c0:	461c      	mov	r4, r3
   d61c2:	460e      	mov	r6, r1
  //Serial.print("Setting PWM "); Serial.print(num); Serial.print(": "); Serial.print(on); Serial.print("->"); Serial.println(off);

  Wire.beginTransmission(_i2caddr);
   d61c4:	f002 fde0 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d61c8:	7839      	ldrb	r1, [r7, #0]
   d61ca:	f001 ffc8 	bl	d815e <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(LED0_ON_L+4*num);
   d61ce:	f002 fddb 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d61d2:	2106      	movs	r1, #6
   d61d4:	eb01 0186 	add.w	r1, r1, r6, lsl #2
   d61d8:	f7ff ffe9 	bl	d61ae <_ZN7TwoWire5writeEi>
  Wire.write(on);
   d61dc:	f002 fdd4 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d61e0:	4629      	mov	r1, r5
   d61e2:	f7ff ffe4 	bl	d61ae <_ZN7TwoWire5writeEi>
  Wire.write(on>>8);
   d61e6:	f002 fdcf 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d61ea:	0a29      	lsrs	r1, r5, #8
   d61ec:	f7ff ffdf 	bl	d61ae <_ZN7TwoWire5writeEi>
  Wire.write(off);
   d61f0:	f002 fdca 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d61f4:	4621      	mov	r1, r4
   d61f6:	f7ff ffda 	bl	d61ae <_ZN7TwoWire5writeEi>
  Wire.write(off>>8);
   d61fa:	f002 fdc5 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d61fe:	0a21      	lsrs	r1, r4, #8
   d6200:	f7ff ffd5 	bl	d61ae <_ZN7TwoWire5writeEi>

  Wire.endTransmission();
   d6204:	f002 fdc0 	bl	d8d88 <_Z19__fetch_global_Wirev>
}
   d6208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(on);
  Wire.write(on>>8);
  Wire.write(off);
  Wire.write(off>>8);

  Wire.endTransmission();
   d620c:	f001 bfaf 	b.w	d816e <_ZN7TwoWire15endTransmissionEv>

000d6210 <_ZN23Adafruit_PWMServoDriver5read8Eh>:
}

uint8_t Adafruit_PWMServoDriver::read8(uint8_t addr) {
   d6210:	b538      	push	{r3, r4, r5, lr}
   d6212:	4604      	mov	r4, r0
   d6214:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d6216:	f002 fdb7 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d621a:	7821      	ldrb	r1, [r4, #0]
   d621c:	f001 ff9f 	bl	d815e <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d6220:	f002 fdb2 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6224:	6803      	ldr	r3, [r0, #0]
   d6226:	4629      	mov	r1, r5
   d6228:	689b      	ldr	r3, [r3, #8]
   d622a:	4798      	blx	r3

  Wire.endTransmission();
   d622c:	f002 fdac 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6230:	f001 ff9d 	bl	d816e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
   d6234:	f002 fda8 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6238:	2201      	movs	r2, #1
   d623a:	7821      	ldrb	r1, [r4, #0]
   d623c:	f001 ff8c 	bl	d8158 <_ZN7TwoWire11requestFromEhj>

  return Wire.read();
   d6240:	f002 fda2 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6244:	6803      	ldr	r3, [r0, #0]
   d6246:	695b      	ldr	r3, [r3, #20]
   d6248:	4798      	blx	r3
}
   d624a:	b2c0      	uxtb	r0, r0
   d624c:	bd38      	pop	{r3, r4, r5, pc}

000d624e <_ZN23Adafruit_PWMServoDriver6write8Ehh>:

void Adafruit_PWMServoDriver::write8(uint8_t addr, uint8_t d) {
   d624e:	b570      	push	{r4, r5, r6, lr}
   d6250:	4606      	mov	r6, r0
   d6252:	4614      	mov	r4, r2
   d6254:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d6256:	f002 fd97 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d625a:	7831      	ldrb	r1, [r6, #0]
   d625c:	f001 ff7f 	bl	d815e <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d6260:	f002 fd92 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6264:	6803      	ldr	r3, [r0, #0]
   d6266:	4629      	mov	r1, r5
   d6268:	689b      	ldr	r3, [r3, #8]
   d626a:	4798      	blx	r3
  Wire.write(d);
   d626c:	f002 fd8c 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6270:	6803      	ldr	r3, [r0, #0]
   d6272:	4621      	mov	r1, r4
   d6274:	689b      	ldr	r3, [r3, #8]
   d6276:	4798      	blx	r3

  Wire.endTransmission();
   d6278:	f002 fd86 	bl	d8d88 <_Z19__fetch_global_Wirev>
}
   d627c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.beginTransmission(_i2caddr);

  Wire.write(addr);
  Wire.write(d);

  Wire.endTransmission();
   d6280:	f001 bf75 	b.w	d816e <_ZN7TwoWire15endTransmissionEv>

000d6284 <_ZN23Adafruit_PWMServoDriver5resetEv>:
 reset();
}


void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
   d6284:	2200      	movs	r2, #0
   d6286:	4611      	mov	r1, r2
   d6288:	f7ff bfe1 	b.w	d624e <_ZN23Adafruit_PWMServoDriver6write8Ehh>

000d628c <_ZN23Adafruit_PWMServoDriver5beginEv>:

Adafruit_PWMServoDriver::Adafruit_PWMServoDriver(uint8_t addr) {
  _i2caddr = addr;
}

void Adafruit_PWMServoDriver::begin(void) {
   d628c:	b510      	push	{r4, lr}
   d628e:	4604      	mov	r4, r0
 Wire.begin();
   d6290:	f002 fd7a 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6294:	f001 ff26 	bl	d80e4 <_ZN7TwoWire5beginEv>
 reset();
   d6298:	4620      	mov	r0, r4
}
   d629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _i2caddr = addr;
}

void Adafruit_PWMServoDriver::begin(void) {
 Wire.begin();
 reset();
   d629e:	f7ff bff1 	b.w	d6284 <_ZN23Adafruit_PWMServoDriver5resetEv>
	...

000d62a4 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>:
  //Serial.print("Attempting to set freq ");
  //Serial.println(freq);

  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
   d62a4:	eddf 7a2e 	vldr	s15, [pc, #184]	; d6360 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xbc>
   d62a8:	ee87 0a80 	vdiv.f32	s0, s15, s0

void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
}

void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d62ac:	b570      	push	{r4, r5, r6, lr}
   d62ae:	4604      	mov	r4, r0
   d62b0:	ed2d 8b02 	vpush	{d8}
  //Serial.println(freq);

  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
   d62b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d62b8:	ee30 8a48 	vsub.f32	s16, s0, s16
  Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
   d62bc:	f002 f850 	bl	d8360 <_Z16_fetch_usbserialv>
   d62c0:	4928      	ldr	r1, [pc, #160]	; (d6364 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc0>)
   d62c2:	f002 fa74 	bl	d87ae <_ZN5Print5printEPKc>
   d62c6:	f002 f84b 	bl	d8360 <_Z16_fetch_usbserialv>
   d62ca:	eeb0 0a48 	vmov.f32	s0, s16
   d62ce:	2102      	movs	r1, #2
   d62d0:	f002 fb69 	bl	d89a6 <_ZN5Print7printlnEfi>
  uint8_t prescale = floor(prescaleval + 0.5);
   d62d4:	ee18 0a10 	vmov	r0, s16
   d62d8:	f003 f95e 	bl	d9598 <__aeabi_f2d>
   d62dc:	4b22      	ldr	r3, [pc, #136]	; (d6368 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc4>)
   d62de:	2200      	movs	r2, #0
   d62e0:	f002 fffc 	bl	d92dc <__adddf3>
   d62e4:	ec41 0b10 	vmov	d0, r0, r1
   d62e8:	f002 ff62 	bl	d91b0 <floor>
   d62ec:	ec51 0b10 	vmov	r0, r1, d0
   d62f0:	f003 fc7e 	bl	d9bf0 <__aeabi_d2uiz>
   d62f4:	b2c6      	uxtb	r6, r0
  Serial.print("Final pre-scale: "); Serial.println(prescale);
   d62f6:	f002 f833 	bl	d8360 <_Z16_fetch_usbserialv>
   d62fa:	491c      	ldr	r1, [pc, #112]	; (d636c <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc8>)
   d62fc:	f002 fa57 	bl	d87ae <_ZN5Print5printEPKc>
   d6300:	f002 f82e 	bl	d8360 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6304:	220a      	movs	r2, #10
   d6306:	4631      	mov	r1, r6
   d6308:	4605      	mov	r5, r0
   d630a:	f002 fa63 	bl	d87d4 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d630e:	4628      	mov	r0, r5
   d6310:	f002 fa54 	bl	d87bc <_ZN5Print7printlnEv>

  uint8_t oldmode = read8(PCA9685_MODE1);
   d6314:	2100      	movs	r1, #0
   d6316:	4620      	mov	r0, r4
   d6318:	f7ff ff7a 	bl	d6210 <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
   d631c:	f000 026f 	and.w	r2, r0, #111	; 0x6f
  prescaleval -= 1;
  Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  uint8_t prescale = floor(prescaleval + 0.5);
  Serial.print("Final pre-scale: "); Serial.println(prescale);

  uint8_t oldmode = read8(PCA9685_MODE1);
   d6320:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
   d6322:	f042 0210 	orr.w	r2, r2, #16
   d6326:	4620      	mov	r0, r4
   d6328:	2100      	movs	r1, #0
   d632a:	f7ff ff90 	bl	d624e <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
   d632e:	4632      	mov	r2, r6
   d6330:	4620      	mov	r0, r4
   d6332:	21fe      	movs	r1, #254	; 0xfe
   d6334:	f7ff ff8b 	bl	d624e <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_MODE1, oldmode);
   d6338:	462a      	mov	r2, r5
   d633a:	2100      	movs	r1, #0
   d633c:	4620      	mov	r0, r4
   d633e:	f7ff ff86 	bl	d624e <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  delay(5);
   d6342:	2005      	movs	r0, #5
   d6344:	f002 fa0a 	bl	d875c <delay>
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}
   d6348:	ecbd 8b02 	vpop	{d8}
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
  write8(PCA9685_MODE1, oldmode);
  delay(5);
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d634c:	f065 025e 	orn	r2, r5, #94	; 0x5e
   d6350:	4620      	mov	r0, r4
   d6352:	b2d2      	uxtb	r2, r2
   d6354:	2100      	movs	r1, #0
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}
   d6356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
  write8(PCA9685_MODE1, oldmode);
  delay(5);
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d635a:	f7ff bf78 	b.w	d624e <_ZN23Adafruit_PWMServoDriver6write8Ehh>
   d635e:	bf00      	nop
   d6360:	45bebc20 	.word	0x45bebc20
   d6364:	000da5e8 	.word	0x000da5e8
   d6368:	3fe00000 	.word	0x3fe00000
   d636c:	000da5fe 	.word	0x000da5fe

000d6370 <_GLOBAL__sub_I__ZN23Adafruit_PWMServoDriverC2Eh>:
   d6370:	f001 b8c0 	b.w	d74f4 <HAL_Pin_Map>

000d6374 <_ZN10FlySkyIBus5beginER6Stream>:
}

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
  this->state = DISCARD;
   d6374:	2304      	movs	r3, #4
  serial.begin(115200);
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
   d6376:	b510      	push	{r4, lr}
  this->stream = &stream;
  this->state = DISCARD;
   d6378:	7003      	strb	r3, [r0, #0]
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
   d637a:	6041      	str	r1, [r0, #4]
  serial.begin(115200);
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
   d637c:	4604      	mov	r4, r0
   d637e:	f001 f899 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
  this->stream = &stream;
  this->state = DISCARD;
  this->last = millis();
  this->ptr = 0;
   d6382:	2300      	movs	r3, #0

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
  this->state = DISCARD;
  this->last = millis();
   d6384:	60a0      	str	r0, [r4, #8]
  this->ptr = 0;
   d6386:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  this->len = 0;
   d638a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  this->chksum = 0;
   d638e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  this->lchksum = 0;
   d6392:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   d6396:	bd10      	pop	{r4, pc}

000d6398 <_ZN10FlySkyIBus5beginER11USARTSerial>:
FlySkyIBus IBus;

//#define serial Serial

void FlySkyIBus::begin(USARTSerial& serial)
{
   d6398:	b538      	push	{r3, r4, r5, lr}
   d639a:	460c      	mov	r4, r1
   d639c:	4605      	mov	r5, r0
  serial.begin(115200);
   d639e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d63a2:	4620      	mov	r0, r4
   d63a4:	f001 ff4e 	bl	d8244 <_ZN11USARTSerial5beginEm>
  begin((Stream&)serial);
   d63a8:	4621      	mov	r1, r4
   d63aa:	4628      	mov	r0, r5
}
   d63ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
//#define serial Serial

void FlySkyIBus::begin(USARTSerial& serial)
{
  serial.begin(115200);
  begin((Stream&)serial);
   d63b0:	f7ff bfe0 	b.w	d6374 <_ZN10FlySkyIBus5beginER6Stream>

000d63b4 <_ZN10FlySkyIBus4loopEv>:
  this->chksum = 0;
  this->lchksum = 0;
}

void FlySkyIBus::loop(void)
{
   d63b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63b6:	4604      	mov	r4, r0
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
    {
      state = GET_LENGTH;
   d63b8:	2600      	movs	r6, #0

            default:
              break;
          }
        }
        state = DISCARD;
   d63ba:	2504      	movs	r5, #4
  this->lchksum = 0;
}

void FlySkyIBus::loop(void)
{
  while (stream->available() > 0)
   d63bc:	6860      	ldr	r0, [r4, #4]
   d63be:	6803      	ldr	r3, [r0, #0]
   d63c0:	691b      	ldr	r3, [r3, #16]
   d63c2:	4798      	blx	r3
   d63c4:	2800      	cmp	r0, #0
   d63c6:	dd56      	ble.n	d6476 <_ZN10FlySkyIBus4loopEv+0xc2>
   d63c8:	f001 f874 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
   d63cc:	68a3      	ldr	r3, [r4, #8]
    {
      state = GET_LENGTH;
    }
    last = now;
   d63ce:	60a0      	str	r0, [r4, #8]
void FlySkyIBus::loop(void)
{
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
   d63d0:	1ac3      	subs	r3, r0, r3
   d63d2:	2b02      	cmp	r3, #2
    {
      state = GET_LENGTH;
    }
    last = now;

    uint8_t v = stream->read();
   d63d4:	6860      	ldr	r0, [r4, #4]
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
    {
      state = GET_LENGTH;
   d63d6:	bf88      	it	hi
   d63d8:	7026      	strbhi	r6, [r4, #0]
    }
    last = now;

    uint8_t v = stream->read();
   d63da:	6803      	ldr	r3, [r0, #0]
   d63dc:	695b      	ldr	r3, [r3, #20]
   d63de:	4798      	blx	r3
    switch (state)
   d63e0:	7822      	ldrb	r2, [r4, #0]
    {
      state = GET_LENGTH;
    }
    last = now;

    uint8_t v = stream->read();
   d63e2:	b2c3      	uxtb	r3, r0
    switch (state)
   d63e4:	2a03      	cmp	r2, #3
   d63e6:	d8e9      	bhi.n	d63bc <_ZN10FlySkyIBus4loopEv+0x8>
   d63e8:	e8df f002 	tbb	[pc, r2]
   d63ec:	26210e02 	.word	0x26210e02
    {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH)
   d63f0:	2b20      	cmp	r3, #32
   d63f2:	d83e      	bhi.n	d6472 <_ZN10FlySkyIBus4loopEv+0xbe>
        {
          ptr = 0;
          len = v - PROTOCOL_OVERHEAD;
   d63f4:	1eda      	subs	r2, r3, #3
          chksum = 0xFFFF - v;
   d63f6:	43db      	mvns	r3, r3
   d63f8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    switch (state)
    {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH)
        {
          ptr = 0;
   d63fc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
          len = v - PROTOCOL_OVERHEAD;
   d6400:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
          chksum = 0xFFFF - v;
          state = GET_DATA;
   d6404:	2301      	movs	r3, #1
   d6406:	e015      	b.n	d6434 <_ZN10FlySkyIBus4loopEv+0x80>
          state = DISCARD;
        }
        break;

      case GET_DATA:
        buffer[ptr++] = v;
   d6408:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d640c:	1c4a      	adds	r2, r1, #1
   d640e:	4421      	add	r1, r4
   d6410:	b2d2      	uxtb	r2, r2
   d6412:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
   d6416:	730b      	strb	r3, [r1, #12]
        chksum -= v;
   d6418:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   d641c:	1acb      	subs	r3, r1, r3
   d641e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        if (ptr == len)
   d6422:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   d6426:	4293      	cmp	r3, r2
   d6428:	d1c8      	bne.n	d63bc <_ZN10FlySkyIBus4loopEv+0x8>
        {
          state = GET_CHKSUML;
   d642a:	2302      	movs	r3, #2
   d642c:	e002      	b.n	d6434 <_ZN10FlySkyIBus4loopEv+0x80>
        }
        break;

      case GET_CHKSUML:
        lchksum = v;
   d642e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        state = GET_CHKSUMH;
   d6432:	2303      	movs	r3, #3
   d6434:	7023      	strb	r3, [r4, #0]
        break;
   d6436:	e7c1      	b.n	d63bc <_ZN10FlySkyIBus4loopEv+0x8>

      case GET_CHKSUMH:
        // Validate checksum
        if (chksum == (v << 8) + lchksum)
   d6438:	0200      	lsls	r0, r0, #8
   d643a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d643e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
   d6442:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   d6446:	4418      	add	r0, r3
   d6448:	4282      	cmp	r2, r0
   d644a:	d112      	bne.n	d6472 <_ZN10FlySkyIBus4loopEv+0xbe>
        {
          // Execute command - we only know command 0x40
          switch (buffer[0])
   d644c:	7b23      	ldrb	r3, [r4, #12]
   d644e:	2b40      	cmp	r3, #64	; 0x40
   d6450:	d10f      	bne.n	d6472 <_ZN10FlySkyIBus4loopEv+0xbe>
   d6452:	4622      	mov	r2, r4
   d6454:	2301      	movs	r3, #1
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d6456:	7b97      	ldrb	r7, [r2, #14]
   d6458:	7b50      	ldrb	r0, [r2, #13]
   d645a:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d645e:	3302      	adds	r3, #2
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d6460:	4421      	add	r1, r4
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6462:	b2db      	uxtb	r3, r3
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d6464:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6468:	2b15      	cmp	r3, #21
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d646a:	85c8      	strh	r0, [r1, #46]	; 0x2e
   d646c:	f102 0202 	add.w	r2, r2, #2
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d6470:	d1f1      	bne.n	d6456 <_ZN10FlySkyIBus4loopEv+0xa2>

            default:
              break;
          }
        }
        state = DISCARD;
   d6472:	7025      	strb	r5, [r4, #0]
        break;
   d6474:	e7a2      	b.n	d63bc <_ZN10FlySkyIBus4loopEv+0x8>
   d6476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6478 <_ZN10FlySkyIBus11readChannelEh>:
  }
}

uint16_t FlySkyIBus::readChannel(uint8_t channelNr)
{
  if (channelNr < PROTOCOL_CHANNELS)
   d6478:	2909      	cmp	r1, #9
  {
    return channel[channelNr];
   d647a:	bf9a      	itte	ls
   d647c:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
   d6480:	8dc0      	ldrhls	r0, [r0, #46]	; 0x2e
  }
  else
  {
    return 0;
   d6482:	2000      	movhi	r0, #0
  }
}
   d6484:	4770      	bx	lr

000d6486 <_GLOBAL__sub_I_IBus>:
   d6486:	f001 b835 	b.w	d74f4 <HAL_Pin_Map>
	...

000d648c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d648c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d648e:	6984      	ldr	r4, [r0, #24]
   d6490:	4b0a      	ldr	r3, [pc, #40]	; (d64bc <_ZN9TCPClientD1Ev+0x30>)
   d6492:	6003      	str	r3, [r0, #0]
   d6494:	4605      	mov	r5, r0
   d6496:	b17c      	cbz	r4, d64b8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6498:	6863      	ldr	r3, [r4, #4]
   d649a:	3b01      	subs	r3, #1
   d649c:	6063      	str	r3, [r4, #4]
   d649e:	b95b      	cbnz	r3, d64b8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d64a0:	6823      	ldr	r3, [r4, #0]
   d64a2:	4620      	mov	r0, r4
   d64a4:	689b      	ldr	r3, [r3, #8]
   d64a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d64a8:	68a3      	ldr	r3, [r4, #8]
   d64aa:	3b01      	subs	r3, #1
   d64ac:	60a3      	str	r3, [r4, #8]
   d64ae:	b91b      	cbnz	r3, d64b8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d64b0:	6823      	ldr	r3, [r4, #0]
   d64b2:	4620      	mov	r0, r4
   d64b4:	68db      	ldr	r3, [r3, #12]
   d64b6:	4798      	blx	r3
   d64b8:	4628      	mov	r0, r5
   d64ba:	bd38      	pop	{r3, r4, r5, pc}
   d64bc:	000da6ac 	.word	0x000da6ac

000d64c0 <_ZN9TCPClientD0Ev>:
   d64c0:	b510      	push	{r4, lr}
   d64c2:	4604      	mov	r4, r0
   d64c4:	f7ff ffe2 	bl	d648c <_ZN9TCPClientD1Ev>
   d64c8:	4620      	mov	r0, r4
   d64ca:	211c      	movs	r1, #28
   d64cc:	f002 fd10 	bl	d8ef0 <_ZdlPvj>
   d64d0:	4620      	mov	r0, r4
   d64d2:	bd10      	pop	{r4, pc}

000d64d4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d64d4:	b538      	push	{r3, r4, r5, lr}
   d64d6:	461d      	mov	r5, r3
    this->callback = callback;
   d64d8:	9b05      	ldr	r3, [sp, #20]
   d64da:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d64dc:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d64de:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d64e0:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d64e2:	b102      	cbz	r2, d64e6 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d64e4:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d64e6:	b119      	cbz	r1, d64f0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d64e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d64ec:	f002 fb1a 	bl	d8b24 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d64f0:	9b04      	ldr	r3, [sp, #16]
   d64f2:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d64f4:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d64f6:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d64f8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d64fc:	2bff      	cmp	r3, #255	; 0xff
   d64fe:	bfb8      	it	lt
   d6500:	23ff      	movlt	r3, #255	; 0xff
   d6502:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d6506:	b108      	cbz	r0, d650c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d6508:	f7fd fdcd 	bl	d40a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d650c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d6510:	f7fd fdc5 	bl	d409e <_Znaj>
   d6514:	61e0      	str	r0, [r4, #28]
   d6516:	bd38      	pop	{r3, r4, r5, pc}

000d6518 <_ZN4MQTTC1EPhtPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d6518:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d651c:	4604      	mov	r4, r0
   d651e:	2500      	movs	r5, #0
   d6520:	4617      	mov	r7, r2
   d6522:	4698      	mov	r8, r3
   d6524:	460e      	mov	r6, r1
   d6526:	f001 fc79 	bl	d7e1c <_ZN9TCPClientC1Ev>
   d652a:	61e5      	str	r5, [r4, #28]
   d652c:	490a      	ldr	r1, [pc, #40]	; (d6558 <_ZN4MQTTC1EPhtPFvPcS0_jE+0x40>)
   d652e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6532:	f002 fae4 	bl	d8afe <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d6536:	23ff      	movs	r3, #255	; 0xff
   d6538:	9302      	str	r3, [sp, #8]
   d653a:	230f      	movs	r3, #15
   d653c:	9300      	str	r3, [sp, #0]
   d653e:	4620      	mov	r0, r4

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d6540:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d6542:	f8cd 8004 	str.w	r8, [sp, #4]
   d6546:	463b      	mov	r3, r7
   d6548:	4632      	mov	r2, r6
   d654a:	4629      	mov	r1, r5
   d654c:	f7ff ffc2 	bl	d64d4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d6550:	4620      	mov	r0, r4
   d6552:	b004      	add	sp, #16
   d6554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6558:	000da8d6 	.word	0x000da8d6

000d655c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d655c:	b510      	push	{r4, lr}
   d655e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d6560:	4620      	mov	r0, r4
   d6562:	f001 fbbf 	bl	d7ce4 <_ZN9TCPClient9availableEv>
   d6566:	2800      	cmp	r0, #0
   d6568:	d0fa      	beq.n	d6560 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d656a:	4620      	mov	r0, r4
   d656c:	f001 fa63 	bl	d7a36 <_ZN9TCPClient4readEv>
}
   d6570:	b2c0      	uxtb	r0, r0
   d6572:	bd10      	pop	{r4, pc}

000d6574 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d6574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6578:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d657a:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d657c:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d657e:	f7ff ffed 	bl	d655c <_ZN4MQTT8readByteEv>
   d6582:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d6584:	69eb      	ldr	r3, [r5, #28]
   d6586:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d658a:	f04f 0901 	mov.w	r9, #1
   d658e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d6592:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6594:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d6596:	4628      	mov	r0, r5
   d6598:	f7ff ffe0 	bl	d655c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d659c:	69eb      	ldr	r3, [r5, #28]
   d659e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d65a0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d65a4:	fb13 f309 	smulbb	r3, r3, r9
   d65a8:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d65aa:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d65ac:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d65ae:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d65b0:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d65b2:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d65b6:	d501      	bpl.n	d65bc <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d65b8:	4626      	mov	r6, r4
   d65ba:	e7ec      	b.n	d6596 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d65bc:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d65be:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d65c2:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d65c6:	d113      	bne.n	d65f0 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d65c8:	4628      	mov	r0, r5
   d65ca:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d65ce:	f7ff ffc5 	bl	d655c <_ZN4MQTT8readByteEv>
   d65d2:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d65d6:	4628      	mov	r0, r5
   d65d8:	1cf4      	adds	r4, r6, #3
   d65da:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d65de:	3602      	adds	r6, #2
   d65e0:	f7ff ffbc 	bl	d655c <_ZN4MQTT8readByteEv>
   d65e4:	b2b6      	uxth	r6, r6
   d65e6:	b2a4      	uxth	r4, r4
   d65e8:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d65ec:	2302      	movs	r3, #2
   d65ee:	e000      	b.n	d65f2 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d65f0:	2300      	movs	r3, #0
   d65f2:	1b1b      	subs	r3, r3, r4
   d65f4:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d65f6:	19a3      	adds	r3, r4, r6
   d65f8:	b29b      	uxth	r3, r3
   d65fa:	429f      	cmp	r7, r3
   d65fc:	d90b      	bls.n	d6616 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d65fe:	4628      	mov	r0, r5
   d6600:	f7ff ffac 	bl	d655c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d6604:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d6608:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d660a:	bf84      	itt	hi
   d660c:	69eb      	ldrhi	r3, [r5, #28]
   d660e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d6610:	3401      	adds	r4, #1
   d6612:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d6614:	e7ef      	b.n	d65f6 <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d6616:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d661a:	42a0      	cmp	r0, r4
   d661c:	bf2c      	ite	cs
   d661e:	4620      	movcs	r0, r4
   d6620:	2000      	movcc	r0, #0
   d6622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6626 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d6626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6628:	4607      	mov	r7, r0
   d662a:	468e      	mov	lr, r1
   d662c:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d662e:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d6630:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d6632:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d6634:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d6638:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d663a:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d663c:	bf18      	it	ne
   d663e:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d6642:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d6644:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d6648:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d664a:	2d00      	cmp	r5, #0
   d664c:	d1f1      	bne.n	d6632 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d664e:	f1c4 0304 	rsb	r3, r4, #4
   d6652:	18d1      	adds	r1, r2, r3
   d6654:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d6658:	42a5      	cmp	r5, r4
   d665a:	da06      	bge.n	d666a <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d665c:	1b2b      	subs	r3, r5, r4
   d665e:	a801      	add	r0, sp, #4
   d6660:	4413      	add	r3, r2
   d6662:	5c28      	ldrb	r0, [r5, r0]
   d6664:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d6666:	3501      	adds	r5, #1
   d6668:	e7f6      	b.n	d6658 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d666a:	1c72      	adds	r2, r6, #1
   d666c:	4422      	add	r2, r4
   d666e:	4638      	mov	r0, r7
   d6670:	f001 f937 	bl	d78e2 <_ZN9TCPClient5writeEPKhj>
   d6674:	4605      	mov	r5, r0
   d6676:	f000 ff1d 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d667a:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d667c:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d667e:	4434      	add	r4, r6
   d6680:	b2a8      	uxth	r0, r5
}
   d6682:	1a23      	subs	r3, r4, r0
   d6684:	4258      	negs	r0, r3
   d6686:	4158      	adcs	r0, r3
   d6688:	b003      	add	sp, #12
   d668a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d668c <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d668c:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d668e:	69c3      	ldr	r3, [r0, #28]
   d6690:	22e0      	movs	r2, #224	; 0xe0
   d6692:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d6694:	69c3      	ldr	r3, [r0, #28]
   d6696:	2200      	movs	r2, #0
   d6698:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d669a:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d669c:	2202      	movs	r2, #2
   d669e:	69c1      	ldr	r1, [r0, #28]
   d66a0:	f001 f91f 	bl	d78e2 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d66a4:	4620      	mov	r0, r4
   d66a6:	f001 fb05 	bl	d7cb4 <_ZN9TCPClient4stopEv>
   d66aa:	f000 ff03 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d66ae:	6260      	str	r0, [r4, #36]	; 0x24
   d66b0:	62a0      	str	r0, [r4, #40]	; 0x28
   d66b2:	bd10      	pop	{r4, pc}

000d66b4 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d66b4:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d66b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d66b8:	b29b      	uxth	r3, r3
   d66ba:	460d      	mov	r5, r1
   d66bc:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d66be:	f815 6b01 	ldrb.w	r6, [r5], #1
   d66c2:	b2a4      	uxth	r4, r4
   d66c4:	b13e      	cbz	r6, d66d6 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d66c6:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d66ca:	429f      	cmp	r7, r3
   d66cc:	d903      	bls.n	d66d6 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d66ce:	1c5c      	adds	r4, r3, #1
   d66d0:	54d6      	strb	r6, [r2, r3]
   d66d2:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d66d4:	e7f2      	b.n	d66bc <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d66d6:	1b19      	subs	r1, r3, r4
   d66d8:	440a      	add	r2, r1
   d66da:	1221      	asrs	r1, r4, #8
   d66dc:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d66e0:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d66e4:	4618      	mov	r0, r3
   d66e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66e8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d66e8:	b538      	push	{r3, r4, r5, lr}
   d66ea:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d66ec:	f001 f90f 	bl	d790e <_ZN9TCPClient9connectedEv>
   d66f0:	2800      	cmp	r0, #0
   d66f2:	bf14      	ite	ne
   d66f4:	2401      	movne	r4, #1
   d66f6:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d66f8:	d102      	bne.n	d6700 <_ZN4MQTT11isConnectedEv+0x18>
   d66fa:	4628      	mov	r0, r5
   d66fc:	f001 fada 	bl	d7cb4 <_ZN9TCPClient4stopEv>
    return rc;
}
   d6700:	4620      	mov	r0, r4
   d6702:	bd38      	pop	{r3, r4, r5, pc}

000d6704 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d6704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6708:	b087      	sub	sp, #28
   d670a:	4604      	mov	r4, r0
   d670c:	4689      	mov	r9, r1
   d670e:	4617      	mov	r7, r2
   d6710:	461e      	mov	r6, r3
   d6712:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d6716:	f7ff ffe7 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d671a:	4605      	mov	r5, r0
   d671c:	2800      	cmp	r0, #0
   d671e:	f040 80bd 	bne.w	d689c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d6722:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6724:	b939      	cbnz	r1, d6736 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d6726:	4603      	mov	r3, r0
   d6728:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d672c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d672e:	4620      	mov	r0, r4
   d6730:	f001 f9c4 	bl	d7abc <_ZN9TCPClient7connectEPKctm>
   d6734:	e009      	b.n	d674a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d6736:	4668      	mov	r0, sp
   d6738:	f001 fec0 	bl	d84bc <_ZN9IPAddressC1EPKh>
   d673c:	462b      	mov	r3, r5
   d673e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d6742:	4669      	mov	r1, sp
   d6744:	4620      	mov	r0, r4
   d6746:	f001 fa3b 	bl	d7bc0 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d674a:	2800      	cmp	r0, #0
   d674c:	f000 80a2 	beq.w	d6894 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d6750:	2301      	movs	r3, #1
   d6752:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d6754:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d6758:	2b04      	cmp	r3, #4
   d675a:	d115      	bne.n	d6788 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d675c:	4b52      	ldr	r3, [pc, #328]	; (d68a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d675e:	6818      	ldr	r0, [r3, #0]
   d6760:	889a      	ldrh	r2, [r3, #4]
   d6762:	f8ad 2004 	strh.w	r2, [sp, #4]
   d6766:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6768:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d676a:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d676c:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d676e:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6772:	1d53      	adds	r3, r2, #5
   d6774:	f8c2 0005 	str.w	r0, [r2, #5]
   d6778:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d677c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d6780:	719a      	strb	r2, [r3, #6]
   d6782:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d6784:	230c      	movs	r3, #12
   d6786:	e012      	b.n	d67ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d6788:	4b48      	ldr	r3, [pc, #288]	; (d68ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d678a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d678e:	6818      	ldr	r0, [r3, #0]
   d6790:	6859      	ldr	r1, [r3, #4]
   d6792:	7a1b      	ldrb	r3, [r3, #8]
   d6794:	466a      	mov	r2, sp
   d6796:	c203      	stmia	r2!, {r0, r1}
   d6798:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d679a:	466b      	mov	r3, sp
   d679c:	cb03      	ldmia	r3!, {r0, r1}
   d679e:	f8cc 0005 	str.w	r0, [ip, #5]
   d67a2:	f8cc 1009 	str.w	r1, [ip, #9]
   d67a6:	7813      	ldrb	r3, [r2, #0]
   d67a8:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d67ac:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d67ae:	f1b8 0f00 	cmp.w	r8, #0
   d67b2:	d00a      	beq.n	d67ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d67b4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d67b8:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d67bc:	0152      	lsls	r2, r2, #5
   d67be:	f042 0206 	orr.w	r2, r2, #6
   d67c2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d67c6:	b2d2      	uxtb	r2, r2
   d67c8:	e000      	b.n	d67cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d67ca:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d67cc:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d67d0:	b909      	cbnz	r1, d67d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d67d2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d67d6:	b12f      	cbz	r7, d67e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d67d8:	b916      	cbnz	r6, d67e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d67da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d67de:	e001      	b.n	d67e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d67e0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d67e4:	69e1      	ldr	r1, [r4, #28]
   d67e6:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d67e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d67ea:	69e1      	ldr	r1, [r4, #28]
   d67ec:	1c58      	adds	r0, r3, #1
   d67ee:	1212      	asrs	r2, r2, #8
   d67f0:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d67f2:	1c9a      	adds	r2, r3, #2
   d67f4:	69e1      	ldr	r1, [r4, #28]
   d67f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d67f8:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d67fa:	3303      	adds	r3, #3
   d67fc:	69e2      	ldr	r2, [r4, #28]
   d67fe:	4649      	mov	r1, r9
   d6800:	4620      	mov	r0, r4
   d6802:	f7ff ff57 	bl	d66b4 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d6806:	f1b8 0f00 	cmp.w	r8, #0
   d680a:	d00b      	beq.n	d6824 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d680c:	4603      	mov	r3, r0
   d680e:	69e2      	ldr	r2, [r4, #28]
   d6810:	4641      	mov	r1, r8
   d6812:	4620      	mov	r0, r4
   d6814:	f7ff ff4e 	bl	d66b4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d6818:	69e2      	ldr	r2, [r4, #28]
   d681a:	9911      	ldr	r1, [sp, #68]	; 0x44
   d681c:	4603      	mov	r3, r0
   d681e:	4620      	mov	r0, r4
   d6820:	f7ff ff48 	bl	d66b4 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d6824:	b167      	cbz	r7, d6840 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d6826:	4603      	mov	r3, r0
   d6828:	69e2      	ldr	r2, [r4, #28]
   d682a:	4639      	mov	r1, r7
   d682c:	4620      	mov	r0, r4
   d682e:	f7ff ff41 	bl	d66b4 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d6832:	b12e      	cbz	r6, d6840 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d6834:	4603      	mov	r3, r0
   d6836:	69e2      	ldr	r2, [r4, #28]
   d6838:	4631      	mov	r1, r6
   d683a:	4620      	mov	r0, r4
   d683c:	f7ff ff3a 	bl	d66b4 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d6840:	1f43      	subs	r3, r0, #5
   d6842:	b29b      	uxth	r3, r3
   d6844:	69e2      	ldr	r2, [r4, #28]
   d6846:	2110      	movs	r1, #16
   d6848:	4620      	mov	r0, r4
   d684a:	f7ff feec 	bl	d6626 <_ZN4MQTT5writeEhPht>
   d684e:	f000 fe31 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6852:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d6856:	6260      	str	r0, [r4, #36]	; 0x24
   d6858:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d685a:	4620      	mov	r0, r4
   d685c:	f001 fa42 	bl	d7ce4 <_ZN9TCPClient9availableEv>
   d6860:	b940      	cbnz	r0, d6874 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d6862:	f000 fe27 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6868:	1ac0      	subs	r0, r0, r3
   d686a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d686c:	4373      	muls	r3, r6
   d686e:	4298      	cmp	r0, r3
   d6870:	d9f3      	bls.n	d685a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d6872:	e00f      	b.n	d6894 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d6874:	4669      	mov	r1, sp
   d6876:	4620      	mov	r0, r4
   d6878:	f7ff fe7c 	bl	d6574 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d687c:	2804      	cmp	r0, #4
   d687e:	d109      	bne.n	d6894 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d6880:	69e3      	ldr	r3, [r4, #28]
   d6882:	78de      	ldrb	r6, [r3, #3]
   d6884:	b936      	cbnz	r6, d6894 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d6886:	f000 fe15 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d688a:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d688c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d688e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d6892:	e004      	b.n	d689e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d6894:	4620      	mov	r0, r4
   d6896:	f001 fa0d 	bl	d7cb4 <_ZN9TCPClient4stopEv>
   d689a:	e000      	b.n	d689e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d689c:	2500      	movs	r5, #0
}
   d689e:	4628      	mov	r0, r5
   d68a0:	b007      	add	sp, #28
   d68a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d68a6:	bf00      	nop
   d68a8:	000da610 	.word	0x000da610
   d68ac:	000da617 	.word	0x000da617

000d68b0 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d68b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d68b2:	2304      	movs	r3, #4
   d68b4:	9305      	str	r3, [sp, #20]
   d68b6:	2301      	movs	r3, #1
   d68b8:	9304      	str	r3, [sp, #16]
   d68ba:	2300      	movs	r3, #0
   d68bc:	9303      	str	r3, [sp, #12]
   d68be:	9302      	str	r3, [sp, #8]
   d68c0:	9301      	str	r3, [sp, #4]
   d68c2:	9300      	str	r3, [sp, #0]
   d68c4:	461a      	mov	r2, r3
   d68c6:	f7ff ff1d 	bl	d6704 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d68ca:	b007      	add	sp, #28
   d68cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d68d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d68d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d68d6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d68da:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d68de:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d68e2:	4604      	mov	r4, r0
   d68e4:	468b      	mov	fp, r1
   d68e6:	4691      	mov	r9, r2
   d68e8:	469a      	mov	sl, r3
    if (isConnected()) {
   d68ea:	f7ff fefd 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d68ee:	2800      	cmp	r0, #0
   d68f0:	d04c      	beq.n	d698c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d68f2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d68f6:	69e0      	ldr	r0, [r4, #28]
   d68f8:	2100      	movs	r1, #0
   d68fa:	f003 fa02 	bl	d9d02 <memset>

        length = writeString(topic, buffer, length);
   d68fe:	2305      	movs	r3, #5
   d6900:	69e2      	ldr	r2, [r4, #28]
   d6902:	4659      	mov	r1, fp
   d6904:	4620      	mov	r0, r4
   d6906:	f7ff fed5 	bl	d66b4 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d690a:	1e6b      	subs	r3, r5, #1
   d690c:	2b01      	cmp	r3, #1
   d690e:	d812      	bhi.n	d6936 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d6910:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d6912:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d6914:	3301      	adds	r3, #1
   d6916:	b29b      	uxth	r3, r3
   d6918:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d691a:	121b      	asrs	r3, r3, #8
   d691c:	5413      	strb	r3, [r2, r0]
   d691e:	1c41      	adds	r1, r0, #1
   d6920:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d6922:	69e3      	ldr	r3, [r4, #28]
   d6924:	8c22      	ldrh	r2, [r4, #32]
   d6926:	545a      	strb	r2, [r3, r1]
   d6928:	3002      	adds	r0, #2
   d692a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d692c:	b11e      	cbz	r6, d6936 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d692e:	8c23      	ldrh	r3, [r4, #32]
   d6930:	1c5a      	adds	r2, r3, #1
   d6932:	8422      	strh	r2, [r4, #32]
   d6934:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d6936:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d6938:	b291      	uxth	r1, r2
   d693a:	1883      	adds	r3, r0, r2
   d693c:	458a      	cmp	sl, r1
   d693e:	b29b      	uxth	r3, r3
   d6940:	d90a      	bls.n	d6958 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d6942:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d6946:	429e      	cmp	r6, r3
   d6948:	f102 0201 	add.w	r2, r2, #1
   d694c:	d904      	bls.n	d6958 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d694e:	f819 6001 	ldrb.w	r6, [r9, r1]
   d6952:	69e1      	ldr	r1, [r4, #28]
   d6954:	54ce      	strb	r6, [r1, r3]
   d6956:	e7ef      	b.n	d6938 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d6958:	f1b8 0f00 	cmp.w	r8, #0
   d695c:	bf0c      	ite	eq
   d695e:	2130      	moveq	r1, #48	; 0x30
   d6960:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d6962:	b10f      	cbz	r7, d6968 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d6964:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d6968:	2d02      	cmp	r5, #2
   d696a:	d102      	bne.n	d6972 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d696c:	f041 0104 	orr.w	r1, r1, #4
   d6970:	e003      	b.n	d697a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d6972:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d6974:	bf08      	it	eq
   d6976:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d697a:	3b05      	subs	r3, #5
   d697c:	69e2      	ldr	r2, [r4, #28]
   d697e:	b29b      	uxth	r3, r3
   d6980:	4620      	mov	r0, r4
    }
    return false;
}
   d6982:	b001      	add	sp, #4
   d6984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d6988:	f7ff be4d 	b.w	d6626 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d698c:	b001      	add	sp, #4
   d698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6992 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d6992:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d6994:	9c08      	ldr	r4, [sp, #32]
   d6996:	9403      	str	r4, [sp, #12]
   d6998:	2400      	movs	r4, #0
   d699a:	9402      	str	r4, [sp, #8]
   d699c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d69a0:	9401      	str	r4, [sp, #4]
   d69a2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d69a6:	9400      	str	r4, [sp, #0]
   d69a8:	f7ff ff92 	bl	d68d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d69ac:	b004      	add	sp, #16
   d69ae:	bd10      	pop	{r4, pc}

000d69b0 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d69b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d69b2:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d69b4:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d69b6:	460e      	mov	r6, r1
   d69b8:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d69ba:	f003 f9dd 	bl	d9d78 <strlen>
   d69be:	2300      	movs	r3, #0
   d69c0:	9302      	str	r3, [sp, #8]
   d69c2:	9301      	str	r3, [sp, #4]
   d69c4:	9300      	str	r3, [sp, #0]
   d69c6:	4622      	mov	r2, r4
   d69c8:	4603      	mov	r3, r0
   d69ca:	4631      	mov	r1, r6
   d69cc:	4628      	mov	r0, r5
   d69ce:	f7ff ffe0 	bl	d6992 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d69d2:	b004      	add	sp, #16
   d69d4:	bd70      	pop	{r4, r5, r6, pc}

000d69d6 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d69d6:	b538      	push	{r3, r4, r5, lr}
   d69d8:	4604      	mov	r4, r0
   d69da:	460d      	mov	r5, r1
    if (isConnected()) {
   d69dc:	f7ff fe84 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d69e0:	b190      	cbz	r0, d6a08 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d69e2:	69e3      	ldr	r3, [r4, #28]
   d69e4:	2262      	movs	r2, #98	; 0x62
   d69e6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d69e8:	69e3      	ldr	r3, [r4, #28]
   d69ea:	2202      	movs	r2, #2
   d69ec:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d69ee:	69e3      	ldr	r3, [r4, #28]
   d69f0:	122a      	asrs	r2, r5, #8
   d69f2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d69f4:	69e3      	ldr	r3, [r4, #28]
   d69f6:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d69f8:	2204      	movs	r2, #4
   d69fa:	69e1      	ldr	r1, [r4, #28]
   d69fc:	4620      	mov	r0, r4
   d69fe:	f000 ff70 	bl	d78e2 <_ZN9TCPClient5writeEPKhj>
   d6a02:	3000      	adds	r0, #0
   d6a04:	bf18      	it	ne
   d6a06:	2001      	movne	r0, #1
    }
    return false;
}
   d6a08:	bd38      	pop	{r3, r4, r5, pc}

000d6a0a <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d6a0a:	b538      	push	{r3, r4, r5, lr}
   d6a0c:	4604      	mov	r4, r0
   d6a0e:	460d      	mov	r5, r1
    if (isConnected()) {
   d6a10:	f7ff fe6a 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d6a14:	b190      	cbz	r0, d6a3c <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d6a16:	69e3      	ldr	r3, [r4, #28]
   d6a18:	2272      	movs	r2, #114	; 0x72
   d6a1a:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d6a1c:	69e3      	ldr	r3, [r4, #28]
   d6a1e:	2202      	movs	r2, #2
   d6a20:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d6a22:	69e3      	ldr	r3, [r4, #28]
   d6a24:	122a      	asrs	r2, r5, #8
   d6a26:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d6a28:	69e3      	ldr	r3, [r4, #28]
   d6a2a:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d6a2c:	2204      	movs	r2, #4
   d6a2e:	69e1      	ldr	r1, [r4, #28]
   d6a30:	4620      	mov	r0, r4
   d6a32:	f000 ff56 	bl	d78e2 <_ZN9TCPClient5writeEPKhj>
   d6a36:	3000      	adds	r0, #0
   d6a38:	bf18      	it	ne
   d6a3a:	2001      	movne	r0, #1
    }
    return false;
}
   d6a3c:	bd38      	pop	{r3, r4, r5, pc}

000d6a3e <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d6a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a42:	b083      	sub	sp, #12
   d6a44:	af00      	add	r7, sp, #0
   d6a46:	4604      	mov	r4, r0
    if (isConnected()) {
   d6a48:	f7ff fe4e 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d6a4c:	4681      	mov	r9, r0
   d6a4e:	2800      	cmp	r0, #0
   d6a50:	f000 80f6 	beq.w	d6c40 <_ZN4MQTT4loopEv+0x202>
   d6a54:	f000 fd2e 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d6a58:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d6a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a5e:	4353      	muls	r3, r2
   d6a60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d6a62:	1a82      	subs	r2, r0, r2
   d6a64:	429a      	cmp	r2, r3
   d6a66:	4605      	mov	r5, r0
   d6a68:	d803      	bhi.n	d6a72 <_ZN4MQTT4loopEv+0x34>
   d6a6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d6a6c:	1a82      	subs	r2, r0, r2
   d6a6e:	4293      	cmp	r3, r2
   d6a70:	d217      	bcs.n	d6aa2 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d6a72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d6a76:	b12b      	cbz	r3, d6a84 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d6a78:	4620      	mov	r0, r4
   d6a7a:	f001 f91b 	bl	d7cb4 <_ZN9TCPClient4stopEv>
                return false;
   d6a7e:	f04f 0900 	mov.w	r9, #0
   d6a82:	e0dd      	b.n	d6c40 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d6a84:	69e2      	ldr	r2, [r4, #28]
   d6a86:	21c0      	movs	r1, #192	; 0xc0
   d6a88:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d6a8a:	69e2      	ldr	r2, [r4, #28]
   d6a8c:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d6a8e:	69e1      	ldr	r1, [r4, #28]
   d6a90:	2202      	movs	r2, #2
   d6a92:	4620      	mov	r0, r4
   d6a94:	f000 ff25 	bl	d78e2 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d6a98:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d6a9a:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d6a9c:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d6a9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d6aa2:	4620      	mov	r0, r4
   d6aa4:	f001 f91e 	bl	d7ce4 <_ZN9TCPClient9availableEv>
   d6aa8:	2800      	cmp	r0, #0
   d6aaa:	f000 80c9 	beq.w	d6c40 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d6aae:	1df9      	adds	r1, r7, #7
   d6ab0:	4620      	mov	r0, r4
   d6ab2:	f7ff fd5f 	bl	d6574 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d6ab6:	4602      	mov	r2, r0
   d6ab8:	2800      	cmp	r0, #0
   d6aba:	f000 80c1 	beq.w	d6c40 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d6abe:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d6ac0:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d6ac2:	7818      	ldrb	r0, [r3, #0]
   d6ac4:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d6ac8:	2930      	cmp	r1, #48	; 0x30
   d6aca:	d17d      	bne.n	d6bc8 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d6acc:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d6ad0:	f1bb 0f00 	cmp.w	fp, #0
   d6ad4:	f000 80b4 	beq.w	d6c40 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d6ad8:	f897 c007 	ldrb.w	ip, [r7, #7]
   d6adc:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d6ae0:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d6ae2:	7881      	ldrb	r1, [r0, #2]
   d6ae4:	f890 e001 	ldrb.w	lr, [r0, #1]
   d6ae8:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d6aec:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d6af0:	f10e 0108 	add.w	r1, lr, #8
   d6af4:	f021 0107 	bic.w	r1, r1, #7
   d6af8:	ebad 0d01 	sub.w	sp, sp, r1
   d6afc:	4668      	mov	r0, sp
   d6afe:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d6b00:	b28e      	uxth	r6, r1
   d6b02:	45b6      	cmp	lr, r6
   d6b04:	d906      	bls.n	d6b14 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d6b06:	eb0c 0601 	add.w	r6, ip, r1
   d6b0a:	441e      	add	r6, r3
   d6b0c:	78f6      	ldrb	r6, [r6, #3]
   d6b0e:	5446      	strb	r6, [r0, r1]
   d6b10:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d6b12:	e7f5      	b.n	d6b00 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d6b14:	2100      	movs	r1, #0
   d6b16:	f800 100e 	strb.w	r1, [r0, lr]
   d6b1a:	781e      	ldrb	r6, [r3, #0]
   d6b1c:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d6b20:	2e02      	cmp	r6, #2
   d6b22:	f10c 0103 	add.w	r1, ip, #3
   d6b26:	ebcc 0202 	rsb	r2, ip, r2
   d6b2a:	d11e      	bne.n	d6b6a <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6b2c:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6b2e:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6b32:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6b36:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6b38:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6b3a:	7849      	ldrb	r1, [r1, #1]
   d6b3c:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6b40:	f10c 0105 	add.w	r1, ip, #5
   d6b44:	4471      	add	r1, lr
   d6b46:	4419      	add	r1, r3
   d6b48:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d6b4a:	69e3      	ldr	r3, [r4, #28]
   d6b4c:	2240      	movs	r2, #64	; 0x40
   d6b4e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d6b50:	69e3      	ldr	r3, [r4, #28]
   d6b52:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d6b54:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6b56:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d6b5a:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6b5e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d6b60:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d6b62:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d6b64:	f883 8003 	strb.w	r8, [r3, #3]
   d6b68:	e020      	b.n	d6bac <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d6b6a:	2e04      	cmp	r6, #4
   d6b6c:	d124      	bne.n	d6bb8 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6b6e:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6b70:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6b74:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6b78:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6b7a:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6b7c:	7849      	ldrb	r1, [r1, #1]
   d6b7e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6b82:	f10c 0105 	add.w	r1, ip, #5
   d6b86:	4471      	add	r1, lr
   d6b88:	4419      	add	r1, r3
   d6b8a:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d6b8c:	69e3      	ldr	r3, [r4, #28]
   d6b8e:	2250      	movs	r2, #80	; 0x50
   d6b90:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d6b92:	69e3      	ldr	r3, [r4, #28]
   d6b94:	2202      	movs	r2, #2
   d6b96:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d6b98:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6b9a:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d6b9e:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6ba2:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d6ba4:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d6ba6:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d6ba8:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d6bac:	69e1      	ldr	r1, [r4, #28]
   d6bae:	4620      	mov	r0, r4
   d6bb0:	f000 fe97 	bl	d78e2 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d6bb4:	6265      	str	r5, [r4, #36]	; 0x24
   d6bb6:	e005      	b.n	d6bc4 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d6bb8:	3a03      	subs	r2, #3
   d6bba:	4471      	add	r1, lr
   d6bbc:	ebce 0202 	rsb	r2, lr, r2
   d6bc0:	4419      	add	r1, r3
   d6bc2:	47d8      	blx	fp
   d6bc4:	46d5      	mov	sp, sl
   d6bc6:	e03b      	b.n	d6c40 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d6bc8:	2950      	cmp	r1, #80	; 0x50
   d6bca:	d108      	bne.n	d6bde <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d6bcc:	7899      	ldrb	r1, [r3, #2]
   d6bce:	78db      	ldrb	r3, [r3, #3]
   d6bd0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6bd4:	b289      	uxth	r1, r1
   d6bd6:	4620      	mov	r0, r4
   d6bd8:	f7ff fefd 	bl	d69d6 <_ZN4MQTT14publishReleaseEt>
   d6bdc:	e030      	b.n	d6c40 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d6bde:	2940      	cmp	r1, #64	; 0x40
   d6be0:	d00c      	beq.n	d6bfc <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d6be2:	2960      	cmp	r1, #96	; 0x60
   d6be4:	d108      	bne.n	d6bf8 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d6be6:	7899      	ldrb	r1, [r3, #2]
   d6be8:	78db      	ldrb	r3, [r3, #3]
   d6bea:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6bee:	b289      	uxth	r1, r1
   d6bf0:	4620      	mov	r0, r4
   d6bf2:	f7ff ff0a 	bl	d6a0a <_ZN4MQTT15publishCompleteEt>
   d6bf6:	e023      	b.n	d6c40 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d6bf8:	2970      	cmp	r1, #112	; 0x70
   d6bfa:	d10d      	bne.n	d6c18 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d6bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6bfe:	b1f9      	cbz	r1, d6c40 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d6c00:	2a04      	cmp	r2, #4
   d6c02:	d11d      	bne.n	d6c40 <_ZN4MQTT4loopEv+0x202>
   d6c04:	f010 0f06 	tst.w	r0, #6
   d6c08:	d11a      	bne.n	d6c40 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d6c0a:	7898      	ldrb	r0, [r3, #2]
   d6c0c:	78db      	ldrb	r3, [r3, #3]
   d6c0e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d6c12:	b280      	uxth	r0, r0
   d6c14:	4788      	blx	r1
   d6c16:	e013      	b.n	d6c40 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d6c18:	2990      	cmp	r1, #144	; 0x90
   d6c1a:	d011      	beq.n	d6c40 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d6c1c:	29c0      	cmp	r1, #192	; 0xc0
   d6c1e:	d10a      	bne.n	d6c36 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d6c20:	22d0      	movs	r2, #208	; 0xd0
   d6c22:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d6c24:	69e3      	ldr	r3, [r4, #28]
   d6c26:	2200      	movs	r2, #0
   d6c28:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d6c2a:	69e1      	ldr	r1, [r4, #28]
   d6c2c:	2202      	movs	r2, #2
   d6c2e:	4620      	mov	r0, r4
   d6c30:	f000 fe57 	bl	d78e2 <_ZN9TCPClient5writeEPKhj>
   d6c34:	e004      	b.n	d6c40 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d6c36:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d6c38:	bf04      	itt	eq
   d6c3a:	2300      	moveq	r3, #0
   d6c3c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d6c40:	4648      	mov	r0, r9
   d6c42:	370c      	adds	r7, #12
   d6c44:	46bd      	mov	sp, r7
   d6c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6c4a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d6c4a:	b570      	push	{r4, r5, r6, lr}
   d6c4c:	4604      	mov	r4, r0
   d6c4e:	460e      	mov	r6, r1
   d6c50:	4615      	mov	r5, r2

    if (isConnected()) {
   d6c52:	f7ff fd49 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d6c56:	b1e8      	cbz	r0, d6c94 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d6c58:	8c23      	ldrh	r3, [r4, #32]
   d6c5a:	3301      	adds	r3, #1
   d6c5c:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d6c5e:	b903      	cbnz	r3, d6c62 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d6c60:	2301      	movs	r3, #1
   d6c62:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d6c64:	8c23      	ldrh	r3, [r4, #32]
   d6c66:	69e2      	ldr	r2, [r4, #28]
   d6c68:	121b      	asrs	r3, r3, #8
   d6c6a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d6c6c:	69e3      	ldr	r3, [r4, #28]
   d6c6e:	8c22      	ldrh	r2, [r4, #32]
   d6c70:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d6c72:	69e2      	ldr	r2, [r4, #28]
   d6c74:	4631      	mov	r1, r6
   d6c76:	2307      	movs	r3, #7
   d6c78:	4620      	mov	r0, r4
   d6c7a:	f7ff fd1b 	bl	d66b4 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d6c7e:	69e3      	ldr	r3, [r4, #28]
   d6c80:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6c82:	1f03      	subs	r3, r0, #4
   d6c84:	69e2      	ldr	r2, [r4, #28]
   d6c86:	4620      	mov	r0, r4
   d6c88:	b29b      	uxth	r3, r3
   d6c8a:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d6c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6c90:	f7ff bcc9 	b.w	d6626 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6c94:	bd70      	pop	{r4, r5, r6, pc}

000d6c96 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d6c96:	2200      	movs	r2, #0
   d6c98:	f7ff bfd7 	b.w	d6c4a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d6c9c <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d6c9c:	b510      	push	{r4, lr}
   d6c9e:	4604      	mov	r4, r0
    if (isConnected()) {
   d6ca0:	f7ff fd22 	bl	d66e8 <_ZN4MQTT11isConnectedEv>
   d6ca4:	b110      	cbz	r0, d6cac <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	f7ff fcf0 	bl	d668c <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d6cac:	69e0      	ldr	r0, [r4, #28]
   d6cae:	b108      	cbz	r0, d6cb4 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d6cb0:	f7fd f9f9 	bl	d40a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d6cb4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6cb8:	f001 feda 	bl	d8a70 <_ZN6StringD1Ev>
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	f7ff fbe5 	bl	d648c <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d6cc2:	4620      	mov	r0, r4
   d6cc4:	bd10      	pop	{r4, pc}

000d6cc6 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d6cc6:	f000 bc15 	b.w	d74f4 <HAL_Pin_Map>
	...

000d6ccc <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
   d6ccc:	b538      	push	{r3, r4, r5, lr}
   d6cce:	460c      	mov	r4, r1
   d6cd0:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d6cd2:	2228      	movs	r2, #40	; 0x28
   d6cd4:	2100      	movs	r1, #0
   d6cd6:	4620      	mov	r0, r4
   d6cd8:	f003 f813 	bl	d9d02 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d6cdc:	220b      	movs	r2, #11
   d6cde:	4909      	ldr	r1, [pc, #36]	; (d6d04 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	f003 f851 	bl	d9d88 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d6ce6:	2300      	movs	r3, #0
  sensor->version     = 1;
   d6ce8:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d6cea:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d6cec:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d6cee:	68aa      	ldr	r2, [r5, #8]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay   = 0;
   d6cf0:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0.0F;
   d6cf2:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d6cf4:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
   d6cf6:	61a3      	str	r3, [r4, #24]
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d6cf8:	2203      	movs	r2, #3
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
  sensor->min_value   = 0.0F;
   d6cfa:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0.01F;
   d6cfc:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d6cfe:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
  sensor->min_value   = 0.0F;
  sensor->resolution  = 0.01F;
   d6d00:	6223      	str	r3, [r4, #32]
   d6d02:	bd38      	pop	{r3, r4, r5, pc}
   d6d04:	000da620 	.word	0x000da620
   d6d08:	3c23d70a 	.word	0x3c23d70a

000d6d0c <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
   d6d0c:	b510      	push	{r4, lr}
   d6d0e:	4c02      	ldr	r4, [pc, #8]	; (d6d18 <_ZN15Adafruit_BNO055C1Elh+0xc>)
   d6d10:	6004      	str	r4, [r0, #0]
{
  _sensorID = sensorID;
   d6d12:	6081      	str	r1, [r0, #8]
  _address = address;
   d6d14:	7142      	strb	r2, [r0, #5]
}
   d6d16:	bd10      	pop	{r4, pc}
   d6d18:	000da630 	.word	0x000da630

000d6d1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
/*!
    @brief  Writes an 8 bit value over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value)
{
   d6d1c:	b570      	push	{r4, r5, r6, lr}
   d6d1e:	4606      	mov	r6, r0
   d6d20:	4614      	mov	r4, r2
   d6d22:	460d      	mov	r5, r1
  Wire.beginTransmission(_address);
   d6d24:	f002 f830 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d28:	7971      	ldrb	r1, [r6, #5]
   d6d2a:	f001 fa18 	bl	d815e <_ZN7TwoWire17beginTransmissionEh>

    Wire.write((uint8_t)reg);
   d6d2e:	f002 f82b 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d32:	6803      	ldr	r3, [r0, #0]
   d6d34:	4629      	mov	r1, r5
   d6d36:	689b      	ldr	r3, [r3, #8]
   d6d38:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d6d3a:	f002 f825 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d3e:	6803      	ldr	r3, [r0, #0]
   d6d40:	4621      	mov	r1, r4
   d6d42:	689b      	ldr	r3, [r3, #8]
   d6d44:	4798      	blx	r3

  Wire.endTransmission();
   d6d46:	f002 f81f 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d4a:	f001 fa10 	bl	d816e <_ZN7TwoWire15endTransmissionEv>

  /* ToDo: Check for error! */
  return true;
}
   d6d4e:	2001      	movs	r0, #1
   d6d50:	bd70      	pop	{r4, r5, r6, pc}

000d6d52 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Puts the chip in the specified operating mode
*/
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
   d6d52:	b508      	push	{r3, lr}
   d6d54:	460a      	mov	r2, r1
  _mode = mode;
   d6d56:	7301      	strb	r1, [r0, #12]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d6d58:	213d      	movs	r1, #61	; 0x3d
   d6d5a:	f7ff ffdf 	bl	d6d1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d6d5e:	201e      	movs	r0, #30
}
   d6d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
  _mode = mode;
  write8(BNO055_OPR_MODE_ADDR, _mode);
  delay(30);
   d6d64:	f001 bcfa 	b.w	d875c <delay>

000d6d68 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg )
{
   d6d68:	b538      	push	{r3, r4, r5, lr}
   d6d6a:	4604      	mov	r4, r0
   d6d6c:	460d      	mov	r5, r1
  byte value = 0;

  Wire.beginTransmission(_address);
   d6d6e:	f002 f80b 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d72:	7961      	ldrb	r1, [r4, #5]
   d6d74:	f001 f9f3 	bl	d815e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d6d78:	f002 f806 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d7c:	6803      	ldr	r3, [r0, #0]
   d6d7e:	4629      	mov	r1, r5
   d6d80:	689b      	ldr	r3, [r3, #8]
   d6d82:	4798      	blx	r3
  Wire.endTransmission();
   d6d84:	f002 f800 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d88:	f001 f9f1 	bl	d816e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)1);
   d6d8c:	f001 fffc 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d90:	2201      	movs	r2, #1
   d6d92:	7961      	ldrb	r1, [r4, #5]
   d6d94:	f001 f9e0 	bl	d8158 <_ZN7TwoWire11requestFromEhj>
  value = Wire.read();
   d6d98:	f001 fff6 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6d9c:	6803      	ldr	r3, [r0, #0]
   d6d9e:	695b      	ldr	r3, [r3, #20]
   d6da0:	4798      	blx	r3

  return value;
}
   d6da2:	b2c0      	uxtb	r0, r0
   d6da4:	bd38      	pop	{r3, r4, r5, pc}

000d6da6 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Sets up the HW
*/
/**************************************************************************/
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode)
{
   d6da6:	b538      	push	{r3, r4, r5, lr}
   d6da8:	460d      	mov	r5, r1
   d6daa:	4604      	mov	r4, r0
  /* Enable I2C */
  Wire.begin();
   d6dac:	f001 ffec 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6db0:	f001 f998 	bl	d80e4 <_ZN7TwoWire5beginEv>

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6db4:	2100      	movs	r1, #0
   d6db6:	4620      	mov	r0, r4
   d6db8:	f7ff ffd6 	bl	d6d68 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if(id != BNO055_ID)
   d6dbc:	28a0      	cmp	r0, #160	; 0xa0
   d6dbe:	d109      	bne.n	d6dd4 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2e>
      return false;  // still not? ok bail
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
   d6dc0:	4620      	mov	r0, r4
   d6dc2:	2100      	movs	r1, #0
   d6dc4:	f7ff ffc5 	bl	d6d52 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6dc8:	2220      	movs	r2, #32
   d6dca:	213f      	movs	r1, #63	; 0x3f
   d6dcc:	4620      	mov	r0, r4
   d6dce:	f7ff ffa5 	bl	d6d1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
   d6dd2:	e00b      	b.n	d6dec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x46>

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
  if(id != BNO055_ID)
  {
    delay(1000); // hold on for boot
   d6dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6dd8:	f001 fcc0 	bl	d875c <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d6ddc:	2100      	movs	r1, #0
   d6dde:	4620      	mov	r0, r4
   d6de0:	f7ff ffc2 	bl	d6d68 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if(id != BNO055_ID) {
   d6de4:	28a0      	cmp	r0, #160	; 0xa0
   d6de6:	d0eb      	beq.n	d6dc0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x1a>
      return false;  // still not? ok bail
   d6de8:	2000      	movs	r0, #0
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
  delay(20);

  return true;
}
   d6dea:	bd38      	pop	{r3, r4, r5, pc}
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d6dec:	2100      	movs	r1, #0
   d6dee:	4620      	mov	r0, r4
   d6df0:	f7ff ffba 	bl	d6d68 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6df4:	28a0      	cmp	r0, #160	; 0xa0
   d6df6:	d003      	beq.n	d6e00 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
  {
    delay(10);
   d6df8:	200a      	movs	r0, #10
   d6dfa:	f001 fcaf 	bl	d875c <delay>
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d6dfe:	e7f5      	b.n	d6dec <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x46>
  {
    delay(10);
  }
  delay(50);
   d6e00:	2032      	movs	r0, #50	; 0x32
   d6e02:	f001 fcab 	bl	d875c <delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6e06:	2200      	movs	r2, #0
   d6e08:	213e      	movs	r1, #62	; 0x3e
   d6e0a:	4620      	mov	r0, r4
   d6e0c:	f7ff ff86 	bl	d6d1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6e10:	200a      	movs	r0, #10
   d6e12:	f001 fca3 	bl	d875c <delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
   d6e16:	2200      	movs	r2, #0
   d6e18:	2107      	movs	r1, #7
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	f7ff ff7e 	bl	d6d1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d6e20:	2200      	movs	r2, #0
   d6e22:	213f      	movs	r1, #63	; 0x3f
   d6e24:	4620      	mov	r0, r4
   d6e26:	f7ff ff79 	bl	d6d1c <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d6e2a:	200a      	movs	r0, #10
   d6e2c:	f001 fc96 	bl	d875c <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
   d6e30:	4629      	mov	r1, r5
   d6e32:	4620      	mov	r0, r4
   d6e34:	f7ff ff8d 	bl	d6d52 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d6e38:	2014      	movs	r0, #20
   d6e3a:	f001 fc8f 	bl	d875c <delay>

  return true;
   d6e3e:	2001      	movs	r0, #1
   d6e40:	bd38      	pop	{r3, r4, r5, pc}

000d6e42 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
   d6e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e44:	4605      	mov	r5, r0
   d6e46:	4616      	mov	r6, r2
   d6e48:	461c      	mov	r4, r3
   d6e4a:	460f      	mov	r7, r1
  Wire.beginTransmission(_address);
   d6e4c:	f001 ff9c 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6e50:	7969      	ldrb	r1, [r5, #5]
   d6e52:	f001 f984 	bl	d815e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d6e56:	f001 ff97 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6e5a:	6803      	ldr	r3, [r0, #0]
   d6e5c:	4639      	mov	r1, r7
   d6e5e:	689b      	ldr	r3, [r3, #8]
   d6e60:	4798      	blx	r3
  Wire.endTransmission();
   d6e62:	f001 ff91 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6e66:	f001 f982 	bl	d816e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)len);
   d6e6a:	f001 ff8d 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6e6e:	4622      	mov	r2, r4
   d6e70:	7969      	ldrb	r1, [r5, #5]
   d6e72:	f001 f971 	bl	d8158 <_ZN7TwoWire11requestFromEhj>
   d6e76:	3c01      	subs	r4, #1
   d6e78:	1e75      	subs	r5, r6, #1
   d6e7a:	4434      	add	r4, r6

  for (uint8_t i = 0; i < len; i++)
   d6e7c:	42a5      	cmp	r5, r4
   d6e7e:	d007      	beq.n	d6e90 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x4e>
  {
      buffer[i] = Wire.read();
   d6e80:	f001 ff82 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d6e84:	6803      	ldr	r3, [r0, #0]
   d6e86:	695b      	ldr	r3, [r3, #20]
   d6e88:	4798      	blx	r3
   d6e8a:	f805 0f01 	strb.w	r0, [r5, #1]!
  Wire.beginTransmission(_address);
  Wire.write((uint8_t)reg);
  Wire.endTransmission();
  Wire.requestFrom(_address, (byte)len);

  for (uint8_t i = 0; i < len; i++)
   d6e8e:	e7f5      	b.n	d6e7c <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x3a>
      buffer[i] = Wire.read();
  }

  /* ToDo: Check for errors! */
  return true;
}
   d6e90:	2001      	movs	r0, #1
   d6e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e94 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
   d6e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6e96:	460d      	mov	r5, r1
   d6e98:	4617      	mov	r7, r2
template <uint8_t N> class Vector
{
public:
    Vector()
    {
        memset(p_vec, 0, sizeof(double)*N);
   d6e9a:	2100      	movs	r1, #0
   d6e9c:	2218      	movs	r2, #24
   d6e9e:	4604      	mov	r4, r0
   d6ea0:	f002 ff2f 	bl	d9d02 <memset>
  imu::Vector<3> xyz;
  uint8_t buffer[6];
  memset (buffer, 0, 6);
   d6ea4:	2300      	movs	r3, #0
   d6ea6:	9300      	str	r3, [sp, #0]
   d6ea8:	f8ad 3004 	strh.w	r3, [sp, #4]

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6eac:	4628      	mov	r0, r5
   d6eae:	2306      	movs	r3, #6
   d6eb0:	466a      	mov	r2, sp
   d6eb2:	4639      	mov	r1, r7
   d6eb4:	f7ff ffc5 	bl	d6e42 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6eb8:	f89d 3000 	ldrb.w	r3, [sp]
   d6ebc:	f89d 0001 	ldrb.w	r0, [sp, #1]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6ec0:	f89d 6003 	ldrb.w	r6, [sp, #3]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6ec4:	f89d 5005 	ldrb.w	r5, [sp, #5]
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6ec8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6ecc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d6ed0:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6ed4:	f89d 3004 	ldrb.w	r3, [sp, #4]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
   d6ed8:	2f14      	cmp	r7, #20
  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6eda:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6ede:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6ee0:	b236      	sxth	r6, r6
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6ee2:	b22d      	sxth	r5, r5

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
   d6ee4:	d023      	beq.n	d6f2e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9a>
   d6ee6:	d803      	bhi.n	d6ef0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5c>
   d6ee8:	2f08      	cmp	r7, #8
   d6eea:	d037      	beq.n	d6f5c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d6eec:	2f0e      	cmp	r7, #14
   d6eee:	e004      	b.n	d6efa <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6ef0:	2f28      	cmp	r7, #40	; 0x28
   d6ef2:	d033      	beq.n	d6f5c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d6ef4:	2f2e      	cmp	r7, #46	; 0x2e
   d6ef6:	d031      	beq.n	d6f5c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d6ef8:	2f1a      	cmp	r7, #26
   d6efa:	d149      	bne.n	d6f90 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xfc>
      xyz[1] = ((double)y)/900.0;
      xyz[2] = ((double)z)/900.0;
      break;
    case VECTOR_EULER:
      /* 1 degree = 16 LSB */
      xyz[0] = ((double)x)/16.0;
   d6efc:	f002 fb3a 	bl	d9574 <__aeabi_i2d>
   d6f00:	2200      	movs	r2, #0
   d6f02:	4b25      	ldr	r3, [pc, #148]	; (d6f98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d6f04:	f002 fb9c 	bl	d9640 <__aeabi_dmul>
   d6f08:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/16.0;
   d6f0c:	4630      	mov	r0, r6
   d6f0e:	f002 fb31 	bl	d9574 <__aeabi_i2d>
   d6f12:	2200      	movs	r2, #0
   d6f14:	4b20      	ldr	r3, [pc, #128]	; (d6f98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d6f16:	f002 fb93 	bl	d9640 <__aeabi_dmul>
   d6f1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/16.0;
   d6f1e:	4628      	mov	r0, r5
   d6f20:	f002 fb28 	bl	d9574 <__aeabi_i2d>
   d6f24:	2200      	movs	r2, #0
   d6f26:	4b1c      	ldr	r3, [pc, #112]	; (d6f98 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d6f28:	f002 fb8a 	bl	d9640 <__aeabi_dmul>
   d6f2c:	e02e      	b.n	d6f8c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xf8>
      xyz[1] = ((double)y)/16.0;
      xyz[2] = ((double)z)/16.0;
      break;
    case VECTOR_GYROSCOPE:
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
   d6f2e:	f002 fb21 	bl	d9574 <__aeabi_i2d>
   d6f32:	2200      	movs	r2, #0
   d6f34:	4b19      	ldr	r3, [pc, #100]	; (d6f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d6f36:	f002 fcad 	bl	d9894 <__aeabi_ddiv>
   d6f3a:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/900.0;
   d6f3e:	4630      	mov	r0, r6
   d6f40:	f002 fb18 	bl	d9574 <__aeabi_i2d>
   d6f44:	2200      	movs	r2, #0
   d6f46:	4b15      	ldr	r3, [pc, #84]	; (d6f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d6f48:	f002 fca4 	bl	d9894 <__aeabi_ddiv>
   d6f4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/900.0;
   d6f50:	4628      	mov	r0, r5
   d6f52:	f002 fb0f 	bl	d9574 <__aeabi_i2d>
   d6f56:	2200      	movs	r2, #0
   d6f58:	4b10      	ldr	r3, [pc, #64]	; (d6f9c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d6f5a:	e015      	b.n	d6f88 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xf4>
      break;
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
   d6f5c:	f002 fb0a 	bl	d9574 <__aeabi_i2d>
   d6f60:	2200      	movs	r2, #0
   d6f62:	4b0f      	ldr	r3, [pc, #60]	; (d6fa0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6f64:	f002 fc96 	bl	d9894 <__aeabi_ddiv>
   d6f68:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/100.0;
   d6f6c:	4630      	mov	r0, r6
   d6f6e:	f002 fb01 	bl	d9574 <__aeabi_i2d>
   d6f72:	2200      	movs	r2, #0
   d6f74:	4b0a      	ldr	r3, [pc, #40]	; (d6fa0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6f76:	f002 fc8d 	bl	d9894 <__aeabi_ddiv>
   d6f7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/100.0;
   d6f7e:	4628      	mov	r0, r5
   d6f80:	f002 faf8 	bl	d9574 <__aeabi_i2d>
   d6f84:	4b06      	ldr	r3, [pc, #24]	; (d6fa0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6f86:	2200      	movs	r2, #0
   d6f88:	f002 fc84 	bl	d9894 <__aeabi_ddiv>
   d6f8c:	e9c4 0104 	strd	r0, r1, [r4, #16]
      break;
  }

  return xyz;
}
   d6f90:	4620      	mov	r0, r4
   d6f92:	b003      	add	sp, #12
   d6f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f96:	bf00      	nop
   d6f98:	3fb00000 	.word	0x3fb00000
   d6f9c:	408c2000 	.word	0x408c2000
   d6fa0:	40590000 	.word	0x40590000

000d6fa4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
   d6fa4:	b570      	push	{r4, r5, r6, lr}
   d6fa6:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6fa8:	2624      	movs	r6, #36	; 0x24
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
   d6faa:	b086      	sub	sp, #24
   d6fac:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6fae:	4632      	mov	r2, r6
   d6fb0:	2100      	movs	r1, #0
   d6fb2:	4620      	mov	r0, r4
   d6fb4:	f002 fea5 	bl	d9d02 <memset>

  event->version   = sizeof(sensors_event_t);
   d6fb8:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
   d6fba:	68ab      	ldr	r3, [r5, #8]
   d6fbc:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
   d6fbe:	2303      	movs	r3, #3
   d6fc0:	60a3      	str	r3, [r4, #8]
   d6fc2:	f000 fa77 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6fc6:	221a      	movs	r2, #26
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_ORIENTATION;
  event->timestamp = millis();
   d6fc8:	6120      	str	r0, [r4, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6fca:	4629      	mov	r1, r5
   d6fcc:	4668      	mov	r0, sp
   d6fce:	f7ff ff61 	bl	d6e94 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6fd6:	f002 fe2b 	bl	d9c30 <__aeabi_d2f>
   d6fda:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d6fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6fe0:	f002 fe26 	bl	d9c30 <__aeabi_d2f>
   d6fe4:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6fea:	f002 fe21 	bl	d9c30 <__aeabi_d2f>
   d6fee:	61e0      	str	r0, [r4, #28]

  return true;
}
   d6ff0:	2001      	movs	r0, #1
   d6ff2:	b006      	add	sp, #24
   d6ff4:	bd70      	pop	{r4, r5, r6, pc}

000d6ff6 <_GLOBAL__sub_I__ZN15Adafruit_BNO055C2Elh>:
   d6ff6:	f000 ba7d 	b.w	d74f4 <HAL_Pin_Map>

000d6ffa <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d6ffa:	f000 ba7b 	b.w	d74f4 <HAL_Pin_Map>
	...

000d7000 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d7000:	b508      	push	{r3, lr}
   d7002:	f000 fa77 	bl	d74f4 <HAL_Pin_Map>
   d7006:	4b01      	ldr	r3, [pc, #4]	; (d700c <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d7008:	6018      	str	r0, [r3, #0]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	2003e320 	.word	0x2003e320

000d7010 <_ZN8I2CSlaveD1Ev>:
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
	globalObj = this;
}

I2CSlave::~I2CSlave() {
   d7010:	b510      	push	{r4, lr}
   d7012:	4b05      	ldr	r3, [pc, #20]	; (d7028 <_ZN8I2CSlaveD1Ev+0x18>)
   d7014:	6003      	str	r3, [r0, #0]
   d7016:	4604      	mov	r4, r0
	free(registers);
   d7018:	6900      	ldr	r0, [r0, #16]
   d701a:	f000 fb89 	bl	d7730 <free>
	globalObj = 0;
   d701e:	4b03      	ldr	r3, [pc, #12]	; (d702c <_ZN8I2CSlaveD1Ev+0x1c>)
   d7020:	2200      	movs	r2, #0
   d7022:	601a      	str	r2, [r3, #0]
}
   d7024:	4620      	mov	r0, r4
   d7026:	bd10      	pop	{r4, pc}
   d7028:	000da64c 	.word	0x000da64c
   d702c:	2003e324 	.word	0x2003e324

000d7030 <_ZN8I2CSlaveD0Ev>:
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
	globalObj = this;
}

I2CSlave::~I2CSlave() {
   d7030:	b510      	push	{r4, lr}
   d7032:	4604      	mov	r4, r0
	free(registers);
	globalObj = 0;
}
   d7034:	f7ff ffec 	bl	d7010 <_ZN8I2CSlaveD1Ev>
   d7038:	4620      	mov	r0, r4
   d703a:	211c      	movs	r1, #28
   d703c:	f001 ff58 	bl	d8ef0 <_ZdlPvj>
   d7040:	4620      	mov	r0, r4
   d7042:	bd10      	pop	{r4, pc}

000d7044 <_ZN8I2CSlaveC1ER7TwoWirehj>:
#include "Particle.h"
#include "I2CSlaveRK.h"

static I2CSlave *globalObj = 0;

I2CSlave::I2CSlave(TwoWire &wire, uint8_t addr, size_t numRegisters) :
   d7044:	b510      	push	{r4, lr}
   d7046:	4604      	mov	r4, r0
		wire(wire), addr(addr), numRegisters(numRegisters),
		nextReadAddr(0), registerSetFlags(0) {
   d7048:	4807      	ldr	r0, [pc, #28]	; (d7068 <_ZN8I2CSlaveC1ER7TwoWirehj+0x24>)
   d704a:	7222      	strb	r2, [r4, #8]
   d704c:	2200      	movs	r2, #0
   d704e:	e884 0003 	stmia.w	r4, {r0, r1}
   d7052:	60e3      	str	r3, [r4, #12]
   d7054:	82a2      	strh	r2, [r4, #20]
   d7056:	61a2      	str	r2, [r4, #24]
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d7058:	0098      	lsls	r0, r3, #2
   d705a:	f000 fb61 	bl	d7720 <malloc>
	globalObj = this;
   d705e:	4b03      	ldr	r3, [pc, #12]	; (d706c <_ZN8I2CSlaveC1ER7TwoWirehj+0x28>)
static I2CSlave *globalObj = 0;

I2CSlave::I2CSlave(TwoWire &wire, uint8_t addr, size_t numRegisters) :
		wire(wire), addr(addr), numRegisters(numRegisters),
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d7060:	6120      	str	r0, [r4, #16]
	globalObj = this;
   d7062:	601c      	str	r4, [r3, #0]
}
   d7064:	4620      	mov	r0, r4
   d7066:	bd10      	pop	{r4, pc}
   d7068:	000da64c 	.word	0x000da64c
   d706c:	2003e324 	.word	0x2003e324

000d7070 <_ZN8I2CSlave5beginEv>:
I2CSlave::~I2CSlave() {
	free(registers);
	globalObj = 0;
}

void I2CSlave::begin() {
   d7070:	b510      	push	{r4, lr}
   d7072:	4604      	mov	r4, r0

	wire.begin(addr);
   d7074:	7a01      	ldrb	r1, [r0, #8]
   d7076:	6840      	ldr	r0, [r0, #4]
   d7078:	f001 f83a 	bl	d80f0 <_ZN7TwoWire5beginEh>
	wire.onReceive(receiveEventStatic);
   d707c:	6860      	ldr	r0, [r4, #4]
   d707e:	4904      	ldr	r1, [pc, #16]	; (d7090 <_ZN8I2CSlave5beginEv+0x20>)
   d7080:	f001 f878 	bl	d8174 <_ZN7TwoWire9onReceiveEPFviE>
	wire.onRequest(requestEventStatic);
   d7084:	6860      	ldr	r0, [r4, #4]
   d7086:	4903      	ldr	r1, [pc, #12]	; (d7094 <_ZN8I2CSlave5beginEv+0x24>)
}
   d7088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void I2CSlave::begin() {

	wire.begin(addr);
	wire.onReceive(receiveEventStatic);
	wire.onRequest(requestEventStatic);
   d708c:	f001 b876 	b.w	d817c <_ZN7TwoWire9onRequestEPFvvE>
   d7090:	000d718d 	.word	0x000d718d
   d7094:	000d71cd 	.word	0x000d71cd

000d7098 <_ZNK8I2CSlave11getRegisterEt>:
}

uint32_t I2CSlave::getRegister(uint16_t regAddr) const {
	if (regAddr < numRegisters) {
   d7098:	68c3      	ldr	r3, [r0, #12]
   d709a:	4299      	cmp	r1, r3
		return registers[regAddr];
   d709c:	bf3a      	itte	cc
   d709e:	6903      	ldrcc	r3, [r0, #16]
   d70a0:	f853 0021 	ldrcc.w	r0, [r3, r1, lsl #2]
	}
	else {
		return 0;
   d70a4:	2000      	movcs	r0, #0
	}
}
   d70a6:	4770      	bx	lr

000d70a8 <_ZN8I2CSlave11setRegisterEtm>:

void I2CSlave::setRegister(uint16_t regAddr, uint32_t value) {
	if (regAddr < numRegisters) {
   d70a8:	68c3      	ldr	r3, [r0, #12]
   d70aa:	4299      	cmp	r1, r3
		registers[regAddr] = value;
   d70ac:	bf3c      	itt	cc
   d70ae:	6903      	ldrcc	r3, [r0, #16]
   d70b0:	f843 2021 	strcc.w	r2, [r3, r1, lsl #2]
   d70b4:	4770      	bx	lr

000d70b6 <_ZN8I2CSlave14getRegisterSetERt>:
	}
}

bool I2CSlave::getRegisterSet(uint16_t &regAddr) {
   d70b6:	b570      	push	{r4, r5, r6, lr}
	if (registerSetFlags) {
   d70b8:	6983      	ldr	r3, [r0, #24]
   d70ba:	b18b      	cbz	r3, d70e0 <_ZN8I2CSlave14getRegisterSetERt+0x2a>
   d70bc:	2200      	movs	r2, #0
		for(uint16_t ii = 0; ii < 32; ii++) {
			if (registerSetFlags & (1 << ii)) {
   d70be:	2501      	movs	r5, #1
   d70c0:	6983      	ldr	r3, [r0, #24]
   d70c2:	fa05 f402 	lsl.w	r4, r5, r2
   d70c6:	4023      	ands	r3, r4
   d70c8:	b296      	uxth	r6, r2
   d70ca:	d006      	beq.n	d70da <_ZN8I2CSlave14getRegisterSetERt+0x24>
				// Bit is set, return the address and clear the flag
				regAddr = ii;
   d70cc:	800e      	strh	r6, [r1, #0]
				registerSetFlags &= ~(1 << ii);
   d70ce:	6983      	ldr	r3, [r0, #24]
   d70d0:	ea23 0304 	bic.w	r3, r3, r4
   d70d4:	6183      	str	r3, [r0, #24]
				return true;
   d70d6:	2001      	movs	r0, #1
   d70d8:	bd70      	pop	{r4, r5, r6, pc}
   d70da:	3201      	adds	r2, #1
	}
}

bool I2CSlave::getRegisterSet(uint16_t &regAddr) {
	if (registerSetFlags) {
		for(uint16_t ii = 0; ii < 32; ii++) {
   d70dc:	2a20      	cmp	r2, #32
   d70de:	d1ef      	bne.n	d70c0 <_ZN8I2CSlave14getRegisterSetERt+0xa>
			}
		}
		return false;
	}
	else {
		return false;
   d70e0:	4618      	mov	r0, r3
	}
}
   d70e2:	bd70      	pop	{r4, r5, r6, pc}

000d70e4 <_ZN8I2CSlave12receiveEventEi>:


void I2CSlave::receiveEvent(int numBytes) {

	if (numBytes == sizeof(uint16_t)) {
   d70e4:	2902      	cmp	r1, #2
		return false;
	}
}


void I2CSlave::receiveEvent(int numBytes) {
   d70e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70ea:	4604      	mov	r4, r0

	if (numBytes == sizeof(uint16_t)) {
   d70ec:	d10f      	bne.n	d710e <_ZN8I2CSlave12receiveEventEi+0x2a>
		// This is just an  address to read the register. Save for requestEvent.
		nextReadAddr = (wire.read() & 0xff);
   d70ee:	6840      	ldr	r0, [r0, #4]
   d70f0:	6803      	ldr	r3, [r0, #0]
   d70f2:	695b      	ldr	r3, [r3, #20]
   d70f4:	4798      	blx	r3
   d70f6:	b2c0      	uxtb	r0, r0
   d70f8:	82a0      	strh	r0, [r4, #20]
		nextReadAddr |= (wire.read() & 0xff) << 8;
   d70fa:	6860      	ldr	r0, [r4, #4]
   d70fc:	6803      	ldr	r3, [r0, #0]
   d70fe:	695b      	ldr	r3, [r3, #20]
   d7100:	4798      	blx	r3
   d7102:	8aa3      	ldrh	r3, [r4, #20]
   d7104:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d7108:	82a0      	strh	r0, [r4, #20]
   d710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	if (numBytes == (sizeof(uint16_t) + sizeof(uint32_t))) {
   d710e:	2906      	cmp	r1, #6
   d7110:	d139      	bne.n	d7186 <_ZN8I2CSlave12receiveEventEi+0xa2>
		// Set a register
		uint16_t writeAddr = (wire.read() & 0xff);
   d7112:	6840      	ldr	r0, [r0, #4]
   d7114:	6803      	ldr	r3, [r0, #0]
   d7116:	695b      	ldr	r3, [r3, #20]
   d7118:	4798      	blx	r3
   d711a:	4605      	mov	r5, r0
		writeAddr |= (wire.read() & 0xff) << 8;
   d711c:	6860      	ldr	r0, [r4, #4]
   d711e:	6803      	ldr	r3, [r0, #0]
   d7120:	695b      	ldr	r3, [r3, #20]
   d7122:	4798      	blx	r3
   d7124:	b2ed      	uxtb	r5, r5
   d7126:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   d712a:	b285      	uxth	r5, r0

		uint32_t value = (wire.read() & 0xff);
   d712c:	6860      	ldr	r0, [r4, #4]
   d712e:	6803      	ldr	r3, [r0, #0]
   d7130:	695b      	ldr	r3, [r3, #20]
   d7132:	4798      	blx	r3
   d7134:	4680      	mov	r8, r0
		value |= (wire.read() & 0xff) << 8;
   d7136:	6860      	ldr	r0, [r4, #4]
   d7138:	6803      	ldr	r3, [r0, #0]
   d713a:	695b      	ldr	r3, [r3, #20]
   d713c:	4798      	blx	r3
   d713e:	4606      	mov	r6, r0
		value |= (wire.read() & 0xff) << 16;
   d7140:	6860      	ldr	r0, [r4, #4]
   d7142:	6803      	ldr	r3, [r0, #0]
   d7144:	695b      	ldr	r3, [r3, #20]
   d7146:	4798      	blx	r3
   d7148:	4607      	mov	r7, r0
		value |= (wire.read() & 0xff) << 24;
   d714a:	6860      	ldr	r0, [r4, #4]
   d714c:	6803      	ldr	r3, [r0, #0]
   d714e:	695b      	ldr	r3, [r3, #20]
   d7150:	4798      	blx	r3

		if (writeAddr < numRegisters) {
   d7152:	68e3      	ldr	r3, [r4, #12]
   d7154:	429d      	cmp	r5, r3
   d7156:	d216      	bcs.n	d7186 <_ZN8I2CSlave12receiveEventEi+0xa2>
   d7158:	fa5f f888 	uxtb.w	r8, r8
   d715c:	0236      	lsls	r6, r6, #8
   d715e:	ea48 6000 	orr.w	r0, r8, r0, lsl #24
   d7162:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   d7166:	4306      	orrs	r6, r0
			registers[writeAddr] = value;
   d7168:	0438      	lsls	r0, r7, #16
   d716a:	6923      	ldr	r3, [r4, #16]
   d716c:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   d7170:	4330      	orrs	r0, r6

			if (writeAddr < 32) {
   d7172:	2d1f      	cmp	r5, #31
		value |= (wire.read() & 0xff) << 8;
		value |= (wire.read() & 0xff) << 16;
		value |= (wire.read() & 0xff) << 24;

		if (writeAddr < numRegisters) {
			registers[writeAddr] = value;
   d7174:	f843 0025 	str.w	r0, [r3, r5, lsl #2]

			if (writeAddr < 32) {
   d7178:	d805      	bhi.n	d7186 <_ZN8I2CSlave12receiveEventEi+0xa2>
				registerSetFlags |= 1 << writeAddr;
   d717a:	69a3      	ldr	r3, [r4, #24]
   d717c:	2001      	movs	r0, #1
   d717e:	fa00 f505 	lsl.w	r5, r0, r5
   d7182:	431d      	orrs	r5, r3
   d7184:	61a5      	str	r5, [r4, #24]
   d7186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d718c <_ZN8I2CSlave18receiveEventStaticEi>:
	wire.write((const uint8_t *)&value, sizeof(value));
}

// [static]
void I2CSlave::receiveEventStatic(int numBytes) {
	if (globalObj) {
   d718c:	4b03      	ldr	r3, [pc, #12]	; (d719c <_ZN8I2CSlave18receiveEventStaticEi+0x10>)
	}
	wire.write((const uint8_t *)&value, sizeof(value));
}

// [static]
void I2CSlave::receiveEventStatic(int numBytes) {
   d718e:	4601      	mov	r1, r0
	if (globalObj) {
   d7190:	6818      	ldr	r0, [r3, #0]
   d7192:	b108      	cbz	r0, d7198 <_ZN8I2CSlave18receiveEventStaticEi+0xc>
		globalObj->receiveEvent(numBytes);
   d7194:	f7ff bfa6 	b.w	d70e4 <_ZN8I2CSlave12receiveEventEi>
   d7198:	4770      	bx	lr
   d719a:	bf00      	nop
   d719c:	2003e324 	.word	0x2003e324

000d71a0 <_ZN8I2CSlave12requestEventEv>:
		}
	}

}

void I2CSlave::requestEvent() {
   d71a0:	b507      	push	{r0, r1, r2, lr}
	// Request to read
	uint32_t value = 0;
   d71a2:	2300      	movs	r3, #0
   d71a4:	9301      	str	r3, [sp, #4]

	if (nextReadAddr < numRegisters) {
   d71a6:	68c2      	ldr	r2, [r0, #12]
   d71a8:	8a83      	ldrh	r3, [r0, #20]
   d71aa:	4293      	cmp	r3, r2
		value = registers[nextReadAddr];
   d71ac:	bf38      	it	cc
   d71ae:	6902      	ldrcc	r2, [r0, #16]
	}
	wire.write((const uint8_t *)&value, sizeof(value));
   d71b0:	6840      	ldr	r0, [r0, #4]
void I2CSlave::requestEvent() {
	// Request to read
	uint32_t value = 0;

	if (nextReadAddr < numRegisters) {
		value = registers[nextReadAddr];
   d71b2:	bf3c      	itt	cc
   d71b4:	f852 3023 	ldrcc.w	r3, [r2, r3, lsl #2]
   d71b8:	9301      	strcc	r3, [sp, #4]
	}
	wire.write((const uint8_t *)&value, sizeof(value));
   d71ba:	6803      	ldr	r3, [r0, #0]
   d71bc:	2204      	movs	r2, #4
   d71be:	68db      	ldr	r3, [r3, #12]
   d71c0:	eb0d 0102 	add.w	r1, sp, r2
   d71c4:	4798      	blx	r3
}
   d71c6:	b003      	add	sp, #12
   d71c8:	f85d fb04 	ldr.w	pc, [sp], #4

000d71cc <_ZN8I2CSlave18requestEventStaticEv>:
	}
}

// [static]
void I2CSlave::requestEventStatic() {
	if (globalObj) {
   d71cc:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <_ZN8I2CSlave18requestEventStaticEv+0xc>)
   d71ce:	6818      	ldr	r0, [r3, #0]
   d71d0:	b108      	cbz	r0, d71d6 <_ZN8I2CSlave18requestEventStaticEv+0xa>
		globalObj->requestEvent();
   d71d2:	f7ff bfe5 	b.w	d71a0 <_ZN8I2CSlave12requestEventEv>
   d71d6:	4770      	bx	lr
   d71d8:	2003e324 	.word	0x2003e324

000d71dc <_GLOBAL__sub_I__ZN8I2CSlaveC2ER7TwoWirehj>:
   d71dc:	f000 b98a 	b.w	d74f4 <HAL_Pin_Map>

000d71e0 <_GLOBAL__sub_I__ZN14I2CSlaveMasterC2ER7TwoWireh>:
   d71e0:	f000 b988 	b.w	d74f4 <HAL_Pin_Map>

000d71e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d71e4:	b508      	push	{r3, lr}
   d71e6:	4b02      	ldr	r3, [pc, #8]	; (d71f0 <HAL_USB_USART_Init+0xc>)
   d71e8:	681b      	ldr	r3, [r3, #0]
   d71ea:	681b      	ldr	r3, [r3, #0]
   d71ec:	9301      	str	r3, [sp, #4]
   d71ee:	bd08      	pop	{r3, pc}
   d71f0:	0003024c 	.word	0x0003024c

000d71f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d71f4:	b508      	push	{r3, lr}
   d71f6:	4b02      	ldr	r3, [pc, #8]	; (d7200 <HAL_USB_USART_Begin+0xc>)
   d71f8:	681b      	ldr	r3, [r3, #0]
   d71fa:	685b      	ldr	r3, [r3, #4]
   d71fc:	9301      	str	r3, [sp, #4]
   d71fe:	bd08      	pop	{r3, pc}
   d7200:	0003024c 	.word	0x0003024c

000d7204 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7204:	b508      	push	{r3, lr}
   d7206:	4b02      	ldr	r3, [pc, #8]	; (d7210 <HAL_USB_USART_Available_Data+0xc>)
   d7208:	681b      	ldr	r3, [r3, #0]
   d720a:	691b      	ldr	r3, [r3, #16]
   d720c:	9301      	str	r3, [sp, #4]
   d720e:	bd08      	pop	{r3, pc}
   d7210:	0003024c 	.word	0x0003024c

000d7214 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7214:	b508      	push	{r3, lr}
   d7216:	4b02      	ldr	r3, [pc, #8]	; (d7220 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7218:	681b      	ldr	r3, [r3, #0]
   d721a:	695b      	ldr	r3, [r3, #20]
   d721c:	9301      	str	r3, [sp, #4]
   d721e:	bd08      	pop	{r3, pc}
   d7220:	0003024c 	.word	0x0003024c

000d7224 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7224:	b508      	push	{r3, lr}
   d7226:	4b02      	ldr	r3, [pc, #8]	; (d7230 <HAL_USB_USART_Receive_Data+0xc>)
   d7228:	681b      	ldr	r3, [r3, #0]
   d722a:	699b      	ldr	r3, [r3, #24]
   d722c:	9301      	str	r3, [sp, #4]
   d722e:	bd08      	pop	{r3, pc}
   d7230:	0003024c 	.word	0x0003024c

000d7234 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7234:	b508      	push	{r3, lr}
   d7236:	4b02      	ldr	r3, [pc, #8]	; (d7240 <HAL_USB_USART_Send_Data+0xc>)
   d7238:	681b      	ldr	r3, [r3, #0]
   d723a:	69db      	ldr	r3, [r3, #28]
   d723c:	9301      	str	r3, [sp, #4]
   d723e:	bd08      	pop	{r3, pc}
   d7240:	0003024c 	.word	0x0003024c

000d7244 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7244:	b508      	push	{r3, lr}
   d7246:	4b02      	ldr	r3, [pc, #8]	; (d7250 <HAL_USB_USART_Flush_Data+0xc>)
   d7248:	681b      	ldr	r3, [r3, #0]
   d724a:	6a1b      	ldr	r3, [r3, #32]
   d724c:	9301      	str	r3, [sp, #4]
   d724e:	bd08      	pop	{r3, pc}
   d7250:	0003024c 	.word	0x0003024c

000d7254 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d7254:	b508      	push	{r3, lr}
   d7256:	4b02      	ldr	r3, [pc, #8]	; (d7260 <sock_setsockopt+0xc>)
   d7258:	681b      	ldr	r3, [r3, #0]
   d725a:	699b      	ldr	r3, [r3, #24]
   d725c:	9301      	str	r3, [sp, #4]
   d725e:	bd08      	pop	{r3, pc}
   d7260:	00030238 	.word	0x00030238

000d7264 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7264:	b508      	push	{r3, lr}
   d7266:	4b02      	ldr	r3, [pc, #8]	; (d7270 <sock_close+0xc>)
   d7268:	681b      	ldr	r3, [r3, #0]
   d726a:	69db      	ldr	r3, [r3, #28]
   d726c:	9301      	str	r3, [sp, #4]
   d726e:	bd08      	pop	{r3, pc}
   d7270:	00030238 	.word	0x00030238

000d7274 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7274:	b508      	push	{r3, lr}
   d7276:	4b02      	ldr	r3, [pc, #8]	; (d7280 <sock_connect+0xc>)
   d7278:	681b      	ldr	r3, [r3, #0]
   d727a:	6a1b      	ldr	r3, [r3, #32]
   d727c:	9301      	str	r3, [sp, #4]
   d727e:	bd08      	pop	{r3, pc}
   d7280:	00030238 	.word	0x00030238

000d7284 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7284:	b508      	push	{r3, lr}
   d7286:	4b02      	ldr	r3, [pc, #8]	; (d7290 <sock_recv+0xc>)
   d7288:	681b      	ldr	r3, [r3, #0]
   d728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d728c:	9301      	str	r3, [sp, #4]
   d728e:	bd08      	pop	{r3, pc}
   d7290:	00030238 	.word	0x00030238

000d7294 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7294:	b508      	push	{r3, lr}
   d7296:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <sock_send+0xc>)
   d7298:	681b      	ldr	r3, [r3, #0]
   d729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d729c:	9301      	str	r3, [sp, #4]
   d729e:	bd08      	pop	{r3, pc}
   d72a0:	00030238 	.word	0x00030238

000d72a4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d72a4:	b508      	push	{r3, lr}
   d72a6:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <sock_socket+0xc>)
   d72a8:	681b      	ldr	r3, [r3, #0]
   d72aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d72ac:	9301      	str	r3, [sp, #4]
   d72ae:	bd08      	pop	{r3, pc}
   d72b0:	00030238 	.word	0x00030238

000d72b4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d72b4:	b508      	push	{r3, lr}
   d72b6:	4b02      	ldr	r3, [pc, #8]	; (d72c0 <HAL_I2C_Begin+0xc>)
   d72b8:	681b      	ldr	r3, [r3, #0]
   d72ba:	68db      	ldr	r3, [r3, #12]
   d72bc:	9301      	str	r3, [sp, #4]
   d72be:	bd08      	pop	{r3, pc}
   d72c0:	00030228 	.word	0x00030228

000d72c4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d72c4:	b508      	push	{r3, lr}
   d72c6:	4b02      	ldr	r3, [pc, #8]	; (d72d0 <HAL_I2C_Begin_Transmission+0xc>)
   d72c8:	681b      	ldr	r3, [r3, #0]
   d72ca:	699b      	ldr	r3, [r3, #24]
   d72cc:	9301      	str	r3, [sp, #4]
   d72ce:	bd08      	pop	{r3, pc}
   d72d0:	00030228 	.word	0x00030228

000d72d4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d72d4:	b508      	push	{r3, lr}
   d72d6:	4b02      	ldr	r3, [pc, #8]	; (d72e0 <HAL_I2C_End_Transmission+0xc>)
   d72d8:	681b      	ldr	r3, [r3, #0]
   d72da:	69db      	ldr	r3, [r3, #28]
   d72dc:	9301      	str	r3, [sp, #4]
   d72de:	bd08      	pop	{r3, pc}
   d72e0:	00030228 	.word	0x00030228

000d72e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d72e4:	b508      	push	{r3, lr}
   d72e6:	4b02      	ldr	r3, [pc, #8]	; (d72f0 <HAL_I2C_Write_Data+0xc>)
   d72e8:	681b      	ldr	r3, [r3, #0]
   d72ea:	6a1b      	ldr	r3, [r3, #32]
   d72ec:	9301      	str	r3, [sp, #4]
   d72ee:	bd08      	pop	{r3, pc}
   d72f0:	00030228 	.word	0x00030228

000d72f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d72f4:	b508      	push	{r3, lr}
   d72f6:	4b02      	ldr	r3, [pc, #8]	; (d7300 <HAL_I2C_Available_Data+0xc>)
   d72f8:	681b      	ldr	r3, [r3, #0]
   d72fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d72fc:	9301      	str	r3, [sp, #4]
   d72fe:	bd08      	pop	{r3, pc}
   d7300:	00030228 	.word	0x00030228

000d7304 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7304:	b508      	push	{r3, lr}
   d7306:	4b02      	ldr	r3, [pc, #8]	; (d7310 <HAL_I2C_Read_Data+0xc>)
   d7308:	681b      	ldr	r3, [r3, #0]
   d730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d730c:	9301      	str	r3, [sp, #4]
   d730e:	bd08      	pop	{r3, pc}
   d7310:	00030228 	.word	0x00030228

000d7314 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7314:	b508      	push	{r3, lr}
   d7316:	4b02      	ldr	r3, [pc, #8]	; (d7320 <HAL_I2C_Peek_Data+0xc>)
   d7318:	681b      	ldr	r3, [r3, #0]
   d731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d731c:	9301      	str	r3, [sp, #4]
   d731e:	bd08      	pop	{r3, pc}
   d7320:	00030228 	.word	0x00030228

000d7324 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7324:	b508      	push	{r3, lr}
   d7326:	4b02      	ldr	r3, [pc, #8]	; (d7330 <HAL_I2C_Flush_Data+0xc>)
   d7328:	681b      	ldr	r3, [r3, #0]
   d732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d732c:	9301      	str	r3, [sp, #4]
   d732e:	bd08      	pop	{r3, pc}
   d7330:	00030228 	.word	0x00030228

000d7334 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7334:	b508      	push	{r3, lr}
   d7336:	4b02      	ldr	r3, [pc, #8]	; (d7340 <HAL_I2C_Is_Enabled+0xc>)
   d7338:	681b      	ldr	r3, [r3, #0]
   d733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d733c:	9301      	str	r3, [sp, #4]
   d733e:	bd08      	pop	{r3, pc}
   d7340:	00030228 	.word	0x00030228

000d7344 <HAL_I2C_Set_Callback_On_Receive>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
   d7344:	b508      	push	{r3, lr}
   d7346:	4b02      	ldr	r3, [pc, #8]	; (d7350 <HAL_I2C_Set_Callback_On_Receive+0xc>)
   d7348:	681b      	ldr	r3, [r3, #0]
   d734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d734c:	9301      	str	r3, [sp, #4]
   d734e:	bd08      	pop	{r3, pc}
   d7350:	00030228 	.word	0x00030228

000d7354 <HAL_I2C_Set_Callback_On_Request>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
   d7354:	b508      	push	{r3, lr}
   d7356:	4b02      	ldr	r3, [pc, #8]	; (d7360 <HAL_I2C_Set_Callback_On_Request+0xc>)
   d7358:	681b      	ldr	r3, [r3, #0]
   d735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d735c:	9301      	str	r3, [sp, #4]
   d735e:	bd08      	pop	{r3, pc}
   d7360:	00030228 	.word	0x00030228

000d7364 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7364:	b508      	push	{r3, lr}
   d7366:	4b02      	ldr	r3, [pc, #8]	; (d7370 <HAL_I2C_Init+0xc>)
   d7368:	681b      	ldr	r3, [r3, #0]
   d736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d736c:	9301      	str	r3, [sp, #4]
   d736e:	bd08      	pop	{r3, pc}
   d7370:	00030228 	.word	0x00030228

000d7374 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7374:	b508      	push	{r3, lr}
   d7376:	4b02      	ldr	r3, [pc, #8]	; (d7380 <HAL_I2C_Request_Data_Ex+0xc>)
   d7378:	681b      	ldr	r3, [r3, #0]
   d737a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d737c:	9301      	str	r3, [sp, #4]
   d737e:	bd08      	pop	{r3, pc}
   d7380:	00030228 	.word	0x00030228

000d7384 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7384:	b508      	push	{r3, lr}
   d7386:	4b02      	ldr	r3, [pc, #8]	; (d7390 <HAL_USART_Init+0xc>)
   d7388:	681b      	ldr	r3, [r3, #0]
   d738a:	681b      	ldr	r3, [r3, #0]
   d738c:	9301      	str	r3, [sp, #4]
   d738e:	bd08      	pop	{r3, pc}
   d7390:	0003023c 	.word	0x0003023c

000d7394 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7394:	b508      	push	{r3, lr}
   d7396:	4b02      	ldr	r3, [pc, #8]	; (d73a0 <HAL_USART_Write_Data+0xc>)
   d7398:	681b      	ldr	r3, [r3, #0]
   d739a:	68db      	ldr	r3, [r3, #12]
   d739c:	9301      	str	r3, [sp, #4]
   d739e:	bd08      	pop	{r3, pc}
   d73a0:	0003023c 	.word	0x0003023c

000d73a4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d73a4:	b508      	push	{r3, lr}
   d73a6:	4b02      	ldr	r3, [pc, #8]	; (d73b0 <HAL_USART_Available_Data+0xc>)
   d73a8:	681b      	ldr	r3, [r3, #0]
   d73aa:	691b      	ldr	r3, [r3, #16]
   d73ac:	9301      	str	r3, [sp, #4]
   d73ae:	bd08      	pop	{r3, pc}
   d73b0:	0003023c 	.word	0x0003023c

000d73b4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d73b4:	b508      	push	{r3, lr}
   d73b6:	4b02      	ldr	r3, [pc, #8]	; (d73c0 <HAL_USART_Read_Data+0xc>)
   d73b8:	681b      	ldr	r3, [r3, #0]
   d73ba:	695b      	ldr	r3, [r3, #20]
   d73bc:	9301      	str	r3, [sp, #4]
   d73be:	bd08      	pop	{r3, pc}
   d73c0:	0003023c 	.word	0x0003023c

000d73c4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d73c4:	b508      	push	{r3, lr}
   d73c6:	4b02      	ldr	r3, [pc, #8]	; (d73d0 <HAL_USART_Peek_Data+0xc>)
   d73c8:	681b      	ldr	r3, [r3, #0]
   d73ca:	699b      	ldr	r3, [r3, #24]
   d73cc:	9301      	str	r3, [sp, #4]
   d73ce:	bd08      	pop	{r3, pc}
   d73d0:	0003023c 	.word	0x0003023c

000d73d4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d73d4:	b508      	push	{r3, lr}
   d73d6:	4b02      	ldr	r3, [pc, #8]	; (d73e0 <HAL_USART_Flush_Data+0xc>)
   d73d8:	681b      	ldr	r3, [r3, #0]
   d73da:	69db      	ldr	r3, [r3, #28]
   d73dc:	9301      	str	r3, [sp, #4]
   d73de:	bd08      	pop	{r3, pc}
   d73e0:	0003023c 	.word	0x0003023c

000d73e4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d73e4:	b508      	push	{r3, lr}
   d73e6:	4b02      	ldr	r3, [pc, #8]	; (d73f0 <HAL_USART_Is_Enabled+0xc>)
   d73e8:	681b      	ldr	r3, [r3, #0]
   d73ea:	6a1b      	ldr	r3, [r3, #32]
   d73ec:	9301      	str	r3, [sp, #4]
   d73ee:	bd08      	pop	{r3, pc}
   d73f0:	0003023c 	.word	0x0003023c

000d73f4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d73f4:	b508      	push	{r3, lr}
   d73f6:	4b02      	ldr	r3, [pc, #8]	; (d7400 <HAL_USART_Available_Data_For_Write+0xc>)
   d73f8:	681b      	ldr	r3, [r3, #0]
   d73fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73fc:	9301      	str	r3, [sp, #4]
   d73fe:	bd08      	pop	{r3, pc}
   d7400:	0003023c 	.word	0x0003023c

000d7404 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d7404:	b508      	push	{r3, lr}
   d7406:	4b02      	ldr	r3, [pc, #8]	; (d7410 <HAL_USART_BeginConfig+0xc>)
   d7408:	681b      	ldr	r3, [r3, #0]
   d740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d740c:	9301      	str	r3, [sp, #4]
   d740e:	bd08      	pop	{r3, pc}
   d7410:	0003023c 	.word	0x0003023c

000d7414 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7414:	b508      	push	{r3, lr}
   d7416:	4b02      	ldr	r3, [pc, #8]	; (d7420 <inet_inet_ntop+0xc>)
   d7418:	681b      	ldr	r3, [r3, #0]
   d741a:	695b      	ldr	r3, [r3, #20]
   d741c:	9301      	str	r3, [sp, #4]
   d741e:	bd08      	pop	{r3, pc}
   d7420:	00030264 	.word	0x00030264

000d7424 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d7424:	b508      	push	{r3, lr}
   d7426:	4b02      	ldr	r3, [pc, #8]	; (d7430 <inet_htonl+0xc>)
   d7428:	681b      	ldr	r3, [r3, #0]
   d742a:	6a1b      	ldr	r3, [r3, #32]
   d742c:	9301      	str	r3, [sp, #4]
   d742e:	bd08      	pop	{r3, pc}
   d7430:	00030264 	.word	0x00030264

000d7434 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d7434:	b508      	push	{r3, lr}
   d7436:	4b02      	ldr	r3, [pc, #8]	; (d7440 <inet_htons+0xc>)
   d7438:	681b      	ldr	r3, [r3, #0]
   d743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d743c:	9301      	str	r3, [sp, #4]
   d743e:	bd08      	pop	{r3, pc}
   d7440:	00030264 	.word	0x00030264

000d7444 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7444:	b508      	push	{r3, lr}
   d7446:	4b02      	ldr	r3, [pc, #8]	; (d7450 <os_thread_is_current+0xc>)
   d7448:	681b      	ldr	r3, [r3, #0]
   d744a:	689b      	ldr	r3, [r3, #8]
   d744c:	9301      	str	r3, [sp, #4]
   d744e:	bd08      	pop	{r3, pc}
   d7450:	00030248 	.word	0x00030248

000d7454 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7454:	b508      	push	{r3, lr}
   d7456:	4b02      	ldr	r3, [pc, #8]	; (d7460 <os_thread_join+0xc>)
   d7458:	681b      	ldr	r3, [r3, #0]
   d745a:	691b      	ldr	r3, [r3, #16]
   d745c:	9301      	str	r3, [sp, #4]
   d745e:	bd08      	pop	{r3, pc}
   d7460:	00030248 	.word	0x00030248

000d7464 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7464:	b508      	push	{r3, lr}
   d7466:	4b02      	ldr	r3, [pc, #8]	; (d7470 <os_thread_cleanup+0xc>)
   d7468:	681b      	ldr	r3, [r3, #0]
   d746a:	695b      	ldr	r3, [r3, #20]
   d746c:	9301      	str	r3, [sp, #4]
   d746e:	bd08      	pop	{r3, pc}
   d7470:	00030248 	.word	0x00030248

000d7474 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7474:	b508      	push	{r3, lr}
   d7476:	4b02      	ldr	r3, [pc, #8]	; (d7480 <os_mutex_recursive_create+0xc>)
   d7478:	681b      	ldr	r3, [r3, #0]
   d747a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d747c:	9301      	str	r3, [sp, #4]
   d747e:	bd08      	pop	{r3, pc}
   d7480:	00030248 	.word	0x00030248

000d7484 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7484:	b508      	push	{r3, lr}
   d7486:	4b02      	ldr	r3, [pc, #8]	; (d7490 <os_mutex_recursive_destroy+0xc>)
   d7488:	681b      	ldr	r3, [r3, #0]
   d748a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d748c:	9301      	str	r3, [sp, #4]
   d748e:	bd08      	pop	{r3, pc}
   d7490:	00030248 	.word	0x00030248

000d7494 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7494:	b508      	push	{r3, lr}
   d7496:	4b02      	ldr	r3, [pc, #8]	; (d74a0 <HAL_RNG_GetRandomNumber+0xc>)
   d7498:	681b      	ldr	r3, [r3, #0]
   d749a:	685b      	ldr	r3, [r3, #4]
   d749c:	9301      	str	r3, [sp, #4]
   d749e:	bd08      	pop	{r3, pc}
   d74a0:	00030218 	.word	0x00030218

000d74a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d74a4:	b508      	push	{r3, lr}
   d74a6:	4b02      	ldr	r3, [pc, #8]	; (d74b0 <HAL_Delay_Microseconds+0xc>)
   d74a8:	681b      	ldr	r3, [r3, #0]
   d74aa:	68db      	ldr	r3, [r3, #12]
   d74ac:	9301      	str	r3, [sp, #4]
   d74ae:	bd08      	pop	{r3, pc}
   d74b0:	00030218 	.word	0x00030218

000d74b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d74b4:	b508      	push	{r3, lr}
   d74b6:	4b02      	ldr	r3, [pc, #8]	; (d74c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d74b8:	681b      	ldr	r3, [r3, #0]
   d74ba:	695b      	ldr	r3, [r3, #20]
   d74bc:	9301      	str	r3, [sp, #4]
   d74be:	bd08      	pop	{r3, pc}
   d74c0:	00030218 	.word	0x00030218

000d74c4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d74c4:	b508      	push	{r3, lr}
   d74c6:	4b02      	ldr	r3, [pc, #8]	; (d74d0 <if_index_to_name+0xc>)
   d74c8:	681b      	ldr	r3, [r3, #0]
   d74ca:	695b      	ldr	r3, [r3, #20]
   d74cc:	9301      	str	r3, [sp, #4]
   d74ce:	bd08      	pop	{r3, pc}
   d74d0:	0003026c 	.word	0x0003026c

000d74d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d74d4:	b508      	push	{r3, lr}
   d74d6:	4b02      	ldr	r3, [pc, #8]	; (d74e0 <HAL_SPI_Init+0xc>)
   d74d8:	681b      	ldr	r3, [r3, #0]
   d74da:	69db      	ldr	r3, [r3, #28]
   d74dc:	9301      	str	r3, [sp, #4]
   d74de:	bd08      	pop	{r3, pc}
   d74e0:	00030230 	.word	0x00030230

000d74e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d74e4:	b508      	push	{r3, lr}
   d74e6:	4b02      	ldr	r3, [pc, #8]	; (d74f0 <HAL_SPI_Is_Enabled+0xc>)
   d74e8:	681b      	ldr	r3, [r3, #0]
   d74ea:	6a1b      	ldr	r3, [r3, #32]
   d74ec:	9301      	str	r3, [sp, #4]
   d74ee:	bd08      	pop	{r3, pc}
   d74f0:	00030230 	.word	0x00030230

000d74f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d74f4:	b508      	push	{r3, lr}
   d74f6:	4b02      	ldr	r3, [pc, #8]	; (d7500 <HAL_Pin_Map+0xc>)
   d74f8:	681b      	ldr	r3, [r3, #0]
   d74fa:	681b      	ldr	r3, [r3, #0]
   d74fc:	9301      	str	r3, [sp, #4]
   d74fe:	bd08      	pop	{r3, pc}
   d7500:	0003022c 	.word	0x0003022c

000d7504 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7504:	b508      	push	{r3, lr}
   d7506:	4b02      	ldr	r3, [pc, #8]	; (d7510 <HAL_Pin_Mode+0xc>)
   d7508:	681b      	ldr	r3, [r3, #0]
   d750a:	689b      	ldr	r3, [r3, #8]
   d750c:	9301      	str	r3, [sp, #4]
   d750e:	bd08      	pop	{r3, pc}
   d7510:	0003022c 	.word	0x0003022c

000d7514 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7514:	b508      	push	{r3, lr}
   d7516:	4b02      	ldr	r3, [pc, #8]	; (d7520 <HAL_Get_Pin_Mode+0xc>)
   d7518:	681b      	ldr	r3, [r3, #0]
   d751a:	68db      	ldr	r3, [r3, #12]
   d751c:	9301      	str	r3, [sp, #4]
   d751e:	bd08      	pop	{r3, pc}
   d7520:	0003022c 	.word	0x0003022c

000d7524 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7524:	b508      	push	{r3, lr}
   d7526:	4b02      	ldr	r3, [pc, #8]	; (d7530 <HAL_GPIO_Read+0xc>)
   d7528:	681b      	ldr	r3, [r3, #0]
   d752a:	695b      	ldr	r3, [r3, #20]
   d752c:	9301      	str	r3, [sp, #4]
   d752e:	bd08      	pop	{r3, pc}
   d7530:	0003022c 	.word	0x0003022c

000d7534 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7534:	b508      	push	{r3, lr}
   d7536:	4b02      	ldr	r3, [pc, #8]	; (d7540 <HAL_Interrupts_Attach+0xc>)
   d7538:	681b      	ldr	r3, [r3, #0]
   d753a:	699b      	ldr	r3, [r3, #24]
   d753c:	9301      	str	r3, [sp, #4]
   d753e:	bd08      	pop	{r3, pc}
   d7540:	0003022c 	.word	0x0003022c

000d7544 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7544:	b508      	push	{r3, lr}
   d7546:	4b02      	ldr	r3, [pc, #8]	; (d7550 <HAL_Interrupts_Detach+0xc>)
   d7548:	681b      	ldr	r3, [r3, #0]
   d754a:	69db      	ldr	r3, [r3, #28]
   d754c:	9301      	str	r3, [sp, #4]
   d754e:	bd08      	pop	{r3, pc}
   d7550:	0003022c 	.word	0x0003022c

000d7554 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7554:	b508      	push	{r3, lr}
   d7556:	4b02      	ldr	r3, [pc, #8]	; (d7560 <HAL_Interrupts_Enable_All+0xc>)
   d7558:	681b      	ldr	r3, [r3, #0]
   d755a:	6a1b      	ldr	r3, [r3, #32]
   d755c:	9301      	str	r3, [sp, #4]
   d755e:	bd08      	pop	{r3, pc}
   d7560:	0003022c 	.word	0x0003022c

000d7564 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7564:	b508      	push	{r3, lr}
   d7566:	4b02      	ldr	r3, [pc, #8]	; (d7570 <HAL_Interrupts_Disable_All+0xc>)
   d7568:	681b      	ldr	r3, [r3, #0]
   d756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d756c:	9301      	str	r3, [sp, #4]
   d756e:	bd08      	pop	{r3, pc}
   d7570:	0003022c 	.word	0x0003022c

000d7574 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7574:	b508      	push	{r3, lr}
   d7576:	4b02      	ldr	r3, [pc, #8]	; (d7580 <netdb_freeaddrinfo+0xc>)
   d7578:	681b      	ldr	r3, [r3, #0]
   d757a:	689b      	ldr	r3, [r3, #8]
   d757c:	9301      	str	r3, [sp, #4]
   d757e:	bd08      	pop	{r3, pc}
   d7580:	00030268 	.word	0x00030268

000d7584 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7584:	b508      	push	{r3, lr}
   d7586:	4b02      	ldr	r3, [pc, #8]	; (d7590 <netdb_getaddrinfo+0xc>)
   d7588:	681b      	ldr	r3, [r3, #0]
   d758a:	68db      	ldr	r3, [r3, #12]
   d758c:	9301      	str	r3, [sp, #4]
   d758e:	bd08      	pop	{r3, pc}
   d7590:	00030268 	.word	0x00030268

000d7594 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d7594:	b508      	push	{r3, lr}
   d7596:	4b02      	ldr	r3, [pc, #8]	; (d75a0 <LED_SetSignalingColor+0xc>)
   d7598:	681b      	ldr	r3, [r3, #0]
   d759a:	685b      	ldr	r3, [r3, #4]
   d759c:	9301      	str	r3, [sp, #4]
   d759e:	bd08      	pop	{r3, pc}
   d75a0:	00030260 	.word	0x00030260

000d75a4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d75a4:	b508      	push	{r3, lr}
   d75a6:	4b02      	ldr	r3, [pc, #8]	; (d75b0 <LED_Signaling_Start+0xc>)
   d75a8:	681b      	ldr	r3, [r3, #0]
   d75aa:	689b      	ldr	r3, [r3, #8]
   d75ac:	9301      	str	r3, [sp, #4]
   d75ae:	bd08      	pop	{r3, pc}
   d75b0:	00030260 	.word	0x00030260

000d75b4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d75b4:	b508      	push	{r3, lr}
   d75b6:	4b02      	ldr	r3, [pc, #8]	; (d75c0 <LED_Signaling_Stop+0xc>)
   d75b8:	681b      	ldr	r3, [r3, #0]
   d75ba:	68db      	ldr	r3, [r3, #12]
   d75bc:	9301      	str	r3, [sp, #4]
   d75be:	bd08      	pop	{r3, pc}
   d75c0:	00030260 	.word	0x00030260

000d75c4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d75c4:	b508      	push	{r3, lr}
   d75c6:	4b02      	ldr	r3, [pc, #8]	; (d75d0 <LED_RGB_IsOverRidden+0xc>)
   d75c8:	681b      	ldr	r3, [r3, #0]
   d75ca:	699b      	ldr	r3, [r3, #24]
   d75cc:	9301      	str	r3, [sp, #4]
   d75ce:	bd08      	pop	{r3, pc}
   d75d0:	00030260 	.word	0x00030260

000d75d4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d75d4:	b508      	push	{r3, lr}
   d75d6:	4b02      	ldr	r3, [pc, #8]	; (d75e0 <LED_On+0xc>)
   d75d8:	681b      	ldr	r3, [r3, #0]
   d75da:	69db      	ldr	r3, [r3, #28]
   d75dc:	9301      	str	r3, [sp, #4]
   d75de:	bd08      	pop	{r3, pc}
   d75e0:	00030260 	.word	0x00030260

000d75e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d75e4:	b508      	push	{r3, lr}
   d75e6:	4b02      	ldr	r3, [pc, #8]	; (d75f0 <panic_+0xc>)
   d75e8:	681b      	ldr	r3, [r3, #0]
   d75ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d75ec:	9301      	str	r3, [sp, #4]
   d75ee:	bd08      	pop	{r3, pc}
   d75f0:	00030260 	.word	0x00030260

000d75f4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d75f4:	b508      	push	{r3, lr}
   d75f6:	4b02      	ldr	r3, [pc, #8]	; (d7600 <log_message+0xc>)
   d75f8:	681b      	ldr	r3, [r3, #0]
   d75fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d75fc:	9301      	str	r3, [sp, #4]
   d75fe:	bd08      	pop	{r3, pc}
   d7600:	00030260 	.word	0x00030260

000d7604 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7604:	b508      	push	{r3, lr}
   d7606:	4b02      	ldr	r3, [pc, #8]	; (d7610 <spark_deviceID+0xc>)
   d7608:	681b      	ldr	r3, [r3, #0]
   d760a:	69db      	ldr	r3, [r3, #28]
   d760c:	9301      	str	r3, [sp, #4]
   d760e:	bd08      	pop	{r3, pc}
   d7610:	00030244 	.word	0x00030244

000d7614 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7614:	b508      	push	{r3, lr}
   d7616:	4b02      	ldr	r3, [pc, #8]	; (d7620 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7618:	681b      	ldr	r3, [r3, #0]
   d761a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d761c:	9301      	str	r3, [sp, #4]
   d761e:	bd08      	pop	{r3, pc}
   d7620:	00030244 	.word	0x00030244

000d7624 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7624:	b508      	push	{r3, lr}
   d7626:	4b02      	ldr	r3, [pc, #8]	; (d7630 <network_connect+0xc>)
   d7628:	681b      	ldr	r3, [r3, #0]
   d762a:	685b      	ldr	r3, [r3, #4]
   d762c:	9301      	str	r3, [sp, #4]
   d762e:	bd08      	pop	{r3, pc}
   d7630:	00030240 	.word	0x00030240

000d7634 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7634:	b508      	push	{r3, lr}
   d7636:	4b02      	ldr	r3, [pc, #8]	; (d7640 <network_connecting+0xc>)
   d7638:	681b      	ldr	r3, [r3, #0]
   d763a:	689b      	ldr	r3, [r3, #8]
   d763c:	9301      	str	r3, [sp, #4]
   d763e:	bd08      	pop	{r3, pc}
   d7640:	00030240 	.word	0x00030240

000d7644 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7644:	b508      	push	{r3, lr}
   d7646:	4b02      	ldr	r3, [pc, #8]	; (d7650 <network_disconnect+0xc>)
   d7648:	681b      	ldr	r3, [r3, #0]
   d764a:	68db      	ldr	r3, [r3, #12]
   d764c:	9301      	str	r3, [sp, #4]
   d764e:	bd08      	pop	{r3, pc}
   d7650:	00030240 	.word	0x00030240

000d7654 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7654:	b508      	push	{r3, lr}
   d7656:	4b02      	ldr	r3, [pc, #8]	; (d7660 <network_ready+0xc>)
   d7658:	681b      	ldr	r3, [r3, #0]
   d765a:	691b      	ldr	r3, [r3, #16]
   d765c:	9301      	str	r3, [sp, #4]
   d765e:	bd08      	pop	{r3, pc}
   d7660:	00030240 	.word	0x00030240

000d7664 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7664:	b508      	push	{r3, lr}
   d7666:	4b02      	ldr	r3, [pc, #8]	; (d7670 <network_on+0xc>)
   d7668:	681b      	ldr	r3, [r3, #0]
   d766a:	695b      	ldr	r3, [r3, #20]
   d766c:	9301      	str	r3, [sp, #4]
   d766e:	bd08      	pop	{r3, pc}
   d7670:	00030240 	.word	0x00030240

000d7674 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7674:	b508      	push	{r3, lr}
   d7676:	4b02      	ldr	r3, [pc, #8]	; (d7680 <network_off+0xc>)
   d7678:	681b      	ldr	r3, [r3, #0]
   d767a:	699b      	ldr	r3, [r3, #24]
   d767c:	9301      	str	r3, [sp, #4]
   d767e:	bd08      	pop	{r3, pc}
   d7680:	00030240 	.word	0x00030240

000d7684 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7684:	b508      	push	{r3, lr}
   d7686:	4b02      	ldr	r3, [pc, #8]	; (d7690 <network_listen+0xc>)
   d7688:	681b      	ldr	r3, [r3, #0]
   d768a:	69db      	ldr	r3, [r3, #28]
   d768c:	9301      	str	r3, [sp, #4]
   d768e:	bd08      	pop	{r3, pc}
   d7690:	00030240 	.word	0x00030240

000d7694 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7694:	b508      	push	{r3, lr}
   d7696:	4b02      	ldr	r3, [pc, #8]	; (d76a0 <network_listening+0xc>)
   d7698:	681b      	ldr	r3, [r3, #0]
   d769a:	6a1b      	ldr	r3, [r3, #32]
   d769c:	9301      	str	r3, [sp, #4]
   d769e:	bd08      	pop	{r3, pc}
   d76a0:	00030240 	.word	0x00030240

000d76a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d76a4:	b508      	push	{r3, lr}
   d76a6:	4b02      	ldr	r3, [pc, #8]	; (d76b0 <network_set_listen_timeout+0xc>)
   d76a8:	681b      	ldr	r3, [r3, #0]
   d76aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d76ac:	9301      	str	r3, [sp, #4]
   d76ae:	bd08      	pop	{r3, pc}
   d76b0:	00030240 	.word	0x00030240

000d76b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d76b4:	b508      	push	{r3, lr}
   d76b6:	4b02      	ldr	r3, [pc, #8]	; (d76c0 <network_get_listen_timeout+0xc>)
   d76b8:	681b      	ldr	r3, [r3, #0]
   d76ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d76bc:	9301      	str	r3, [sp, #4]
   d76be:	bd08      	pop	{r3, pc}
   d76c0:	00030240 	.word	0x00030240

000d76c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d76c4:	b508      	push	{r3, lr}
   d76c6:	4b02      	ldr	r3, [pc, #8]	; (d76d0 <set_system_mode+0xc>)
   d76c8:	681b      	ldr	r3, [r3, #0]
   d76ca:	685b      	ldr	r3, [r3, #4]
   d76cc:	9301      	str	r3, [sp, #4]
   d76ce:	bd08      	pop	{r3, pc}
   d76d0:	00030220 	.word	0x00030220

000d76d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d76d4:	b508      	push	{r3, lr}
   d76d6:	4b02      	ldr	r3, [pc, #8]	; (d76e0 <system_delay_ms+0xc>)
   d76d8:	681b      	ldr	r3, [r3, #0]
   d76da:	695b      	ldr	r3, [r3, #20]
   d76dc:	9301      	str	r3, [sp, #4]
   d76de:	bd08      	pop	{r3, pc}
   d76e0:	00030220 	.word	0x00030220

000d76e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d76e4:	b508      	push	{r3, lr}
   d76e6:	4b03      	ldr	r3, [pc, #12]	; (d76f4 <system_ctrl_set_app_request_handler+0x10>)
   d76e8:	681b      	ldr	r3, [r3, #0]
   d76ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d76ee:	9301      	str	r3, [sp, #4]
   d76f0:	bd08      	pop	{r3, pc}
   d76f2:	0000      	.short	0x0000
   d76f4:	00030220 	.word	0x00030220

000d76f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d76f8:	b508      	push	{r3, lr}
   d76fa:	4b03      	ldr	r3, [pc, #12]	; (d7708 <system_ctrl_set_result+0x10>)
   d76fc:	681b      	ldr	r3, [r3, #0]
   d76fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7702:	9301      	str	r3, [sp, #4]
   d7704:	bd08      	pop	{r3, pc}
   d7706:	0000      	.short	0x0000
   d7708:	00030220 	.word	0x00030220

000d770c <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d770c:	b508      	push	{r3, lr}
   d770e:	4b03      	ldr	r3, [pc, #12]	; (d771c <system_sleep_pins+0x10>)
   d7710:	681b      	ldr	r3, [r3, #0]
   d7712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d7716:	9301      	str	r3, [sp, #4]
   d7718:	bd08      	pop	{r3, pc}
   d771a:	0000      	.short	0x0000
   d771c:	00030220 	.word	0x00030220

000d7720 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7720:	b508      	push	{r3, lr}
   d7722:	4b02      	ldr	r3, [pc, #8]	; (d772c <malloc+0xc>)
   d7724:	681b      	ldr	r3, [r3, #0]
   d7726:	681b      	ldr	r3, [r3, #0]
   d7728:	9301      	str	r3, [sp, #4]
   d772a:	bd08      	pop	{r3, pc}
   d772c:	0003021c 	.word	0x0003021c

000d7730 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7730:	b508      	push	{r3, lr}
   d7732:	4b02      	ldr	r3, [pc, #8]	; (d773c <free+0xc>)
   d7734:	681b      	ldr	r3, [r3, #0]
   d7736:	685b      	ldr	r3, [r3, #4]
   d7738:	9301      	str	r3, [sp, #4]
   d773a:	bd08      	pop	{r3, pc}
   d773c:	0003021c 	.word	0x0003021c

000d7740 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7740:	b508      	push	{r3, lr}
   d7742:	4b02      	ldr	r3, [pc, #8]	; (d774c <realloc+0xc>)
   d7744:	681b      	ldr	r3, [r3, #0]
   d7746:	689b      	ldr	r3, [r3, #8]
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	bd08      	pop	{r3, pc}
   d774c:	0003021c 	.word	0x0003021c

000d7750 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7750:	b508      	push	{r3, lr}
   d7752:	4b02      	ldr	r3, [pc, #8]	; (d775c <vsnprintf+0xc>)
   d7754:	681b      	ldr	r3, [r3, #0]
   d7756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7758:	9301      	str	r3, [sp, #4]
   d775a:	bd08      	pop	{r3, pc}
   d775c:	0003021c 	.word	0x0003021c

000d7760 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b02      	ldr	r3, [pc, #8]	; (d776c <abort+0xc>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7768:	9301      	str	r3, [sp, #4]
   d776a:	bd08      	pop	{r3, pc}
   d776c:	0003021c 	.word	0x0003021c

000d7770 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7770:	b508      	push	{r3, lr}
   d7772:	4b02      	ldr	r3, [pc, #8]	; (d777c <__errno+0xc>)
   d7774:	681b      	ldr	r3, [r3, #0]
   d7776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7778:	9301      	str	r3, [sp, #4]
   d777a:	bd08      	pop	{r3, pc}
   d777c:	0003021c 	.word	0x0003021c

000d7780 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7780:	2300      	movs	r3, #0
   d7782:	461a      	mov	r2, r3
   d7784:	6840      	ldr	r0, [r0, #4]
   d7786:	f7ff bf4d 	b.w	d7624 <network_connect>

000d778a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d778a:	2200      	movs	r2, #0
   d778c:	2102      	movs	r1, #2
   d778e:	6840      	ldr	r0, [r0, #4]
   d7790:	f7ff bf58 	b.w	d7644 <network_disconnect>

000d7794 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7794:	2200      	movs	r2, #0
   d7796:	4611      	mov	r1, r2
   d7798:	6840      	ldr	r0, [r0, #4]
   d779a:	f7ff bf4b 	b.w	d7634 <network_connecting>

000d779e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d779e:	2200      	movs	r2, #0
   d77a0:	4611      	mov	r1, r2
   d77a2:	6840      	ldr	r0, [r0, #4]
   d77a4:	f7ff bf56 	b.w	d7654 <network_ready>

000d77a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d77a8:	2300      	movs	r3, #0
   d77aa:	461a      	mov	r2, r3
   d77ac:	4619      	mov	r1, r3
   d77ae:	6840      	ldr	r0, [r0, #4]
   d77b0:	f7ff bf58 	b.w	d7664 <network_on>

000d77b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d77b4:	2300      	movs	r3, #0
   d77b6:	461a      	mov	r2, r3
   d77b8:	4619      	mov	r1, r3
   d77ba:	6840      	ldr	r0, [r0, #4]
   d77bc:	f7ff bf5a 	b.w	d7674 <network_off>

000d77c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d77c0:	2200      	movs	r2, #0
   d77c2:	f081 0101 	eor.w	r1, r1, #1
   d77c6:	6840      	ldr	r0, [r0, #4]
   d77c8:	f7ff bf5c 	b.w	d7684 <network_listen>

000d77cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d77cc:	2200      	movs	r2, #0
   d77ce:	6840      	ldr	r0, [r0, #4]
   d77d0:	f7ff bf68 	b.w	d76a4 <network_set_listen_timeout>

000d77d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d77d4:	2200      	movs	r2, #0
   d77d6:	4611      	mov	r1, r2
   d77d8:	6840      	ldr	r0, [r0, #4]
   d77da:	f7ff bf6b 	b.w	d76b4 <network_get_listen_timeout>

000d77de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d77de:	2200      	movs	r2, #0
   d77e0:	4611      	mov	r1, r2
   d77e2:	6840      	ldr	r0, [r0, #4]
   d77e4:	f7ff bf56 	b.w	d7694 <network_listening>

000d77e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d77e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d77ec:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d77ee:	b095      	sub	sp, #84	; 0x54
   d77f0:	4616      	mov	r6, r2
   d77f2:	460d      	mov	r5, r1
   d77f4:	4607      	mov	r7, r0
    IPAddress addr;
   d77f6:	f000 fe13 	bl	d8420 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d77fa:	4621      	mov	r1, r4
   d77fc:	2220      	movs	r2, #32
   d77fe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7800:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7802:	f002 fa7e 	bl	d9d02 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7806:	2340      	movs	r3, #64	; 0x40
   d7808:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d780a:	4621      	mov	r1, r4
   d780c:	466b      	mov	r3, sp
   d780e:	aa0c      	add	r2, sp, #48	; 0x30
   d7810:	4630      	mov	r0, r6
   d7812:	f7ff feb7 	bl	d7584 <netdb_getaddrinfo>
    if (!r) {
   d7816:	4604      	mov	r4, r0
   d7818:	2800      	cmp	r0, #0
   d781a:	d144      	bne.n	d78a6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d781c:	4602      	mov	r2, r0
   d781e:	2101      	movs	r1, #1
   d7820:	6868      	ldr	r0, [r5, #4]
   d7822:	f7ff ff17 	bl	d7654 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7826:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7828:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d782a:	4622      	mov	r2, r4
   d782c:	6868      	ldr	r0, [r5, #4]
   d782e:	f7ff ff11 	bl	d7654 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7832:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7834:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7836:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7838:	2e00      	cmp	r6, #0
   d783a:	d034      	beq.n	d78a6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d783c:	2900      	cmp	r1, #0
   d783e:	d132      	bne.n	d78a6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7840:	6873      	ldr	r3, [r6, #4]
   d7842:	2b02      	cmp	r3, #2
   d7844:	d002      	beq.n	d784c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7846:	2b0a      	cmp	r3, #10
   d7848:	d009      	beq.n	d785e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d784a:	e02a      	b.n	d78a2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d784c:	f1b8 0f00 	cmp.w	r8, #0
   d7850:	d027      	beq.n	d78a2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7852:	6971      	ldr	r1, [r6, #20]
   d7854:	4638      	mov	r0, r7
   d7856:	3104      	adds	r1, #4
   d7858:	f000 fe25 	bl	d84a6 <_ZN9IPAddressaSEPKh>
   d785c:	e020      	b.n	d78a0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d785e:	f1b9 0f00 	cmp.w	r9, #0
   d7862:	d01e      	beq.n	d78a2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7864:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7866:	2211      	movs	r2, #17
   d7868:	a801      	add	r0, sp, #4
   d786a:	f002 fa4a 	bl	d9d02 <memset>
                    a.v = 6;
   d786e:	2306      	movs	r3, #6
   d7870:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7874:	ad01      	add	r5, sp, #4
   d7876:	f104 0308 	add.w	r3, r4, #8
   d787a:	3418      	adds	r4, #24
   d787c:	6818      	ldr	r0, [r3, #0]
   d787e:	6859      	ldr	r1, [r3, #4]
   d7880:	462a      	mov	r2, r5
   d7882:	c203      	stmia	r2!, {r0, r1}
   d7884:	3308      	adds	r3, #8
   d7886:	42a3      	cmp	r3, r4
   d7888:	4615      	mov	r5, r2
   d788a:	d1f7      	bne.n	d787c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d788c:	a901      	add	r1, sp, #4
   d788e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7890:	ad07      	add	r5, sp, #28
   d7892:	f000 fdd3 	bl	d843c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7898:	1d3c      	adds	r4, r7, #4
   d789a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d789c:	682b      	ldr	r3, [r5, #0]
   d789e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d78a0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d78a2:	69f6      	ldr	r6, [r6, #28]
   d78a4:	e7c8      	b.n	d7838 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d78a6:	9800      	ldr	r0, [sp, #0]
   d78a8:	f7ff fe64 	bl	d7574 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d78ac:	4638      	mov	r0, r7
   d78ae:	b015      	add	sp, #84	; 0x54
   d78b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d78b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d78b4:	4b02      	ldr	r3, [pc, #8]	; (d78c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d78b6:	4a03      	ldr	r2, [pc, #12]	; (d78c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d78b8:	601a      	str	r2, [r3, #0]
   d78ba:	2200      	movs	r2, #0
   d78bc:	605a      	str	r2, [r3, #4]
   d78be:	4770      	bx	lr
   d78c0:	2003e328 	.word	0x2003e328
   d78c4:	000da65c 	.word	0x000da65c

000d78c8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d78c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d78ca:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d78cc:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d78ce:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d78d2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d78d4:	2201      	movs	r2, #1
   d78d6:	f04f 33ff 	mov.w	r3, #4294967295
   d78da:	4621      	mov	r1, r4
   d78dc:	47a8      	blx	r5
}
   d78de:	b003      	add	sp, #12
   d78e0:	bd30      	pop	{r4, r5, pc}

000d78e2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d78e2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d78e4:	6803      	ldr	r3, [r0, #0]
   d78e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d78e8:	f04f 33ff 	mov.w	r3, #4294967295
   d78ec:	46a4      	mov	ip, r4
}
   d78ee:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d78f2:	4760      	bx	ip

000d78f4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d78f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d78f6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d78f8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d78fa:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d78fe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7900:	4621      	mov	r1, r4
   d7902:	4613      	mov	r3, r2
   d7904:	2201      	movs	r2, #1
   d7906:	47a8      	blx	r5
}
   d7908:	b003      	add	sp, #12
   d790a:	bd30      	pop	{r4, r5, pc}

000d790c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d790c:	4770      	bx	lr

000d790e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d790e:	b538      	push	{r3, r4, r5, lr}
   d7910:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7912:	681a      	ldr	r2, [r3, #0]
   d7914:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7916:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7918:	da05      	bge.n	d7926 <_ZN9TCPClient9connectedEv+0x18>
   d791a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d791e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7922:	429a      	cmp	r2, r3
   d7924:	d001      	beq.n	d792a <_ZN9TCPClient9connectedEv+0x1c>
   d7926:	2501      	movs	r5, #1
   d7928:	e00b      	b.n	d7942 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d792a:	6803      	ldr	r3, [r0, #0]
   d792c:	691b      	ldr	r3, [r3, #16]
   d792e:	4798      	blx	r3
   d7930:	2800      	cmp	r0, #0
   d7932:	bf14      	ite	ne
   d7934:	2501      	movne	r5, #1
   d7936:	2500      	moveq	r5, #0
        if (!rv) {
   d7938:	d103      	bne.n	d7942 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d793a:	6823      	ldr	r3, [r4, #0]
   d793c:	4620      	mov	r0, r4
   d793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7940:	4798      	blx	r3
        }
    }
    return rv;
}
   d7942:	4628      	mov	r0, r5
   d7944:	bd38      	pop	{r3, r4, r5, pc}

000d7946 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7946:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7948:	6818      	ldr	r0, [r3, #0]
}
   d794a:	43c0      	mvns	r0, r0
   d794c:	0fc0      	lsrs	r0, r0, #31
   d794e:	4770      	bx	lr

000d7950 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7950:	4770      	bx	lr

000d7952 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7952:	2000      	movs	r0, #0
   d7954:	4770      	bx	lr

000d7956 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7956:	b510      	push	{r4, lr}
   d7958:	2114      	movs	r1, #20
   d795a:	4604      	mov	r4, r0
   d795c:	f001 fac8 	bl	d8ef0 <_ZdlPvj>
   d7960:	4620      	mov	r0, r4
   d7962:	bd10      	pop	{r4, pc}

000d7964 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7964:	f7fc bb9d 	b.w	d40a2 <_ZdlPv>

000d7968 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d796a:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d796c:	2200      	movs	r2, #0
   d796e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7970:	9202      	str	r2, [sp, #8]
   d7972:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7974:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7976:	4604      	mov	r4, r0
   d7978:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d797a:	d008      	beq.n	d798e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d797c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7980:	fbb3 f1f2 	udiv	r1, r3, r2
   d7984:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7986:	fb02 3111 	mls	r1, r2, r1, r3
   d798a:	434a      	muls	r2, r1
   d798c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d798e:	6960      	ldr	r0, [r4, #20]
   d7990:	2308      	movs	r3, #8
   d7992:	9300      	str	r3, [sp, #0]
   d7994:	f241 0205 	movw	r2, #4101	; 0x1005
   d7998:	446b      	add	r3, sp
   d799a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d799e:	6800      	ldr	r0, [r0, #0]
   d79a0:	f7ff fc58 	bl	d7254 <sock_setsockopt>
    if (ret < 0) {
   d79a4:	2800      	cmp	r0, #0
   d79a6:	db08      	blt.n	d79ba <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d79a8:	6960      	ldr	r0, [r4, #20]
   d79aa:	2300      	movs	r3, #0
   d79ac:	4632      	mov	r2, r6
   d79ae:	4629      	mov	r1, r5
   d79b0:	6800      	ldr	r0, [r0, #0]
   d79b2:	f7ff fc6f 	bl	d7294 <sock_send>
    if (ret < 0) {
   d79b6:	2800      	cmp	r0, #0
   d79b8:	da04      	bge.n	d79c4 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d79ba:	f7ff fed9 	bl	d7770 <__errno>
   d79be:	6803      	ldr	r3, [r0, #0]
   d79c0:	6063      	str	r3, [r4, #4]
   d79c2:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d79c4:	b004      	add	sp, #16
   d79c6:	bd70      	pop	{r4, r5, r6, pc}

000d79c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d79c8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d79ca:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d79cc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d79ce:	689b      	ldr	r3, [r3, #8]
   d79d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d79d2:	68a3      	ldr	r3, [r4, #8]
   d79d4:	3b01      	subs	r3, #1
   d79d6:	60a3      	str	r3, [r4, #8]
   d79d8:	b92b      	cbnz	r3, d79e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d79da:	6823      	ldr	r3, [r4, #0]
   d79dc:	4620      	mov	r0, r4
   d79de:	68db      	ldr	r3, [r3, #12]
        }
    }
   d79e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d79e4:	4718      	bx	r3
   d79e6:	bd10      	pop	{r4, pc}

000d79e8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d79e8:	b570      	push	{r4, r5, r6, lr}
   d79ea:	4604      	mov	r4, r0
   d79ec:	694d      	ldr	r5, [r1, #20]
   d79ee:	4b05      	ldr	r3, [pc, #20]	; (d7a04 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d79f0:	f844 3b04 	str.w	r3, [r4], #4
   d79f4:	358c      	adds	r5, #140	; 0x8c
   d79f6:	4606      	mov	r6, r0
   d79f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79fc:	682b      	ldr	r3, [r5, #0]
   d79fe:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7a00:	4630      	mov	r0, r6
   d7a02:	bd70      	pop	{r4, r5, r6, pc}
   d7a04:	000da800 	.word	0x000da800

000d7a08 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7a08:	b510      	push	{r4, lr}
   d7a0a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a14:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7a16:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a18:	d005      	beq.n	d7a26 <_ZN9TCPClient4peekEv+0x1e>
   d7a1a:	6962      	ldr	r2, [r4, #20]
   d7a1c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7a20:	4413      	add	r3, r2
   d7a22:	7918      	ldrb	r0, [r3, #4]
   d7a24:	bd10      	pop	{r4, pc}
   d7a26:	6803      	ldr	r3, [r0, #0]
   d7a28:	691b      	ldr	r3, [r3, #16]
   d7a2a:	4798      	blx	r3
   d7a2c:	2800      	cmp	r0, #0
   d7a2e:	d1f4      	bne.n	d7a1a <_ZN9TCPClient4peekEv+0x12>
   d7a30:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7a34:	bd10      	pop	{r4, pc}

000d7a36 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7a36:	b510      	push	{r4, lr}
   d7a38:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a3e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a42:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7a44:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a46:	d008      	beq.n	d7a5a <_ZN9TCPClient4readEv+0x24>
   d7a48:	6962      	ldr	r2, [r4, #20]
   d7a4a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7a4e:	1c59      	adds	r1, r3, #1
   d7a50:	4413      	add	r3, r2
   d7a52:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7a56:	7918      	ldrb	r0, [r3, #4]
   d7a58:	bd10      	pop	{r4, pc}
   d7a5a:	6803      	ldr	r3, [r0, #0]
   d7a5c:	691b      	ldr	r3, [r3, #16]
   d7a5e:	4798      	blx	r3
   d7a60:	2800      	cmp	r0, #0
   d7a62:	d1f1      	bne.n	d7a48 <_ZN9TCPClient4readEv+0x12>
   d7a64:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7a68:	bd10      	pop	{r4, pc}

000d7a6a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a6c:	6943      	ldr	r3, [r0, #20]
   d7a6e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7a70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a78:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7a7a:	4605      	mov	r5, r0
   d7a7c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7a7e:	d106      	bne.n	d7a8e <_ZN9TCPClient4readEPhj+0x24>
   d7a80:	6803      	ldr	r3, [r0, #0]
   d7a82:	691b      	ldr	r3, [r3, #16]
   d7a84:	4798      	blx	r3
   d7a86:	b910      	cbnz	r0, d7a8e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7a88:	f04f 34ff 	mov.w	r4, #4294967295
   d7a8c:	e014      	b.n	d7ab8 <_ZN9TCPClient4readEPhj+0x4e>
   d7a8e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7a90:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7a94:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7a98:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7a9a:	42bc      	cmp	r4, r7
   d7a9c:	bf28      	it	cs
   d7a9e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7aa0:	4419      	add	r1, r3
   d7aa2:	4622      	mov	r2, r4
   d7aa4:	3104      	adds	r1, #4
   d7aa6:	4630      	mov	r0, r6
   d7aa8:	f002 f920 	bl	d9cec <memcpy>
   d7aac:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7aae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7ab2:	4423      	add	r3, r4
   d7ab4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7ab8:	4620      	mov	r0, r4
   d7aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7abc <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7ac0:	4698      	mov	r8, r3
    stop();
   d7ac2:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7ac4:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7ac8:	460d      	mov	r5, r1
   d7aca:	4606      	mov	r6, r0
   d7acc:	4617      	mov	r7, r2
    stop();
   d7ace:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7ad0:	ab12      	add	r3, sp, #72	; 0x48
   d7ad2:	2400      	movs	r4, #0
   d7ad4:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7ad8:	4622      	mov	r2, r4
   d7ada:	4621      	mov	r1, r4
   d7adc:	4628      	mov	r0, r5
   d7ade:	f7ff fd51 	bl	d7584 <netdb_getaddrinfo>
   d7ae2:	4681      	mov	r9, r0
   d7ae4:	2800      	cmp	r0, #0
   d7ae6:	d13d      	bne.n	d7b64 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7ae8:	9b00      	ldr	r3, [sp, #0]
   d7aea:	2b00      	cmp	r3, #0
   d7aec:	d056      	beq.n	d7b9c <_ZN9TCPClient7connectEPKctm+0xe0>
   d7aee:	695b      	ldr	r3, [r3, #20]
   d7af0:	2b00      	cmp	r3, #0
   d7af2:	d053      	beq.n	d7b9c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7af4:	a806      	add	r0, sp, #24
   d7af6:	f000 fc93 	bl	d8420 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7afa:	9b00      	ldr	r3, [sp, #0]
   d7afc:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7afe:	7863      	ldrb	r3, [r4, #1]
   d7b00:	2b02      	cmp	r3, #2
   d7b02:	d101      	bne.n	d7b08 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7b04:	1d21      	adds	r1, r4, #4
   d7b06:	e013      	b.n	d7b30 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7b08:	2b0a      	cmp	r3, #10
   d7b0a:	d114      	bne.n	d7b36 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7b0c:	2211      	movs	r2, #17
   d7b0e:	4649      	mov	r1, r9
   d7b10:	a801      	add	r0, sp, #4
   d7b12:	f002 f8f6 	bl	d9d02 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7b16:	68a3      	ldr	r3, [r4, #8]
   d7b18:	bb33      	cbnz	r3, d7b68 <_ZN9TCPClient7connectEPKctm+0xac>
   d7b1a:	68e3      	ldr	r3, [r4, #12]
   d7b1c:	bb23      	cbnz	r3, d7b68 <_ZN9TCPClient7connectEPKctm+0xac>
   d7b1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7b22:	6925      	ldr	r5, [r4, #16]
   d7b24:	f7ff fc7e 	bl	d7424 <inet_htonl>
   d7b28:	4285      	cmp	r5, r0
   d7b2a:	d11d      	bne.n	d7b68 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7b2c:	f104 0114 	add.w	r1, r4, #20
   d7b30:	a806      	add	r0, sp, #24
   d7b32:	f000 fcb8 	bl	d84a6 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7b36:	a806      	add	r0, sp, #24
   d7b38:	f000 fc92 	bl	d8460 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7b3c:	2800      	cmp	r0, #0
   d7b3e:	d02d      	beq.n	d7b9c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7b40:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7b42:	ad07      	add	r5, sp, #28
   d7b44:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7b48:	4b18      	ldr	r3, [pc, #96]	; (d7bac <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7b4a:	930c      	str	r3, [sp, #48]	; 0x30
   d7b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b4e:	ac0d      	add	r4, sp, #52	; 0x34
   d7b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b52:	682b      	ldr	r3, [r5, #0]
   d7b54:	7023      	strb	r3, [r4, #0]
   d7b56:	463a      	mov	r2, r7
   d7b58:	4643      	mov	r3, r8
   d7b5a:	a90c      	add	r1, sp, #48	; 0x30
   d7b5c:	4630      	mov	r0, r6
   d7b5e:	47c8      	blx	r9
   d7b60:	4681      	mov	r9, r0
   d7b62:	e01b      	b.n	d7b9c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7b64:	46a1      	mov	r9, r4
   d7b66:	e019      	b.n	d7b9c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b68:	f104 0308 	add.w	r3, r4, #8
   d7b6c:	ad01      	add	r5, sp, #4
   d7b6e:	3418      	adds	r4, #24
   d7b70:	6818      	ldr	r0, [r3, #0]
   d7b72:	6859      	ldr	r1, [r3, #4]
   d7b74:	462a      	mov	r2, r5
   d7b76:	c203      	stmia	r2!, {r0, r1}
   d7b78:	3308      	adds	r3, #8
   d7b7a:	42a3      	cmp	r3, r4
   d7b7c:	4615      	mov	r5, r2
   d7b7e:	d1f7      	bne.n	d7b70 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7b80:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7b82:	a901      	add	r1, sp, #4
   d7b84:	a80c      	add	r0, sp, #48	; 0x30
   d7b86:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7b88:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7b8c:	f000 fc56 	bl	d843c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b92:	ac07      	add	r4, sp, #28
   d7b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b96:	682b      	ldr	r3, [r5, #0]
   d7b98:	7023      	strb	r3, [r4, #0]
   d7b9a:	e7cc      	b.n	d7b36 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7b9c:	9800      	ldr	r0, [sp, #0]
   d7b9e:	f7ff fce9 	bl	d7574 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7ba2:	4648      	mov	r0, r9
   d7ba4:	b013      	add	sp, #76	; 0x4c
   d7ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7baa:	bf00      	nop
   d7bac:	000da800 	.word	0x000da800

000d7bb0 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7bb0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7bb2:	2300      	movs	r3, #0
   d7bb4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7bb8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7bba:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7bbe:	4770      	bx	lr

000d7bc0 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7bc4:	461e      	mov	r6, r3
    stop();
   d7bc6:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bc8:	460c      	mov	r4, r1
   d7bca:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bce:	4605      	mov	r5, r0
   d7bd0:	4617      	mov	r7, r2
    stop();
   d7bd2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7bd4:	7d23      	ldrb	r3, [r4, #20]
   d7bd6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7bda:	2b04      	cmp	r3, #4
   d7bdc:	bf0c      	ite	eq
   d7bde:	2002      	moveq	r0, #2
   d7be0:	200a      	movne	r0, #10
   d7be2:	2206      	movs	r2, #6
   d7be4:	2101      	movs	r1, #1
   d7be6:	f7ff fb5d 	bl	d72a4 <sock_socket>
   d7bea:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7bee:	696b      	ldr	r3, [r5, #20]
   d7bf0:	681b      	ldr	r3, [r3, #0]
   d7bf2:	2b00      	cmp	r3, #0
   d7bf4:	db18      	blt.n	d7c28 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7bf6:	4628      	mov	r0, r5
   d7bf8:	f7ff ffda 	bl	d7bb0 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7bfc:	b1d6      	cbz	r6, d7c34 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7bfe:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c00:	a903      	add	r1, sp, #12
   d7c02:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7c04:	9303      	str	r3, [sp, #12]
   d7c06:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c0a:	f7ff fc5b 	bl	d74c4 <if_index_to_name>
   d7c0e:	b958      	cbnz	r0, d7c28 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7c10:	6968      	ldr	r0, [r5, #20]
   d7c12:	2306      	movs	r3, #6
   d7c14:	9300      	str	r3, [sp, #0]
   d7c16:	f241 020b 	movw	r2, #4107	; 0x100b
   d7c1a:	ab03      	add	r3, sp, #12
   d7c1c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c20:	6800      	ldr	r0, [r0, #0]
   d7c22:	f7ff fb17 	bl	d7254 <sock_setsockopt>
   d7c26:	b128      	cbz	r0, d7c34 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7c28:	682b      	ldr	r3, [r5, #0]
   d7c2a:	4628      	mov	r0, r5
   d7c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c2e:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7c30:	4798      	blx	r3
   d7c32:	e03b      	b.n	d7cac <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7c34:	261c      	movs	r6, #28
   d7c36:	4632      	mov	r2, r6
   d7c38:	2100      	movs	r1, #0
   d7c3a:	a803      	add	r0, sp, #12
   d7c3c:	f002 f861 	bl	d9d02 <memset>
    if (ip.version() == 4) {
   d7c40:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7c42:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7c46:	2b04      	cmp	r3, #4
   d7c48:	d10c      	bne.n	d7c64 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7c4a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7c4c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7c4e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7c52:	f7ff fbef 	bl	d7434 <inet_htons>
   d7c56:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7c5a:	6860      	ldr	r0, [r4, #4]
   d7c5c:	f7ff fbe2 	bl	d7424 <inet_htonl>
   d7c60:	9004      	str	r0, [sp, #16]
   d7c62:	e013      	b.n	d7c8c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7c64:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7c66:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7c68:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7c6c:	f7ff fbe2 	bl	d7434 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7c70:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7c72:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7c76:	1d23      	adds	r3, r4, #4
   d7c78:	f104 0714 	add.w	r7, r4, #20
   d7c7c:	6818      	ldr	r0, [r3, #0]
   d7c7e:	6859      	ldr	r1, [r3, #4]
   d7c80:	4632      	mov	r2, r6
   d7c82:	c203      	stmia	r2!, {r0, r1}
   d7c84:	3308      	adds	r3, #8
   d7c86:	42bb      	cmp	r3, r7
   d7c88:	4616      	mov	r6, r2
   d7c8a:	d1f7      	bne.n	d7c7c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7c8c:	696b      	ldr	r3, [r5, #20]
   d7c8e:	221c      	movs	r2, #28
   d7c90:	a903      	add	r1, sp, #12
   d7c92:	6818      	ldr	r0, [r3, #0]
   d7c94:	f7ff faee 	bl	d7274 <sock_connect>
   d7c98:	2800      	cmp	r0, #0
   d7c9a:	d1c5      	bne.n	d7c28 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7c9c:	3404      	adds	r4, #4
   d7c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7ca0:	696d      	ldr	r5, [r5, #20]
   d7ca2:	358c      	adds	r5, #140	; 0x8c
   d7ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7ca6:	6823      	ldr	r3, [r4, #0]
   d7ca8:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7caa:	2401      	movs	r4, #1
}
   d7cac:	4620      	mov	r0, r4
   d7cae:	b00a      	add	sp, #40	; 0x28
   d7cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7cb4 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7cb4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7cb6:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7cb8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7cba:	6818      	ldr	r0, [r3, #0]
   d7cbc:	2800      	cmp	r0, #0
   d7cbe:	db01      	blt.n	d7cc4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7cc0:	f7ff fad0 	bl	d7264 <sock_close>
   d7cc4:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7cc6:	f04f 32ff 	mov.w	r2, #4294967295
   d7cca:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7ccc:	6960      	ldr	r0, [r4, #20]
   d7cce:	2211      	movs	r2, #17
   d7cd0:	2100      	movs	r1, #0
   d7cd2:	308c      	adds	r0, #140	; 0x8c
   d7cd4:	f002 f815 	bl	d9d02 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7cd8:	4620      	mov	r0, r4
}
   d7cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7cde:	f7ff bf67 	b.w	d7bb0 <_ZN9TCPClient12flush_bufferEv>
	...

000d7ce4 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7ce4:	b530      	push	{r4, r5, lr}
   d7ce6:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7ce8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7cec:	b08b      	sub	sp, #44	; 0x2c
   d7cee:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7cf0:	b11b      	cbz	r3, d7cfa <_ZN9TCPClient9availableEv+0x16>
   d7cf2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7cf6:	429a      	cmp	r2, r3
   d7cf8:	d040      	beq.n	d7d7c <_ZN9TCPClient9availableEv+0x98>
   d7cfa:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7cfc:	6818      	ldr	r0, [r3, #0]
   d7cfe:	2800      	cmp	r0, #0
   d7d00:	db3f      	blt.n	d7d82 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7d02:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7d06:	2d7f      	cmp	r5, #127	; 0x7f
   d7d08:	d83b      	bhi.n	d7d82 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7d0a:	1d19      	adds	r1, r3, #4
   d7d0c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7d10:	2308      	movs	r3, #8
   d7d12:	4429      	add	r1, r5
   d7d14:	f7ff fab6 	bl	d7284 <sock_recv>
            if (ret > 0) {
   d7d18:	2800      	cmp	r0, #0
   d7d1a:	dd0c      	ble.n	d7d36 <_ZN9TCPClient9availableEv+0x52>
   d7d1c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7d1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d22:	b90a      	cbnz	r2, d7d28 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7d24:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7d28:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7d2a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7d2e:	4418      	add	r0, r3
   d7d30:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7d34:	e025      	b.n	d7d82 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7d36:	f7ff fd1b 	bl	d7770 <__errno>
   d7d3a:	6803      	ldr	r3, [r0, #0]
   d7d3c:	2b0b      	cmp	r3, #11
   d7d3e:	d020      	beq.n	d7d82 <_ZN9TCPClient9availableEv+0x9e>
   d7d40:	f7ff fd16 	bl	d7770 <__errno>
   d7d44:	6803      	ldr	r3, [r0, #0]
   d7d46:	2b0b      	cmp	r3, #11
   d7d48:	d01b      	beq.n	d7d82 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7d4a:	2320      	movs	r3, #32
   d7d4c:	2500      	movs	r5, #0
   d7d4e:	9302      	str	r3, [sp, #8]
   d7d50:	9503      	str	r5, [sp, #12]
   d7d52:	f7ff fd0d 	bl	d7770 <__errno>
   d7d56:	6803      	ldr	r3, [r0, #0]
   d7d58:	9301      	str	r3, [sp, #4]
   d7d5a:	4b0e      	ldr	r3, [pc, #56]	; (d7d94 <_ZN9TCPClient9availableEv+0xb0>)
   d7d5c:	9300      	str	r3, [sp, #0]
   d7d5e:	aa02      	add	r2, sp, #8
   d7d60:	462b      	mov	r3, r5
   d7d62:	490d      	ldr	r1, [pc, #52]	; (d7d98 <_ZN9TCPClient9availableEv+0xb4>)
   d7d64:	2032      	movs	r0, #50	; 0x32
   d7d66:	f7ff fc45 	bl	d75f4 <log_message>
                    sock_close(d_->sock);
   d7d6a:	6963      	ldr	r3, [r4, #20]
   d7d6c:	6818      	ldr	r0, [r3, #0]
   d7d6e:	f7ff fa79 	bl	d7264 <sock_close>
   d7d72:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7d74:	f04f 32ff 	mov.w	r2, #4294967295
   d7d78:	601a      	str	r2, [r3, #0]
   d7d7a:	e002      	b.n	d7d82 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7d7c:	f7ff ff18 	bl	d7bb0 <_ZN9TCPClient12flush_bufferEv>
   d7d80:	e7bb      	b.n	d7cfa <_ZN9TCPClient9availableEv+0x16>
   d7d82:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7d84:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7d88:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7d8c:	1a18      	subs	r0, r3, r0
}
   d7d8e:	b00b      	add	sp, #44	; 0x2c
   d7d90:	bd30      	pop	{r4, r5, pc}
   d7d92:	bf00      	nop
   d7d94:	000da6f7 	.word	0x000da6f7
   d7d98:	000da6f0 	.word	0x000da6f0

000d7d9c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7d9c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7d9e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7da0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7da2:	6001      	str	r1, [r0, #0]
   d7da4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7da8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7dac:	3088      	adds	r0, #136	; 0x88
   d7dae:	f000 fb37 	bl	d8420 <_ZN9IPAddressC1Ev>
}
   d7db2:	4620      	mov	r0, r4
   d7db4:	bd10      	pop	{r4, pc}
	...

000d7db8 <_ZN9TCPClientC1Ei>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7dbc:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7dbe:	2300      	movs	r3, #0
   d7dc0:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7dc2:	4a14      	ldr	r2, [pc, #80]	; (d7e14 <_ZN9TCPClientC1Ei+0x5c>)
   d7dc4:	6043      	str	r3, [r0, #4]
   d7dc6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7dc8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7dca:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7dcc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7dce:	20a0      	movs	r0, #160	; 0xa0
   d7dd0:	460e      	mov	r6, r1
   d7dd2:	f7fc f962 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7dd6:	4605      	mov	r5, r0
   d7dd8:	b110      	cbz	r0, d7de0 <_ZN9TCPClientC1Ei+0x28>
   d7dda:	4631      	mov	r1, r6
   d7ddc:	f7ff ffde 	bl	d7d9c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7de0:	2014      	movs	r0, #20
   d7de2:	f7fc f95a 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7de6:	4603      	mov	r3, r0
   d7de8:	b128      	cbz	r0, d7df6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7dea:	2201      	movs	r2, #1
   d7dec:	6042      	str	r2, [r0, #4]
   d7dee:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7df0:	4a09      	ldr	r2, [pc, #36]	; (d7e18 <_ZN9TCPClientC1Ei+0x60>)
   d7df2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7df4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7df6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7df8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7dfa:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7dfc:	b128      	cbz	r0, d7e0a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7dfe:	6843      	ldr	r3, [r0, #4]
   d7e00:	3b01      	subs	r3, #1
   d7e02:	6043      	str	r3, [r0, #4]
   d7e04:	b90b      	cbnz	r3, d7e0a <_ZN9TCPClientC1Ei+0x52>
   d7e06:	f7ff fddf 	bl	d79c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	f7ff fed0 	bl	d7bb0 <_ZN9TCPClient12flush_bufferEv>
}
   d7e10:	4620      	mov	r0, r4
   d7e12:	bd70      	pop	{r4, r5, r6, pc}
   d7e14:	000da6ac 	.word	0x000da6ac
   d7e18:	000da690 	.word	0x000da690

000d7e1c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7e1c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7e1e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7e22:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7e24:	f7ff ffc8 	bl	d7db8 <_ZN9TCPClientC1Ei>
}
   d7e28:	4620      	mov	r0, r4
   d7e2a:	bd10      	pop	{r4, pc}

000d7e2c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7e2c:	b510      	push	{r4, lr}
   d7e2e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7e30:	6800      	ldr	r0, [r0, #0]
   d7e32:	2800      	cmp	r0, #0
   d7e34:	db01      	blt.n	d7e3a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7e36:	f7ff fa15 	bl	d7264 <sock_close>
    }
}
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	bd10      	pop	{r4, pc}

000d7e3e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7e3e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7e40:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7e42:	4620      	mov	r0, r4
   d7e44:	f7ff fff2 	bl	d7e2c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7e48:	b124      	cbz	r4, d7e54 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7e50:	f7fc b927 	b.w	d40a2 <_ZdlPv>
   d7e54:	bd10      	pop	{r4, pc}

000d7e56 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7e56:	2200      	movs	r2, #0
   d7e58:	4611      	mov	r1, r2
   d7e5a:	6840      	ldr	r0, [r0, #4]
   d7e5c:	f7ff bc1a 	b.w	d7694 <network_listening>

000d7e60 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7e60:	2200      	movs	r2, #0
   d7e62:	4611      	mov	r1, r2
   d7e64:	6840      	ldr	r0, [r0, #4]
   d7e66:	f7ff bc25 	b.w	d76b4 <network_get_listen_timeout>

000d7e6a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7e6a:	2200      	movs	r2, #0
   d7e6c:	6840      	ldr	r0, [r0, #4]
   d7e6e:	f7ff bc19 	b.w	d76a4 <network_set_listen_timeout>

000d7e72 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e72:	2200      	movs	r2, #0
   d7e74:	f081 0101 	eor.w	r1, r1, #1
   d7e78:	6840      	ldr	r0, [r0, #4]
   d7e7a:	f7ff bc03 	b.w	d7684 <network_listen>

000d7e7e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7e7e:	2300      	movs	r3, #0
   d7e80:	461a      	mov	r2, r3
   d7e82:	2101      	movs	r1, #1
   d7e84:	6840      	ldr	r0, [r0, #4]
   d7e86:	f7ff bbf5 	b.w	d7674 <network_off>

000d7e8a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7e8a:	2300      	movs	r3, #0
   d7e8c:	461a      	mov	r2, r3
   d7e8e:	4619      	mov	r1, r3
   d7e90:	6840      	ldr	r0, [r0, #4]
   d7e92:	f7ff bbe7 	b.w	d7664 <network_on>

000d7e96 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7e96:	2200      	movs	r2, #0
   d7e98:	4611      	mov	r1, r2
   d7e9a:	6840      	ldr	r0, [r0, #4]
   d7e9c:	f7ff bbda 	b.w	d7654 <network_ready>

000d7ea0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7ea0:	2200      	movs	r2, #0
   d7ea2:	4611      	mov	r1, r2
   d7ea4:	6840      	ldr	r0, [r0, #4]
   d7ea6:	f7ff bbc5 	b.w	d7634 <network_connecting>

000d7eaa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7eaa:	2200      	movs	r2, #0
   d7eac:	2102      	movs	r1, #2
   d7eae:	6840      	ldr	r0, [r0, #4]
   d7eb0:	f7ff bbc8 	b.w	d7644 <network_disconnect>

000d7eb4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7eb4:	2300      	movs	r3, #0
   d7eb6:	461a      	mov	r2, r3
   d7eb8:	6840      	ldr	r0, [r0, #4]
   d7eba:	f7ff bbb3 	b.w	d7624 <network_connect>

000d7ebe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7ebe:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ec0:	4605      	mov	r5, r0
   d7ec2:	b188      	cbz	r0, d7ee8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7ec4:	6804      	ldr	r4, [r0, #0]
   d7ec6:	b14c      	cbz	r4, d7edc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7ec8:	68a3      	ldr	r3, [r4, #8]
   d7eca:	b11b      	cbz	r3, d7ed4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7ecc:	2203      	movs	r2, #3
   d7ece:	4621      	mov	r1, r4
   d7ed0:	4620      	mov	r0, r4
   d7ed2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ed4:	2110      	movs	r1, #16
   d7ed6:	4620      	mov	r0, r4
   d7ed8:	f001 f80a 	bl	d8ef0 <_ZdlPvj>
   d7edc:	4628      	mov	r0, r5
   d7ede:	2114      	movs	r1, #20
      }
   d7ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ee4:	f001 b804 	b.w	d8ef0 <_ZdlPvj>
   d7ee8:	bd38      	pop	{r3, r4, r5, pc}

000d7eea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7eea:	b110      	cbz	r0, d7ef2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7eec:	6803      	ldr	r3, [r0, #0]
   d7eee:	685b      	ldr	r3, [r3, #4]
   d7ef0:	4718      	bx	r3
   d7ef2:	4770      	bx	lr

000d7ef4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7ef4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7ef6:	6803      	ldr	r3, [r0, #0]
   d7ef8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7efa:	b1bb      	cbz	r3, d7f2c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7efc:	6858      	ldr	r0, [r3, #4]
   d7efe:	f7ff faa1 	bl	d7444 <os_thread_is_current>
   d7f02:	b978      	cbnz	r0, d7f24 <_ZN6ThreadD1Ev+0x30>
   d7f04:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7f06:	7c5a      	ldrb	r2, [r3, #17]
   d7f08:	b912      	cbnz	r2, d7f10 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7f0a:	6858      	ldr	r0, [r3, #4]
   d7f0c:	f7ff faa2 	bl	d7454 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7f10:	6823      	ldr	r3, [r4, #0]
   d7f12:	6858      	ldr	r0, [r3, #4]
   d7f14:	f7ff faa6 	bl	d7464 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f18:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7f1a:	2300      	movs	r3, #0
   d7f1c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7f1e:	b128      	cbz	r0, d7f2c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7f20:	f7ff ffcd 	bl	d7ebe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f24:	6820      	ldr	r0, [r4, #0]
   d7f26:	b108      	cbz	r0, d7f2c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7f28:	f7ff ffc9 	bl	d7ebe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7f2c:	4620      	mov	r0, r4
   d7f2e:	bd10      	pop	{r4, pc}

000d7f30 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7f30:	b538      	push	{r3, r4, r5, lr}
   d7f32:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f34:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7f38:	b108      	cbz	r0, d7f3e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7f3a:	f7fc f8b4 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7f3e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7f42:	b108      	cbz	r0, d7f48 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7f44:	f7ff fa9e 	bl	d7484 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f48:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7f4c:	b135      	cbz	r5, d7f5c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7f4e:	4628      	mov	r0, r5
   d7f50:	f7ff ffd0 	bl	d7ef4 <_ZN6ThreadD1Ev>
   d7f54:	2104      	movs	r1, #4
   d7f56:	4628      	mov	r0, r5
   d7f58:	f000 ffca 	bl	d8ef0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f5c:	6820      	ldr	r0, [r4, #0]
   d7f5e:	b108      	cbz	r0, d7f64 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7f60:	f7ff ffc3 	bl	d7eea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7f64:	4620      	mov	r0, r4
   d7f66:	bd38      	pop	{r3, r4, r5, pc}

000d7f68 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7f68:	b510      	push	{r4, lr}
   d7f6a:	4b04      	ldr	r3, [pc, #16]	; (d7f7c <_ZN5spark9MeshClassD1Ev+0x14>)
   d7f6c:	4604      	mov	r4, r0
   d7f6e:	f840 3b08 	str.w	r3, [r0], #8
   d7f72:	f7ff ffdd 	bl	d7f30 <_ZN5spark11MeshPublishD1Ev>
   d7f76:	4620      	mov	r0, r4
   d7f78:	bd10      	pop	{r4, pc}
   d7f7a:	bf00      	nop
   d7f7c:	000da710 	.word	0x000da710

000d7f80 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7f80:	b538      	push	{r3, r4, r5, lr}
   d7f82:	4c0e      	ldr	r4, [pc, #56]	; (d7fbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7f84:	4b0e      	ldr	r3, [pc, #56]	; (d7fc0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7f86:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7f88:	2500      	movs	r5, #0
   d7f8a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7f8c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7f90:	6063      	str	r3, [r4, #4]
   d7f92:	60a5      	str	r5, [r4, #8]
   d7f94:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7f98:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7f9c:	f7ff fa6a 	bl	d7474 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7fa0:	4b08      	ldr	r3, [pc, #32]	; (d7fc4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7fa2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7fa6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7faa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7fac:	4620      	mov	r0, r4
   d7fae:	4a06      	ldr	r2, [pc, #24]	; (d7fc8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7fb0:	4906      	ldr	r1, [pc, #24]	; (d7fcc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7fb6:	f000 bf8d 	b.w	d8ed4 <__aeabi_atexit>
   d7fba:	bf00      	nop
   d7fbc:	2003e330 	.word	0x2003e330
   d7fc0:	000da65c 	.word	0x000da65c
   d7fc4:	000da710 	.word	0x000da710
   d7fc8:	2003db90 	.word	0x2003db90
   d7fcc:	000d7f69 	.word	0x000d7f69

000d7fd0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7fd0:	b510      	push	{r4, lr}
   d7fd2:	4604      	mov	r4, r0
{
    _spi = spi;
   d7fd4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7fd6:	4608      	mov	r0, r1
   d7fd8:	f7ff fa7c 	bl	d74d4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7fdc:	2300      	movs	r3, #0
   d7fde:	6063      	str	r3, [r4, #4]
}
   d7fe0:	4620      	mov	r0, r4
   d7fe2:	bd10      	pop	{r4, pc}

000d7fe4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7fe4:	7800      	ldrb	r0, [r0, #0]
   d7fe6:	f7ff ba7d 	b.w	d74e4 <HAL_SPI_Is_Enabled>

000d7fea <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7fea:	2200      	movs	r2, #0
   d7fec:	4611      	mov	r1, r2
   d7fee:	6840      	ldr	r0, [r0, #4]
   d7ff0:	f7ff bb30 	b.w	d7654 <network_ready>

000d7ff4 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7ff4:	2200      	movs	r2, #0
   d7ff6:	4611      	mov	r1, r2
   d7ff8:	6840      	ldr	r0, [r0, #4]
   d7ffa:	f7ff bb4b 	b.w	d7694 <network_listening>

000d7ffe <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ffe:	2200      	movs	r2, #0
   d8000:	4611      	mov	r1, r2
   d8002:	6840      	ldr	r0, [r0, #4]
   d8004:	f7ff bb56 	b.w	d76b4 <network_get_listen_timeout>

000d8008 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8008:	2200      	movs	r2, #0
   d800a:	6840      	ldr	r0, [r0, #4]
   d800c:	f7ff bb4a 	b.w	d76a4 <network_set_listen_timeout>

000d8010 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8010:	2200      	movs	r2, #0
   d8012:	f081 0101 	eor.w	r1, r1, #1
   d8016:	6840      	ldr	r0, [r0, #4]
   d8018:	f7ff bb34 	b.w	d7684 <network_listen>

000d801c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d801c:	2300      	movs	r3, #0
   d801e:	461a      	mov	r2, r3
   d8020:	4619      	mov	r1, r3
   d8022:	6840      	ldr	r0, [r0, #4]
   d8024:	f7ff bb26 	b.w	d7674 <network_off>

000d8028 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8028:	2300      	movs	r3, #0
   d802a:	461a      	mov	r2, r3
   d802c:	4619      	mov	r1, r3
   d802e:	6840      	ldr	r0, [r0, #4]
   d8030:	f7ff bb18 	b.w	d7664 <network_on>

000d8034 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8034:	2200      	movs	r2, #0
   d8036:	4611      	mov	r1, r2
   d8038:	6840      	ldr	r0, [r0, #4]
   d803a:	f7ff bafb 	b.w	d7634 <network_connecting>

000d803e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d803e:	2200      	movs	r2, #0
   d8040:	2102      	movs	r1, #2
   d8042:	6840      	ldr	r0, [r0, #4]
   d8044:	f7ff bafe 	b.w	d7644 <network_disconnect>

000d8048 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8048:	2300      	movs	r3, #0
   d804a:	461a      	mov	r2, r3
   d804c:	6840      	ldr	r0, [r0, #4]
   d804e:	f7ff bae9 	b.w	d7624 <network_connect>
	...

000d8054 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8054:	4b02      	ldr	r3, [pc, #8]	; (d8060 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8056:	2204      	movs	r2, #4
   d8058:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d805a:	4a02      	ldr	r2, [pc, #8]	; (d8064 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d805c:	601a      	str	r2, [r3, #0]
   d805e:	4770      	bx	lr
   d8060:	2003e504 	.word	0x2003e504
   d8064:	000da744 	.word	0x000da744

000d8068 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8068:	4770      	bx	lr

000d806a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d806a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d806c:	4606      	mov	r6, r0
   d806e:	4615      	mov	r5, r2
   d8070:	460c      	mov	r4, r1
   d8072:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8074:	42bc      	cmp	r4, r7
   d8076:	d006      	beq.n	d8086 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8078:	6833      	ldr	r3, [r6, #0]
   d807a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d807e:	689b      	ldr	r3, [r3, #8]
   d8080:	4630      	mov	r0, r6
   d8082:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8084:	e7f6      	b.n	d8074 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8086:	4628      	mov	r0, r5
   d8088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d808a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d808a:	2200      	movs	r2, #0
   d808c:	7c00      	ldrb	r0, [r0, #16]
   d808e:	f7ff b929 	b.w	d72e4 <HAL_I2C_Write_Data>

000d8092 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8092:	2100      	movs	r1, #0
   d8094:	7c00      	ldrb	r0, [r0, #16]
   d8096:	f7ff b92d 	b.w	d72f4 <HAL_I2C_Available_Data>

000d809a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d809a:	2100      	movs	r1, #0
   d809c:	7c00      	ldrb	r0, [r0, #16]
   d809e:	f7ff b931 	b.w	d7304 <HAL_I2C_Read_Data>

000d80a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d80a2:	2100      	movs	r1, #0
   d80a4:	7c00      	ldrb	r0, [r0, #16]
   d80a6:	f7ff b935 	b.w	d7314 <HAL_I2C_Peek_Data>

000d80aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d80aa:	2100      	movs	r1, #0
   d80ac:	7c00      	ldrb	r0, [r0, #16]
   d80ae:	f7ff b939 	b.w	d7324 <HAL_I2C_Flush_Data>

000d80b2 <_ZN7TwoWireD0Ev>:
   d80b2:	b510      	push	{r4, lr}
   d80b4:	2114      	movs	r1, #20
   d80b6:	4604      	mov	r4, r0
   d80b8:	f000 ff1a 	bl	d8ef0 <_ZdlPvj>
   d80bc:	4620      	mov	r0, r4
   d80be:	bd10      	pop	{r4, pc}

000d80c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d80c0:	b510      	push	{r4, lr}
   d80c2:	4604      	mov	r4, r0
   d80c4:	2300      	movs	r3, #0
   d80c6:	6063      	str	r3, [r4, #4]
   d80c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d80cc:	60a3      	str	r3, [r4, #8]
   d80ce:	4b04      	ldr	r3, [pc, #16]	; (d80e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d80d0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d80d2:	4608      	mov	r0, r1
   d80d4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d80d6:	4611      	mov	r1, r2
   d80d8:	f7ff f944 	bl	d7364 <HAL_I2C_Init>
}
   d80dc:	4620      	mov	r0, r4
   d80de:	bd10      	pop	{r4, pc}
   d80e0:	000da778 	.word	0x000da778

000d80e4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d80e4:	2300      	movs	r3, #0
   d80e6:	461a      	mov	r2, r3
   d80e8:	4619      	mov	r1, r3
   d80ea:	7c00      	ldrb	r0, [r0, #16]
   d80ec:	f7ff b8e2 	b.w	d72b4 <HAL_I2C_Begin>

000d80f0 <_ZN7TwoWire5beginEh>:
}

void TwoWire::begin(uint8_t address)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d80f0:	460a      	mov	r2, r1
   d80f2:	2300      	movs	r3, #0
   d80f4:	2101      	movs	r1, #1
   d80f6:	7c00      	ldrb	r0, [r0, #16]
   d80f8:	f7ff b8dc 	b.w	d72b4 <HAL_I2C_Begin>

000d80fc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d80fc:	b570      	push	{r4, r5, r6, lr}
   d80fe:	460c      	mov	r4, r1
   d8100:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8102:	2514      	movs	r5, #20
   d8104:	4606      	mov	r6, r0
   d8106:	462a      	mov	r2, r5
   d8108:	2100      	movs	r1, #0
   d810a:	a801      	add	r0, sp, #4
   d810c:	f001 fdf9 	bl	d9d02 <memset>
   d8110:	7823      	ldrb	r3, [r4, #0]
   d8112:	f88d 3008 	strb.w	r3, [sp, #8]
   d8116:	6863      	ldr	r3, [r4, #4]
   d8118:	9303      	str	r3, [sp, #12]
   d811a:	68e3      	ldr	r3, [r4, #12]
   d811c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d811e:	2200      	movs	r2, #0
   d8120:	7a23      	ldrb	r3, [r4, #8]
   d8122:	7c30      	ldrb	r0, [r6, #16]
   d8124:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8128:	a901      	add	r1, sp, #4
   d812a:	9305      	str	r3, [sp, #20]
   d812c:	f7ff f922 	bl	d7374 <HAL_I2C_Request_Data_Ex>
}
   d8130:	b006      	add	sp, #24
   d8132:	bd70      	pop	{r4, r5, r6, pc}

000d8134 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8136:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8138:	f88d 1000 	strb.w	r1, [sp]
   d813c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8140:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8142:	bf18      	it	ne
   d8144:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8146:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8148:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d814a:	f88d 3008 	strb.w	r3, [sp, #8]
   d814e:	f7ff ffd5 	bl	d80fc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8152:	b005      	add	sp, #20
   d8154:	f85d fb04 	ldr.w	pc, [sp], #4

000d8158 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d8158:	2301      	movs	r3, #1
   d815a:	f7ff bfeb 	b.w	d8134 <_ZN7TwoWire11requestFromEhjh>

000d815e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d815e:	2200      	movs	r2, #0
   d8160:	7c00      	ldrb	r0, [r0, #16]
   d8162:	f7ff b8af 	b.w	d72c4 <HAL_I2C_Begin_Transmission>

000d8166 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8166:	2200      	movs	r2, #0
   d8168:	7c00      	ldrb	r0, [r0, #16]
   d816a:	f7ff b8b3 	b.w	d72d4 <HAL_I2C_End_Transmission>

000d816e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d816e:	2101      	movs	r1, #1
   d8170:	f7ff bff9 	b.w	d8166 <_ZN7TwoWire15endTransmissionEh>

000d8174 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  HAL_I2C_Set_Callback_On_Receive(_i2c, function, NULL);
   d8174:	2200      	movs	r2, #0
   d8176:	7c00      	ldrb	r0, [r0, #16]
   d8178:	f7ff b8e4 	b.w	d7344 <HAL_I2C_Set_Callback_On_Receive>

000d817c <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
   d817c:	2200      	movs	r2, #0
   d817e:	7c00      	ldrb	r0, [r0, #16]
   d8180:	f7ff b8e8 	b.w	d7354 <HAL_I2C_Set_Callback_On_Request>

000d8184 <_ZN7TwoWire9isEnabledEv>:
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8184:	2100      	movs	r1, #0
   d8186:	7c00      	ldrb	r0, [r0, #16]
   d8188:	f7ff b8d4 	b.w	d7334 <HAL_I2C_Is_Enabled>

000d818c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d818c:	4770      	bx	lr

000d818e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d818e:	7441      	strb	r1, [r0, #17]
   d8190:	4770      	bx	lr

000d8192 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8192:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8194:	7c00      	ldrb	r0, [r0, #16]
   d8196:	f7ff f92d 	bl	d73f4 <HAL_USART_Available_Data_For_Write>
}
   d819a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d819e:	bd08      	pop	{r3, pc}

000d81a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d81a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d81a2:	7c00      	ldrb	r0, [r0, #16]
   d81a4:	f7ff f8fe 	bl	d73a4 <HAL_USART_Available_Data>
}
   d81a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d81ac:	bd08      	pop	{r3, pc}

000d81ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d81ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d81b0:	7c00      	ldrb	r0, [r0, #16]
   d81b2:	f7ff f907 	bl	d73c4 <HAL_USART_Peek_Data>
}
   d81b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81ba:	bf28      	it	cs
   d81bc:	f04f 30ff 	movcs.w	r0, #4294967295
   d81c0:	bd08      	pop	{r3, pc}

000d81c2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d81c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d81c4:	7c00      	ldrb	r0, [r0, #16]
   d81c6:	f7ff f8f5 	bl	d73b4 <HAL_USART_Read_Data>
}
   d81ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81ce:	bf28      	it	cs
   d81d0:	f04f 30ff 	movcs.w	r0, #4294967295
   d81d4:	bd08      	pop	{r3, pc}

000d81d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d81d6:	7c00      	ldrb	r0, [r0, #16]
   d81d8:	f7ff b8fc 	b.w	d73d4 <HAL_USART_Flush_Data>

000d81dc <_ZN11USARTSerialD0Ev>:
   d81dc:	b510      	push	{r4, lr}
   d81de:	2114      	movs	r1, #20
   d81e0:	4604      	mov	r4, r0
   d81e2:	f000 fe85 	bl	d8ef0 <_ZdlPvj>
   d81e6:	4620      	mov	r0, r4
   d81e8:	bd10      	pop	{r4, pc}

000d81ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d81ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d81ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d81ee:	4604      	mov	r4, r0
   d81f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d81f2:	b925      	cbnz	r5, d81fe <_ZN11USARTSerial5writeEh+0x14>
   d81f4:	7c00      	ldrb	r0, [r0, #16]
   d81f6:	f7ff f8fd 	bl	d73f4 <HAL_USART_Available_Data_For_Write>
   d81fa:	2800      	cmp	r0, #0
   d81fc:	dd05      	ble.n	d820a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d81fe:	4631      	mov	r1, r6
   d8200:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8206:	f7ff b8c5 	b.w	d7394 <HAL_USART_Write_Data>
  }
  return 0;
}
   d820a:	4628      	mov	r0, r5
   d820c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8210 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8210:	b510      	push	{r4, lr}
   d8212:	4604      	mov	r4, r0
   d8214:	4608      	mov	r0, r1
   d8216:	4611      	mov	r1, r2
   d8218:	2200      	movs	r2, #0
   d821a:	6062      	str	r2, [r4, #4]
   d821c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8220:	60a2      	str	r2, [r4, #8]
   d8222:	4a05      	ldr	r2, [pc, #20]	; (d8238 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8224:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8226:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8228:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d822a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d822c:	461a      	mov	r2, r3
   d822e:	f7ff f8a9 	bl	d7384 <HAL_USART_Init>
}
   d8232:	4620      	mov	r0, r4
   d8234:	bd10      	pop	{r4, pc}
   d8236:	bf00      	nop
   d8238:	000da7a0 	.word	0x000da7a0

000d823c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d823c:	2300      	movs	r3, #0
   d823e:	7c00      	ldrb	r0, [r0, #16]
   d8240:	f7ff b8e0 	b.w	d7404 <HAL_USART_BeginConfig>

000d8244 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8244:	2200      	movs	r2, #0
   d8246:	f7ff bff9 	b.w	d823c <_ZN11USARTSerial5beginEmm>

000d824a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d824a:	7c00      	ldrb	r0, [r0, #16]
   d824c:	f7ff b8ca 	b.w	d73e4 <HAL_USART_Is_Enabled>

000d8250 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8250:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8252:	4d0c      	ldr	r5, [pc, #48]	; (d8284 <_Z22__fetch_global_Serial1v+0x34>)
   d8254:	6829      	ldr	r1, [r5, #0]
   d8256:	f011 0401 	ands.w	r4, r1, #1
   d825a:	d111      	bne.n	d8280 <_Z22__fetch_global_Serial1v+0x30>
   d825c:	4628      	mov	r0, r5
   d825e:	f7fb ff24 	bl	d40aa <__cxa_guard_acquire>
   d8262:	b168      	cbz	r0, d8280 <_Z22__fetch_global_Serial1v+0x30>
   d8264:	4a08      	ldr	r2, [pc, #32]	; (d8288 <_Z22__fetch_global_Serial1v+0x38>)
   d8266:	4b09      	ldr	r3, [pc, #36]	; (d828c <_Z22__fetch_global_Serial1v+0x3c>)
   d8268:	4809      	ldr	r0, [pc, #36]	; (d8290 <_Z22__fetch_global_Serial1v+0x40>)
   d826a:	4621      	mov	r1, r4
   d826c:	f7ff ffd0 	bl	d8210 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8270:	4628      	mov	r0, r5
   d8272:	f7fb ff1f 	bl	d40b4 <__cxa_guard_release>
   d8276:	4a07      	ldr	r2, [pc, #28]	; (d8294 <_Z22__fetch_global_Serial1v+0x44>)
   d8278:	4907      	ldr	r1, [pc, #28]	; (d8298 <_Z22__fetch_global_Serial1v+0x48>)
   d827a:	4805      	ldr	r0, [pc, #20]	; (d8290 <_Z22__fetch_global_Serial1v+0x40>)
   d827c:	f000 fe2a 	bl	d8ed4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8280:	4803      	ldr	r0, [pc, #12]	; (d8290 <_Z22__fetch_global_Serial1v+0x40>)
   d8282:	bd38      	pop	{r3, r4, r5, pc}
   d8284:	2003e5a4 	.word	0x2003e5a4
   d8288:	2003e5a8 	.word	0x2003e5a8
   d828c:	2003e520 	.word	0x2003e520
   d8290:	2003e50c 	.word	0x2003e50c
   d8294:	2003db90 	.word	0x2003db90
   d8298:	000d818d 	.word	0x000d818d

000d829c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d829c:	7441      	strb	r1, [r0, #17]
   d829e:	4770      	bx	lr

000d82a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d82a0:	4770      	bx	lr

000d82a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d82a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d82a4:	2100      	movs	r1, #0
   d82a6:	7c00      	ldrb	r0, [r0, #16]
   d82a8:	f7fe ffbc 	bl	d7224 <HAL_USB_USART_Receive_Data>
}
   d82ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82b0:	bf28      	it	cs
   d82b2:	f04f 30ff 	movcs.w	r0, #4294967295
   d82b6:	bd08      	pop	{r3, pc}

000d82b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d82b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d82ba:	2101      	movs	r1, #1
   d82bc:	7c00      	ldrb	r0, [r0, #16]
   d82be:	f7fe ffb1 	bl	d7224 <HAL_USB_USART_Receive_Data>
}
   d82c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82c6:	bf28      	it	cs
   d82c8:	f04f 30ff 	movcs.w	r0, #4294967295
   d82cc:	bd08      	pop	{r3, pc}

000d82ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d82ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d82d0:	7c00      	ldrb	r0, [r0, #16]
   d82d2:	f7fe ff9f 	bl	d7214 <HAL_USB_USART_Available_Data_For_Write>
}
   d82d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82da:	bd08      	pop	{r3, pc}

000d82dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d82dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d82de:	7c00      	ldrb	r0, [r0, #16]
   d82e0:	f7fe ff90 	bl	d7204 <HAL_USB_USART_Available_Data>
}
   d82e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82e8:	bd08      	pop	{r3, pc}

000d82ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d82ea:	7c00      	ldrb	r0, [r0, #16]
   d82ec:	f7fe bfaa 	b.w	d7244 <HAL_USB_USART_Flush_Data>

000d82f0 <_ZN9USBSerialD0Ev>:
   d82f0:	b510      	push	{r4, lr}
   d82f2:	2114      	movs	r1, #20
   d82f4:	4604      	mov	r4, r0
   d82f6:	f000 fdfb 	bl	d8ef0 <_ZdlPvj>
   d82fa:	4620      	mov	r0, r4
   d82fc:	bd10      	pop	{r4, pc}

000d82fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d82fe:	b538      	push	{r3, r4, r5, lr}
   d8300:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8302:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8304:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8306:	f7fe ff85 	bl	d7214 <HAL_USB_USART_Available_Data_For_Write>
   d830a:	2800      	cmp	r0, #0
   d830c:	dc01      	bgt.n	d8312 <_ZN9USBSerial5writeEh+0x14>
   d830e:	7c60      	ldrb	r0, [r4, #17]
   d8310:	b128      	cbz	r0, d831e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8312:	4629      	mov	r1, r5
   d8314:	7c20      	ldrb	r0, [r4, #16]
   d8316:	f7fe ff8d 	bl	d7234 <HAL_USB_USART_Send_Data>
   d831a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d831e:	bd38      	pop	{r3, r4, r5, pc}

000d8320 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8320:	b510      	push	{r4, lr}
   d8322:	4604      	mov	r4, r0
   d8324:	2300      	movs	r3, #0
   d8326:	6063      	str	r3, [r4, #4]
   d8328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d832c:	60a3      	str	r3, [r4, #8]
   d832e:	4b05      	ldr	r3, [pc, #20]	; (d8344 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8330:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8332:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8334:	4608      	mov	r0, r1
{
  _serial = serial;
   d8336:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8338:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d833a:	4611      	mov	r1, r2
   d833c:	f7fe ff52 	bl	d71e4 <HAL_USB_USART_Init>
}
   d8340:	4620      	mov	r0, r4
   d8342:	bd10      	pop	{r4, pc}
   d8344:	000da7d0 	.word	0x000da7d0

000d8348 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8348:	2200      	movs	r2, #0
   d834a:	7c00      	ldrb	r0, [r0, #16]
   d834c:	f7fe bf52 	b.w	d71f4 <HAL_USB_USART_Begin>

000d8350 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8350:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8352:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8354:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8356:	2100      	movs	r1, #0
   d8358:	f001 fcd3 	bl	d9d02 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d835c:	4620      	mov	r0, r4
   d835e:	bd10      	pop	{r4, pc}

000d8360 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8360:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8362:	4d0e      	ldr	r5, [pc, #56]	; (d839c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8364:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8366:	a801      	add	r0, sp, #4
   d8368:	f7ff fff2 	bl	d8350 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d836c:	6829      	ldr	r1, [r5, #0]
   d836e:	f011 0401 	ands.w	r4, r1, #1
   d8372:	d110      	bne.n	d8396 <_Z16_fetch_usbserialv+0x36>
   d8374:	4628      	mov	r0, r5
   d8376:	f7fb fe98 	bl	d40aa <__cxa_guard_acquire>
   d837a:	b160      	cbz	r0, d8396 <_Z16_fetch_usbserialv+0x36>
   d837c:	aa01      	add	r2, sp, #4
   d837e:	4621      	mov	r1, r4
   d8380:	4807      	ldr	r0, [pc, #28]	; (d83a0 <_Z16_fetch_usbserialv+0x40>)
   d8382:	f7ff ffcd 	bl	d8320 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8386:	4628      	mov	r0, r5
   d8388:	f7fb fe94 	bl	d40b4 <__cxa_guard_release>
   d838c:	4a05      	ldr	r2, [pc, #20]	; (d83a4 <_Z16_fetch_usbserialv+0x44>)
   d838e:	4906      	ldr	r1, [pc, #24]	; (d83a8 <_Z16_fetch_usbserialv+0x48>)
   d8390:	4803      	ldr	r0, [pc, #12]	; (d83a0 <_Z16_fetch_usbserialv+0x40>)
   d8392:	f000 fd9f 	bl	d8ed4 <__aeabi_atexit>
	return _usbserial;
}
   d8396:	4802      	ldr	r0, [pc, #8]	; (d83a0 <_Z16_fetch_usbserialv+0x40>)
   d8398:	b007      	add	sp, #28
   d839a:	bd30      	pop	{r4, r5, pc}
   d839c:	2003e62c 	.word	0x2003e62c
   d83a0:	2003e630 	.word	0x2003e630
   d83a4:	2003db90 	.word	0x2003db90
   d83a8:	000d82a1 	.word	0x000d82a1

000d83ac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d83ac:	4770      	bx	lr

000d83ae <_ZN9IPAddressD0Ev>:
   d83ae:	b510      	push	{r4, lr}
   d83b0:	2118      	movs	r1, #24
   d83b2:	4604      	mov	r4, r0
   d83b4:	f000 fd9c 	bl	d8ef0 <_ZdlPvj>
   d83b8:	4620      	mov	r0, r4
   d83ba:	bd10      	pop	{r4, pc}

000d83bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d83bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d83be:	7d03      	ldrb	r3, [r0, #20]
   d83c0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d83c2:	b08d      	sub	sp, #52	; 0x34
   d83c4:	460e      	mov	r6, r1
   d83c6:	f100 0704 	add.w	r7, r0, #4
   d83ca:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d83ce:	d002      	beq.n	d83d6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d83d0:	f100 0508 	add.w	r5, r0, #8
   d83d4:	e018      	b.n	d8408 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d83d6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d83d8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d83da:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d83de:	232f      	movs	r3, #47	; 0x2f
   d83e0:	462a      	mov	r2, r5
   d83e2:	200a      	movs	r0, #10
   d83e4:	f7ff f816 	bl	d7414 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d83e8:	4628      	mov	r0, r5
   d83ea:	f001 fcc5 	bl	d9d78 <strlen>
   d83ee:	6833      	ldr	r3, [r6, #0]
   d83f0:	4602      	mov	r2, r0
   d83f2:	68db      	ldr	r3, [r3, #12]
   d83f4:	4629      	mov	r1, r5
   d83f6:	4630      	mov	r0, r6
   d83f8:	4798      	blx	r3
   d83fa:	e00f      	b.n	d841c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d83fc:	b124      	cbz	r4, d8408 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d83fe:	212e      	movs	r1, #46	; 0x2e
   d8400:	4630      	mov	r0, r6
   d8402:	f000 f9d8 	bl	d87b6 <_ZN5Print5printEc>
   d8406:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8408:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d840c:	220a      	movs	r2, #10
   d840e:	4630      	mov	r0, r6
   d8410:	f000 f9e0 	bl	d87d4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8414:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8416:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8418:	d1f0      	bne.n	d83fc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d841a:	4620      	mov	r0, r4
    }
    return n;
}
   d841c:	b00d      	add	sp, #52	; 0x34
   d841e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8420 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8420:	b510      	push	{r4, lr}
   d8422:	4b05      	ldr	r3, [pc, #20]	; (d8438 <_ZN9IPAddressC1Ev+0x18>)
   d8424:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8426:	2211      	movs	r2, #17
   d8428:	f840 3b04 	str.w	r3, [r0], #4
   d842c:	2100      	movs	r1, #0
   d842e:	f001 fc68 	bl	d9d02 <memset>
{
    clear();
}
   d8432:	4620      	mov	r0, r4
   d8434:	bd10      	pop	{r4, pc}
   d8436:	bf00      	nop
   d8438:	000da800 	.word	0x000da800

000d843c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d843c:	4603      	mov	r3, r0
   d843e:	4a07      	ldr	r2, [pc, #28]	; (d845c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8440:	b510      	push	{r4, lr}
   d8442:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8446:	f101 0210 	add.w	r2, r1, #16
   d844a:	f851 4b04 	ldr.w	r4, [r1], #4
   d844e:	f843 4b04 	str.w	r4, [r3], #4
   d8452:	4291      	cmp	r1, r2
   d8454:	d1f9      	bne.n	d844a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8456:	780a      	ldrb	r2, [r1, #0]
   d8458:	701a      	strb	r2, [r3, #0]
}
   d845a:	bd10      	pop	{r4, pc}
   d845c:	000da800 	.word	0x000da800

000d8460 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d8460:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d8462:	2b04      	cmp	r3, #4
   d8464:	d101      	bne.n	d846a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d8466:	6840      	ldr	r0, [r0, #4]
   d8468:	e008      	b.n	d847c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d846a:	2b06      	cmp	r3, #6
   d846c:	d10a      	bne.n	d8484 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d846e:	6843      	ldr	r3, [r0, #4]
   d8470:	b953      	cbnz	r3, d8488 <_ZNK9IPAddresscvbEv+0x28>
   d8472:	6883      	ldr	r3, [r0, #8]
   d8474:	b943      	cbnz	r3, d8488 <_ZNK9IPAddresscvbEv+0x28>
   d8476:	68c3      	ldr	r3, [r0, #12]
   d8478:	b933      	cbnz	r3, d8488 <_ZNK9IPAddresscvbEv+0x28>
   d847a:	6900      	ldr	r0, [r0, #16]
   d847c:	3000      	adds	r0, #0
   d847e:	bf18      	it	ne
   d8480:	2001      	movne	r0, #1
   d8482:	4770      	bx	lr
    } else {
        return false;
   d8484:	2000      	movs	r0, #0
   d8486:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8488:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d848a:	4770      	bx	lr

000d848c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d848c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d848e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8492:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8496:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d849a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d849e:	2304      	movs	r3, #4
   d84a0:	6041      	str	r1, [r0, #4]
   d84a2:	7503      	strb	r3, [r0, #20]
   d84a4:	bd10      	pop	{r4, pc}

000d84a6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d84a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d84a8:	780d      	ldrb	r5, [r1, #0]
   d84aa:	788b      	ldrb	r3, [r1, #2]
   d84ac:	784a      	ldrb	r2, [r1, #1]
   d84ae:	78c9      	ldrb	r1, [r1, #3]
   d84b0:	9100      	str	r1, [sp, #0]
   d84b2:	4629      	mov	r1, r5
   d84b4:	f7ff ffea 	bl	d848c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d84b8:	b003      	add	sp, #12
   d84ba:	bd30      	pop	{r4, r5, pc}

000d84bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d84bc:	b510      	push	{r4, lr}
   d84be:	4b03      	ldr	r3, [pc, #12]	; (d84cc <_ZN9IPAddressC1EPKh+0x10>)
   d84c0:	6003      	str	r3, [r0, #0]
   d84c2:	4604      	mov	r4, r0
{
    *this = address;
   d84c4:	f7ff ffef 	bl	d84a6 <_ZN9IPAddressaSEPKh>
}
   d84c8:	4620      	mov	r0, r4
   d84ca:	bd10      	pop	{r4, pc}
   d84cc:	000da800 	.word	0x000da800

000d84d0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d84d0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d84d2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d84d4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d84d6:	b113      	cbz	r3, d84de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d84d8:	2203      	movs	r2, #3
   d84da:	4601      	mov	r1, r0
   d84dc:	4798      	blx	r3
    }
   d84de:	4620      	mov	r0, r4
   d84e0:	bd10      	pop	{r4, pc}
	...

000d84e4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d84e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d84e6:	4b0c      	ldr	r3, [pc, #48]	; (d8518 <serialEventRun+0x34>)
   d84e8:	b133      	cbz	r3, d84f8 <serialEventRun+0x14>
   d84ea:	f7ff ff39 	bl	d8360 <_Z16_fetch_usbserialv>
   d84ee:	6803      	ldr	r3, [r0, #0]
   d84f0:	691b      	ldr	r3, [r3, #16]
   d84f2:	4798      	blx	r3
   d84f4:	2800      	cmp	r0, #0
   d84f6:	dc09      	bgt.n	d850c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d84f8:	4b08      	ldr	r3, [pc, #32]	; (d851c <serialEventRun+0x38>)
   d84fa:	b163      	cbz	r3, d8516 <serialEventRun+0x32>
   d84fc:	f7ff fea8 	bl	d8250 <_Z22__fetch_global_Serial1v>
   d8500:	6803      	ldr	r3, [r0, #0]
   d8502:	691b      	ldr	r3, [r3, #16]
   d8504:	4798      	blx	r3
   d8506:	2800      	cmp	r0, #0
   d8508:	dc03      	bgt.n	d8512 <serialEventRun+0x2e>
   d850a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d850c:	f3af 8000 	nop.w
   d8510:	e7f2      	b.n	d84f8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8512:	f3af 8000 	nop.w
   d8516:	bd08      	pop	{r3, pc}
	...

000d8520 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8520:	b508      	push	{r3, lr}
	serialEventRun();
   d8522:	f7ff ffdf 	bl	d84e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8526:	f7fe ffc5 	bl	d74b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d852a:	4b01      	ldr	r3, [pc, #4]	; (d8530 <_post_loop+0x10>)
   d852c:	6018      	str	r0, [r3, #0]
   d852e:	bd08      	pop	{r3, pc}
   d8530:	2003e73c 	.word	0x2003e73c

000d8534 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8534:	4802      	ldr	r0, [pc, #8]	; (d8540 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8536:	4a03      	ldr	r2, [pc, #12]	; (d8544 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8538:	4903      	ldr	r1, [pc, #12]	; (d8548 <_Z33system_initialize_user_backup_ramv+0x14>)
   d853a:	1a12      	subs	r2, r2, r0
   d853c:	f001 bbd6 	b.w	d9cec <memcpy>
   d8540:	2003f400 	.word	0x2003f400
   d8544:	2003f404 	.word	0x2003f404
   d8548:	000daa20 	.word	0x000daa20

000d854c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d854c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d854e:	2300      	movs	r3, #0
   d8550:	9300      	str	r3, [sp, #0]
   d8552:	461a      	mov	r2, r3
   d8554:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8558:	f7ff f8ce 	bl	d76f8 <system_ctrl_set_result>
}
   d855c:	b003      	add	sp, #12
   d855e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8564 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8564:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8566:	8843      	ldrh	r3, [r0, #2]
   d8568:	2b0a      	cmp	r3, #10
   d856a:	d008      	beq.n	d857e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d856c:	2b50      	cmp	r3, #80	; 0x50
   d856e:	d109      	bne.n	d8584 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8570:	4b09      	ldr	r3, [pc, #36]	; (d8598 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8572:	681b      	ldr	r3, [r3, #0]
   d8574:	b13b      	cbz	r3, d8586 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8576:	b003      	add	sp, #12
   d8578:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d857c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d857e:	f7ff ffe5 	bl	d854c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8582:	e006      	b.n	d8592 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8584:	2300      	movs	r3, #0
   d8586:	9300      	str	r3, [sp, #0]
   d8588:	461a      	mov	r2, r3
   d858a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d858e:	f7ff f8b3 	bl	d76f8 <system_ctrl_set_result>
        break;
    }
}
   d8592:	b003      	add	sp, #12
   d8594:	f85d fb04 	ldr.w	pc, [sp], #4
   d8598:	2003e644 	.word	0x2003e644

000d859c <module_user_init_hook>:

void module_user_init_hook()
{
   d859c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d859e:	4c10      	ldr	r4, [pc, #64]	; (d85e0 <module_user_init_hook+0x44>)
   d85a0:	4d10      	ldr	r5, [pc, #64]	; (d85e4 <module_user_init_hook+0x48>)
   d85a2:	6823      	ldr	r3, [r4, #0]
   d85a4:	42ab      	cmp	r3, r5
   d85a6:	4b10      	ldr	r3, [pc, #64]	; (d85e8 <module_user_init_hook+0x4c>)
   d85a8:	bf0c      	ite	eq
   d85aa:	2201      	moveq	r2, #1
   d85ac:	2200      	movne	r2, #0
   d85ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d85b0:	d002      	beq.n	d85b8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d85b2:	f7ff ffbf 	bl	d8534 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d85b6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d85b8:	f7fe ff6c 	bl	d7494 <HAL_RNG_GetRandomNumber>
   d85bc:	4604      	mov	r4, r0
    srand(seed);
   d85be:	f001 fba9 	bl	d9d14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d85c2:	4b0a      	ldr	r3, [pc, #40]	; (d85ec <module_user_init_hook+0x50>)
   d85c4:	b113      	cbz	r3, d85cc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d85c6:	4620      	mov	r0, r4
   d85c8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d85cc:	2100      	movs	r1, #0
   d85ce:	4807      	ldr	r0, [pc, #28]	; (d85ec <module_user_init_hook+0x50>)
   d85d0:	f7ff f820 	bl	d7614 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d85d4:	2100      	movs	r1, #0
   d85d6:	4806      	ldr	r0, [pc, #24]	; (d85f0 <module_user_init_hook+0x54>)
}
   d85d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d85dc:	f7ff b882 	b.w	d76e4 <system_ctrl_set_app_request_handler>
   d85e0:	2003f400 	.word	0x2003f400
   d85e4:	9a271c1e 	.word	0x9a271c1e
   d85e8:	2003e648 	.word	0x2003e648
   d85ec:	00000000 	.word	0x00000000
   d85f0:	000d8565 	.word	0x000d8565

000d85f4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d85f4:	b510      	push	{r4, lr}
   d85f6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d85f8:	f7ff ff6a 	bl	d84d0 <_ZNSt14_Function_baseD1Ev>
   d85fc:	4620      	mov	r0, r4
   d85fe:	bd10      	pop	{r4, pc}

000d8600 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d8600:	b510      	push	{r4, lr}
   d8602:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d8604:	f7fe ffde 	bl	d75c4 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d8608:	4284      	cmp	r4, r0
   d860a:	d008      	beq.n	d861e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d860c:	b11c      	cbz	r4, d8616 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d860e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d8612:	f7fe bfc7 	b.w	d75a4 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d8616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d861a:	f7fe bfcb 	b.w	d75b4 <LED_Signaling_Stop>
   d861e:	bd10      	pop	{r4, pc}

000d8620 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d8620:	b570      	push	{r4, r5, r6, lr}
   d8622:	4605      	mov	r5, r0
   d8624:	460e      	mov	r6, r1
   d8626:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d8628:	f7fe ffcc 	bl	d75c4 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d862c:	b150      	cbz	r0, d8644 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d862e:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d8632:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d8636:	f7fe ffad 	bl	d7594 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d863a:	20e7      	movs	r0, #231	; 0xe7
}
   d863c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d8640:	f7fe bfc8 	b.w	d75d4 <LED_On>
   d8644:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8648 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8648:	4803      	ldr	r0, [pc, #12]	; (d8658 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d864a:	4a04      	ldr	r2, [pc, #16]	; (d865c <_GLOBAL__sub_I_RGB+0x14>)
   d864c:	4904      	ldr	r1, [pc, #16]	; (d8660 <_GLOBAL__sub_I_RGB+0x18>)
   d864e:	2300      	movs	r3, #0
   d8650:	6083      	str	r3, [r0, #8]
   d8652:	f000 bc3f 	b.w	d8ed4 <__aeabi_atexit>
   d8656:	bf00      	nop
   d8658:	2003e64c 	.word	0x2003e64c
   d865c:	2003db90 	.word	0x2003db90
   d8660:	000d85f5 	.word	0x000d85f5

000d8664 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8664:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   d8666:	b510      	push	{r4, lr}
   d8668:	b90a      	cbnz	r2, d866e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   d866a:	f000 fc54 	bl	d8f16 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d866e:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   d8670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8674:	4718      	bx	r3

000d8676 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8676:	f7fe bf75 	b.w	d7564 <HAL_Interrupts_Disable_All>

000d867a <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d867a:	f7fe bf6b 	b.w	d7554 <HAL_Interrupts_Enable_All>

000d867e <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d867e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8680:	2300      	movs	r3, #0
   d8682:	6083      	str	r3, [r0, #8]
   d8684:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8686:	4604      	mov	r4, r0
   d8688:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d868a:	b12b      	cbz	r3, d8698 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d868c:	2202      	movs	r2, #2
   d868e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8690:	68eb      	ldr	r3, [r5, #12]
   d8692:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8694:	68ab      	ldr	r3, [r5, #8]
   d8696:	60a3      	str	r3, [r4, #8]
	}
    }
   d8698:	4620      	mov	r0, r4
   d869a:	bd38      	pop	{r3, r4, r5, pc}

000d869c <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   d869e:	4b0d      	ldr	r3, [pc, #52]	; (d86d4 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   d86a0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d86a4:	4606      	mov	r6, r0
   d86a6:	460f      	mov	r7, r1
   d86a8:	461c      	mov	r4, r3
    delete handlers[pin];
   d86aa:	b135      	cbz	r5, d86ba <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d86ac:	4628      	mov	r0, r5
   d86ae:	f7ff ff0f 	bl	d84d0 <_ZNSt14_Function_baseD1Ev>
   d86b2:	2110      	movs	r1, #16
   d86b4:	4628      	mov	r0, r5
   d86b6:	f000 fc1b 	bl	d8ef0 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   d86ba:	2010      	movs	r0, #16
   d86bc:	f7fb fced 	bl	d409a <_Znwj>
   d86c0:	4605      	mov	r5, r0
   d86c2:	b110      	cbz	r0, d86ca <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   d86c4:	4639      	mov	r1, r7
   d86c6:	f7ff ffda 	bl	d867e <_ZNSt8functionIFvvEEC1ERKS1_>
   d86ca:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   d86ce:	4628      	mov	r0, r5
   d86d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d86d2:	bf00      	nop
   d86d4:	2003e65c 	.word	0x2003e65c

000d86d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d86d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d86da:	460c      	mov	r4, r1
   d86dc:	b085      	sub	sp, #20
   d86de:	4605      	mov	r5, r0
   d86e0:	4617      	mov	r7, r2
   d86e2:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   d86e4:	f7fe ff2e 	bl	d7544 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   d86e8:	4621      	mov	r1, r4
   d86ea:	4628      	mov	r0, r5
   d86ec:	f7ff ffd6 	bl	d869c <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   d86f0:	4604      	mov	r4, r0
   d86f2:	b1c8      	cbz	r0, d8728 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
        HAL_InterruptExtraConfiguration extra = {0};
   d86f4:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d86f6:	2304      	movs	r3, #4
  if (priority >= 0) {
   d86f8:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   d86fa:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d86fc:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d8700:	bfa5      	ittet	ge
   d8702:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8706:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d870a:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d870c:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d870e:	9300      	str	r3, [sp, #0]
   d8710:	4602      	mov	r2, r0
   d8712:	463b      	mov	r3, r7
   d8714:	4907      	ldr	r1, [pc, #28]	; (d8734 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8716:	bfa8      	it	ge
   d8718:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d871c:	4628      	mov	r0, r5
   d871e:	f7fe ff09 	bl	d7534 <HAL_Interrupts_Attach>
   d8722:	b108      	cbz	r0, d8728 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
            return false;
   d8724:	2000      	movs	r0, #0
   d8726:	e002      	b.n	d872e <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x56>
        }
    }
    return handler!=NULL;
   d8728:	1c20      	adds	r0, r4, #0
   d872a:	bf18      	it	ne
   d872c:	2001      	movne	r0, #1
}
   d872e:	b005      	add	sp, #20
   d8730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8732:	bf00      	nop
   d8734:	000d8665 	.word	0x000d8665

000d8738 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8738:	4b02      	ldr	r3, [pc, #8]	; (d8744 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d873a:	681a      	ldr	r2, [r3, #0]
   d873c:	4b02      	ldr	r3, [pc, #8]	; (d8748 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d873e:	601a      	str	r2, [r3, #0]
   d8740:	4770      	bx	lr
   d8742:	bf00      	nop
   d8744:	2003db28 	.word	0x2003db28
   d8748:	2003e6ec 	.word	0x2003e6ec

000d874c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d874c:	4b01      	ldr	r3, [pc, #4]	; (d8754 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d874e:	4a02      	ldr	r2, [pc, #8]	; (d8758 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8750:	601a      	str	r2, [r3, #0]
   d8752:	4770      	bx	lr
   d8754:	2003e6f0 	.word	0x2003e6f0
   d8758:	000da8a5 	.word	0x000da8a5

000d875c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d875c:	2100      	movs	r1, #0
   d875e:	f7fe bfb9 	b.w	d76d4 <system_delay_ms>

000d8762 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8764:	4606      	mov	r6, r0
   d8766:	460d      	mov	r5, r1
   d8768:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d876a:	2400      	movs	r4, #0
  while (size--) {
   d876c:	42bd      	cmp	r5, r7
   d876e:	d00c      	beq.n	d878a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8770:	6833      	ldr	r3, [r6, #0]
   d8772:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8776:	689b      	ldr	r3, [r3, #8]
   d8778:	4630      	mov	r0, r6
   d877a:	4798      	blx	r3
     if (chunk>=0)
   d877c:	2800      	cmp	r0, #0
   d877e:	db01      	blt.n	d8784 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8780:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8782:	e7f3      	b.n	d876c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8784:	2c00      	cmp	r4, #0
   d8786:	bf08      	it	eq
   d8788:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d878a:	4620      	mov	r0, r4
   d878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d878e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d878e:	b570      	push	{r4, r5, r6, lr}
   d8790:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d8792:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d8794:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d8796:	b149      	cbz	r1, d87ac <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d8798:	f001 faee 	bl	d9d78 <strlen>
   d879c:	682b      	ldr	r3, [r5, #0]
   d879e:	4602      	mov	r2, r0
   d87a0:	4621      	mov	r1, r4
   d87a2:	4628      	mov	r0, r5
   d87a4:	68db      	ldr	r3, [r3, #12]
    }
   d87a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d87aa:	4718      	bx	r3
    }
   d87ac:	bd70      	pop	{r4, r5, r6, pc}

000d87ae <_ZN5Print5printEPKc>:
   d87ae:	b508      	push	{r3, lr}
   d87b0:	f7ff ffed 	bl	d878e <_ZN5Print5writeEPKc>
   d87b4:	bd08      	pop	{r3, pc}

000d87b6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d87b6:	6803      	ldr	r3, [r0, #0]
   d87b8:	689b      	ldr	r3, [r3, #8]
   d87ba:	4718      	bx	r3

000d87bc <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d87bc:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d87be:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d87c0:	4605      	mov	r5, r0
  size_t n = print('\r');
   d87c2:	f7ff fff8 	bl	d87b6 <_ZN5Print5printEc>
  n += print('\n');
   d87c6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d87c8:	4604      	mov	r4, r0
  n += print('\n');
   d87ca:	4628      	mov	r0, r5
   d87cc:	f7ff fff3 	bl	d87b6 <_ZN5Print5printEc>
  return n;
}
   d87d0:	4420      	add	r0, r4
   d87d2:	bd38      	pop	{r3, r4, r5, pc}

000d87d4 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d87d4:	b530      	push	{r4, r5, lr}
   d87d6:	b08b      	sub	sp, #44	; 0x2c
   d87d8:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d87da:	2100      	movs	r1, #0
   d87dc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d87e0:	2a01      	cmp	r2, #1
   d87e2:	bf98      	it	ls
   d87e4:	220a      	movls	r2, #10
   d87e6:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d87ea:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d87ee:	fb05 3312 	mls	r3, r5, r2, r3
   d87f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d87f6:	2b09      	cmp	r3, #9
   d87f8:	bf94      	ite	ls
   d87fa:	3330      	addls	r3, #48	; 0x30
   d87fc:	3337      	addhi	r3, #55	; 0x37
   d87fe:	b2db      	uxtb	r3, r3
   d8800:	4621      	mov	r1, r4
   d8802:	f804 3901 	strb.w	r3, [r4], #-1
   d8806:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8808:	2d00      	cmp	r5, #0
   d880a:	d1ee      	bne.n	d87ea <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d880c:	f7ff ffbf 	bl	d878e <_ZN5Print5writeEPKc>
}
   d8810:	b00b      	add	sp, #44	; 0x2c
   d8812:	bd30      	pop	{r4, r5, pc}

000d8814 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8818:	ec57 6b10 	vmov	r6, r7, d0
   d881c:	4682      	mov	sl, r0
   d881e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8820:	ee10 2a10 	vmov	r2, s0
   d8824:	463b      	mov	r3, r7
   d8826:	ee10 0a10 	vmov	r0, s0
   d882a:	4639      	mov	r1, r7
   d882c:	f001 f9a2 	bl	d9b74 <__aeabi_dcmpun>
   d8830:	b108      	cbz	r0, d8836 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8832:	494e      	ldr	r1, [pc, #312]	; (d896c <_ZN5Print10printFloatEdh+0x158>)
   d8834:	e012      	b.n	d885c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d8836:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d883a:	f04f 32ff 	mov.w	r2, #4294967295
   d883e:	4b4c      	ldr	r3, [pc, #304]	; (d8970 <_ZN5Print10printFloatEdh+0x15c>)
   d8840:	4630      	mov	r0, r6
   d8842:	4649      	mov	r1, r9
   d8844:	f001 f996 	bl	d9b74 <__aeabi_dcmpun>
   d8848:	b968      	cbnz	r0, d8866 <_ZN5Print10printFloatEdh+0x52>
   d884a:	f04f 32ff 	mov.w	r2, #4294967295
   d884e:	4b48      	ldr	r3, [pc, #288]	; (d8970 <_ZN5Print10printFloatEdh+0x15c>)
   d8850:	4630      	mov	r0, r6
   d8852:	4649      	mov	r1, r9
   d8854:	f001 f970 	bl	d9b38 <__aeabi_dcmple>
   d8858:	b928      	cbnz	r0, d8866 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d885a:	4946      	ldr	r1, [pc, #280]	; (d8974 <_ZN5Print10printFloatEdh+0x160>)
   d885c:	4650      	mov	r0, sl
   d885e:	f7ff ff96 	bl	d878e <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d8862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8866:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d886a:	4b43      	ldr	r3, [pc, #268]	; (d8978 <_ZN5Print10printFloatEdh+0x164>)
   d886c:	4630      	mov	r0, r6
   d886e:	4639      	mov	r1, r7
   d8870:	f001 f976 	bl	d9b60 <__aeabi_dcmpgt>
   d8874:	b108      	cbz	r0, d887a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8876:	4941      	ldr	r1, [pc, #260]	; (d897c <_ZN5Print10printFloatEdh+0x168>)
   d8878:	e7f0      	b.n	d885c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d887a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d887e:	4b40      	ldr	r3, [pc, #256]	; (d8980 <_ZN5Print10printFloatEdh+0x16c>)
   d8880:	4630      	mov	r0, r6
   d8882:	4639      	mov	r1, r7
   d8884:	f001 f94e 	bl	d9b24 <__aeabi_dcmplt>
   d8888:	2800      	cmp	r0, #0
   d888a:	d1f4      	bne.n	d8876 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d888c:	2200      	movs	r2, #0
   d888e:	2300      	movs	r3, #0
   d8890:	4630      	mov	r0, r6
   d8892:	4639      	mov	r1, r7
   d8894:	f001 f946 	bl	d9b24 <__aeabi_dcmplt>
   d8898:	b140      	cbz	r0, d88ac <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d889a:	212d      	movs	r1, #45	; 0x2d
   d889c:	4650      	mov	r0, sl
   d889e:	f7ff ff8a 	bl	d87b6 <_ZN5Print5printEc>
     number = -number;
   d88a2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d88a6:	4604      	mov	r4, r0
     number = -number;
   d88a8:	461f      	mov	r7, r3
   d88aa:	e000      	b.n	d88ae <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d88ac:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d88ae:	4935      	ldr	r1, [pc, #212]	; (d8984 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d88b0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d88b4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d88b6:	fa5f f388 	uxtb.w	r3, r8
   d88ba:	429d      	cmp	r5, r3
   d88bc:	d906      	bls.n	d88cc <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d88be:	2200      	movs	r2, #0
   d88c0:	4b31      	ldr	r3, [pc, #196]	; (d8988 <_ZN5Print10printFloatEdh+0x174>)
   d88c2:	f000 ffe7 	bl	d9894 <__aeabi_ddiv>
   d88c6:	f108 0801 	add.w	r8, r8, #1
   d88ca:	e7f4      	b.n	d88b6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d88cc:	4632      	mov	r2, r6
   d88ce:	463b      	mov	r3, r7
   d88d0:	f000 fd04 	bl	d92dc <__adddf3>
   d88d4:	460f      	mov	r7, r1
   d88d6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d88d8:	f001 f98a 	bl	d9bf0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d88dc:	220a      	movs	r2, #10
   d88de:	4601      	mov	r1, r0
   d88e0:	4680      	mov	r8, r0
   d88e2:	4650      	mov	r0, sl
   d88e4:	f7ff ff76 	bl	d87d4 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d88e8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d88ea:	b3e5      	cbz	r5, d8966 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d88ec:	4640      	mov	r0, r8
   d88ee:	f000 fe31 	bl	d9554 <__aeabi_ui2d>
   d88f2:	4602      	mov	r2, r0
   d88f4:	460b      	mov	r3, r1
   d88f6:	4630      	mov	r0, r6
   d88f8:	4639      	mov	r1, r7
   d88fa:	f000 fced 	bl	d92d8 <__aeabi_dsub>
   d88fe:	4606      	mov	r6, r0
   d8900:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8902:	4650      	mov	r0, sl
   d8904:	4921      	ldr	r1, [pc, #132]	; (d898c <_ZN5Print10printFloatEdh+0x178>)
   d8906:	f7ff ff42 	bl	d878e <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d890a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d890c:	2200      	movs	r2, #0
   d890e:	4b1e      	ldr	r3, [pc, #120]	; (d8988 <_ZN5Print10printFloatEdh+0x174>)
   d8910:	4630      	mov	r0, r6
   d8912:	4639      	mov	r1, r7
   d8914:	f000 fe94 	bl	d9640 <__aeabi_dmul>
   d8918:	4606      	mov	r6, r0
   d891a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d891c:	f001 f940 	bl	d9ba0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8920:	f1b0 0900 	subs.w	r9, r0, #0
   d8924:	da07      	bge.n	d8936 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d8926:	212d      	movs	r1, #45	; 0x2d
   d8928:	4650      	mov	r0, sl
   d892a:	f7ff ff44 	bl	d87b6 <_ZN5Print5printEc>
            val = -n;
   d892e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d8932:	4680      	mov	r8, r0
   d8934:	e002      	b.n	d893c <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d8936:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8938:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d893c:	220a      	movs	r2, #10
   d893e:	4650      	mov	r0, sl
   d8940:	f7ff ff48 	bl	d87d4 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d8944:	4440      	add	r0, r8
   d8946:	4404      	add	r4, r0
    remainder -= toPrint;
   d8948:	4648      	mov	r0, r9
   d894a:	f000 fe13 	bl	d9574 <__aeabi_i2d>
   d894e:	4602      	mov	r2, r0
   d8950:	460b      	mov	r3, r1
   d8952:	4630      	mov	r0, r6
   d8954:	4639      	mov	r1, r7
   d8956:	f000 fcbf 	bl	d92d8 <__aeabi_dsub>
   d895a:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d895c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d8960:	4606      	mov	r6, r0
   d8962:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d8964:	d1d2      	bne.n	d890c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d8966:	4620      	mov	r0, r4
   d8968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d896c:	000da90e 	.word	0x000da90e
   d8970:	7fefffff 	.word	0x7fefffff
   d8974:	000da918 	.word	0x000da918
   d8978:	41efffff 	.word	0x41efffff
   d897c:	000da912 	.word	0x000da912
   d8980:	c1efffff 	.word	0xc1efffff
   d8984:	3fe00000 	.word	0x3fe00000
   d8988:	40240000 	.word	0x40240000
   d898c:	000da916 	.word	0x000da916

000d8990 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d8990:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d8992:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d8994:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d8996:	f7ff ff3d 	bl	d8814 <_ZN5Print10printFloatEdh>
   d899a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d899c:	4628      	mov	r0, r5
   d899e:	f7ff ff0d 	bl	d87bc <_ZN5Print7printlnEv>
  return n;
}
   d89a2:	4420      	add	r0, r4
   d89a4:	bd38      	pop	{r3, r4, r5, pc}

000d89a6 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d89a6:	b538      	push	{r3, r4, r5, lr}
   d89a8:	4604      	mov	r4, r0
    return println((double)num, digits);
   d89aa:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d89ae:	460d      	mov	r5, r1
    return println((double)num, digits);
   d89b0:	f000 fdf2 	bl	d9598 <__aeabi_f2d>
   d89b4:	ec41 0b10 	vmov	d0, r0, r1
   d89b8:	4629      	mov	r1, r5
   d89ba:	4620      	mov	r0, r4
}
   d89bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d89c0:	f7ff bfe6 	b.w	d8990 <_ZN5Print7printlnEdi>

000d89c4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d89c4:	b40c      	push	{r2, r3}
   d89c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d89ca:	b087      	sub	sp, #28
   d89cc:	af00      	add	r7, sp, #0
   d89ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d89d2:	4605      	mov	r5, r0
   d89d4:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d89d8:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d89da:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d89dc:	4623      	mov	r3, r4
   d89de:	464a      	mov	r2, r9
   d89e0:	2114      	movs	r1, #20
   d89e2:	1d38      	adds	r0, r7, #4
   d89e4:	f7fe feb4 	bl	d7750 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d89e8:	2813      	cmp	r0, #19
   d89ea:	d805      	bhi.n	d89f8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d89ec:	1d39      	adds	r1, r7, #4
   d89ee:	4628      	mov	r0, r5
   d89f0:	f7ff fecd 	bl	d878e <_ZN5Print5writeEPKc>
   d89f4:	4604      	mov	r4, r0
   d89f6:	e013      	b.n	d8a20 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d89f8:	f100 0308 	add.w	r3, r0, #8
   d89fc:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8a00:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8a02:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8a06:	1c41      	adds	r1, r0, #1
   d8a08:	4623      	mov	r3, r4
   d8a0a:	464a      	mov	r2, r9
   d8a0c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8a0e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8a10:	f7fe fe9e 	bl	d7750 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8a14:	4669      	mov	r1, sp
   d8a16:	4628      	mov	r0, r5
   d8a18:	f7ff feb9 	bl	d878e <_ZN5Print5writeEPKc>
   d8a1c:	4604      	mov	r4, r0
   d8a1e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8a20:	b11e      	cbz	r6, d8a2a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8a22:	4628      	mov	r0, r5
   d8a24:	f7ff feca 	bl	d87bc <_ZN5Print7printlnEv>
   d8a28:	4404      	add	r4, r0
    return n;
}
   d8a2a:	4620      	mov	r0, r4
   d8a2c:	371c      	adds	r7, #28
   d8a2e:	46bd      	mov	sp, r7
   d8a30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8a34:	b002      	add	sp, #8
   d8a36:	4770      	bx	lr

000d8a38 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d8a38:	b510      	push	{r4, lr}
   d8a3a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8a3c:	6800      	ldr	r0, [r0, #0]
   d8a3e:	b108      	cbz	r0, d8a44 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8a40:	f7fe fd20 	bl	d7484 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d8a44:	4620      	mov	r0, r4
   d8a46:	bd10      	pop	{r4, pc}

000d8a48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8a48:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8a4a:	4c06      	ldr	r4, [pc, #24]	; (d8a64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8a4c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8a4e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8a50:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8a52:	f7fe fd0f 	bl	d7474 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8a56:	4620      	mov	r0, r4
   d8a58:	4a03      	ldr	r2, [pc, #12]	; (d8a68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8a5a:	4904      	ldr	r1, [pc, #16]	; (d8a6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8a60:	f000 ba38 	b.w	d8ed4 <__aeabi_atexit>
   d8a64:	2003e6f4 	.word	0x2003e6f4
   d8a68:	2003db90 	.word	0x2003db90
   d8a6c:	000d8a39 	.word	0x000d8a39

000d8a70 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8a70:	b510      	push	{r4, lr}
   d8a72:	4604      	mov	r4, r0
{
	free(buffer);
   d8a74:	6800      	ldr	r0, [r0, #0]
   d8a76:	f7fe fe5b 	bl	d7730 <free>
}
   d8a7a:	4620      	mov	r0, r4
   d8a7c:	bd10      	pop	{r4, pc}

000d8a7e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8a7e:	b510      	push	{r4, lr}
   d8a80:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8a82:	6800      	ldr	r0, [r0, #0]
   d8a84:	b108      	cbz	r0, d8a8a <_ZN6String10invalidateEv+0xc>
   d8a86:	f7fe fe53 	bl	d7730 <free>
	buffer = NULL;
   d8a8a:	2300      	movs	r3, #0
   d8a8c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8a8e:	60a3      	str	r3, [r4, #8]
   d8a90:	6063      	str	r3, [r4, #4]
   d8a92:	bd10      	pop	{r4, pc}

000d8a94 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8a94:	b538      	push	{r3, r4, r5, lr}
   d8a96:	4604      	mov	r4, r0
   d8a98:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8a9a:	6800      	ldr	r0, [r0, #0]
   d8a9c:	3101      	adds	r1, #1
   d8a9e:	f7fe fe4f 	bl	d7740 <realloc>
	if (newbuffer) {
   d8aa2:	b110      	cbz	r0, d8aaa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8aa4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8aa8:	2001      	movs	r0, #1
	}
	return 0;
}
   d8aaa:	bd38      	pop	{r3, r4, r5, pc}

000d8aac <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8aac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8aae:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8ab0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8ab2:	b113      	cbz	r3, d8aba <_ZN6String7reserveEj+0xe>
   d8ab4:	6843      	ldr	r3, [r0, #4]
   d8ab6:	428b      	cmp	r3, r1
   d8ab8:	d207      	bcs.n	d8aca <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8aba:	4620      	mov	r0, r4
   d8abc:	f7ff ffea 	bl	d8a94 <_ZN6String12changeBufferEj>
   d8ac0:	b120      	cbz	r0, d8acc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8ac2:	68a3      	ldr	r3, [r4, #8]
   d8ac4:	b90b      	cbnz	r3, d8aca <_ZN6String7reserveEj+0x1e>
   d8ac6:	6822      	ldr	r2, [r4, #0]
   d8ac8:	7013      	strb	r3, [r2, #0]
   d8aca:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8acc:	bd10      	pop	{r4, pc}

000d8ace <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8ace:	b570      	push	{r4, r5, r6, lr}
   d8ad0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8ad2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8ad4:	4604      	mov	r4, r0
   d8ad6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8ad8:	f7ff ffe8 	bl	d8aac <_ZN6String7reserveEj>
   d8adc:	b918      	cbnz	r0, d8ae6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8ade:	4620      	mov	r0, r4
   d8ae0:	f7ff ffcd 	bl	d8a7e <_ZN6String10invalidateEv>
		return *this;
   d8ae4:	e009      	b.n	d8afa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8ae6:	462a      	mov	r2, r5
   d8ae8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8aea:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8aec:	6820      	ldr	r0, [r4, #0]
   d8aee:	f001 f8fd 	bl	d9cec <memcpy>
	buffer[len] = 0;
   d8af2:	6822      	ldr	r2, [r4, #0]
   d8af4:	68a3      	ldr	r3, [r4, #8]
   d8af6:	2100      	movs	r1, #0
   d8af8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8afa:	4620      	mov	r0, r4
   d8afc:	bd70      	pop	{r4, r5, r6, pc}

000d8afe <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8afe:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8b00:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8b02:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8b04:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8b06:	6043      	str	r3, [r0, #4]
	len = 0;
   d8b08:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b0a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d8b0c:	460d      	mov	r5, r1
   d8b0e:	b139      	cbz	r1, d8b20 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8b10:	4608      	mov	r0, r1
   d8b12:	f001 f931 	bl	d9d78 <strlen>
   d8b16:	4629      	mov	r1, r5
   d8b18:	4602      	mov	r2, r0
   d8b1a:	4620      	mov	r0, r4
   d8b1c:	f7ff ffd7 	bl	d8ace <_ZN6String4copyEPKcj>
}
   d8b20:	4620      	mov	r0, r4
   d8b22:	bd38      	pop	{r3, r4, r5, pc}

000d8b24 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8b24:	b538      	push	{r3, r4, r5, lr}
   d8b26:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8b28:	460c      	mov	r4, r1
   d8b2a:	b141      	cbz	r1, d8b3e <_ZN6StringaSEPKc+0x1a>
   d8b2c:	4608      	mov	r0, r1
   d8b2e:	f001 f923 	bl	d9d78 <strlen>
   d8b32:	4621      	mov	r1, r4
   d8b34:	4602      	mov	r2, r0
   d8b36:	4628      	mov	r0, r5
   d8b38:	f7ff ffc9 	bl	d8ace <_ZN6String4copyEPKcj>
   d8b3c:	e001      	b.n	d8b42 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8b3e:	f7ff ff9e 	bl	d8a7e <_ZN6String10invalidateEv>

	return *this;
}
   d8b42:	4628      	mov	r0, r5
   d8b44:	bd38      	pop	{r3, r4, r5, pc}

000d8b46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8b46:	b510      	push	{r4, lr}
   d8b48:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d8b4a:	6800      	ldr	r0, [r0, #0]
   d8b4c:	b118      	cbz	r0, d8b56 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d8b4e:	f7fe fdef 	bl	d7730 <free>
            wakeupSource_ = nullptr;
   d8b52:	2300      	movs	r3, #0
   d8b54:	6023      	str	r3, [r4, #0]
   d8b56:	bd10      	pop	{r4, pc}

000d8b58 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8b58:	b510      	push	{r4, lr}
   d8b5a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8b5c:	f7ff fff3 	bl	d8b46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8b60:	4620      	mov	r0, r4
   d8b62:	bd10      	pop	{r4, pc}

000d8b64 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8b64:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d8b66:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d8b6a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d8b6c:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8b6e:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d8b70:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d8b74:	f8c0 2006 	str.w	r2, [r0, #6]
   d8b78:	889b      	ldrh	r3, [r3, #4]
   d8b7a:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8b7c:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d8b7e:	f7ff ffe2 	bl	d8b46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d8b82:	682b      	ldr	r3, [r5, #0]
   d8b84:	b113      	cbz	r3, d8b8c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d8b86:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d8b88:	2300      	movs	r3, #0
   d8b8a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d8b8c:	4620      	mov	r0, r4
   d8b8e:	bd38      	pop	{r3, r4, r5, pc}

000d8b90 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d8b90:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d8b94:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d8b96:	b90b      	cbnz	r3, d8b9c <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d8b98:	680a      	ldr	r2, [r1, #0]
   d8b9a:	b19a      	cbz	r2, d8bc4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d8b9c:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d8b9e:	b15c      	cbz	r4, d8bb8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d8ba0:	88a2      	ldrh	r2, [r4, #4]
   d8ba2:	2a01      	cmp	r2, #1
   d8ba4:	d003      	beq.n	d8bae <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d8ba6:	2a04      	cmp	r2, #4
   d8ba8:	d106      	bne.n	d8bb8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d8baa:	2202      	movs	r2, #2
   d8bac:	e005      	b.n	d8bba <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d8bae:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d8bb0:	814c      	strh	r4, [r1, #10]
   d8bb2:	718a      	strb	r2, [r1, #6]
   d8bb4:	810b      	strh	r3, [r1, #8]
                    break;
   d8bb6:	e005      	b.n	d8bc4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d8bb8:	2204      	movs	r2, #4
   d8bba:	810b      	strh	r3, [r1, #8]
   d8bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8bc0:	718a      	strb	r2, [r1, #6]
   d8bc2:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d8bc4:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d8bc8:	6003      	str	r3, [r0, #0]
   d8bca:	888b      	ldrh	r3, [r1, #4]
   d8bcc:	8083      	strh	r3, [r0, #4]
    }
   d8bce:	bd10      	pop	{r4, pc}

000d8bd0 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d8bd0:	b510      	push	{r4, lr}
   d8bd2:	2400      	movs	r4, #0
   d8bd4:	7004      	strb	r4, [r0, #0]
   d8bd6:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d8bd8:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d8bda:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d8bde:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d8be0:	dd07      	ble.n	d8bf2 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d8be2:	3901      	subs	r1, #1
   d8be4:	4299      	cmp	r1, r3
   d8be6:	d209      	bcs.n	d8bfc <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d8be8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d8bec:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d8bee:	2301      	movs	r3, #1
   d8bf0:	e001      	b.n	d8bf6 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d8bf2:	d102      	bne.n	d8bfa <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d8bf4:	2302      	movs	r3, #2
   d8bf6:	7003      	strb	r3, [r0, #0]
   d8bf8:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d8bfa:	8041      	strh	r1, [r0, #2]
    }
}
   d8bfc:	bd10      	pop	{r4, pc}
	...

000d8c00 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8c02:	b08b      	sub	sp, #44	; 0x2c
   d8c04:	4617      	mov	r7, r2
   d8c06:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8c0a:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8c0c:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8c0e:	2400      	movs	r4, #0
   d8c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d8c12:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8c14:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8c16:	9300      	str	r3, [sp, #0]
   d8c18:	4639      	mov	r1, r7
   d8c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8c1c:	4630      	mov	r0, r6
   d8c1e:	f7fe fd75 	bl	d770c <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d8c22:	463b      	mov	r3, r7
   d8c24:	4632      	mov	r2, r6
   d8c26:	4601      	mov	r1, r0
   d8c28:	a805      	add	r0, sp, #20
   d8c2a:	f7ff ffd1 	bl	d8bd0 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d8c2e:	9407      	str	r4, [sp, #28]
   d8c30:	f8ad 4020 	strh.w	r4, [sp, #32]
   d8c34:	4c0d      	ldr	r4, [pc, #52]	; (d8c6c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d8c36:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d8c3a:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d8c3e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d8c42:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d8c46:	4620      	mov	r0, r4
   d8c48:	a907      	add	r1, sp, #28
   d8c4a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d8c4e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d8c52:	f7ff ff87 	bl	d8b64 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8c56:	a807      	add	r0, sp, #28
   d8c58:	f7ff ff75 	bl	d8b46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d8c5c:	4628      	mov	r0, r5
   d8c5e:	4621      	mov	r1, r4
   d8c60:	f7ff ff96 	bl	d8b90 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d8c64:	4628      	mov	r0, r5
   d8c66:	b00b      	add	sp, #44	; 0x2c
   d8c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8c6a:	bf00      	nop
   d8c6c:	2003e6f8 	.word	0x2003e6f8

000d8c70 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8c70:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8c72:	4c09      	ldr	r4, [pc, #36]	; (d8c98 <_GLOBAL__sub_I_System+0x28>)
   d8c74:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8c76:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8c7a:	6020      	str	r0, [r4, #0]
   d8c7c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8c7e:	71a0      	strb	r0, [r4, #6]
   d8c80:	8120      	strh	r0, [r4, #8]
   d8c82:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8c84:	f7fe fd1e 	bl	d76c4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8c88:	4620      	mov	r0, r4
   d8c8a:	4a04      	ldr	r2, [pc, #16]	; (d8c9c <_GLOBAL__sub_I_System+0x2c>)
   d8c8c:	4904      	ldr	r1, [pc, #16]	; (d8ca0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8c92:	f000 b91f 	b.w	d8ed4 <__aeabi_atexit>
   d8c96:	bf00      	nop
   d8c98:	2003e6f8 	.word	0x2003e6f8
   d8c9c:	2003db90 	.word	0x2003db90
   d8ca0:	000d8b59 	.word	0x000d8b59

000d8ca4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8ca4:	2200      	movs	r2, #0
   d8ca6:	4611      	mov	r1, r2
   d8ca8:	6840      	ldr	r0, [r0, #4]
   d8caa:	f7fe bcf3 	b.w	d7694 <network_listening>

000d8cae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8cae:	2200      	movs	r2, #0
   d8cb0:	4611      	mov	r1, r2
   d8cb2:	6840      	ldr	r0, [r0, #4]
   d8cb4:	f7fe bcfe 	b.w	d76b4 <network_get_listen_timeout>

000d8cb8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8cb8:	2200      	movs	r2, #0
   d8cba:	6840      	ldr	r0, [r0, #4]
   d8cbc:	f7fe bcf2 	b.w	d76a4 <network_set_listen_timeout>

000d8cc0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8cc0:	2200      	movs	r2, #0
   d8cc2:	f081 0101 	eor.w	r1, r1, #1
   d8cc6:	6840      	ldr	r0, [r0, #4]
   d8cc8:	f7fe bcdc 	b.w	d7684 <network_listen>

000d8ccc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8ccc:	2300      	movs	r3, #0
   d8cce:	461a      	mov	r2, r3
   d8cd0:	4619      	mov	r1, r3
   d8cd2:	6840      	ldr	r0, [r0, #4]
   d8cd4:	f7fe bcce 	b.w	d7674 <network_off>

000d8cd8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8cd8:	2300      	movs	r3, #0
   d8cda:	461a      	mov	r2, r3
   d8cdc:	4619      	mov	r1, r3
   d8cde:	6840      	ldr	r0, [r0, #4]
   d8ce0:	f7fe bcc0 	b.w	d7664 <network_on>

000d8ce4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8ce4:	2200      	movs	r2, #0
   d8ce6:	4611      	mov	r1, r2
   d8ce8:	6840      	ldr	r0, [r0, #4]
   d8cea:	f7fe bcb3 	b.w	d7654 <network_ready>

000d8cee <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8cee:	2200      	movs	r2, #0
   d8cf0:	4611      	mov	r1, r2
   d8cf2:	6840      	ldr	r0, [r0, #4]
   d8cf4:	f7fe bc9e 	b.w	d7634 <network_connecting>

000d8cf8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8cf8:	2200      	movs	r2, #0
   d8cfa:	2102      	movs	r1, #2
   d8cfc:	6840      	ldr	r0, [r0, #4]
   d8cfe:	f7fe bca1 	b.w	d7644 <network_disconnect>

000d8d02 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8d02:	2300      	movs	r3, #0
   d8d04:	461a      	mov	r2, r3
   d8d06:	6840      	ldr	r0, [r0, #4]
   d8d08:	f7fe bc8c 	b.w	d7624 <network_connect>

000d8d0c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8d0c:	4b02      	ldr	r3, [pc, #8]	; (d8d18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8d0e:	2203      	movs	r2, #3
   d8d10:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8d12:	4a02      	ldr	r2, [pc, #8]	; (d8d1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8d14:	601a      	str	r2, [r3, #0]
   d8d16:	4770      	bx	lr
   d8d18:	2003e704 	.word	0x2003e704
   d8d1c:	000da924 	.word	0x000da924

000d8d20 <_Z17acquireWireBufferv>:
   d8d20:	b570      	push	{r4, r5, r6, lr}
   d8d22:	4604      	mov	r4, r0
   d8d24:	2514      	movs	r5, #20
   d8d26:	462a      	mov	r2, r5
   d8d28:	4e09      	ldr	r6, [pc, #36]	; (d8d50 <_Z17acquireWireBufferv+0x30>)
   d8d2a:	2100      	movs	r1, #0
   d8d2c:	f000 ffe9 	bl	d9d02 <memset>
   d8d30:	8025      	strh	r5, [r4, #0]
   d8d32:	2520      	movs	r5, #32
   d8d34:	4631      	mov	r1, r6
   d8d36:	60a5      	str	r5, [r4, #8]
   d8d38:	6125      	str	r5, [r4, #16]
   d8d3a:	4628      	mov	r0, r5
   d8d3c:	f000 f8da 	bl	d8ef4 <_ZnajRKSt9nothrow_t>
   d8d40:	4631      	mov	r1, r6
   d8d42:	6060      	str	r0, [r4, #4]
   d8d44:	4628      	mov	r0, r5
   d8d46:	f000 f8d5 	bl	d8ef4 <_ZnajRKSt9nothrow_t>
   d8d4a:	60e0      	str	r0, [r4, #12]
   d8d4c:	4620      	mov	r0, r4
   d8d4e:	bd70      	pop	{r4, r5, r6, pc}
   d8d50:	000da950 	.word	0x000da950

000d8d54 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d8d54:	b570      	push	{r4, r5, r6, lr}
   d8d56:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d58:	2514      	movs	r5, #20
   d8d5a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d5c:	4e09      	ldr	r6, [pc, #36]	; (d8d84 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d5e:	2100      	movs	r1, #0
   d8d60:	f000 ffcf 	bl	d9d02 <memset>
   d8d64:	8025      	strh	r5, [r4, #0]
   d8d66:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d68:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d6a:	60a5      	str	r5, [r4, #8]
   d8d6c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d6e:	4628      	mov	r0, r5
   d8d70:	f000 f8c0 	bl	d8ef4 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d74:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d76:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d78:	4628      	mov	r0, r5
   d8d7a:	f000 f8bb 	bl	d8ef4 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d7e:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d8d80:	4620      	mov	r0, r4
   d8d82:	bd70      	pop	{r4, r5, r6, pc}
   d8d84:	000da950 	.word	0x000da950

000d8d88 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8d88:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8d8a:	4d0e      	ldr	r5, [pc, #56]	; (d8dc4 <_Z19__fetch_global_Wirev+0x3c>)
   d8d8c:	6829      	ldr	r1, [r5, #0]
   d8d8e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8d92:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8d94:	d113      	bne.n	d8dbe <_Z19__fetch_global_Wirev+0x36>
   d8d96:	4628      	mov	r0, r5
   d8d98:	f7fb f987 	bl	d40aa <__cxa_guard_acquire>
   d8d9c:	b178      	cbz	r0, d8dbe <_Z19__fetch_global_Wirev+0x36>
   d8d9e:	a801      	add	r0, sp, #4
   d8da0:	f7ff ffbe 	bl	d8d20 <_Z17acquireWireBufferv>
   d8da4:	aa01      	add	r2, sp, #4
   d8da6:	4621      	mov	r1, r4
   d8da8:	4807      	ldr	r0, [pc, #28]	; (d8dc8 <_Z19__fetch_global_Wirev+0x40>)
   d8daa:	f7ff f989 	bl	d80c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8dae:	4628      	mov	r0, r5
   d8db0:	f7fb f980 	bl	d40b4 <__cxa_guard_release>
   d8db4:	4a05      	ldr	r2, [pc, #20]	; (d8dcc <_Z19__fetch_global_Wirev+0x44>)
   d8db6:	4906      	ldr	r1, [pc, #24]	; (d8dd0 <_Z19__fetch_global_Wirev+0x48>)
   d8db8:	4803      	ldr	r0, [pc, #12]	; (d8dc8 <_Z19__fetch_global_Wirev+0x40>)
   d8dba:	f000 f88b 	bl	d8ed4 <__aeabi_atexit>
	return wire;
}
   d8dbe:	4802      	ldr	r0, [pc, #8]	; (d8dc8 <_Z19__fetch_global_Wirev+0x40>)
   d8dc0:	b007      	add	sp, #28
   d8dc2:	bd30      	pop	{r4, r5, pc}
   d8dc4:	2003e70c 	.word	0x2003e70c
   d8dc8:	2003e724 	.word	0x2003e724
   d8dcc:	2003db90 	.word	0x2003db90
   d8dd0:	000d8069 	.word	0x000d8069

000d8dd4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8dd4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8dd6:	4c0e      	ldr	r4, [pc, #56]	; (d8e10 <_Z20__fetch_global_Wire1v+0x3c>)
   d8dd8:	6823      	ldr	r3, [r4, #0]
   d8dda:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8ddc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8dde:	d413      	bmi.n	d8e08 <_Z20__fetch_global_Wire1v+0x34>
   d8de0:	4620      	mov	r0, r4
   d8de2:	f7fb f962 	bl	d40aa <__cxa_guard_acquire>
   d8de6:	b178      	cbz	r0, d8e08 <_Z20__fetch_global_Wire1v+0x34>
   d8de8:	a801      	add	r0, sp, #4
   d8dea:	f7ff ffb3 	bl	d8d54 <_Z18acquireWire1Bufferv>
   d8dee:	aa01      	add	r2, sp, #4
   d8df0:	2101      	movs	r1, #1
   d8df2:	4808      	ldr	r0, [pc, #32]	; (d8e14 <_Z20__fetch_global_Wire1v+0x40>)
   d8df4:	f7ff f964 	bl	d80c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8df8:	4620      	mov	r0, r4
   d8dfa:	f7fb f95b 	bl	d40b4 <__cxa_guard_release>
   d8dfe:	4a06      	ldr	r2, [pc, #24]	; (d8e18 <_Z20__fetch_global_Wire1v+0x44>)
   d8e00:	4906      	ldr	r1, [pc, #24]	; (d8e1c <_Z20__fetch_global_Wire1v+0x48>)
   d8e02:	4804      	ldr	r0, [pc, #16]	; (d8e14 <_Z20__fetch_global_Wire1v+0x40>)
   d8e04:	f000 f866 	bl	d8ed4 <__aeabi_atexit>
	return wire;
}
   d8e08:	4802      	ldr	r0, [pc, #8]	; (d8e14 <_Z20__fetch_global_Wire1v+0x40>)
   d8e0a:	b006      	add	sp, #24
   d8e0c:	bd10      	pop	{r4, pc}
   d8e0e:	bf00      	nop
   d8e10:	2003e738 	.word	0x2003e738
   d8e14:	2003e710 	.word	0x2003e710
   d8e18:	2003db90 	.word	0x2003db90
   d8e1c:	000d8069 	.word	0x000d8069

000d8e20 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8e20:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8e22:	4e18      	ldr	r6, [pc, #96]	; (d8e84 <pinAvailable+0x64>)
   d8e24:	6831      	ldr	r1, [r6, #0]
   d8e26:	f011 0501 	ands.w	r5, r1, #1
   d8e2a:	4604      	mov	r4, r0
   d8e2c:	d10a      	bne.n	d8e44 <pinAvailable+0x24>
   d8e2e:	4630      	mov	r0, r6
   d8e30:	f7fb f93b 	bl	d40aa <__cxa_guard_acquire>
   d8e34:	b130      	cbz	r0, d8e44 <pinAvailable+0x24>
   d8e36:	4629      	mov	r1, r5
   d8e38:	4813      	ldr	r0, [pc, #76]	; (d8e88 <pinAvailable+0x68>)
   d8e3a:	f7ff f8c9 	bl	d7fd0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8e3e:	4630      	mov	r0, r6
   d8e40:	f7fb f938 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8e44:	4810      	ldr	r0, [pc, #64]	; (d8e88 <pinAvailable+0x68>)
   d8e46:	f7ff f8cd 	bl	d7fe4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8e4a:	b128      	cbz	r0, d8e58 <pinAvailable+0x38>
   d8e4c:	f1a4 030b 	sub.w	r3, r4, #11
   d8e50:	2b02      	cmp	r3, #2
   d8e52:	d801      	bhi.n	d8e58 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8e54:	2000      	movs	r0, #0
   d8e56:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8e58:	f7ff ff96 	bl	d8d88 <_Z19__fetch_global_Wirev>
   d8e5c:	f7ff f992 	bl	d8184 <_ZN7TwoWire9isEnabledEv>
   d8e60:	b108      	cbz	r0, d8e66 <pinAvailable+0x46>
   d8e62:	2c01      	cmp	r4, #1
   d8e64:	d9f6      	bls.n	d8e54 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8e66:	f7ff f9f3 	bl	d8250 <_Z22__fetch_global_Serial1v>
   d8e6a:	f7ff f9ee 	bl	d824a <_ZN11USARTSerial9isEnabledEv>
   d8e6e:	b118      	cbz	r0, d8e78 <pinAvailable+0x58>
   d8e70:	f1a4 0309 	sub.w	r3, r4, #9
   d8e74:	2b01      	cmp	r3, #1
   d8e76:	d9ed      	bls.n	d8e54 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8e78:	2c23      	cmp	r4, #35	; 0x23
   d8e7a:	bf8c      	ite	hi
   d8e7c:	2000      	movhi	r0, #0
   d8e7e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8e80:	bd70      	pop	{r4, r5, r6, pc}
   d8e82:	bf00      	nop
   d8e84:	2003e740 	.word	0x2003e740
   d8e88:	2003e744 	.word	0x2003e744

000d8e8c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8e8c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8e8e:	b538      	push	{r3, r4, r5, lr}
   d8e90:	4604      	mov	r4, r0
   d8e92:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8e94:	d80a      	bhi.n	d8eac <pinMode+0x20>
   d8e96:	29ff      	cmp	r1, #255	; 0xff
   d8e98:	d008      	beq.n	d8eac <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8e9a:	f7ff ffc1 	bl	d8e20 <pinAvailable>
   d8e9e:	b128      	cbz	r0, d8eac <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8ea0:	4629      	mov	r1, r5
   d8ea2:	4620      	mov	r0, r4
}
   d8ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8ea8:	f7fe bb2c 	b.w	d7504 <HAL_Pin_Mode>
   d8eac:	bd38      	pop	{r3, r4, r5, pc}

000d8eae <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8eae:	b510      	push	{r4, lr}
   d8eb0:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8eb2:	f7fe fb2f 	bl	d7514 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8eb6:	3804      	subs	r0, #4
   d8eb8:	b2c0      	uxtb	r0, r0
   d8eba:	2801      	cmp	r0, #1
   d8ebc:	d908      	bls.n	d8ed0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8ebe:	4620      	mov	r0, r4
   d8ec0:	f7ff ffae 	bl	d8e20 <pinAvailable>
   d8ec4:	b120      	cbz	r0, d8ed0 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8ec6:	4620      	mov	r0, r4
}
   d8ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8ecc:	f7fe bb2a 	b.w	d7524 <HAL_GPIO_Read>
}
   d8ed0:	2000      	movs	r0, #0
   d8ed2:	bd10      	pop	{r4, pc}

000d8ed4 <__aeabi_atexit>:
   d8ed4:	460b      	mov	r3, r1
   d8ed6:	4601      	mov	r1, r0
   d8ed8:	4618      	mov	r0, r3
   d8eda:	f000 bef9 	b.w	d9cd0 <__cxa_atexit>
	...

000d8ee0 <_ZSt15get_new_handlerv>:
   d8ee0:	4b02      	ldr	r3, [pc, #8]	; (d8eec <_ZSt15get_new_handlerv+0xc>)
   d8ee2:	6818      	ldr	r0, [r3, #0]
   d8ee4:	f3bf 8f5f 	dmb	sy
   d8ee8:	4770      	bx	lr
   d8eea:	bf00      	nop
   d8eec:	2003e74c 	.word	0x2003e74c

000d8ef0 <_ZdlPvj>:
   d8ef0:	f7fb b8d7 	b.w	d40a2 <_ZdlPv>

000d8ef4 <_ZnajRKSt9nothrow_t>:
   d8ef4:	f000 b800 	b.w	d8ef8 <_ZnwjRKSt9nothrow_t>

000d8ef8 <_ZnwjRKSt9nothrow_t>:
   d8ef8:	b510      	push	{r4, lr}
   d8efa:	2800      	cmp	r0, #0
   d8efc:	bf14      	ite	ne
   d8efe:	4604      	movne	r4, r0
   d8f00:	2401      	moveq	r4, #1
   d8f02:	4620      	mov	r0, r4
   d8f04:	f7fe fc0c 	bl	d7720 <malloc>
   d8f08:	b920      	cbnz	r0, d8f14 <_ZnwjRKSt9nothrow_t+0x1c>
   d8f0a:	f7ff ffe9 	bl	d8ee0 <_ZSt15get_new_handlerv>
   d8f0e:	b108      	cbz	r0, d8f14 <_ZnwjRKSt9nothrow_t+0x1c>
   d8f10:	4780      	blx	r0
   d8f12:	e7f6      	b.n	d8f02 <_ZnwjRKSt9nothrow_t+0xa>
   d8f14:	bd10      	pop	{r4, pc}

000d8f16 <_ZSt25__throw_bad_function_callv>:
   d8f16:	b508      	push	{r3, lr}
   d8f18:	f7fe fc22 	bl	d7760 <abort>

000d8f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8f1c:	4b18      	ldr	r3, [pc, #96]	; (d8f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8f1e:	681a      	ldr	r2, [r3, #0]
   d8f20:	07d1      	lsls	r1, r2, #31
   d8f22:	bf5c      	itt	pl
   d8f24:	2201      	movpl	r2, #1
   d8f26:	601a      	strpl	r2, [r3, #0]
   d8f28:	4b16      	ldr	r3, [pc, #88]	; (d8f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8f2a:	681a      	ldr	r2, [r3, #0]
   d8f2c:	07d2      	lsls	r2, r2, #31
   d8f2e:	bf5c      	itt	pl
   d8f30:	2201      	movpl	r2, #1
   d8f32:	601a      	strpl	r2, [r3, #0]
   d8f34:	4b14      	ldr	r3, [pc, #80]	; (d8f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8f36:	681a      	ldr	r2, [r3, #0]
   d8f38:	07d0      	lsls	r0, r2, #31
   d8f3a:	bf5c      	itt	pl
   d8f3c:	2201      	movpl	r2, #1
   d8f3e:	601a      	strpl	r2, [r3, #0]
   d8f40:	4b12      	ldr	r3, [pc, #72]	; (d8f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8f42:	681a      	ldr	r2, [r3, #0]
   d8f44:	07d1      	lsls	r1, r2, #31
   d8f46:	bf5c      	itt	pl
   d8f48:	2201      	movpl	r2, #1
   d8f4a:	601a      	strpl	r2, [r3, #0]
   d8f4c:	4b10      	ldr	r3, [pc, #64]	; (d8f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8f4e:	681a      	ldr	r2, [r3, #0]
   d8f50:	07d2      	lsls	r2, r2, #31
   d8f52:	bf5c      	itt	pl
   d8f54:	2201      	movpl	r2, #1
   d8f56:	601a      	strpl	r2, [r3, #0]
   d8f58:	4b0e      	ldr	r3, [pc, #56]	; (d8f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8f5a:	681a      	ldr	r2, [r3, #0]
   d8f5c:	07d0      	lsls	r0, r2, #31
   d8f5e:	bf5c      	itt	pl
   d8f60:	2201      	movpl	r2, #1
   d8f62:	601a      	strpl	r2, [r3, #0]
   d8f64:	4b0c      	ldr	r3, [pc, #48]	; (d8f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8f66:	681a      	ldr	r2, [r3, #0]
   d8f68:	07d1      	lsls	r1, r2, #31
   d8f6a:	bf5c      	itt	pl
   d8f6c:	2201      	movpl	r2, #1
   d8f6e:	601a      	strpl	r2, [r3, #0]
   d8f70:	4b0a      	ldr	r3, [pc, #40]	; (d8f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8f72:	681a      	ldr	r2, [r3, #0]
   d8f74:	07d2      	lsls	r2, r2, #31
   d8f76:	bf5c      	itt	pl
   d8f78:	2201      	movpl	r2, #1
   d8f7a:	601a      	strpl	r2, [r3, #0]
   d8f7c:	4770      	bx	lr
   d8f7e:	bf00      	nop
   d8f80:	2003e76c 	.word	0x2003e76c
   d8f84:	2003e768 	.word	0x2003e768
   d8f88:	2003e764 	.word	0x2003e764
   d8f8c:	2003e760 	.word	0x2003e760
   d8f90:	2003e75c 	.word	0x2003e75c
   d8f94:	2003e758 	.word	0x2003e758
   d8f98:	2003e754 	.word	0x2003e754
   d8f9c:	2003e750 	.word	0x2003e750

000d8fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8fa0:	4b24      	ldr	r3, [pc, #144]	; (d9034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8fa2:	681a      	ldr	r2, [r3, #0]
   d8fa4:	07d0      	lsls	r0, r2, #31
   d8fa6:	bf5c      	itt	pl
   d8fa8:	2201      	movpl	r2, #1
   d8faa:	601a      	strpl	r2, [r3, #0]
   d8fac:	4b22      	ldr	r3, [pc, #136]	; (d9038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8fae:	681a      	ldr	r2, [r3, #0]
   d8fb0:	07d1      	lsls	r1, r2, #31
   d8fb2:	bf5c      	itt	pl
   d8fb4:	2201      	movpl	r2, #1
   d8fb6:	601a      	strpl	r2, [r3, #0]
   d8fb8:	4b20      	ldr	r3, [pc, #128]	; (d903c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8fba:	681a      	ldr	r2, [r3, #0]
   d8fbc:	07d2      	lsls	r2, r2, #31
   d8fbe:	bf5c      	itt	pl
   d8fc0:	2201      	movpl	r2, #1
   d8fc2:	601a      	strpl	r2, [r3, #0]
   d8fc4:	4b1e      	ldr	r3, [pc, #120]	; (d9040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8fc6:	681a      	ldr	r2, [r3, #0]
   d8fc8:	07d0      	lsls	r0, r2, #31
   d8fca:	bf5c      	itt	pl
   d8fcc:	2201      	movpl	r2, #1
   d8fce:	601a      	strpl	r2, [r3, #0]
   d8fd0:	4b1c      	ldr	r3, [pc, #112]	; (d9044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8fd2:	681a      	ldr	r2, [r3, #0]
   d8fd4:	07d1      	lsls	r1, r2, #31
   d8fd6:	bf5c      	itt	pl
   d8fd8:	2201      	movpl	r2, #1
   d8fda:	601a      	strpl	r2, [r3, #0]
   d8fdc:	4b1a      	ldr	r3, [pc, #104]	; (d9048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8fde:	681a      	ldr	r2, [r3, #0]
   d8fe0:	07d2      	lsls	r2, r2, #31
   d8fe2:	bf5c      	itt	pl
   d8fe4:	2201      	movpl	r2, #1
   d8fe6:	601a      	strpl	r2, [r3, #0]
   d8fe8:	4b18      	ldr	r3, [pc, #96]	; (d904c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8fea:	681a      	ldr	r2, [r3, #0]
   d8fec:	07d0      	lsls	r0, r2, #31
   d8fee:	bf5c      	itt	pl
   d8ff0:	2201      	movpl	r2, #1
   d8ff2:	601a      	strpl	r2, [r3, #0]
   d8ff4:	4b16      	ldr	r3, [pc, #88]	; (d9050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8ff6:	681a      	ldr	r2, [r3, #0]
   d8ff8:	07d1      	lsls	r1, r2, #31
   d8ffa:	bf5c      	itt	pl
   d8ffc:	2201      	movpl	r2, #1
   d8ffe:	601a      	strpl	r2, [r3, #0]
   d9000:	4b14      	ldr	r3, [pc, #80]	; (d9054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d9002:	681a      	ldr	r2, [r3, #0]
   d9004:	07d2      	lsls	r2, r2, #31
   d9006:	bf5c      	itt	pl
   d9008:	2201      	movpl	r2, #1
   d900a:	601a      	strpl	r2, [r3, #0]
   d900c:	4b12      	ldr	r3, [pc, #72]	; (d9058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d900e:	681a      	ldr	r2, [r3, #0]
   d9010:	07d0      	lsls	r0, r2, #31
   d9012:	bf5c      	itt	pl
   d9014:	2201      	movpl	r2, #1
   d9016:	601a      	strpl	r2, [r3, #0]
   d9018:	4b10      	ldr	r3, [pc, #64]	; (d905c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d901a:	681a      	ldr	r2, [r3, #0]
   d901c:	07d1      	lsls	r1, r2, #31
   d901e:	bf5c      	itt	pl
   d9020:	2201      	movpl	r2, #1
   d9022:	601a      	strpl	r2, [r3, #0]
   d9024:	4b0e      	ldr	r3, [pc, #56]	; (d9060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d9026:	681a      	ldr	r2, [r3, #0]
   d9028:	07d2      	lsls	r2, r2, #31
   d902a:	bf5c      	itt	pl
   d902c:	2201      	movpl	r2, #1
   d902e:	601a      	strpl	r2, [r3, #0]
   d9030:	4770      	bx	lr
   d9032:	bf00      	nop
   d9034:	2003e79c 	.word	0x2003e79c
   d9038:	2003e798 	.word	0x2003e798
   d903c:	2003e794 	.word	0x2003e794
   d9040:	2003e790 	.word	0x2003e790
   d9044:	2003e78c 	.word	0x2003e78c
   d9048:	2003e788 	.word	0x2003e788
   d904c:	2003e784 	.word	0x2003e784
   d9050:	2003e780 	.word	0x2003e780
   d9054:	2003e77c 	.word	0x2003e77c
   d9058:	2003e778 	.word	0x2003e778
   d905c:	2003e774 	.word	0x2003e774
   d9060:	2003e770 	.word	0x2003e770

000d9064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9064:	4b24      	ldr	r3, [pc, #144]	; (d90f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9066:	681a      	ldr	r2, [r3, #0]
   d9068:	07d0      	lsls	r0, r2, #31
   d906a:	bf5c      	itt	pl
   d906c:	2201      	movpl	r2, #1
   d906e:	601a      	strpl	r2, [r3, #0]
   d9070:	4b22      	ldr	r3, [pc, #136]	; (d90fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9072:	681a      	ldr	r2, [r3, #0]
   d9074:	07d1      	lsls	r1, r2, #31
   d9076:	bf5c      	itt	pl
   d9078:	2201      	movpl	r2, #1
   d907a:	601a      	strpl	r2, [r3, #0]
   d907c:	4b20      	ldr	r3, [pc, #128]	; (d9100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d907e:	681a      	ldr	r2, [r3, #0]
   d9080:	07d2      	lsls	r2, r2, #31
   d9082:	bf5c      	itt	pl
   d9084:	2201      	movpl	r2, #1
   d9086:	601a      	strpl	r2, [r3, #0]
   d9088:	4b1e      	ldr	r3, [pc, #120]	; (d9104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d908a:	681a      	ldr	r2, [r3, #0]
   d908c:	07d0      	lsls	r0, r2, #31
   d908e:	bf5c      	itt	pl
   d9090:	2201      	movpl	r2, #1
   d9092:	601a      	strpl	r2, [r3, #0]
   d9094:	4b1c      	ldr	r3, [pc, #112]	; (d9108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d9096:	681a      	ldr	r2, [r3, #0]
   d9098:	07d1      	lsls	r1, r2, #31
   d909a:	bf5c      	itt	pl
   d909c:	2201      	movpl	r2, #1
   d909e:	601a      	strpl	r2, [r3, #0]
   d90a0:	4b1a      	ldr	r3, [pc, #104]	; (d910c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d90a2:	681a      	ldr	r2, [r3, #0]
   d90a4:	07d2      	lsls	r2, r2, #31
   d90a6:	bf5c      	itt	pl
   d90a8:	2201      	movpl	r2, #1
   d90aa:	601a      	strpl	r2, [r3, #0]
   d90ac:	4b18      	ldr	r3, [pc, #96]	; (d9110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d90ae:	681a      	ldr	r2, [r3, #0]
   d90b0:	07d0      	lsls	r0, r2, #31
   d90b2:	bf5c      	itt	pl
   d90b4:	2201      	movpl	r2, #1
   d90b6:	601a      	strpl	r2, [r3, #0]
   d90b8:	4b16      	ldr	r3, [pc, #88]	; (d9114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d90ba:	681a      	ldr	r2, [r3, #0]
   d90bc:	07d1      	lsls	r1, r2, #31
   d90be:	bf5c      	itt	pl
   d90c0:	2201      	movpl	r2, #1
   d90c2:	601a      	strpl	r2, [r3, #0]
   d90c4:	4b14      	ldr	r3, [pc, #80]	; (d9118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d90c6:	681a      	ldr	r2, [r3, #0]
   d90c8:	07d2      	lsls	r2, r2, #31
   d90ca:	bf5c      	itt	pl
   d90cc:	2201      	movpl	r2, #1
   d90ce:	601a      	strpl	r2, [r3, #0]
   d90d0:	4b12      	ldr	r3, [pc, #72]	; (d911c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d90d2:	681a      	ldr	r2, [r3, #0]
   d90d4:	07d0      	lsls	r0, r2, #31
   d90d6:	bf5c      	itt	pl
   d90d8:	2201      	movpl	r2, #1
   d90da:	601a      	strpl	r2, [r3, #0]
   d90dc:	4b10      	ldr	r3, [pc, #64]	; (d9120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d90de:	681a      	ldr	r2, [r3, #0]
   d90e0:	07d1      	lsls	r1, r2, #31
   d90e2:	bf5c      	itt	pl
   d90e4:	2201      	movpl	r2, #1
   d90e6:	601a      	strpl	r2, [r3, #0]
   d90e8:	4b0e      	ldr	r3, [pc, #56]	; (d9124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d90ea:	681a      	ldr	r2, [r3, #0]
   d90ec:	07d2      	lsls	r2, r2, #31
   d90ee:	bf5c      	itt	pl
   d90f0:	2201      	movpl	r2, #1
   d90f2:	601a      	strpl	r2, [r3, #0]
   d90f4:	4770      	bx	lr
   d90f6:	bf00      	nop
   d90f8:	2003e7cc 	.word	0x2003e7cc
   d90fc:	2003e7c8 	.word	0x2003e7c8
   d9100:	2003e7c4 	.word	0x2003e7c4
   d9104:	2003e7c0 	.word	0x2003e7c0
   d9108:	2003e7bc 	.word	0x2003e7bc
   d910c:	2003e7b8 	.word	0x2003e7b8
   d9110:	2003e7b4 	.word	0x2003e7b4
   d9114:	2003e7b0 	.word	0x2003e7b0
   d9118:	2003e7ac 	.word	0x2003e7ac
   d911c:	2003e7a8 	.word	0x2003e7a8
   d9120:	2003e7a4 	.word	0x2003e7a4
   d9124:	2003e7a0 	.word	0x2003e7a0

000d9128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9128:	4b18      	ldr	r3, [pc, #96]	; (d918c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d912a:	681a      	ldr	r2, [r3, #0]
   d912c:	07d1      	lsls	r1, r2, #31
   d912e:	bf5c      	itt	pl
   d9130:	2201      	movpl	r2, #1
   d9132:	601a      	strpl	r2, [r3, #0]
   d9134:	4b16      	ldr	r3, [pc, #88]	; (d9190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9136:	681a      	ldr	r2, [r3, #0]
   d9138:	07d2      	lsls	r2, r2, #31
   d913a:	bf5c      	itt	pl
   d913c:	2201      	movpl	r2, #1
   d913e:	601a      	strpl	r2, [r3, #0]
   d9140:	4b14      	ldr	r3, [pc, #80]	; (d9194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9142:	681a      	ldr	r2, [r3, #0]
   d9144:	07d0      	lsls	r0, r2, #31
   d9146:	bf5c      	itt	pl
   d9148:	2201      	movpl	r2, #1
   d914a:	601a      	strpl	r2, [r3, #0]
   d914c:	4b12      	ldr	r3, [pc, #72]	; (d9198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d914e:	681a      	ldr	r2, [r3, #0]
   d9150:	07d1      	lsls	r1, r2, #31
   d9152:	bf5c      	itt	pl
   d9154:	2201      	movpl	r2, #1
   d9156:	601a      	strpl	r2, [r3, #0]
   d9158:	4b10      	ldr	r3, [pc, #64]	; (d919c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d915a:	681a      	ldr	r2, [r3, #0]
   d915c:	07d2      	lsls	r2, r2, #31
   d915e:	bf5c      	itt	pl
   d9160:	2201      	movpl	r2, #1
   d9162:	601a      	strpl	r2, [r3, #0]
   d9164:	4b0e      	ldr	r3, [pc, #56]	; (d91a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9166:	681a      	ldr	r2, [r3, #0]
   d9168:	07d0      	lsls	r0, r2, #31
   d916a:	bf5c      	itt	pl
   d916c:	2201      	movpl	r2, #1
   d916e:	601a      	strpl	r2, [r3, #0]
   d9170:	4b0c      	ldr	r3, [pc, #48]	; (d91a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9172:	681a      	ldr	r2, [r3, #0]
   d9174:	07d1      	lsls	r1, r2, #31
   d9176:	bf5c      	itt	pl
   d9178:	2201      	movpl	r2, #1
   d917a:	601a      	strpl	r2, [r3, #0]
   d917c:	4b0a      	ldr	r3, [pc, #40]	; (d91a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d917e:	681a      	ldr	r2, [r3, #0]
   d9180:	07d2      	lsls	r2, r2, #31
   d9182:	bf5c      	itt	pl
   d9184:	2201      	movpl	r2, #1
   d9186:	601a      	strpl	r2, [r3, #0]
   d9188:	4770      	bx	lr
   d918a:	bf00      	nop
   d918c:	2003e7ec 	.word	0x2003e7ec
   d9190:	2003e7e8 	.word	0x2003e7e8
   d9194:	2003e7e4 	.word	0x2003e7e4
   d9198:	2003e7e0 	.word	0x2003e7e0
   d919c:	2003e7dc 	.word	0x2003e7dc
   d91a0:	2003e7d8 	.word	0x2003e7d8
   d91a4:	2003e7d4 	.word	0x2003e7d4
   d91a8:	2003e7d0 	.word	0x2003e7d0
   d91ac:	00000000 	.word	0x00000000

000d91b0 <floor>:
   d91b0:	ec51 0b10 	vmov	r0, r1, d0
   d91b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   d91b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d91bc:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   d91c0:	2d13      	cmp	r5, #19
   d91c2:	460c      	mov	r4, r1
   d91c4:	460f      	mov	r7, r1
   d91c6:	ee10 6a10 	vmov	r6, s0
   d91ca:	dc1d      	bgt.n	d9208 <floor+0x58>
   d91cc:	2d00      	cmp	r5, #0
   d91ce:	db43      	blt.n	d9258 <floor+0xa8>
   d91d0:	4b3d      	ldr	r3, [pc, #244]	; (d92c8 <floor+0x118>)
   d91d2:	fa43 f805 	asr.w	r8, r3, r5
   d91d6:	ea01 0308 	and.w	r3, r1, r8
   d91da:	4303      	orrs	r3, r0
   d91dc:	d019      	beq.n	d9212 <floor+0x62>
   d91de:	a338      	add	r3, pc, #224	; (adr r3, d92c0 <floor+0x110>)
   d91e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91e4:	f000 f87a 	bl	d92dc <__adddf3>
   d91e8:	2200      	movs	r2, #0
   d91ea:	2300      	movs	r3, #0
   d91ec:	f000 fcb8 	bl	d9b60 <__aeabi_dcmpgt>
   d91f0:	b120      	cbz	r0, d91fc <floor+0x4c>
   d91f2:	2c00      	cmp	r4, #0
   d91f4:	db49      	blt.n	d928a <floor+0xda>
   d91f6:	ea27 0408 	bic.w	r4, r7, r8
   d91fa:	2600      	movs	r6, #0
   d91fc:	4623      	mov	r3, r4
   d91fe:	4632      	mov	r2, r6
   d9200:	ec43 2b10 	vmov	d0, r2, r3
   d9204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9208:	2d33      	cmp	r5, #51	; 0x33
   d920a:	dd06      	ble.n	d921a <floor+0x6a>
   d920c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d9210:	d032      	beq.n	d9278 <floor+0xc8>
   d9212:	ec41 0b10 	vmov	d0, r0, r1
   d9216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d921a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   d921e:	f04f 38ff 	mov.w	r8, #4294967295
   d9222:	fa28 f803 	lsr.w	r8, r8, r3
   d9226:	ea10 0f08 	tst.w	r0, r8
   d922a:	d0f2      	beq.n	d9212 <floor+0x62>
   d922c:	a324      	add	r3, pc, #144	; (adr r3, d92c0 <floor+0x110>)
   d922e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9232:	f000 f853 	bl	d92dc <__adddf3>
   d9236:	2200      	movs	r2, #0
   d9238:	2300      	movs	r3, #0
   d923a:	f000 fc91 	bl	d9b60 <__aeabi_dcmpgt>
   d923e:	2800      	cmp	r0, #0
   d9240:	d0dc      	beq.n	d91fc <floor+0x4c>
   d9242:	2c00      	cmp	r4, #0
   d9244:	db27      	blt.n	d9296 <floor+0xe6>
   d9246:	463c      	mov	r4, r7
   d9248:	ea26 0608 	bic.w	r6, r6, r8
   d924c:	4623      	mov	r3, r4
   d924e:	4632      	mov	r2, r6
   d9250:	ec43 2b10 	vmov	d0, r2, r3
   d9254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9258:	a319      	add	r3, pc, #100	; (adr r3, d92c0 <floor+0x110>)
   d925a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d925e:	f000 f83d 	bl	d92dc <__adddf3>
   d9262:	2200      	movs	r2, #0
   d9264:	2300      	movs	r3, #0
   d9266:	f000 fc7b 	bl	d9b60 <__aeabi_dcmpgt>
   d926a:	2800      	cmp	r0, #0
   d926c:	d0c6      	beq.n	d91fc <floor+0x4c>
   d926e:	2c00      	cmp	r4, #0
   d9270:	db1c      	blt.n	d92ac <floor+0xfc>
   d9272:	2600      	movs	r6, #0
   d9274:	4634      	mov	r4, r6
   d9276:	e7c1      	b.n	d91fc <floor+0x4c>
   d9278:	ee10 2a10 	vmov	r2, s0
   d927c:	460b      	mov	r3, r1
   d927e:	f000 f82d 	bl	d92dc <__adddf3>
   d9282:	ec41 0b10 	vmov	d0, r0, r1
   d9286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d928a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   d928e:	fa43 f505 	asr.w	r5, r3, r5
   d9292:	442f      	add	r7, r5
   d9294:	e7af      	b.n	d91f6 <floor+0x46>
   d9296:	2d14      	cmp	r5, #20
   d9298:	d010      	beq.n	d92bc <floor+0x10c>
   d929a:	2301      	movs	r3, #1
   d929c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   d92a0:	fa03 f505 	lsl.w	r5, r3, r5
   d92a4:	19ae      	adds	r6, r5, r6
   d92a6:	bf28      	it	cs
   d92a8:	18ff      	addcs	r7, r7, r3
   d92aa:	e7cc      	b.n	d9246 <floor+0x96>
   d92ac:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   d92b0:	4b06      	ldr	r3, [pc, #24]	; (d92cc <floor+0x11c>)
   d92b2:	4332      	orrs	r2, r6
   d92b4:	bf18      	it	ne
   d92b6:	461c      	movne	r4, r3
   d92b8:	2600      	movs	r6, #0
   d92ba:	e79f      	b.n	d91fc <floor+0x4c>
   d92bc:	3701      	adds	r7, #1
   d92be:	e7c2      	b.n	d9246 <floor+0x96>
   d92c0:	8800759c 	.word	0x8800759c
   d92c4:	7e37e43c 	.word	0x7e37e43c
   d92c8:	000fffff 	.word	0x000fffff
   d92cc:	bff00000 	.word	0xbff00000

000d92d0 <__aeabi_drsub>:
   d92d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d92d4:	e002      	b.n	d92dc <__adddf3>
   d92d6:	bf00      	nop

000d92d8 <__aeabi_dsub>:
   d92d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d92dc <__adddf3>:
   d92dc:	b530      	push	{r4, r5, lr}
   d92de:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d92e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d92e6:	ea94 0f05 	teq	r4, r5
   d92ea:	bf08      	it	eq
   d92ec:	ea90 0f02 	teqeq	r0, r2
   d92f0:	bf1f      	itttt	ne
   d92f2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d92f6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d92fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d92fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9302:	f000 80e2 	beq.w	d94ca <__adddf3+0x1ee>
   d9306:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d930a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d930e:	bfb8      	it	lt
   d9310:	426d      	neglt	r5, r5
   d9312:	dd0c      	ble.n	d932e <__adddf3+0x52>
   d9314:	442c      	add	r4, r5
   d9316:	ea80 0202 	eor.w	r2, r0, r2
   d931a:	ea81 0303 	eor.w	r3, r1, r3
   d931e:	ea82 0000 	eor.w	r0, r2, r0
   d9322:	ea83 0101 	eor.w	r1, r3, r1
   d9326:	ea80 0202 	eor.w	r2, r0, r2
   d932a:	ea81 0303 	eor.w	r3, r1, r3
   d932e:	2d36      	cmp	r5, #54	; 0x36
   d9330:	bf88      	it	hi
   d9332:	bd30      	pophi	{r4, r5, pc}
   d9334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9338:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d933c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9344:	d002      	beq.n	d934c <__adddf3+0x70>
   d9346:	4240      	negs	r0, r0
   d9348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d934c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9350:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9358:	d002      	beq.n	d9360 <__adddf3+0x84>
   d935a:	4252      	negs	r2, r2
   d935c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9360:	ea94 0f05 	teq	r4, r5
   d9364:	f000 80a7 	beq.w	d94b6 <__adddf3+0x1da>
   d9368:	f1a4 0401 	sub.w	r4, r4, #1
   d936c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9370:	db0d      	blt.n	d938e <__adddf3+0xb2>
   d9372:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9376:	fa22 f205 	lsr.w	r2, r2, r5
   d937a:	1880      	adds	r0, r0, r2
   d937c:	f141 0100 	adc.w	r1, r1, #0
   d9380:	fa03 f20e 	lsl.w	r2, r3, lr
   d9384:	1880      	adds	r0, r0, r2
   d9386:	fa43 f305 	asr.w	r3, r3, r5
   d938a:	4159      	adcs	r1, r3
   d938c:	e00e      	b.n	d93ac <__adddf3+0xd0>
   d938e:	f1a5 0520 	sub.w	r5, r5, #32
   d9392:	f10e 0e20 	add.w	lr, lr, #32
   d9396:	2a01      	cmp	r2, #1
   d9398:	fa03 fc0e 	lsl.w	ip, r3, lr
   d939c:	bf28      	it	cs
   d939e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d93a2:	fa43 f305 	asr.w	r3, r3, r5
   d93a6:	18c0      	adds	r0, r0, r3
   d93a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d93ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d93b0:	d507      	bpl.n	d93c2 <__adddf3+0xe6>
   d93b2:	f04f 0e00 	mov.w	lr, #0
   d93b6:	f1dc 0c00 	rsbs	ip, ip, #0
   d93ba:	eb7e 0000 	sbcs.w	r0, lr, r0
   d93be:	eb6e 0101 	sbc.w	r1, lr, r1
   d93c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d93c6:	d31b      	bcc.n	d9400 <__adddf3+0x124>
   d93c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d93cc:	d30c      	bcc.n	d93e8 <__adddf3+0x10c>
   d93ce:	0849      	lsrs	r1, r1, #1
   d93d0:	ea5f 0030 	movs.w	r0, r0, rrx
   d93d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d93d8:	f104 0401 	add.w	r4, r4, #1
   d93dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d93e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d93e4:	f080 809a 	bcs.w	d951c <__adddf3+0x240>
   d93e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d93ec:	bf08      	it	eq
   d93ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d93f2:	f150 0000 	adcs.w	r0, r0, #0
   d93f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d93fa:	ea41 0105 	orr.w	r1, r1, r5
   d93fe:	bd30      	pop	{r4, r5, pc}
   d9400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9404:	4140      	adcs	r0, r0
   d9406:	eb41 0101 	adc.w	r1, r1, r1
   d940a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d940e:	f1a4 0401 	sub.w	r4, r4, #1
   d9412:	d1e9      	bne.n	d93e8 <__adddf3+0x10c>
   d9414:	f091 0f00 	teq	r1, #0
   d9418:	bf04      	itt	eq
   d941a:	4601      	moveq	r1, r0
   d941c:	2000      	moveq	r0, #0
   d941e:	fab1 f381 	clz	r3, r1
   d9422:	bf08      	it	eq
   d9424:	3320      	addeq	r3, #32
   d9426:	f1a3 030b 	sub.w	r3, r3, #11
   d942a:	f1b3 0220 	subs.w	r2, r3, #32
   d942e:	da0c      	bge.n	d944a <__adddf3+0x16e>
   d9430:	320c      	adds	r2, #12
   d9432:	dd08      	ble.n	d9446 <__adddf3+0x16a>
   d9434:	f102 0c14 	add.w	ip, r2, #20
   d9438:	f1c2 020c 	rsb	r2, r2, #12
   d943c:	fa01 f00c 	lsl.w	r0, r1, ip
   d9440:	fa21 f102 	lsr.w	r1, r1, r2
   d9444:	e00c      	b.n	d9460 <__adddf3+0x184>
   d9446:	f102 0214 	add.w	r2, r2, #20
   d944a:	bfd8      	it	le
   d944c:	f1c2 0c20 	rsble	ip, r2, #32
   d9450:	fa01 f102 	lsl.w	r1, r1, r2
   d9454:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9458:	bfdc      	itt	le
   d945a:	ea41 010c 	orrle.w	r1, r1, ip
   d945e:	4090      	lslle	r0, r2
   d9460:	1ae4      	subs	r4, r4, r3
   d9462:	bfa2      	ittt	ge
   d9464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9468:	4329      	orrge	r1, r5
   d946a:	bd30      	popge	{r4, r5, pc}
   d946c:	ea6f 0404 	mvn.w	r4, r4
   d9470:	3c1f      	subs	r4, #31
   d9472:	da1c      	bge.n	d94ae <__adddf3+0x1d2>
   d9474:	340c      	adds	r4, #12
   d9476:	dc0e      	bgt.n	d9496 <__adddf3+0x1ba>
   d9478:	f104 0414 	add.w	r4, r4, #20
   d947c:	f1c4 0220 	rsb	r2, r4, #32
   d9480:	fa20 f004 	lsr.w	r0, r0, r4
   d9484:	fa01 f302 	lsl.w	r3, r1, r2
   d9488:	ea40 0003 	orr.w	r0, r0, r3
   d948c:	fa21 f304 	lsr.w	r3, r1, r4
   d9490:	ea45 0103 	orr.w	r1, r5, r3
   d9494:	bd30      	pop	{r4, r5, pc}
   d9496:	f1c4 040c 	rsb	r4, r4, #12
   d949a:	f1c4 0220 	rsb	r2, r4, #32
   d949e:	fa20 f002 	lsr.w	r0, r0, r2
   d94a2:	fa01 f304 	lsl.w	r3, r1, r4
   d94a6:	ea40 0003 	orr.w	r0, r0, r3
   d94aa:	4629      	mov	r1, r5
   d94ac:	bd30      	pop	{r4, r5, pc}
   d94ae:	fa21 f004 	lsr.w	r0, r1, r4
   d94b2:	4629      	mov	r1, r5
   d94b4:	bd30      	pop	{r4, r5, pc}
   d94b6:	f094 0f00 	teq	r4, #0
   d94ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d94be:	bf06      	itte	eq
   d94c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d94c4:	3401      	addeq	r4, #1
   d94c6:	3d01      	subne	r5, #1
   d94c8:	e74e      	b.n	d9368 <__adddf3+0x8c>
   d94ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d94ce:	bf18      	it	ne
   d94d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d94d4:	d029      	beq.n	d952a <__adddf3+0x24e>
   d94d6:	ea94 0f05 	teq	r4, r5
   d94da:	bf08      	it	eq
   d94dc:	ea90 0f02 	teqeq	r0, r2
   d94e0:	d005      	beq.n	d94ee <__adddf3+0x212>
   d94e2:	ea54 0c00 	orrs.w	ip, r4, r0
   d94e6:	bf04      	itt	eq
   d94e8:	4619      	moveq	r1, r3
   d94ea:	4610      	moveq	r0, r2
   d94ec:	bd30      	pop	{r4, r5, pc}
   d94ee:	ea91 0f03 	teq	r1, r3
   d94f2:	bf1e      	ittt	ne
   d94f4:	2100      	movne	r1, #0
   d94f6:	2000      	movne	r0, #0
   d94f8:	bd30      	popne	{r4, r5, pc}
   d94fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d94fe:	d105      	bne.n	d950c <__adddf3+0x230>
   d9500:	0040      	lsls	r0, r0, #1
   d9502:	4149      	adcs	r1, r1
   d9504:	bf28      	it	cs
   d9506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d950a:	bd30      	pop	{r4, r5, pc}
   d950c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9510:	bf3c      	itt	cc
   d9512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9516:	bd30      	popcc	{r4, r5, pc}
   d9518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d951c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9524:	f04f 0000 	mov.w	r0, #0
   d9528:	bd30      	pop	{r4, r5, pc}
   d952a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d952e:	bf1a      	itte	ne
   d9530:	4619      	movne	r1, r3
   d9532:	4610      	movne	r0, r2
   d9534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9538:	bf1c      	itt	ne
   d953a:	460b      	movne	r3, r1
   d953c:	4602      	movne	r2, r0
   d953e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9542:	bf06      	itte	eq
   d9544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9548:	ea91 0f03 	teqeq	r1, r3
   d954c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9550:	bd30      	pop	{r4, r5, pc}
   d9552:	bf00      	nop

000d9554 <__aeabi_ui2d>:
   d9554:	f090 0f00 	teq	r0, #0
   d9558:	bf04      	itt	eq
   d955a:	2100      	moveq	r1, #0
   d955c:	4770      	bxeq	lr
   d955e:	b530      	push	{r4, r5, lr}
   d9560:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9564:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9568:	f04f 0500 	mov.w	r5, #0
   d956c:	f04f 0100 	mov.w	r1, #0
   d9570:	e750      	b.n	d9414 <__adddf3+0x138>
   d9572:	bf00      	nop

000d9574 <__aeabi_i2d>:
   d9574:	f090 0f00 	teq	r0, #0
   d9578:	bf04      	itt	eq
   d957a:	2100      	moveq	r1, #0
   d957c:	4770      	bxeq	lr
   d957e:	b530      	push	{r4, r5, lr}
   d9580:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9584:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d958c:	bf48      	it	mi
   d958e:	4240      	negmi	r0, r0
   d9590:	f04f 0100 	mov.w	r1, #0
   d9594:	e73e      	b.n	d9414 <__adddf3+0x138>
   d9596:	bf00      	nop

000d9598 <__aeabi_f2d>:
   d9598:	0042      	lsls	r2, r0, #1
   d959a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d959e:	ea4f 0131 	mov.w	r1, r1, rrx
   d95a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d95a6:	bf1f      	itttt	ne
   d95a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d95ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d95b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d95b4:	4770      	bxne	lr
   d95b6:	f092 0f00 	teq	r2, #0
   d95ba:	bf14      	ite	ne
   d95bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d95c0:	4770      	bxeq	lr
   d95c2:	b530      	push	{r4, r5, lr}
   d95c4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d95c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d95cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d95d0:	e720      	b.n	d9414 <__adddf3+0x138>
   d95d2:	bf00      	nop

000d95d4 <__aeabi_ul2d>:
   d95d4:	ea50 0201 	orrs.w	r2, r0, r1
   d95d8:	bf08      	it	eq
   d95da:	4770      	bxeq	lr
   d95dc:	b530      	push	{r4, r5, lr}
   d95de:	f04f 0500 	mov.w	r5, #0
   d95e2:	e00a      	b.n	d95fa <__aeabi_l2d+0x16>

000d95e4 <__aeabi_l2d>:
   d95e4:	ea50 0201 	orrs.w	r2, r0, r1
   d95e8:	bf08      	it	eq
   d95ea:	4770      	bxeq	lr
   d95ec:	b530      	push	{r4, r5, lr}
   d95ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d95f2:	d502      	bpl.n	d95fa <__aeabi_l2d+0x16>
   d95f4:	4240      	negs	r0, r0
   d95f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d95fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d95fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9606:	f43f aedc 	beq.w	d93c2 <__adddf3+0xe6>
   d960a:	f04f 0203 	mov.w	r2, #3
   d960e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9612:	bf18      	it	ne
   d9614:	3203      	addne	r2, #3
   d9616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d961a:	bf18      	it	ne
   d961c:	3203      	addne	r2, #3
   d961e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9622:	f1c2 0320 	rsb	r3, r2, #32
   d9626:	fa00 fc03 	lsl.w	ip, r0, r3
   d962a:	fa20 f002 	lsr.w	r0, r0, r2
   d962e:	fa01 fe03 	lsl.w	lr, r1, r3
   d9632:	ea40 000e 	orr.w	r0, r0, lr
   d9636:	fa21 f102 	lsr.w	r1, r1, r2
   d963a:	4414      	add	r4, r2
   d963c:	e6c1      	b.n	d93c2 <__adddf3+0xe6>
   d963e:	bf00      	nop

000d9640 <__aeabi_dmul>:
   d9640:	b570      	push	{r4, r5, r6, lr}
   d9642:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d964a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d964e:	bf1d      	ittte	ne
   d9650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9654:	ea94 0f0c 	teqne	r4, ip
   d9658:	ea95 0f0c 	teqne	r5, ip
   d965c:	f000 f8de 	bleq	d981c <__aeabi_dmul+0x1dc>
   d9660:	442c      	add	r4, r5
   d9662:	ea81 0603 	eor.w	r6, r1, r3
   d9666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d966a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d966e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9672:	bf18      	it	ne
   d9674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d967c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9680:	d038      	beq.n	d96f4 <__aeabi_dmul+0xb4>
   d9682:	fba0 ce02 	umull	ip, lr, r0, r2
   d9686:	f04f 0500 	mov.w	r5, #0
   d968a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d968e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9692:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9696:	f04f 0600 	mov.w	r6, #0
   d969a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d969e:	f09c 0f00 	teq	ip, #0
   d96a2:	bf18      	it	ne
   d96a4:	f04e 0e01 	orrne.w	lr, lr, #1
   d96a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d96ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d96b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d96b4:	d204      	bcs.n	d96c0 <__aeabi_dmul+0x80>
   d96b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d96ba:	416d      	adcs	r5, r5
   d96bc:	eb46 0606 	adc.w	r6, r6, r6
   d96c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d96c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d96c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d96cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d96d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d96d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d96d8:	bf88      	it	hi
   d96da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d96de:	d81e      	bhi.n	d971e <__aeabi_dmul+0xde>
   d96e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d96e4:	bf08      	it	eq
   d96e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d96ea:	f150 0000 	adcs.w	r0, r0, #0
   d96ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d96f2:	bd70      	pop	{r4, r5, r6, pc}
   d96f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d96f8:	ea46 0101 	orr.w	r1, r6, r1
   d96fc:	ea40 0002 	orr.w	r0, r0, r2
   d9700:	ea81 0103 	eor.w	r1, r1, r3
   d9704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9708:	bfc2      	ittt	gt
   d970a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d970e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9712:	bd70      	popgt	{r4, r5, r6, pc}
   d9714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9718:	f04f 0e00 	mov.w	lr, #0
   d971c:	3c01      	subs	r4, #1
   d971e:	f300 80ab 	bgt.w	d9878 <__aeabi_dmul+0x238>
   d9722:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9726:	bfde      	ittt	le
   d9728:	2000      	movle	r0, #0
   d972a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d972e:	bd70      	pople	{r4, r5, r6, pc}
   d9730:	f1c4 0400 	rsb	r4, r4, #0
   d9734:	3c20      	subs	r4, #32
   d9736:	da35      	bge.n	d97a4 <__aeabi_dmul+0x164>
   d9738:	340c      	adds	r4, #12
   d973a:	dc1b      	bgt.n	d9774 <__aeabi_dmul+0x134>
   d973c:	f104 0414 	add.w	r4, r4, #20
   d9740:	f1c4 0520 	rsb	r5, r4, #32
   d9744:	fa00 f305 	lsl.w	r3, r0, r5
   d9748:	fa20 f004 	lsr.w	r0, r0, r4
   d974c:	fa01 f205 	lsl.w	r2, r1, r5
   d9750:	ea40 0002 	orr.w	r0, r0, r2
   d9754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d975c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9760:	fa21 f604 	lsr.w	r6, r1, r4
   d9764:	eb42 0106 	adc.w	r1, r2, r6
   d9768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d976c:	bf08      	it	eq
   d976e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9772:	bd70      	pop	{r4, r5, r6, pc}
   d9774:	f1c4 040c 	rsb	r4, r4, #12
   d9778:	f1c4 0520 	rsb	r5, r4, #32
   d977c:	fa00 f304 	lsl.w	r3, r0, r4
   d9780:	fa20 f005 	lsr.w	r0, r0, r5
   d9784:	fa01 f204 	lsl.w	r2, r1, r4
   d9788:	ea40 0002 	orr.w	r0, r0, r2
   d978c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9794:	f141 0100 	adc.w	r1, r1, #0
   d9798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d979c:	bf08      	it	eq
   d979e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d97a2:	bd70      	pop	{r4, r5, r6, pc}
   d97a4:	f1c4 0520 	rsb	r5, r4, #32
   d97a8:	fa00 f205 	lsl.w	r2, r0, r5
   d97ac:	ea4e 0e02 	orr.w	lr, lr, r2
   d97b0:	fa20 f304 	lsr.w	r3, r0, r4
   d97b4:	fa01 f205 	lsl.w	r2, r1, r5
   d97b8:	ea43 0302 	orr.w	r3, r3, r2
   d97bc:	fa21 f004 	lsr.w	r0, r1, r4
   d97c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d97c4:	fa21 f204 	lsr.w	r2, r1, r4
   d97c8:	ea20 0002 	bic.w	r0, r0, r2
   d97cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d97d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d97d4:	bf08      	it	eq
   d97d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d97da:	bd70      	pop	{r4, r5, r6, pc}
   d97dc:	f094 0f00 	teq	r4, #0
   d97e0:	d10f      	bne.n	d9802 <__aeabi_dmul+0x1c2>
   d97e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d97e6:	0040      	lsls	r0, r0, #1
   d97e8:	eb41 0101 	adc.w	r1, r1, r1
   d97ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d97f0:	bf08      	it	eq
   d97f2:	3c01      	subeq	r4, #1
   d97f4:	d0f7      	beq.n	d97e6 <__aeabi_dmul+0x1a6>
   d97f6:	ea41 0106 	orr.w	r1, r1, r6
   d97fa:	f095 0f00 	teq	r5, #0
   d97fe:	bf18      	it	ne
   d9800:	4770      	bxne	lr
   d9802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9806:	0052      	lsls	r2, r2, #1
   d9808:	eb43 0303 	adc.w	r3, r3, r3
   d980c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9810:	bf08      	it	eq
   d9812:	3d01      	subeq	r5, #1
   d9814:	d0f7      	beq.n	d9806 <__aeabi_dmul+0x1c6>
   d9816:	ea43 0306 	orr.w	r3, r3, r6
   d981a:	4770      	bx	lr
   d981c:	ea94 0f0c 	teq	r4, ip
   d9820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9824:	bf18      	it	ne
   d9826:	ea95 0f0c 	teqne	r5, ip
   d982a:	d00c      	beq.n	d9846 <__aeabi_dmul+0x206>
   d982c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9830:	bf18      	it	ne
   d9832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9836:	d1d1      	bne.n	d97dc <__aeabi_dmul+0x19c>
   d9838:	ea81 0103 	eor.w	r1, r1, r3
   d983c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9840:	f04f 0000 	mov.w	r0, #0
   d9844:	bd70      	pop	{r4, r5, r6, pc}
   d9846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d984a:	bf06      	itte	eq
   d984c:	4610      	moveq	r0, r2
   d984e:	4619      	moveq	r1, r3
   d9850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9854:	d019      	beq.n	d988a <__aeabi_dmul+0x24a>
   d9856:	ea94 0f0c 	teq	r4, ip
   d985a:	d102      	bne.n	d9862 <__aeabi_dmul+0x222>
   d985c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9860:	d113      	bne.n	d988a <__aeabi_dmul+0x24a>
   d9862:	ea95 0f0c 	teq	r5, ip
   d9866:	d105      	bne.n	d9874 <__aeabi_dmul+0x234>
   d9868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d986c:	bf1c      	itt	ne
   d986e:	4610      	movne	r0, r2
   d9870:	4619      	movne	r1, r3
   d9872:	d10a      	bne.n	d988a <__aeabi_dmul+0x24a>
   d9874:	ea81 0103 	eor.w	r1, r1, r3
   d9878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d987c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9884:	f04f 0000 	mov.w	r0, #0
   d9888:	bd70      	pop	{r4, r5, r6, pc}
   d988a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d988e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9892:	bd70      	pop	{r4, r5, r6, pc}

000d9894 <__aeabi_ddiv>:
   d9894:	b570      	push	{r4, r5, r6, lr}
   d9896:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d989a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d989e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d98a2:	bf1d      	ittte	ne
   d98a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d98a8:	ea94 0f0c 	teqne	r4, ip
   d98ac:	ea95 0f0c 	teqne	r5, ip
   d98b0:	f000 f8a7 	bleq	d9a02 <__aeabi_ddiv+0x16e>
   d98b4:	eba4 0405 	sub.w	r4, r4, r5
   d98b8:	ea81 0e03 	eor.w	lr, r1, r3
   d98bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d98c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d98c4:	f000 8088 	beq.w	d99d8 <__aeabi_ddiv+0x144>
   d98c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d98cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d98d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d98d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d98d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d98dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d98e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d98e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d98e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d98ec:	429d      	cmp	r5, r3
   d98ee:	bf08      	it	eq
   d98f0:	4296      	cmpeq	r6, r2
   d98f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d98f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d98fa:	d202      	bcs.n	d9902 <__aeabi_ddiv+0x6e>
   d98fc:	085b      	lsrs	r3, r3, #1
   d98fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9902:	1ab6      	subs	r6, r6, r2
   d9904:	eb65 0503 	sbc.w	r5, r5, r3
   d9908:	085b      	lsrs	r3, r3, #1
   d990a:	ea4f 0232 	mov.w	r2, r2, rrx
   d990e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9916:	ebb6 0e02 	subs.w	lr, r6, r2
   d991a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d991e:	bf22      	ittt	cs
   d9920:	1ab6      	subcs	r6, r6, r2
   d9922:	4675      	movcs	r5, lr
   d9924:	ea40 000c 	orrcs.w	r0, r0, ip
   d9928:	085b      	lsrs	r3, r3, #1
   d992a:	ea4f 0232 	mov.w	r2, r2, rrx
   d992e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9932:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9936:	bf22      	ittt	cs
   d9938:	1ab6      	subcs	r6, r6, r2
   d993a:	4675      	movcs	r5, lr
   d993c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9940:	085b      	lsrs	r3, r3, #1
   d9942:	ea4f 0232 	mov.w	r2, r2, rrx
   d9946:	ebb6 0e02 	subs.w	lr, r6, r2
   d994a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d994e:	bf22      	ittt	cs
   d9950:	1ab6      	subcs	r6, r6, r2
   d9952:	4675      	movcs	r5, lr
   d9954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9958:	085b      	lsrs	r3, r3, #1
   d995a:	ea4f 0232 	mov.w	r2, r2, rrx
   d995e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9962:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9966:	bf22      	ittt	cs
   d9968:	1ab6      	subcs	r6, r6, r2
   d996a:	4675      	movcs	r5, lr
   d996c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9970:	ea55 0e06 	orrs.w	lr, r5, r6
   d9974:	d018      	beq.n	d99a8 <__aeabi_ddiv+0x114>
   d9976:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d997a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d997e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d998a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d998e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9992:	d1c0      	bne.n	d9916 <__aeabi_ddiv+0x82>
   d9994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9998:	d10b      	bne.n	d99b2 <__aeabi_ddiv+0x11e>
   d999a:	ea41 0100 	orr.w	r1, r1, r0
   d999e:	f04f 0000 	mov.w	r0, #0
   d99a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d99a6:	e7b6      	b.n	d9916 <__aeabi_ddiv+0x82>
   d99a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d99ac:	bf04      	itt	eq
   d99ae:	4301      	orreq	r1, r0
   d99b0:	2000      	moveq	r0, #0
   d99b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d99b6:	bf88      	it	hi
   d99b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d99bc:	f63f aeaf 	bhi.w	d971e <__aeabi_dmul+0xde>
   d99c0:	ebb5 0c03 	subs.w	ip, r5, r3
   d99c4:	bf04      	itt	eq
   d99c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d99ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d99ce:	f150 0000 	adcs.w	r0, r0, #0
   d99d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d99d6:	bd70      	pop	{r4, r5, r6, pc}
   d99d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d99dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d99e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d99e4:	bfc2      	ittt	gt
   d99e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d99ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d99ee:	bd70      	popgt	{r4, r5, r6, pc}
   d99f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d99f4:	f04f 0e00 	mov.w	lr, #0
   d99f8:	3c01      	subs	r4, #1
   d99fa:	e690      	b.n	d971e <__aeabi_dmul+0xde>
   d99fc:	ea45 0e06 	orr.w	lr, r5, r6
   d9a00:	e68d      	b.n	d971e <__aeabi_dmul+0xde>
   d9a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9a06:	ea94 0f0c 	teq	r4, ip
   d9a0a:	bf08      	it	eq
   d9a0c:	ea95 0f0c 	teqeq	r5, ip
   d9a10:	f43f af3b 	beq.w	d988a <__aeabi_dmul+0x24a>
   d9a14:	ea94 0f0c 	teq	r4, ip
   d9a18:	d10a      	bne.n	d9a30 <__aeabi_ddiv+0x19c>
   d9a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9a1e:	f47f af34 	bne.w	d988a <__aeabi_dmul+0x24a>
   d9a22:	ea95 0f0c 	teq	r5, ip
   d9a26:	f47f af25 	bne.w	d9874 <__aeabi_dmul+0x234>
   d9a2a:	4610      	mov	r0, r2
   d9a2c:	4619      	mov	r1, r3
   d9a2e:	e72c      	b.n	d988a <__aeabi_dmul+0x24a>
   d9a30:	ea95 0f0c 	teq	r5, ip
   d9a34:	d106      	bne.n	d9a44 <__aeabi_ddiv+0x1b0>
   d9a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9a3a:	f43f aefd 	beq.w	d9838 <__aeabi_dmul+0x1f8>
   d9a3e:	4610      	mov	r0, r2
   d9a40:	4619      	mov	r1, r3
   d9a42:	e722      	b.n	d988a <__aeabi_dmul+0x24a>
   d9a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9a48:	bf18      	it	ne
   d9a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9a4e:	f47f aec5 	bne.w	d97dc <__aeabi_dmul+0x19c>
   d9a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9a56:	f47f af0d 	bne.w	d9874 <__aeabi_dmul+0x234>
   d9a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9a5e:	f47f aeeb 	bne.w	d9838 <__aeabi_dmul+0x1f8>
   d9a62:	e712      	b.n	d988a <__aeabi_dmul+0x24a>

000d9a64 <__gedf2>:
   d9a64:	f04f 3cff 	mov.w	ip, #4294967295
   d9a68:	e006      	b.n	d9a78 <__cmpdf2+0x4>
   d9a6a:	bf00      	nop

000d9a6c <__ledf2>:
   d9a6c:	f04f 0c01 	mov.w	ip, #1
   d9a70:	e002      	b.n	d9a78 <__cmpdf2+0x4>
   d9a72:	bf00      	nop

000d9a74 <__cmpdf2>:
   d9a74:	f04f 0c01 	mov.w	ip, #1
   d9a78:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a88:	bf18      	it	ne
   d9a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9a8e:	d01b      	beq.n	d9ac8 <__cmpdf2+0x54>
   d9a90:	b001      	add	sp, #4
   d9a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9a96:	bf0c      	ite	eq
   d9a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9a9c:	ea91 0f03 	teqne	r1, r3
   d9aa0:	bf02      	ittt	eq
   d9aa2:	ea90 0f02 	teqeq	r0, r2
   d9aa6:	2000      	moveq	r0, #0
   d9aa8:	4770      	bxeq	lr
   d9aaa:	f110 0f00 	cmn.w	r0, #0
   d9aae:	ea91 0f03 	teq	r1, r3
   d9ab2:	bf58      	it	pl
   d9ab4:	4299      	cmppl	r1, r3
   d9ab6:	bf08      	it	eq
   d9ab8:	4290      	cmpeq	r0, r2
   d9aba:	bf2c      	ite	cs
   d9abc:	17d8      	asrcs	r0, r3, #31
   d9abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9ac2:	f040 0001 	orr.w	r0, r0, #1
   d9ac6:	4770      	bx	lr
   d9ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9ad0:	d102      	bne.n	d9ad8 <__cmpdf2+0x64>
   d9ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9ad6:	d107      	bne.n	d9ae8 <__cmpdf2+0x74>
   d9ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9ae0:	d1d6      	bne.n	d9a90 <__cmpdf2+0x1c>
   d9ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9ae6:	d0d3      	beq.n	d9a90 <__cmpdf2+0x1c>
   d9ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9aec:	4770      	bx	lr
   d9aee:	bf00      	nop

000d9af0 <__aeabi_cdrcmple>:
   d9af0:	4684      	mov	ip, r0
   d9af2:	4610      	mov	r0, r2
   d9af4:	4662      	mov	r2, ip
   d9af6:	468c      	mov	ip, r1
   d9af8:	4619      	mov	r1, r3
   d9afa:	4663      	mov	r3, ip
   d9afc:	e000      	b.n	d9b00 <__aeabi_cdcmpeq>
   d9afe:	bf00      	nop

000d9b00 <__aeabi_cdcmpeq>:
   d9b00:	b501      	push	{r0, lr}
   d9b02:	f7ff ffb7 	bl	d9a74 <__cmpdf2>
   d9b06:	2800      	cmp	r0, #0
   d9b08:	bf48      	it	mi
   d9b0a:	f110 0f00 	cmnmi.w	r0, #0
   d9b0e:	bd01      	pop	{r0, pc}

000d9b10 <__aeabi_dcmpeq>:
   d9b10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9b14:	f7ff fff4 	bl	d9b00 <__aeabi_cdcmpeq>
   d9b18:	bf0c      	ite	eq
   d9b1a:	2001      	moveq	r0, #1
   d9b1c:	2000      	movne	r0, #0
   d9b1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9b22:	bf00      	nop

000d9b24 <__aeabi_dcmplt>:
   d9b24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9b28:	f7ff ffea 	bl	d9b00 <__aeabi_cdcmpeq>
   d9b2c:	bf34      	ite	cc
   d9b2e:	2001      	movcc	r0, #1
   d9b30:	2000      	movcs	r0, #0
   d9b32:	f85d fb08 	ldr.w	pc, [sp], #8
   d9b36:	bf00      	nop

000d9b38 <__aeabi_dcmple>:
   d9b38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9b3c:	f7ff ffe0 	bl	d9b00 <__aeabi_cdcmpeq>
   d9b40:	bf94      	ite	ls
   d9b42:	2001      	movls	r0, #1
   d9b44:	2000      	movhi	r0, #0
   d9b46:	f85d fb08 	ldr.w	pc, [sp], #8
   d9b4a:	bf00      	nop

000d9b4c <__aeabi_dcmpge>:
   d9b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9b50:	f7ff ffce 	bl	d9af0 <__aeabi_cdrcmple>
   d9b54:	bf94      	ite	ls
   d9b56:	2001      	movls	r0, #1
   d9b58:	2000      	movhi	r0, #0
   d9b5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9b5e:	bf00      	nop

000d9b60 <__aeabi_dcmpgt>:
   d9b60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9b64:	f7ff ffc4 	bl	d9af0 <__aeabi_cdrcmple>
   d9b68:	bf34      	ite	cc
   d9b6a:	2001      	movcc	r0, #1
   d9b6c:	2000      	movcs	r0, #0
   d9b6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9b72:	bf00      	nop

000d9b74 <__aeabi_dcmpun>:
   d9b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b7c:	d102      	bne.n	d9b84 <__aeabi_dcmpun+0x10>
   d9b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9b82:	d10a      	bne.n	d9b9a <__aeabi_dcmpun+0x26>
   d9b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b8c:	d102      	bne.n	d9b94 <__aeabi_dcmpun+0x20>
   d9b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9b92:	d102      	bne.n	d9b9a <__aeabi_dcmpun+0x26>
   d9b94:	f04f 0000 	mov.w	r0, #0
   d9b98:	4770      	bx	lr
   d9b9a:	f04f 0001 	mov.w	r0, #1
   d9b9e:	4770      	bx	lr

000d9ba0 <__aeabi_d2iz>:
   d9ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9ba8:	d215      	bcs.n	d9bd6 <__aeabi_d2iz+0x36>
   d9baa:	d511      	bpl.n	d9bd0 <__aeabi_d2iz+0x30>
   d9bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9bb4:	d912      	bls.n	d9bdc <__aeabi_d2iz+0x3c>
   d9bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9bc6:	fa23 f002 	lsr.w	r0, r3, r2
   d9bca:	bf18      	it	ne
   d9bcc:	4240      	negne	r0, r0
   d9bce:	4770      	bx	lr
   d9bd0:	f04f 0000 	mov.w	r0, #0
   d9bd4:	4770      	bx	lr
   d9bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9bda:	d105      	bne.n	d9be8 <__aeabi_d2iz+0x48>
   d9bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9be0:	bf08      	it	eq
   d9be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9be6:	4770      	bx	lr
   d9be8:	f04f 0000 	mov.w	r0, #0
   d9bec:	4770      	bx	lr
   d9bee:	bf00      	nop

000d9bf0 <__aeabi_d2uiz>:
   d9bf0:	004a      	lsls	r2, r1, #1
   d9bf2:	d211      	bcs.n	d9c18 <__aeabi_d2uiz+0x28>
   d9bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9bf8:	d211      	bcs.n	d9c1e <__aeabi_d2uiz+0x2e>
   d9bfa:	d50d      	bpl.n	d9c18 <__aeabi_d2uiz+0x28>
   d9bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9c04:	d40e      	bmi.n	d9c24 <__aeabi_d2uiz+0x34>
   d9c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9c12:	fa23 f002 	lsr.w	r0, r3, r2
   d9c16:	4770      	bx	lr
   d9c18:	f04f 0000 	mov.w	r0, #0
   d9c1c:	4770      	bx	lr
   d9c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9c22:	d102      	bne.n	d9c2a <__aeabi_d2uiz+0x3a>
   d9c24:	f04f 30ff 	mov.w	r0, #4294967295
   d9c28:	4770      	bx	lr
   d9c2a:	f04f 0000 	mov.w	r0, #0
   d9c2e:	4770      	bx	lr

000d9c30 <__aeabi_d2f>:
   d9c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9c38:	bf24      	itt	cs
   d9c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9c42:	d90d      	bls.n	d9c60 <__aeabi_d2f+0x30>
   d9c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9c58:	bf08      	it	eq
   d9c5a:	f020 0001 	biceq.w	r0, r0, #1
   d9c5e:	4770      	bx	lr
   d9c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9c64:	d121      	bne.n	d9caa <__aeabi_d2f+0x7a>
   d9c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9c6a:	bfbc      	itt	lt
   d9c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9c70:	4770      	bxlt	lr
   d9c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9c7a:	f1c2 0218 	rsb	r2, r2, #24
   d9c7e:	f1c2 0c20 	rsb	ip, r2, #32
   d9c82:	fa10 f30c 	lsls.w	r3, r0, ip
   d9c86:	fa20 f002 	lsr.w	r0, r0, r2
   d9c8a:	bf18      	it	ne
   d9c8c:	f040 0001 	orrne.w	r0, r0, #1
   d9c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9c98:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9c9c:	ea40 000c 	orr.w	r0, r0, ip
   d9ca0:	fa23 f302 	lsr.w	r3, r3, r2
   d9ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9ca8:	e7cc      	b.n	d9c44 <__aeabi_d2f+0x14>
   d9caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9cae:	d107      	bne.n	d9cc0 <__aeabi_d2f+0x90>
   d9cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9cb4:	bf1e      	ittt	ne
   d9cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9cbe:	4770      	bxne	lr
   d9cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9ccc:	4770      	bx	lr
   d9cce:	bf00      	nop

000d9cd0 <__cxa_atexit>:
   d9cd0:	b510      	push	{r4, lr}
   d9cd2:	4c05      	ldr	r4, [pc, #20]	; (d9ce8 <__cxa_atexit+0x18>)
   d9cd4:	4613      	mov	r3, r2
   d9cd6:	b12c      	cbz	r4, d9ce4 <__cxa_atexit+0x14>
   d9cd8:	460a      	mov	r2, r1
   d9cda:	4601      	mov	r1, r0
   d9cdc:	2002      	movs	r0, #2
   d9cde:	f3af 8000 	nop.w
   d9ce2:	bd10      	pop	{r4, pc}
   d9ce4:	4620      	mov	r0, r4
   d9ce6:	bd10      	pop	{r4, pc}
   d9ce8:	00000000 	.word	0x00000000

000d9cec <memcpy>:
   d9cec:	b510      	push	{r4, lr}
   d9cee:	1e43      	subs	r3, r0, #1
   d9cf0:	440a      	add	r2, r1
   d9cf2:	4291      	cmp	r1, r2
   d9cf4:	d004      	beq.n	d9d00 <memcpy+0x14>
   d9cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9cfe:	e7f8      	b.n	d9cf2 <memcpy+0x6>
   d9d00:	bd10      	pop	{r4, pc}

000d9d02 <memset>:
   d9d02:	4402      	add	r2, r0
   d9d04:	4603      	mov	r3, r0
   d9d06:	4293      	cmp	r3, r2
   d9d08:	d002      	beq.n	d9d10 <memset+0xe>
   d9d0a:	f803 1b01 	strb.w	r1, [r3], #1
   d9d0e:	e7fa      	b.n	d9d06 <memset+0x4>
   d9d10:	4770      	bx	lr
	...

000d9d14 <srand>:
   d9d14:	b538      	push	{r3, r4, r5, lr}
   d9d16:	4b12      	ldr	r3, [pc, #72]	; (d9d60 <srand+0x4c>)
   d9d18:	681c      	ldr	r4, [r3, #0]
   d9d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9d1c:	4605      	mov	r5, r0
   d9d1e:	b9d3      	cbnz	r3, d9d56 <srand+0x42>
   d9d20:	2018      	movs	r0, #24
   d9d22:	f7fd fcfd 	bl	d7720 <malloc>
   d9d26:	f243 330e 	movw	r3, #13070	; 0x330e
   d9d2a:	63a0      	str	r0, [r4, #56]	; 0x38
   d9d2c:	8003      	strh	r3, [r0, #0]
   d9d2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9d32:	8043      	strh	r3, [r0, #2]
   d9d34:	f241 2334 	movw	r3, #4660	; 0x1234
   d9d38:	8083      	strh	r3, [r0, #4]
   d9d3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9d3e:	80c3      	strh	r3, [r0, #6]
   d9d40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9d44:	8103      	strh	r3, [r0, #8]
   d9d46:	2305      	movs	r3, #5
   d9d48:	8143      	strh	r3, [r0, #10]
   d9d4a:	230b      	movs	r3, #11
   d9d4c:	8183      	strh	r3, [r0, #12]
   d9d4e:	2201      	movs	r2, #1
   d9d50:	2300      	movs	r3, #0
   d9d52:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9d58:	2200      	movs	r2, #0
   d9d5a:	611d      	str	r5, [r3, #16]
   d9d5c:	615a      	str	r2, [r3, #20]
   d9d5e:	bd38      	pop	{r3, r4, r5, pc}
   d9d60:	2003db8c 	.word	0x2003db8c

000d9d64 <strcmp>:
   d9d64:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9d68:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9d6c:	2a01      	cmp	r2, #1
   d9d6e:	bf28      	it	cs
   d9d70:	429a      	cmpcs	r2, r3
   d9d72:	d0f7      	beq.n	d9d64 <strcmp>
   d9d74:	1ad0      	subs	r0, r2, r3
   d9d76:	4770      	bx	lr

000d9d78 <strlen>:
   d9d78:	4603      	mov	r3, r0
   d9d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9d7e:	2a00      	cmp	r2, #0
   d9d80:	d1fb      	bne.n	d9d7a <strlen+0x2>
   d9d82:	1a18      	subs	r0, r3, r0
   d9d84:	3801      	subs	r0, #1
   d9d86:	4770      	bx	lr

000d9d88 <strncpy>:
   d9d88:	b510      	push	{r4, lr}
   d9d8a:	4603      	mov	r3, r0
   d9d8c:	b142      	cbz	r2, d9da0 <strncpy+0x18>
   d9d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9d92:	f803 4b01 	strb.w	r4, [r3], #1
   d9d96:	3a01      	subs	r2, #1
   d9d98:	2c00      	cmp	r4, #0
   d9d9a:	d1f7      	bne.n	d9d8c <strncpy+0x4>
   d9d9c:	441a      	add	r2, r3
   d9d9e:	e000      	b.n	d9da2 <strncpy+0x1a>
   d9da0:	bd10      	pop	{r4, pc}
   d9da2:	4293      	cmp	r3, r2
   d9da4:	d002      	beq.n	d9dac <strncpy+0x24>
   d9da6:	f803 4b01 	strb.w	r4, [r3], #1
   d9daa:	e7fa      	b.n	d9da2 <strncpy+0x1a>
   d9dac:	bd10      	pop	{r4, pc}

000d9dae <link_code_end>:
	...

000d9db0 <dynalib_user>:
   d9db0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9dc0:	0000 0000                                   ....

000d9dc4 <_ZZ13telemetrySendPKcS0_zE12__FUNCTION__>:
   d9dc4:	6574 656c 656d 7274 5379 6e65 0064          telemetrySend.

000d9dd2 <_ZZ5setupE12__FUNCTION__>:
   d9dd2:	6573 7574 0070                              setup.

000d9dd8 <_ZZ14setTargetSpeediE12__FUNCTION__>:
   d9dd8:	6573 5474 7261 6567 5374 6570 6465 5300          setTargetSpeed.

000d9de7 <_ZZ15SleepStateCheckvE12__FUNCTION__>:
   d9de7:	6c53 6565 5370 6174 6574 6843 6365 006b     SleepStateCheck.

000d9df7 <_ZZ12MQTTcallbackPcPhjE12__FUNCTION__>:
   d9df7:	514d 5454 6163 6c6c 6162 6b63 6c00               MQTTcallback.

000d9e04 <_ZZ4loopE12__FUNCTION__>:
   d9e04:	6f6c 706f 5300                                   loop.

000d9e09 <_ZZ16SleepStateTogglevE12__FUNCTION__>:
   d9e09:	6c53 6565 5370 6174 6574 6f54 6767 656c     SleepStateToggle
	...

000d9e1a <_ZZ14SleepStateInitvE12__FUNCTION__>:
   d9e1a:	6c53 6565 5370 6174 6574 6e49 7469 5b00     SleepStateInit.[
   d9e2a:	7325 255d 2a2e 0073 4552 0044 5247 4545     %s]%.*s.RED.GREE
   d9e3a:	004e 4c42 4555 4100 4157 454b 4100 4c53     N.BLUE.AWAKE.ASL
   d9e4a:	4545 0050 4e55 4e4b 574f 004e 255b 5d73     EEP.UNKNOWN.[%s]
   d9e5a:	2520 2064 3e2d 2520 2064 0020 255b 5d73      %d -> %d  .[%s]
   d9e6a:	2520 2064 3e2d 6420 6265 756f 636e 2065      %d -> debounce 
   d9e7a:	5b00 7325 205d 6425 6520 746e 7265 7320     .[%s] %d enter s
   d9e8a:	656c 7065 6d20 646f 2065 6f66 2072 3036     leep mode for 60
   d9e9a:	7320 6365 6e6f 7364 6f20 2072 3041 6620      seconds or A0 f
   d9eaa:	6c61 696c 676e 5b00 7325 205d 6425 2d20     alling.[%s] %d -
   d9eba:	253e 2073 5b00 7325 205d 6425 7320 656c     >%s .[%s] %d sle
   d9eca:	7065 7453 7461 3d65 7325 2820 6425 2029     epState=%s (%d) 
   d9eda:	5b00 7325 005d 255b 5d73 6c63 6569 746e     .[%s].[%s]client
   d9eea:	6620 6961 656c 2064 6f74 6320 6e6f 656e      failed to conne
   d9efa:	7463 5b00 7325 6d5d 7471 2074 6572 6461     ct.[%s]mqtt read
   d9f0a:	0079 6f63 6f6c 0072 7566 006e 255b 5d73     y.color.fun.[%s]
   d9f1a:	7020 6275 696c 6873 6820 6c65 6f6c 5b00      publish hello.[
   d9f2a:	7325 205d 514d 5454 4620 4941 454c 2044     %s] MQTT FAILED 
   d9f3a:	6f74 6320 6e6f 656e 7463 7300 7465 7075     to connect.setup
   d9f4a:	2928 000a 6f4f 706f 2c73 6e20 206f 4e42     ()..Ooops, no BN
   d9f5a:	304f 3535 6420 7465 6365 6574 2064 2e2e     O055 detected ..
   d9f6a:	202e 6843 6365 206b 6f79 7275 7720 7269     . Check your wir
   d9f7a:	6e69 2067 726f 4920 4332 4120 4444 2152     ing or I2C ADDR!
   d9f8a:	5b00 7325 625d 6f6e 7220 6165 7964 5b00     .[%s]bno ready.[
   d9f9a:	7325 725d 6267 7220 6165 7964 5b00 7325     %s]rgb ready.[%s
   d9faa:	695d 6332 7320 616c 6576 7220 6165 7964     ]i2c slave ready
   d9fba:	5b00 7325 6c5d 776f 7020 776f 7265 7220     .[%s]low power r
   d9fca:	6165 7964 5b00 7325 695d 7562 2073 6572     eady.[%s]ibus re
   d9fda:	6461 0079 255b 5d73 6970 7364 7220 6165     ady.[%s]pids rea
   d9fea:	7964 7300 7465 7075 2028 6f63 706d 656c     dy.setup( comple
   d9ffa:	6574 2920 000a 5541 4f54 414d 4954 0043     te )..AUTOMATIC.
   da00a:	414d 554e 4c41 6d00 7361 6574 2072 7075     MANUAL.master up
   da01a:	6164 6574 2064 7525 7420 206f 7525 2800     dated %u to %u.(
   da02a:	6425 2029 3a5a 2520 0066 207b 5f27 6974     %d) Z: %f.{ '_ti
   da03a:	656d 3a27 2720 6c25 2775 202c 7427 7079     me': '%lu', 'typ
   da04a:	2765 203a 6927 756d 2c27 2720 2758 203a     e': 'imu', 'X': 
   da05a:	2527 2766 202c 5927 3a27 2527 2766 202c     '%f', 'Y':'%f', 
   da06a:	275a 3a20 2720 6625 2027 007d 6d69 0075     Z' : '%f' }.imu.
   da07a:	207b 5f22 6974 656d 3a22 2220 6c25 2275     { "_time": "%lu"
   da08a:	202c 7422 7079 2265 223a 4269 7375 2c22     , "type":"iBus",
   da09a:	2220 616e 656d 3a22 6922 7542 2273 202c      "name":"iBus", 
   da0aa:	3022 2022 203a 2522 2278 202c 3122 2022     "0" : "%x", "1" 
   da0ba:	3a20 2220 7825 2c22 2220 2232 3a20 2220      : "%x", "2" : "
   da0ca:	7825 2c22 2220 2233 223a 7825 2c22 2220     %x", "3":"%x", "
   da0da:	2234 223a 7825 2c22 2220 2235 223a 7825     4":"%x", "5":"%x
   da0ea:	2c22 2220 2236 223a 7825 2c22 2220 2237     ", "6":"%x", "7"
   da0fa:	223a 7825 2c22 2220 2238 223a 7825 2c22     :"%x", "8":"%x",
   da10a:	2220 2239 223a 7825 2022 007d 4269 7375      "9":"%x" }.iBus
   da11a:	7200 6769 7468 6553 7074 696f 746e 6620     .rightSetpoint f
   da12a:	6f72 206d 5852 3d20 2520 0066 656c 7466     rom RX = %f.left
   da13a:	6553 7074 696f 746e 6620 6f72 206d 5852     Setpoint from RX
   da14a:	3d20 2520 0066 5453 5241 2054 6162 616c      = %f.START bala
   da15a:	636e 4965 706e 7475 6620 6f72 206d 5852     nceInput from RX
   da16a:	3d20 2520 0066 255b 5d73 2520 2064 3e2d      = %f.[%s] %d ->
   da17a:	4220 4c41 4e41 4543 495f 494e 2054 0020      BALANCE_INIT  .
   da18a:	255b 5d73 2520 2064 3e2d 4d20 5451 5f54     [%s] %d -> MQTT_
   da19a:	4554 5453 2020 7b00 2720 745f 6d69 2765     TEST  .{ '_time'
   da1aa:	203a 2527 756c 2c27 2720 7974 6570 3a27     : '%lu', 'type':
   da1ba:	2720 6574 7473 2027 007d 6574 7473 6200      'test' }.test.b
   da1ca:	6c61 6e61 6563 6720 656f 2073 6361 6974     alance goes acti
   da1da:	6576 203a 2520 2c64 2520 0064 6162 616c     ve:  %d, %d.bala
   da1ea:	636e 2065 6f67 7365 6920 6c64 3a65 2520     nce goes idle: %
   da1fa:	2c64 2520 0064 6162 616c 636e 5065 6469     d, %d.balancePid
   da20a:	7b20 2220 745f 6d69 2265 203a 2522 756c      { "_time": "%lu
   da21a:	2c22 2220 6e49 7570 2274 3a20 2220 6625     ", "Input" : "%f
   da22a:	2c22 2220 6553 7074 696f 746e 2022 3a20     ", "Setpoint"  :
   da23a:	2220 6625 2c22 2220 754f 7074 7475 2022      "%f", "Output" 
   da24a:	203a 2522 2266 7d20 7b00 2220 745f 6d69     : "%f" }.{ "_tim
   da25a:	2265 203a 2522 756c 2c22 2220 7974 6570     e": "%lu", "type
   da26a:	3a22 7022 6469 2c22 2220 616e 656d 3a22     ":"pid", "name":
   da27a:	6222 6c61 6e61 6563 6950 2264 202c 4922     "balancePid", "I
   da28a:	706e 7475 2022 203a 2522 2266 202c 5322     nput" : "%f", "S
   da29a:	7465 6f70 6e69 2274 2020 203a 2522 2266     etpoint"  : "%f"
   da2aa:	202c 4f22 7475 7570 2274 3a20 2220 6625     , "Output" : "%f
   da2ba:	2c22 2220 704b 3a22 2522 2266 202c 4b22     ", "Kp":"%f", "K
   da2ca:	2269 223a 6625 2c22 2220 644b 3a22 2522     i":"%f", "Kd":"%
   da2da:	2266 202c 6d22 646f 2265 223a 7325 2022     f", "mode":"%s" 
   da2ea:	7d20 6200 6c61 6e61 6563 6950 0064 207b      }.balancePid.{ 
   da2fa:	5f22 6974 656d 3a22 2220 6c25 2275 202c     "_time": "%lu", 
   da30a:	7422 7079 2265 223a 6970 2264 202c 6e22     "type":"pid", "n
   da31a:	6d61 2265 223a 656c 7466 6950 2264 202c     ame":"leftPid", 
   da32a:	4922 706e 7475 2022 203a 2522 2266 202c     "Input" : "%f", 
   da33a:	5322 7465 6f70 6e69 2274 2020 203a 2522     "Setpoint"  : "%
   da34a:	2266 202c 4f22 7475 7570 2274 3a20 2220     f", "Output" : "
   da35a:	6625 2c22 2220 704b 3a22 2522 2266 202c     %f", "Kp":"%f", 
   da36a:	4b22 2269 223a 6625 2c22 2220 644b 3a22     "Ki":"%f", "Kd":
   da37a:	2522 2266 202c 6d22 646f 2265 223a 7325     "%f", "mode":"%s
   da38a:	2022 7d20 6c00 6665 5074 6469 5b00 7325     "  }.leftPid.[%s
   da39a:	205d 6425 2d20 6c20 6665 2074 6970 2064     ] %d - left pid 
   da3aa:	6e69 7570 3d74 6625 202c 6573 7074 696f     input=%f, setpoi
   da3ba:	746e 253d 2c66 6f20 7475 7570 3d74 6625     nt=%f, output=%f
   da3ca:	7b00 2220 745f 6d69 2265 203a 2522 756c     .{ "_time": "%lu
   da3da:	2c22 2220 7974 6570 3a22 7022 776f 7265     ", "type":"power
   da3ea:	2c22 2220 616e 656d 3a22 6c22 6665 5074     ", "name":"leftP
   da3fa:	776f 7265 2c22 2220 6f70 6577 2272 3a20     ower", "power" :
   da40a:	2220 6625 2022 7d20 6c00 6665 5074 776f      "%f"  }.leftPow
   da41a:	7265 5b00 7325 205d 6425 2d20 6c20 6665     er.[%s] %d - lef
   da42a:	2074 6f70 6577 3d72 6625 7b00 2220 745f     t power=%f.{ "_t
   da43a:	6d69 2265 203a 6c25 2c75 2220 7974 6570     ime": %lu, "type
   da44a:	3a22 7022 6469 2c22 2220 616e 656d 3a22     ":"pid", "name":
   da45a:	7222 6769 7468 6950 2264 202c 4922 706e     "rightPid", "Inp
   da46a:	7475 2022 203a 6625 202c 5322 7465 6f70     ut" : %f, "Setpo
   da47a:	6e69 2274 2020 203a 6625 202c 4f22 7475     int"  : %f, "Out
   da48a:	7570 2274 3a20 2520 2c66 2220 704b 3a22     put" : %f, "Kp":
   da49a:	6625 202c 4b22 2269 253a 2c66 2220 644b     %f, "Ki":%f, "Kd
   da4aa:	3a22 6625 202c 6d22 646f 2265 223a 7325     ":%f, "mode":"%s
   da4ba:	2022 7d20 7200 6769 7468 6950 0064 207b     "  }.rightPid.{ 
   da4ca:	5f22 6974 656d 3a22 2220 6c25 2275 202c     "_time": "%lu", 
   da4da:	7422 7079 2265 223a 6f70 6577 2272 202c     "type":"power", 
   da4ea:	6e22 6d61 2265 223a 6972 6867 5074 776f     "name":"rightPow
   da4fa:	7265 2c22 2220 6f70 6577 2272 3a20 2220     er", "power" : "
   da50a:	6625 2022 7d20 7200 6769 7468 6f50 6577     %f"  }.rightPowe
   da51a:	0072 255b 5d73 2520 2064 202d 6972 6867     r.[%s] %d - righ
   da52a:	2074 6970 2064 6e69 7570 3d74 6625 202c     t pid input=%f, 
   da53a:	6573 7074 696f 746e 253d 2c66 6f20 7475     setpoint=%f, out
   da54a:	7570 3d74 6625 5b00 7325 205d 6425 2d20     put=%f.[%s] %d -
   da55a:	7220 6769 7468 7020 776f 7265 253d 0066      right power=%f.
   da56a:	255b 5d73 2520 2064 202d 656c 7466 7020     [%s] %d - left p
   da57a:	6469 4120 5455 544f 4e55 2045 4f43 504d     id AUTOTUNE COMP
   da58a:	454c 4554 4b20 3d70 6625 202c 694b 253d     LETE Kp=%f, Ki=%
   da59a:	2c66 4b20 3d64 6625 5b00 7325 205d 6425     f, Kd=%f.[%s] %d
   da5aa:	2d20 6c20 6665 2074 6970 2064 5541 4f54      - left pid AUTO
   da5ba:	5554 454e 5220 4e55 494e 474e 6920 706e     TUNE RUNNING inp
   da5ca:	7475 253d 2c66 7320 7465 6f70 6e69 3d74     ut=%f, setpoint=
   da5da:	6625 202c 756f 7074 7475 253d 0066 7345     %f, output=%f.Es
   da5ea:	6974 616d 6574 2064 7270 2d65 6373 6c61     timated pre-scal
   da5fa:	3a65 0020 6946 616e 206c 7270 2d65 6373     e: .Final pre-sc
   da60a:	6c61 3a65 0020 0400 514d 5454 0004 4d06     ale: ...MQTT...M
   da61a:	4951 6473 0370 4e42 304f 3535 0000          QIsdp.BNO055..

000da628 <_ZTV15Adafruit_BNO055>:
	...
   da630:	40d9 000d 5609 000d 40bb 000d 6fa5 000d     .@...V...@...o..
   da640:	6ccd 000d                                   .l..

000da644 <_ZTV8I2CSlave>:
	...
   da64c:	7011 000d 7031 000d                         .p..1p..

000da654 <_ZTVN5spark12NetworkClassE>:
	...
   da65c:	7781 000d 778b 000d 7795 000d 779f 000d     .w...w...w...w..
   da66c:	77a9 000d 77b5 000d 77c1 000d 77cd 000d     .w...w...w...w..
   da67c:	77d5 000d 77df 000d 77e9 000d               .w...w...w..

000da688 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da690:	7951 000d 7957 000d 7e3f 000d 7965 000d     Qy..Wy..?~..ey..
   da6a0:	7953 000d                                   Sy..

000da6a4 <_ZTV9TCPClient>:
	...
   da6ac:	648d 000d 64c1 000d 78c9 000d 78e3 000d     .d...d...x...x..
   da6bc:	7ce5 000d 7a37 000d 7a09 000d 790d 000d     .|..7z...z...y..
   da6cc:	7bc1 000d 7abd 000d 7a6b 000d 7cb5 000d     .{...z..kz...|..
   da6dc:	790f 000d 7947 000d 78f5 000d 7969 000d     .y..Gy...x..iy..
   da6ec:	79e9 000d 6977 6972 676e 7200 6365 2076     .y..wiring.recv 
   da6fc:	7265 6f72 2072 203d 6425 0000               error = %d..

000da708 <_ZTVN5spark9MeshClassE>:
	...
   da710:	7eb5 000d 7eab 000d 7ea1 000d 7e97 000d     .~...~...~...~..
   da720:	7e8b 000d 7e7f 000d 7e73 000d 7e6b 000d     .~...~..s~..k~..
   da730:	7e61 000d 7e57 000d 77e9 000d               a~..W~...w..

000da73c <_ZTVN5spark9WiFiClassE>:
	...
   da744:	8049 000d 803f 000d 8035 000d 7feb 000d     I...?...5.......
   da754:	8029 000d 801d 000d 8011 000d 8009 000d     )...............
   da764:	7fff 000d 7ff5 000d 77e9 000d               .........w..

000da770 <_ZTV7TwoWire>:
	...
   da778:	8069 000d 80b3 000d 808b 000d 806b 000d     i...........k...
   da788:	8093 000d 809b 000d 80a3 000d 80ab 000d     ................

000da798 <_ZTV11USARTSerial>:
	...
   da7a0:	818d 000d 81dd 000d 81eb 000d 8763 000d     ............c...
   da7b0:	81a1 000d 81c3 000d 81af 000d 81d7 000d     ................
   da7c0:	818f 000d 8193 000d                         ........

000da7c8 <_ZTV9USBSerial>:
	...
   da7d0:	82a1 000d 82f1 000d 82ff 000d 8763 000d     ............c...
   da7e0:	82dd 000d 82a3 000d 82b9 000d 82eb 000d     ................
   da7f0:	82cf 000d 829d 000d                         ........

000da7f8 <_ZTV9IPAddress>:
	...
   da800:	83bd 000d 83ad 000d 83af 000d 005a 2b25     ............Z.%+
   da810:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   da820:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   da830:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
   da840:	5300 7265 6169 316c 7400 7079 0065 6170     .Serial1.type.pa
   da850:	6172 006d 6d63 0064 6e68 0064 7473 6d72     ram.cmd.hnd.strm
   da860:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
   da870:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
   da880:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
   da890:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
   da8a0:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
   da8b0:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
   da8c0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
   da8d0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
   da8e0:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
   da8f0:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
   da900:	6f72 0072 6170 696e 0063 6c61 006c 616e     ror.panic.all.na
   da910:	006e 766f 0066 002e 6e69 0066               n.ovf...inf.

000da91c <_ZTVN5spark13EthernetClassE>:
	...
   da924:	8d03 000d 8cf9 000d 8cef 000d 8ce5 000d     ................
   da934:	8cd9 000d 8ccd 000d 8cc1 000d 8cb9 000d     ................
   da944:	8caf 000d 8ca5 000d 77e9 000d               .........w..

000da950 <_ZSt7nothrow>:
   da950:	0000 0000                                   ....

000da954 <__sf_fake_stdin>:
	...

000da974 <__sf_fake_stdout>:
	...

000da994 <__sf_fake_stderr>:
	...

000da9b4 <link_const_variable_data_end>:
   da9b4:	000d5619 	.word	0x000d5619
   da9b8:	000d5bd9 	.word	0x000d5bd9
   da9bc:	000d600d 	.word	0x000d600d
   da9c0:	000d61ab 	.word	0x000d61ab
   da9c4:	000d6371 	.word	0x000d6371
   da9c8:	000d6487 	.word	0x000d6487
   da9cc:	000d6cc7 	.word	0x000d6cc7
   da9d0:	000d6ff7 	.word	0x000d6ff7
   da9d4:	000d6ffb 	.word	0x000d6ffb
   da9d8:	000d7001 	.word	0x000d7001
   da9dc:	000d71dd 	.word	0x000d71dd
   da9e0:	000d71e1 	.word	0x000d71e1
   da9e4:	000d78b5 	.word	0x000d78b5
   da9e8:	000d7f81 	.word	0x000d7f81
   da9ec:	000d8055 	.word	0x000d8055
   da9f0:	000d8649 	.word	0x000d8649
   da9f4:	000d8739 	.word	0x000d8739
   da9f8:	000d874d 	.word	0x000d874d
   da9fc:	000d8a49 	.word	0x000d8a49
   daa00:	000d8c71 	.word	0x000d8c71
   daa04:	000d8d0d 	.word	0x000d8d0d
   daa08:	000d8f1d 	.word	0x000d8f1d
   daa0c:	000d8fa1 	.word	0x000d8fa1
   daa10:	000d9065 	.word	0x000d9065
   daa14:	000d9129 	.word	0x000d9129

000daa18 <link_constructors_end>:
	...
