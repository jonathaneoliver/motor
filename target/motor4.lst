
/home/joliver/photon3/motor4/target/motor4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000196ec  2**0
                  CONTENTS
  3 .data         00000080  2003df20  000d9640  0000df20  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000850  2003dfa0  2003dfa0  0001dfa0  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d96c0  000d96c0  000196c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d96e8  000d96e8  000196e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000fa976  00000000  00000000  000196ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001787d  00000000  00000000  00114062  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000028c8  00000000  00000000  0012b8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0003e845  00000000  00000000  0012e1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0003c61d  00000000  00000000  0016c9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000e019b  00000000  00000000  001a9009  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001caf5  00000000  00000000  002891a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000041b8  00000000  00000000  002a5c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000d414  00000000  00000000  002a9e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	b8 8d 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fe61 	bl	d8cf4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fe66 	bl	d8d0a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003df20 	.word	0x2003df20
   d4048:	000d9640 	.word	0x000d9640
   d404c:	2003dfa0 	.word	0x2003dfa0
   d4050:	2003dfa0 	.word	0x2003dfa0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fb69 	bl	d7730 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9640 	.word	0x000d9640
   d4080:	000d95e0 	.word	0x000d95e0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba14 	b.w	d44b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb4d 	bl	d4728 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bb1b 	b.w	d76cc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bca3 	b.w	d69e0 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 bca1 	b.w	d69e0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bca7 	b.w	d69f0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bca5 	b.w	d69f0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40b6:	4770      	bx	lr

000d40b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40b8:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40ba:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40bc:	6898      	ldr	r0, [r3, #8]
   d40be:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40c0:	f012 0f01 	tst.w	r2, #1
   d40c4:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40c8:	bf18      	it	ne
   d40ca:	5881      	ldrne	r1, [r0, r2]
   d40cc:	4410      	add	r0, r2
   d40ce:	bf18      	it	ne
   d40d0:	58cb      	ldrne	r3, [r1, r3]
   d40d2:	4718      	bx	r3

000d40d4 <_ZN15Adafruit_BNO055D1Ev>:

    uint16_t accel_radius;
    uint16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
   d40d4:	4770      	bx	lr
	...

000d40d8 <_Z12MQTTcallbackPcPhj>:
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    char p[length + 1];
   d40da:	f102 0308 	add.w	r3, r2, #8
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40de:	b083      	sub	sp, #12
    char p[length + 1];
   d40e0:	f023 0307 	bic.w	r3, r3, #7
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40e4:	af02      	add	r7, sp, #8
    char p[length + 1];
   d40e6:	ebad 0d03 	sub.w	sp, sp, r3
   d40ea:	ac02      	add	r4, sp, #8
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40ec:	4615      	mov	r5, r2
    char p[length + 1];
    memcpy(p, payload, length);
   d40ee:	4620      	mov	r0, r4
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);

// receive message
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
   d40f0:	460e      	mov	r6, r1
    char p[length + 1];
    memcpy(p, payload, length);
   d40f2:	f004 fdff 	bl	d8cf4 <memcpy>
    p[length] = 0;
   d40f6:	2300      	movs	r3, #0
   d40f8:	5563      	strb	r3, [r4, r5]
    Serial.printlnf("[%s]%.*s",__FUNCTION__,length, payload);
   d40fa:	f003 fa07 	bl	d750c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40fe:	4a14      	ldr	r2, [pc, #80]	; (d4150 <_Z12MQTTcallbackPcPhj+0x78>)
   d4100:	4b14      	ldr	r3, [pc, #80]	; (d4154 <_Z12MQTTcallbackPcPhj+0x7c>)
   d4102:	2101      	movs	r1, #1
   d4104:	e88d 0060 	stmia.w	sp, {r5, r6}
   d4108:	f003 fd2f 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>

    if (!strcmp(p, "RED"))
   d410c:	4912      	ldr	r1, [pc, #72]	; (d4158 <_Z12MQTTcallbackPcPhj+0x80>)
   d410e:	4620      	mov	r0, r4
   d4110:	f004 fe2c 	bl	d8d6c <strcmp>
   d4114:	4602      	mov	r2, r0
   d4116:	b910      	cbnz	r0, d411e <_Z12MQTTcallbackPcPhj+0x46>
        RGB.color(255, 0, 0);
   d4118:	4601      	mov	r1, r0
   d411a:	20ff      	movs	r0, #255	; 0xff
   d411c:	e010      	b.n	d4140 <_Z12MQTTcallbackPcPhj+0x68>
    else if (!strcmp(p, "GREEN"))
   d411e:	490f      	ldr	r1, [pc, #60]	; (d415c <_Z12MQTTcallbackPcPhj+0x84>)
   d4120:	4620      	mov	r0, r4
   d4122:	f004 fe23 	bl	d8d6c <strcmp>
   d4126:	4602      	mov	r2, r0
   d4128:	b908      	cbnz	r0, d412e <_Z12MQTTcallbackPcPhj+0x56>
        RGB.color(0, 255, 0);
   d412a:	21ff      	movs	r1, #255	; 0xff
   d412c:	e008      	b.n	d4140 <_Z12MQTTcallbackPcPhj+0x68>
    else if (!strcmp(p, "BLUE"))
   d412e:	490c      	ldr	r1, [pc, #48]	; (d4160 <_Z12MQTTcallbackPcPhj+0x88>)
   d4130:	4620      	mov	r0, r4
   d4132:	f004 fe1b 	bl	d8d6c <strcmp>
        RGB.color(0, 0, 255);
   d4136:	22ff      	movs	r2, #255	; 0xff

    if (!strcmp(p, "RED"))
        RGB.color(255, 0, 0);
    else if (!strcmp(p, "GREEN"))
        RGB.color(0, 255, 0);
    else if (!strcmp(p, "BLUE"))
   d4138:	4601      	mov	r1, r0
   d413a:	b108      	cbz	r0, d4140 <_Z12MQTTcallbackPcPhj+0x68>
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
   d413c:	4611      	mov	r1, r2
   d413e:	4610      	mov	r0, r2
   d4140:	f003 fb26 	bl	d7790 <_ZN8RGBClass5colorEiii>
    delay(100);
   d4144:	2064      	movs	r0, #100	; 0x64
   d4146:	f003 fbbb 	bl	d78c0 <delay>
}
   d414a:	3704      	adds	r7, #4
   d414c:	46bd      	mov	sp, r7
   d414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4150:	000d8df2 	.word	0x000d8df2
   d4154:	000d8de0 	.word	0x000d8de0
   d4158:	000d8dfb 	.word	0x000d8dfb
   d415c:	000d8dff 	.word	0x000d8dff
   d4160:	000d8e05 	.word	0x000d8e05

000d4164 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4164:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4166:	b510      	push	{r4, lr}
   d4168:	4604      	mov	r4, r0
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d416a:	d905      	bls.n	d4178 <nrf_gpio_pin_read+0x14>
   d416c:	4a09      	ldr	r2, [pc, #36]	; (d4194 <nrf_gpio_pin_read+0x30>)
   d416e:	2100      	movs	r1, #0
   d4170:	200a      	movs	r0, #10
   d4172:	f002 fb97 	bl	d68a4 <panic_>
   d4176:	e001      	b.n	d417c <nrf_gpio_pin_read+0x18>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d4178:	281f      	cmp	r0, #31
   d417a:	d903      	bls.n	d4184 <nrf_gpio_pin_read+0x20>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d417c:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
   d4180:	4b05      	ldr	r3, [pc, #20]	; (d4198 <nrf_gpio_pin_read+0x34>)
   d4182:	e001      	b.n	d4188 <nrf_gpio_pin_read+0x24>
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4184:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4188:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d418c:	40e0      	lsrs	r0, r4
}
   d418e:	f000 0001 	and.w	r0, r0, #1
   d4192:	bd10      	pop	{r4, pc}
   d4194:	000d6765 	.word	0x000d6765
   d4198:	50000300 	.word	0x50000300

000d419c <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d419e:	4b26      	ldr	r3, [pc, #152]	; (d4238 <_ZN7Encoder16interruptHandlerEv+0x9c>)
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d41a0:	4e26      	ldr	r6, [pc, #152]	; (d423c <_ZN7Encoder16interruptHandlerEv+0xa0>)
   d41a2:	685b      	ldr	r3, [r3, #4]
		ticks=System.ticks();
   d41a4:	6183      	str	r3, [r0, #24]
   d41a6:	8903      	ldrh	r3, [r0, #8]
   d41a8:	6832      	ldr	r2, [r6, #0]
   d41aa:	011b      	lsls	r3, r3, #4
   d41ac:	18d1      	adds	r1, r2, r3
   d41ae:	5cd5      	ldrb	r5, [r2, r3]
   d41b0:	784b      	ldrb	r3, [r1, #1]
   d41b2:	f003 031f 	and.w	r3, r3, #31
   d41b6:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d41ba:	4604      	mov	r4, r0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d41bc:	4628      	mov	r0, r5
   d41be:	f7ff ffd1 	bl	d4164 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41c2:	4628      	mov	r0, r5
   d41c4:	f7ff ffce 	bl	d4164 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d41c8:	89a3      	ldrh	r3, [r4, #12]
   d41ca:	6832      	ldr	r2, [r6, #0]
   d41cc:	011b      	lsls	r3, r3, #4
   d41ce:	18d1      	adds	r1, r2, r3
   d41d0:	5cd5      	ldrb	r5, [r2, r3]
   d41d2:	784b      	ldrb	r3, [r1, #1]
   d41d4:	f003 031f 	and.w	r3, r3, #31
   d41d8:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d41dc:	4607      	mov	r7, r0

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d41de:	4628      	mov	r0, r5
   d41e0:	f7ff ffc0 	bl	d4164 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41e4:	4628      	mov	r0, r5
   d41e6:	f7ff ffbd 	bl	d4164 <nrf_gpio_pin_read>
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d41ea:	7c23      	ldrb	r3, [r4, #16]
		if (p1val) newState |= 4;
   d41ec:	f017 0fff 	tst.w	r7, #255	; 0xff
private:
	void interruptHandler() {
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d41f0:	f003 0303 	and.w	r3, r3, #3

private:
	void interruptHandler() {
		ticks=System.ticks();
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d41f4:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
   d41f6:	bf18      	it	ne
   d41f8:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) newState |= 8;
   d41fc:	b108      	cbz	r0, d4202 <_ZN7Encoder16interruptHandlerEv+0x66>
   d41fe:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   d4202:	109a      	asrs	r2, r3, #2
		switch (newState) {
   d4204:	3b01      	subs	r3, #1
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
		if (p2val) newState |= 8;
		state = (newState >> 2);
   d4206:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   d4208:	2b0d      	cmp	r3, #13
   d420a:	d814      	bhi.n	d4236 <_ZN7Encoder16interruptHandlerEv+0x9a>
   d420c:	e8df f003 	tbb	[pc, r3]
   d4210:	0a0d0a07 	.word	0x0a0d0a07
   d4214:	07071013 	.word	0x07071013
   d4218:	0d0a1310 	.word	0x0d0a1310
   d421c:	070a      	.short	0x070a
			case 1: case 7: case 8: case 14:
				position++;
   d421e:	6963      	ldr	r3, [r4, #20]
   d4220:	3301      	adds	r3, #1
   d4222:	e007      	b.n	d4234 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 2: case 4: case 11: case 13:
				position--;
   d4224:	6963      	ldr	r3, [r4, #20]
   d4226:	3b01      	subs	r3, #1
   d4228:	e004      	b.n	d4234 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 3: case 12:
				position += 2;
   d422a:	6963      	ldr	r3, [r4, #20]
   d422c:	3302      	adds	r3, #2
   d422e:	e001      	b.n	d4234 <_ZN7Encoder16interruptHandlerEv+0x98>
				return;
			case 6: case 9:
				position -= 2;
   d4230:	6963      	ldr	r3, [r4, #20]
   d4232:	3b02      	subs	r3, #2
   d4234:	6163      	str	r3, [r4, #20]
   d4236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4238:	e0001000 	.word	0xe0001000
   d423c:	2003e188 	.word	0x2003e188

000d4240 <_Z6setPwmP16Adafruit_DCMotori.part.2>:
/******************************************
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int speed )
   d4240:	b510      	push	{r4, lr}
{  
  if( speed==0 ) {
    motor->setSpeed(abs(speed));
   d4242:	2900      	cmp	r1, #0
   d4244:	bfb8      	it	lt
   d4246:	4249      	neglt	r1, r1
/******************************************
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int speed )
   d4248:	4604      	mov	r4, r0
{  
  if( speed==0 ) {
    motor->setSpeed(abs(speed));
   d424a:	b2c9      	uxtb	r1, r1
   d424c:	f001 f906 	bl	d545c <_ZN16Adafruit_DCMotor8setSpeedEh>
    motor->run(RELEASE);
   d4250:	4620      	mov	r0, r4
   d4252:	2104      	movs	r1, #4
   d4254:	f001 f8dc 	bl	d5410 <_ZN16Adafruit_DCMotor3runEh>
  {
    motor->run(BACKWARD);
    motor->setSpeed(abs(speed));      
  }
  return speed;
}
   d4258:	bd10      	pop	{r4, pc}

000d425a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d425a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d425c:	b538      	push	{r3, r4, r5, lr}
   d425e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4260:	d005      	beq.n	d426e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4262:	2a03      	cmp	r2, #3
   d4264:	d00f      	beq.n	d4286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d4266:	2a01      	cmp	r2, #1
   d4268:	d110      	bne.n	d428c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d426a:	680b      	ldr	r3, [r1, #0]
   d426c:	e009      	b.n	d4282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d426e:	200c      	movs	r0, #12
   d4270:	680d      	ldr	r5, [r1, #0]
   d4272:	f7ff ff10 	bl	d4096 <_Znwj>
   d4276:	4603      	mov	r3, r0
   d4278:	b118      	cbz	r0, d4282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d427a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d427e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4282:	6023      	str	r3, [r4, #0]
   d4284:	e002      	b.n	d428c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4286:	6800      	ldr	r0, [r0, #0]
   d4288:	f7ff ff09 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d428c:	2000      	movs	r0, #0
   d428e:	bd38      	pop	{r3, r4, r5, pc}

000d4290 <_Z16SleepStateTogglev>:




void SleepStateToggle()
{
   d4290:	b510      	push	{r4, lr}
  // debounce
  if ( millis()-sleepStateTime < 1000 )
   d4292:	4c16      	ldr	r4, [pc, #88]	; (d42ec <_Z16SleepStateTogglev+0x5c>)




void SleepStateToggle()
{
   d4294:	b088      	sub	sp, #32
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4296:	f002 fa6d 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
  // debounce
  if ( millis()-sleepStateTime < 1000 )
   d429a:	6823      	ldr	r3, [r4, #0]
   d429c:	1ac0      	subs	r0, r0, r3
   d429e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d42a2:	d320      	bcc.n	d42e6 <_Z16SleepStateTogglev+0x56>
   d42a4:	f002 fa66 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
    // ignore this
    VERBOSE(  Serial.printlnf( "[%s] %d -> debounce ", __FUNCTION__, millis()) ) ;
    return;
  }

  sleepStateTime=millis();
   d42a8:	6020      	str	r0, [r4, #0]
  

  if ( sleepState==AWAKE )
   d42aa:	4c11      	ldr	r4, [pc, #68]	; (d42f0 <_Z16SleepStateTogglev+0x60>)
   d42ac:	7823      	ldrb	r3, [r4, #0]
   d42ae:	b9c3      	cbnz	r3, d42e2 <_Z16SleepStateTogglev+0x52>
  {

    VERBOSE( Serial.printlnf( "[%s] %d enter sleep mode for 60 seconds or A0 falling", __FUNCTION__, millis() ) );

    delay(100);
   d42b0:	2064      	movs	r0, #100	; 0x64
   d42b2:	f003 fb05 	bl	d78c0 <delay>
   d42b6:	4b0f      	ldr	r3, [pc, #60]	; (d42f4 <_Z16SleepStateTogglev+0x64>)
    sleepState=ASLEEP;
   d42b8:	2201      	movs	r2, #1
   d42ba:	681b      	ldr	r3, [r3, #0]
   d42bc:	7022      	strb	r2, [r4, #0]
   d42be:	2113      	movs	r1, #19
   d42c0:	f8ad 1016 	strh.w	r1, [sp, #22]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d42c4:	9302      	str	r3, [sp, #8]
   d42c6:	2102      	movs	r1, #2
   d42c8:	233c      	movs	r3, #60	; 0x3c
   d42ca:	f88d 1015 	strb.w	r1, [sp, #21]
   d42ce:	e88d 000c 	stmia.w	sp, {r2, r3}
   d42d2:	f10d 0116 	add.w	r1, sp, #22
   d42d6:	f10d 0315 	add.w	r3, sp, #21
   d42da:	a806      	add	r0, sp, #24
   d42dc:	f003 fd02 	bl	d7ce4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d42e0:	e001      	b.n	d42e6 <_Z16SleepStateTogglev+0x56>
    System.sleep(SLEEPSTATE_PIN, FALLING, 60 );
  } 
  else
  {
    /* this is the default when woken from System.sleep() by timer or interrupt from pin */
    sleepState=AWAKE;
   d42e2:	2300      	movs	r3, #0
   d42e4:	7023      	strb	r3, [r4, #0]
  }

  VERBOSE(  Serial.printlnf( "[%s] %d ->%s ", __FUNCTION__, millis(), SleepStateStr(sleepState)) ) ;
}
   d42e6:	b008      	add	sp, #32
   d42e8:	bd10      	pop	{r4, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e028 	.word	0x2003e028
   d42f0:	2003e1c0 	.word	0x2003e1c0
   d42f4:	2003e108 	.word	0x2003e108

000d42f8 <_Z15SleepStateCheckv>:

void SleepStateCheck(void)
{
   d42f8:	b508      	push	{r3, lr}
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
   d42fa:	2013      	movs	r0, #19
   d42fc:	f003 fdf9 	bl	d7ef2 <digitalRead>
   d4300:	b918      	cbnz	r0, d430a <_Z15SleepStateCheckv+0x12>
  {
    VERBOSE(  Serial.printlnf( "[%s] %d sleepState=%s (%d) ", __FUNCTION__, millis(), SleepStateStr(sleepState), digitalRead(SLEEPSTATE_PIN) ) );
    SleepStateToggle();  
  }
}
   d4302:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void SleepStateCheck(void)
{
  if ( digitalRead(SLEEPSTATE_PIN)==LOW )
  {
    VERBOSE(  Serial.printlnf( "[%s] %d sleepState=%s (%d) ", __FUNCTION__, millis(), SleepStateStr(sleepState), digitalRead(SLEEPSTATE_PIN) ) );
    SleepStateToggle();  
   d4306:	f7ff bfc3 	b.w	d4290 <_Z16SleepStateTogglev>
   d430a:	bd08      	pop	{r3, pc}

000d430c <_Z14SleepStateInitv>:
}

void SleepStateInit()
{
  VERBOSE( Serial.printlnf( "[%s]", __FUNCTION__ ) );
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
   d430c:	2102      	movs	r1, #2
   d430e:	2013      	movs	r0, #19
   d4310:	f003 bdde 	b.w	d7ed0 <pinMode>

000d4314 <_Z6setPwmP16Adafruit_DCMotori>:
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int speed )
{  
   d4314:	b538      	push	{r3, r4, r5, lr}
  if( speed==0 ) {
   d4316:	1e0c      	subs	r4, r1, #0
void loop()

Runs forever
******************************************/
int setPwm( Adafruit_DCMotor *motor, int speed )
{  
   d4318:	4605      	mov	r5, r0
  if( speed==0 ) {
   d431a:	d102      	bne.n	d4322 <_Z6setPwmP16Adafruit_DCMotori+0xe>
   d431c:	f7ff ff90 	bl	d4240 <_Z6setPwmP16Adafruit_DCMotori.part.2>
   d4320:	e00d      	b.n	d433e <_Z6setPwmP16Adafruit_DCMotori+0x2a>
    motor->setSpeed(abs(speed));
    motor->run(RELEASE);
  }
  else if( speed>0 ) {
   d4322:	dd04      	ble.n	d432e <_Z6setPwmP16Adafruit_DCMotori+0x1a>
    motor->run(FORWARD);
   d4324:	2101      	movs	r1, #1
   d4326:	f001 f873 	bl	d5410 <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(speed));
   d432a:	b2e1      	uxtb	r1, r4
   d432c:	e004      	b.n	d4338 <_Z6setPwmP16Adafruit_DCMotori+0x24>
  }
  else
  {
    motor->run(BACKWARD);
   d432e:	2102      	movs	r1, #2
   d4330:	f001 f86e 	bl	d5410 <_ZN16Adafruit_DCMotor3runEh>
    motor->setSpeed(abs(speed));      
   d4334:	4261      	negs	r1, r4
   d4336:	b2c9      	uxtb	r1, r1
   d4338:	4628      	mov	r0, r5
   d433a:	f001 f88f 	bl	d545c <_ZN16Adafruit_DCMotor8setSpeedEh>
  }
  return speed;
}
   d433e:	4620      	mov	r0, r4
   d4340:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4344 <_Z14setTargetSpeedi>:

int setTargetSpeed( int speed )
{  
   d4344:	b510      	push	{r4, lr}
   d4346:	4604      	mov	r4, r0
  leftSetpoint=rightSetpoint=speed;
   d4348:	f004 f918 	bl	d857c <__aeabi_i2d>
   d434c:	4b03      	ldr	r3, [pc, #12]	; (d435c <_Z14setTargetSpeedi+0x18>)
   d434e:	e9c3 0100 	strd	r0, r1, [r3]
   d4352:	4b03      	ldr	r3, [pc, #12]	; (d4360 <_Z14setTargetSpeedi+0x1c>)
   d4354:	e9c3 0100 	strd	r0, r1, [r3]
  return speed;
}
   d4358:	4620      	mov	r0, r4
   d435a:	bd10      	pop	{r4, pc}
   d435c:	2003e190 	.word	0x2003e190
   d4360:	2003e0b8 	.word	0x2003e0b8

000d4364 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4364:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4366:	b089      	sub	sp, #36	; 0x24
   d4368:	4604      	mov	r4, r0
   d436a:	a802      	add	r0, sp, #8
   d436c:	e880 0006 	stmia.w	r0, {r1, r2}
   d4370:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4372:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4374:	2300      	movs	r3, #0
   d4376:	460f      	mov	r7, r1
   d4378:	9e03      	ldr	r6, [sp, #12]
   d437a:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d437c:	f7ff fe8b 	bl	d4096 <_Znwj>
   d4380:	b110      	cbz	r0, d4388 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4382:	6007      	str	r7, [r0, #0]
   d4384:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4386:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4388:	4b0c      	ldr	r3, [pc, #48]	; (d43bc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d438a:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d438c:	4b0c      	ldr	r3, [pc, #48]	; (d43c0 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x5c>)
   d438e:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4390:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4394:	9004      	str	r0, [sp, #16]
   d4396:	9300      	str	r3, [sp, #0]
   d4398:	4620      	mov	r0, r4
   d439a:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d439e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d43a2:	a904      	add	r1, sp, #16
   d43a4:	f003 fa4e 	bl	d7844 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d43a8:	9b06      	ldr	r3, [sp, #24]
   d43aa:	4604      	mov	r4, r0
   d43ac:	b11b      	cbz	r3, d43b6 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d43ae:	a904      	add	r1, sp, #16
   d43b0:	2203      	movs	r2, #3
   d43b2:	4608      	mov	r0, r1
   d43b4:	4798      	blx	r3
}
   d43b6:	4620      	mov	r0, r4
   d43b8:	b009      	add	sp, #36	; 0x24
   d43ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43bc:	000d40b9 	.word	0x000d40b9
   d43c0:	000d425b 	.word	0x000d425b

000d43c4 <_ZN7EncoderC1Ett>:
#endif

class Encoder
{
public:
	Encoder(pin_t pin1, pin_t pin2) {
   d43c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d43c8:	460f      	mov	r7, r1
   d43ca:	4604      	mov	r4, r0
   d43cc:	b089      	sub	sp, #36	; 0x24
   d43ce:	4616      	mov	r6, r2
		pinMode(pin1, INPUT_PULLUP);
   d43d0:	2102      	movs	r1, #2
   d43d2:	4638      	mov	r0, r7
   d43d4:	f003 fd7c 	bl	d7ed0 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   d43d8:	2102      	movs	r1, #2
   d43da:	4630      	mov	r0, r6
   d43dc:	f003 fd78 	bl	d7ed0 <pinMode>

		pin1_register = PIN_TO_BASEREG(pin1);
   d43e0:	2300      	movs	r3, #0
   d43e2:	6023      	str	r3, [r4, #0]
		pin1_bitmask = PIN_TO_BITMASK(pin1);
		pin2_register = PIN_TO_BASEREG(pin2);
   d43e4:	6063      	str	r3, [r4, #4]
		pin2_bitmask = PIN_TO_BITMASK(pin2);
		position = 0;
   d43e6:	6163      	str	r3, [r4, #20]
		ticks = 0;
   d43e8:	61a3      	str	r3, [r4, #24]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d43ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43ee:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d449c <_ZN7EncoderC1Ett+0xd8>
	Encoder(pin_t pin1, pin_t pin2) {
		pinMode(pin1, INPUT_PULLUP);
		pinMode(pin2, INPUT_PULLUP);

		pin1_register = PIN_TO_BASEREG(pin1);
		pin1_bitmask = PIN_TO_BITMASK(pin1);
   d43f2:	60a7      	str	r7, [r4, #8]
		pin2_register = PIN_TO_BASEREG(pin2);
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   d43f4:	60e6      	str	r6, [r4, #12]
   d43f6:	f002 f9b5 	bl	d6764 <HAL_Delay_Microseconds>
   d43fa:	8923      	ldrh	r3, [r4, #8]
   d43fc:	f8d9 2000 	ldr.w	r2, [r9]
   d4400:	011b      	lsls	r3, r3, #4
   d4402:	18d1      	adds	r1, r2, r3
   d4404:	5cd5      	ldrb	r5, [r2, r3]
   d4406:	784b      	ldrb	r3, [r1, #1]
   d4408:	f003 031f 	and.w	r3, r3, #31
   d440c:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d4410:	4628      	mov	r0, r5
   d4412:	f7ff fea7 	bl	d4164 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4416:	4628      	mov	r0, r5
   d4418:	f7ff fea4 	bl	d4164 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d441c:	89a3      	ldrh	r3, [r4, #12]
   d441e:	f8d9 2000 	ldr.w	r2, [r9]
   d4422:	011b      	lsls	r3, r3, #4
   d4424:	18d1      	adds	r1, r2, r3
   d4426:	5cd5      	ldrb	r5, [r2, r3]
   d4428:	784b      	ldrb	r3, [r1, #1]
   d442a:	f003 031f 	and.w	r3, r3, #31
   d442e:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
		ticks = 0;
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
   d4432:	f110 0800 	adds.w	r8, r0, #0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d4436:	4628      	mov	r0, r5
   d4438:	bf18      	it	ne
   d443a:	f04f 0801 	movne.w	r8, #1
   d443e:	f7ff fe91 	bl	d4164 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4442:	4628      	mov	r0, r5
   d4444:	f7ff fe8e 	bl	d4164 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d4448:	b118      	cbz	r0, d4452 <_ZN7EncoderC1Ett+0x8e>
   d444a:	f048 0802 	orr.w	r8, r8, #2
   d444e:	fa5f f888 	uxtb.w	r8, r8
		state = s;
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d4452:	2500      	movs	r5, #0
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
		state = s;
   d4454:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d4458:	f04f 38ff 	mov.w	r8, #4294967295
   d445c:	e88d 0120 	stmia.w	sp, {r5, r8}
   d4460:	f8df 903c 	ldr.w	r9, [pc, #60]	; d44a0 <_ZN7EncoderC1Ett+0xdc>
   d4464:	f8cd 9010 	str.w	r9, [sp, #16]
   d4468:	9505      	str	r5, [sp, #20]
   d446a:	9502      	str	r5, [sp, #8]
   d446c:	aa04      	add	r2, sp, #16
   d446e:	4623      	mov	r3, r4
   d4470:	ca06      	ldmia	r2, {r1, r2}
   d4472:	4638      	mov	r0, r7
   d4474:	f7ff ff76 	bl	d4364 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   d4478:	e88d 0120 	stmia.w	sp, {r5, r8}
   d447c:	f8cd 9018 	str.w	r9, [sp, #24]
   d4480:	9507      	str	r5, [sp, #28]
   d4482:	9502      	str	r5, [sp, #8]
   d4484:	aa08      	add	r2, sp, #32
   d4486:	4623      	mov	r3, r4
   d4488:	e912 0006 	ldmdb	r2, {r1, r2}
   d448c:	4630      	mov	r0, r6
   d448e:	f7ff ff69 	bl	d4364 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
	}
   d4492:	4620      	mov	r0, r4
   d4494:	b009      	add	sp, #36	; 0x24
   d4496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d449a:	bf00      	nop
   d449c:	2003e188 	.word	0x2003e188
   d44a0:	000d419d 	.word	0x000d419d

000d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>:
   d44a4:	4613      	mov	r3, r2
   d44a6:	460a      	mov	r2, r1
   d44a8:	2101      	movs	r1, #1
   d44aa:	f003 bb5e 	b.w	d7b6a <_ZN5Print11printf_implEbPKcz>
	...

000d44b0 <setup>:
  pinMode(SLEEPSTATE_PIN, INPUT_PULLUP);    // sets pin as input - high by default
}



void setup() {
   d44b0:	b530      	push	{r4, r5, lr}
   d44b2:	b085      	sub	sp, #20
  Serial.begin(115200);
   d44b4:	f003 f82a 	bl	d750c <_Z16_fetch_usbserialv>
   d44b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d44bc:	f003 f81a 	bl	d74f4 <_ZN9USBSerial5beginEl>

  Serial.printlnf("setup()\n");
   d44c0:	f003 f824 	bl	d750c <_Z16_fetch_usbserialv>
   d44c4:	2101      	movs	r1, #1
   d44c6:	4a66      	ldr	r2, [pc, #408]	; (d4660 <setup+0x1b0>)
   d44c8:	f003 fb4f 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>

  //Serial.printlnf("[%s]wating for wifi",__FUNCTION__);    
  //waitUntil(WiFi.ready);
  //Serial.printlnf("[%s]wating for wifi ready",__FUNCTION__);    

  if(!bno.begin())
   d44cc:	210c      	movs	r1, #12
   d44ce:	4865      	ldr	r0, [pc, #404]	; (d4664 <setup+0x1b4>)
   d44d0:	f001 fdc9 	bl	d6066 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d44d4:	b928      	cbnz	r0, d44e2 <setup+0x32>
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
   d44d6:	f003 f819 	bl	d750c <_Z16_fetch_usbserialv>
   d44da:	4963      	ldr	r1, [pc, #396]	; (d4668 <setup+0x1b8>)
   d44dc:	f003 fa19 	bl	d7912 <_ZN5Print5printEPKc>
   d44e0:	e7fe      	b.n	d44e0 <setup+0x30>
    while(1) ;
  }
  //bno.setExtCrystalUse(true);

  delay(100);
   d44e2:	2064      	movs	r0, #100	; 0x64
   d44e4:	f003 f9ec 	bl	d78c0 <delay>
  Serial.printlnf("[%s]bno ready",__FUNCTION__);    
   d44e8:	f003 f810 	bl	d750c <_Z16_fetch_usbserialv>
   d44ec:	4a5f      	ldr	r2, [pc, #380]	; (d466c <setup+0x1bc>)
   d44ee:	4960      	ldr	r1, [pc, #384]	; (d4670 <setup+0x1c0>)
   d44f0:	f7ff ffd8 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  RGB.control(true);
   d44f4:	2001      	movs	r0, #1
   d44f6:	f003 f93b 	bl	d7770 <_ZN8RGBClass7controlEb>
  Serial.printlnf("[%s]rgb ready",__FUNCTION__);    
   d44fa:	f003 f807 	bl	d750c <_Z16_fetch_usbserialv>
   d44fe:	4a5b      	ldr	r2, [pc, #364]	; (d466c <setup+0x1bc>)
   d4500:	495c      	ldr	r1, [pc, #368]	; (d4674 <setup+0x1c4>)
   d4502:	f7ff ffcf 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4506:	4668      	mov	r0, sp
   d4508:	f002 f9dc 	bl	d68c4 <spark_deviceID>

  // connect to the server
  MQTTclient.connect(System.deviceID());
   d450c:	9900      	ldr	r1, [sp, #0]
   d450e:	485a      	ldr	r0, [pc, #360]	; (d4678 <setup+0x1c8>)
   d4510:	f001 fb2e 	bl	d5b70 <_ZN4MQTT7connectEPKc>
   d4514:	4668      	mov	r0, sp
   d4516:	f003 fb62 	bl	d7bde <_ZN6StringD1Ev>
  Serial.printlnf("[%s]mqtt ready",__FUNCTION__);    
   d451a:	f002 fff7 	bl	d750c <_Z16_fetch_usbserialv>
   d451e:	4a53      	ldr	r2, [pc, #332]	; (d466c <setup+0x1bc>)
   d4520:	4956      	ldr	r1, [pc, #344]	; (d467c <setup+0x1cc>)
   d4522:	f7ff ffbf 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  // publish/subscribe
  if (MQTTclient.isConnected()) {
   d4526:	4854      	ldr	r0, [pc, #336]	; (d4678 <setup+0x1c8>)
   d4528:	f001 fa3e 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d452c:	b168      	cbz	r0, d454a <setup+0x9a>
    MQTTclient.subscribe("color");//color is the topic that photon is subscribed
   d452e:	4954      	ldr	r1, [pc, #336]	; (d4680 <setup+0x1d0>)
   d4530:	4851      	ldr	r0, [pc, #324]	; (d4678 <setup+0x1c8>)
   d4532:	f001 fd10 	bl	d5f56 <_ZN4MQTT9subscribeEPKc>
    MQTTclient.publish("fun", "hello");//publishing a data "hello" to the topic "fun"
   d4536:	4a53      	ldr	r2, [pc, #332]	; (d4684 <setup+0x1d4>)
   d4538:	4953      	ldr	r1, [pc, #332]	; (d4688 <setup+0x1d8>)
   d453a:	484f      	ldr	r0, [pc, #316]	; (d4678 <setup+0x1c8>)
   d453c:	f001 fb98 	bl	d5c70 <_ZN4MQTT7publishEPKcS1_>
    Serial.printlnf("[%s] publish hello",__FUNCTION__);
   d4540:	f002 ffe4 	bl	d750c <_Z16_fetch_usbserialv>
   d4544:	4a49      	ldr	r2, [pc, #292]	; (d466c <setup+0x1bc>)
   d4546:	4951      	ldr	r1, [pc, #324]	; (d468c <setup+0x1dc>)
   d4548:	e003      	b.n	d4552 <setup+0xa2>
  }
  else
  {
    Serial.printlnf("[%s] MQTT FAILED to connect",__FUNCTION__);    
   d454a:	f002 ffdf 	bl	d750c <_Z16_fetch_usbserialv>
   d454e:	4a47      	ldr	r2, [pc, #284]	; (d466c <setup+0x1bc>)
   d4550:	494f      	ldr	r1, [pc, #316]	; (d4690 <setup+0x1e0>)
   d4552:	f7ff ffa7 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  }

	device.begin();
   d4556:	484f      	ldr	r0, [pc, #316]	; (d4694 <setup+0x1e4>)
   d4558:	f001 feea 	bl	d6330 <_ZN8I2CSlave5beginEv>
  Serial.printlnf("[%s]i2c slave ready",__FUNCTION__);    
   d455c:	f002 ffd6 	bl	d750c <_Z16_fetch_usbserialv>
   d4560:	4a42      	ldr	r2, [pc, #264]	; (d466c <setup+0x1bc>)
   d4562:	494d      	ldr	r1, [pc, #308]	; (d4698 <setup+0x1e8>)
   d4564:	f7ff ff9e 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  SleepStateInit();
   d4568:	f7ff fed0 	bl	d430c <_Z14SleepStateInitv>
  Serial.printlnf("[%s]low power ready",__FUNCTION__);    
   d456c:	f002 ffce 	bl	d750c <_Z16_fetch_usbserialv>
   d4570:	4a3e      	ldr	r2, [pc, #248]	; (d466c <setup+0x1bc>)
   d4572:	494a      	ldr	r1, [pc, #296]	; (d469c <setup+0x1ec>)
   d4574:	f7ff ff96 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  delay(1000);
#endif



  IBus.begin(Serial1);
   d4578:	f002 ff58 	bl	d742c <_Z22__fetch_global_Serial1v>
   d457c:	4601      	mov	r1, r0
   d457e:	4848      	ldr	r0, [pc, #288]	; (d46a0 <setup+0x1f0>)
   d4580:	f001 f86a 	bl	d5658 <_ZN10FlySkyIBus5beginER11USARTSerial>
  Serial.printlnf("[%s]ibus ready",__FUNCTION__);    
   d4584:	f002 ffc2 	bl	d750c <_Z16_fetch_usbserialv>
   d4588:	4a38      	ldr	r2, [pc, #224]	; (d466c <setup+0x1bc>)
   d458a:	4946      	ldr	r1, [pc, #280]	; (d46a4 <setup+0x1f4>)
   d458c:	f7ff ff8a 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

  Serial.printlnf(__FUNCTION__);
   d4590:	f002 ffbc 	bl	d750c <_Z16_fetch_usbserialv>
   d4594:	4a35      	ldr	r2, [pc, #212]	; (d466c <setup+0x1bc>)
   d4596:	2101      	movs	r1, #1
   d4598:	f003 fae7 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
  
  shield.begin();
   d459c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   d45a0:	4841      	ldr	r0, [pc, #260]	; (d46a8 <setup+0x1f8>)
   d45a2:	f000 fe98 	bl	d52d6 <_ZN20Adafruit_MotorShield5beginEt>

  balanceSetpoint=0;
   d45a6:	4b41      	ldr	r3, [pc, #260]	; (d46ac <setup+0x1fc>)
  balancePID.SetMode(PID::AUTOMATIC);
   d45a8:	4841      	ldr	r0, [pc, #260]	; (d46b0 <setup+0x200>)

  Serial.printlnf(__FUNCTION__);
  
  shield.begin();

  balanceSetpoint=0;
   d45aa:	2400      	movs	r4, #0
   d45ac:	2500      	movs	r5, #0
  balancePID.SetMode(PID::AUTOMATIC);
   d45ae:	2101      	movs	r1, #1

  Serial.printlnf(__FUNCTION__);
  
  shield.begin();

  balanceSetpoint=0;
   d45b0:	e9c3 4500 	strd	r4, r5, [r3]
  balancePID.SetMode(PID::AUTOMATIC);
   d45b4:	f000 fe04 	bl	d51c0 <_ZN3PID7SetModeENS_6mode_tE>
  balancePID.SetOutputLimits(-255, 255);
   d45b8:	ed9f 1b25 	vldr	d1, [pc, #148]	; d4650 <setup+0x1a0>
   d45bc:	ed9f 0b26 	vldr	d0, [pc, #152]	; d4658 <setup+0x1a8>
   d45c0:	483b      	ldr	r0, [pc, #236]	; (d46b0 <setup+0x200>)
   d45c2:	f000 fd93 	bl	d50ec <_ZN3PID15SetOutputLimitsEdd>
  balancePID.SetSampleTime(100);
   d45c6:	2164      	movs	r1, #100	; 0x64
   d45c8:	4839      	ldr	r0, [pc, #228]	; (d46b0 <setup+0x200>)
   d45ca:	f000 fd69 	bl	d50a0 <_ZN3PID13SetSampleTimeEi>

  leftSetpoint=0;
   d45ce:	4b39      	ldr	r3, [pc, #228]	; (d46b4 <setup+0x204>)
   d45d0:	e9c3 4500 	strd	r4, r5, [r3]
  rightSetpoint=0;
   d45d4:	4b38      	ldr	r3, [pc, #224]	; (d46b8 <setup+0x208>)
   d45d6:	e9c3 4500 	strd	r4, r5, [r3]
   d45da:	4b38      	ldr	r3, [pc, #224]	; (d46bc <setup+0x20c>)

  speed=setPwm( leftMotor, 0);
   d45dc:	4d38      	ldr	r5, [pc, #224]	; (d46c0 <setup+0x210>)
   d45de:	6818      	ldr	r0, [r3, #0]
   d45e0:	2100      	movs	r1, #0
   d45e2:	f7ff fe2d 	bl	d4240 <_Z6setPwmP16Adafruit_DCMotori.part.2>
   d45e6:	4b37      	ldr	r3, [pc, #220]	; (d46c4 <setup+0x214>)
   d45e8:	2400      	movs	r4, #0
   d45ea:	6818      	ldr	r0, [r3, #0]
   d45ec:	602c      	str	r4, [r5, #0]
   d45ee:	4621      	mov	r1, r4
   d45f0:	f7ff fe26 	bl	d4240 <_Z6setPwmP16Adafruit_DCMotori.part.2>
  speed=setPwm( rightMotor, 0);

  leftPID.SetMode(PID::AUTOMATIC);
   d45f4:	2101      	movs	r1, #1
   d45f6:	4834      	ldr	r0, [pc, #208]	; (d46c8 <setup+0x218>)

  leftSetpoint=0;
  rightSetpoint=0;

  speed=setPwm( leftMotor, 0);
  speed=setPwm( rightMotor, 0);
   d45f8:	602c      	str	r4, [r5, #0]

  leftPID.SetMode(PID::AUTOMATIC);
   d45fa:	f000 fde1 	bl	d51c0 <_ZN3PID7SetModeENS_6mode_tE>
  leftPID.SetOutputLimits(-255, 255);
   d45fe:	ed9f 1b14 	vldr	d1, [pc, #80]	; d4650 <setup+0x1a0>
   d4602:	ed9f 0b15 	vldr	d0, [pc, #84]	; d4658 <setup+0x1a8>
   d4606:	4830      	ldr	r0, [pc, #192]	; (d46c8 <setup+0x218>)
   d4608:	f000 fd70 	bl	d50ec <_ZN3PID15SetOutputLimitsEdd>
  leftPID.SetSampleTime(250);
   d460c:	21fa      	movs	r1, #250	; 0xfa
   d460e:	482e      	ldr	r0, [pc, #184]	; (d46c8 <setup+0x218>)
   d4610:	f000 fd46 	bl	d50a0 <_ZN3PID13SetSampleTimeEi>

  rightPID.SetMode(PID::AUTOMATIC);
   d4614:	2101      	movs	r1, #1
   d4616:	482d      	ldr	r0, [pc, #180]	; (d46cc <setup+0x21c>)
   d4618:	f000 fdd2 	bl	d51c0 <_ZN3PID7SetModeENS_6mode_tE>
  rightPID.SetOutputLimits(-255, 255);
   d461c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; d4650 <setup+0x1a0>
   d4620:	ed9f 0b0d 	vldr	d0, [pc, #52]	; d4658 <setup+0x1a8>
   d4624:	4829      	ldr	r0, [pc, #164]	; (d46cc <setup+0x21c>)
   d4626:	f000 fd61 	bl	d50ec <_ZN3PID15SetOutputLimitsEdd>
  rightPID.SetSampleTime(250);
   d462a:	21fa      	movs	r1, #250	; 0xfa
   d462c:	4827      	ldr	r0, [pc, #156]	; (d46cc <setup+0x21c>)
   d462e:	f000 fd37 	bl	d50a0 <_ZN3PID13SetSampleTimeEi>
  Serial.printlnf("[%s]pids ready",__FUNCTION__);    
   d4632:	f002 ff6b 	bl	d750c <_Z16_fetch_usbserialv>
   d4636:	4a0d      	ldr	r2, [pc, #52]	; (d466c <setup+0x1bc>)
   d4638:	4925      	ldr	r1, [pc, #148]	; (d46d0 <setup+0x220>)
   d463a:	f7ff ff33 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  
  Serial.printlnf("setup( complete )\n");
   d463e:	f002 ff65 	bl	d750c <_Z16_fetch_usbserialv>
   d4642:	4a24      	ldr	r2, [pc, #144]	; (d46d4 <setup+0x224>)
   d4644:	2101      	movs	r1, #1
   d4646:	f003 fa90 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>

}
   d464a:	b005      	add	sp, #20
   d464c:	bd30      	pop	{r4, r5, pc}
   d464e:	bf00      	nop
   d4650:	00000000 	.word	0x00000000
   d4654:	406fe000 	.word	0x406fe000
   d4658:	00000000 	.word	0x00000000
   d465c:	c06fe000 	.word	0xc06fe000
   d4660:	000d8e1f 	.word	0x000d8e1f
   d4664:	2003e0d0 	.word	0x2003e0d0
   d4668:	000d8e28 	.word	0x000d8e28
   d466c:	000d8dda 	.word	0x000d8dda
   d4670:	000d8e65 	.word	0x000d8e65
   d4674:	000d8e73 	.word	0x000d8e73
   d4678:	2003dfc0 	.word	0x2003dfc0
   d467c:	000d8e81 	.word	0x000d8e81
   d4680:	000d8e90 	.word	0x000d8e90
   d4684:	000d8ea7 	.word	0x000d8ea7
   d4688:	000d8e96 	.word	0x000d8e96
   d468c:	000d8e9a 	.word	0x000d8e9a
   d4690:	000d8ead 	.word	0x000d8ead
   d4694:	2003dfa4 	.word	0x2003dfa4
   d4698:	000d8ec9 	.word	0x000d8ec9
   d469c:	000d8edd 	.word	0x000d8edd
   d46a0:	2003e2d8 	.word	0x2003e2d8
   d46a4:	000d8ef1 	.word	0x000d8ef1
   d46a8:	2003e1c8 	.word	0x2003e1c8
   d46ac:	2003e0c8 	.word	0x2003e0c8
   d46b0:	2003e038 	.word	0x2003e038
   d46b4:	2003e0b8 	.word	0x2003e0b8
   d46b8:	2003e190 	.word	0x2003e190
   d46bc:	2003e104 	.word	0x2003e104
   d46c0:	2003e23c 	.word	0x2003e23c
   d46c4:	2003e018 	.word	0x2003e018
   d46c8:	2003e260 	.word	0x2003e260
   d46cc:	2003e110 	.word	0x2003e110
   d46d0:	000d8f00 	.word	0x000d8f00
   d46d4:	000d8f0f 	.word	0x000d8f0f

000d46d8 <_Z13telemetrySendPKcS0_z>:
  leftSetpoint=rightSetpoint=speed;
  return speed;
}

void telemetrySend( const char *name, const char *format, ...)
{
   d46d8:	b40e      	push	{r1, r2, r3}
   d46da:	b510      	push	{r4, lr}
   d46dc:	4604      	mov	r4, r0
   d46de:	b0c3      	sub	sp, #268	; 0x10c
      if (MQTTclient.isConnected())
   d46e0:	480e      	ldr	r0, [pc, #56]	; (d471c <_Z13telemetrySendPKcS0_z+0x44>)
   d46e2:	f001 f961 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d46e6:	b168      	cbz	r0, d4704 <_Z13telemetrySendPKcS0_z+0x2c>
      {
        char buffer[256];
        va_list args;
        va_start (args, format);
   d46e8:	ab46      	add	r3, sp, #280	; 0x118
        vsnprintf (buffer, sizeof(buffer), format, args);
   d46ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
{
      if (MQTTclient.isConnected())
      {
        char buffer[256];
        va_list args;
        va_start (args, format);
   d46ec:	9301      	str	r3, [sp, #4]
        vsnprintf (buffer, sizeof(buffer), format, args);
   d46ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46f2:	a802      	add	r0, sp, #8
   d46f4:	f002 f98c 	bl	d6a10 <vsnprintf>
        va_end (args);
        MQTTclient.publish( name, buffer );
   d46f8:	aa02      	add	r2, sp, #8
   d46fa:	4621      	mov	r1, r4
   d46fc:	4807      	ldr	r0, [pc, #28]	; (d471c <_Z13telemetrySendPKcS0_z+0x44>)
   d46fe:	f001 fab7 	bl	d5c70 <_ZN4MQTT7publishEPKcS1_>
   d4702:	e005      	b.n	d4710 <_Z13telemetrySendPKcS0_z+0x38>
      }
      else 
      {
        Serial.printlnf("[%s]client failed to connect",__FUNCTION__);
   d4704:	f002 ff02 	bl	d750c <_Z16_fetch_usbserialv>
   d4708:	4a05      	ldr	r2, [pc, #20]	; (d4720 <_Z13telemetrySendPKcS0_z+0x48>)
   d470a:	4906      	ldr	r1, [pc, #24]	; (d4724 <_Z13telemetrySendPKcS0_z+0x4c>)
   d470c:	f7ff feca 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
      }
}
   d4710:	b043      	add	sp, #268	; 0x10c
   d4712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4716:	b003      	add	sp, #12
   d4718:	4770      	bx	lr
   d471a:	bf00      	nop
   d471c:	2003dfc0 	.word	0x2003dfc0
   d4720:	000d8dcc 	.word	0x000d8dcc
   d4724:	000d8f22 	.word	0x000d8f22

000d4728 <loop>:


void loop() 
{
   d4728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d472c:	ed2d 8b0c 	vpush	{d8-d13}
   d4730:	b09b      	sub	sp, #108	; 0x6c
  static bool TxOn=false;

  SleepStateCheck();
   d4732:	f7ff fde1 	bl	d42f8 <_Z15SleepStateCheckv>

	uint16_t regAddr;
	while(device.getRegisterSet(regAddr)) {
   d4736:	f10d 0142 	add.w	r1, sp, #66	; 0x42
   d473a:	48a9      	ldr	r0, [pc, #676]	; (d49e0 <loop+0x2b8>)
   d473c:	f001 fe1b 	bl	d6376 <_ZN8I2CSlave14getRegisterSetERt>
   d4740:	b180      	cbz	r0, d4764 <loop+0x3c>
		// regAddr was updated from the I2C master
		Serial.printlnf("master updated %u to %u", regAddr, device.getRegister(regAddr));
   d4742:	f002 fee3 	bl	d750c <_Z16_fetch_usbserialv>
   d4746:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
   d474a:	4605      	mov	r5, r0
   d474c:	4621      	mov	r1, r4
   d474e:	48a4      	ldr	r0, [pc, #656]	; (d49e0 <loop+0x2b8>)
   d4750:	f001 fe02 	bl	d6358 <_ZNK8I2CSlave11getRegisterEt>
   d4754:	4623      	mov	r3, r4
   d4756:	9000      	str	r0, [sp, #0]
   d4758:	4aa2      	ldr	r2, [pc, #648]	; (d49e4 <loop+0x2bc>)
   d475a:	2101      	movs	r1, #1
   d475c:	4628      	mov	r0, r5
   d475e:	f003 fa04 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
   d4762:	e7e8      	b.n	d4736 <loop+0xe>
	}

  if (MQTTclient.isConnected())
   d4764:	48a0      	ldr	r0, [pc, #640]	; (d49e8 <loop+0x2c0>)
   d4766:	f001 f91f 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d476a:	b118      	cbz	r0, d4774 <loop+0x4c>
  {
    MQTTclient.loop();
   d476c:	489e      	ldr	r0, [pc, #632]	; (d49e8 <loop+0x2c0>)
   d476e:	f001 fac6 	bl	d5cfe <_ZN4MQTT4loopEv>
   d4772:	e005      	b.n	d4780 <loop+0x58>
  }
  else
  {
    Serial.printlnf("[%s]client failed to connect",__FUNCTION__);
   d4774:	f002 feca 	bl	d750c <_Z16_fetch_usbserialv>
   d4778:	4a9c      	ldr	r2, [pc, #624]	; (d49ec <loop+0x2c4>)
   d477a:	499d      	ldr	r1, [pc, #628]	; (d49f0 <loop+0x2c8>)
   d477c:	f7ff fe92 	bl	d44a4 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  }
  

  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d4780:	a911      	add	r1, sp, #68	; 0x44
   d4782:	489c      	ldr	r0, [pc, #624]	; (d49f4 <loop+0x2cc>)
#if 1
  static double prevZ=0.0;

  if ( prevZ != event.orientation.z )
   d4784:	4c9c      	ldr	r4, [pc, #624]	; (d49f8 <loop+0x2d0>)
  }
  

  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
   d4786:	f001 fd6d 	bl	d6264 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
#if 1
  static double prevZ=0.0;

  if ( prevZ != event.orientation.z )
   d478a:	ed9d 8a18 	vldr	s16, [sp, #96]	; 0x60
   d478e:	ee18 0a10 	vmov	r0, s16
   d4792:	f003 ff05 	bl	d85a0 <__aeabi_f2d>
   d4796:	e9d4 2300 	ldrd	r2, r3, [r4]
   d479a:	460f      	mov	r7, r1
   d479c:	4606      	mov	r6, r0
   d479e:	f004 f9bb 	bl	d8b18 <__aeabi_dcmpeq>
   d47a2:	4601      	mov	r1, r0
   d47a4:	2800      	cmp	r0, #0
   d47a6:	d12e      	bne.n	d4806 <loop+0xde>
#else
    VERBOSE( Serial.printlnf("(%d) Z: %f", millis(), event.orientation.z ) );
    prevZ = event.orientation.z;

    VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));
   d47a8:	eddf 7a94 	vldr	s15, [pc, #592]	; d49fc <loop+0x2d4>
   d47ac:	488c      	ldr	r0, [pc, #560]	; (d49e0 <loop+0x2b8>)
   d47ae:	ee28 8a27 	vmul.f32	s16, s16, s15
    Serial.printlnf("CALIBRATION: Sys=%d\tGyro=%d\tAccel=%d\tMag=%d", system, gyro, accel, mag );
    imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
    Serial.printlnf("X: %f\tY: %f\tZ: %f", euler.x(), euler.y(), euler.z() );
#else
    VERBOSE( Serial.printlnf("(%d) Z: %f", millis(), event.orientation.z ) );
    prevZ = event.orientation.z;
   d47b2:	e9c4 6700 	strd	r6, r7, [r4]

    VERBOSE( Serial.printlnf("(%d) set Z for i2c : %f", millis(), event.orientation.z ) );
		device.setRegister(0, int(event.orientation.z*100));
   d47b6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d47ba:	ee17 2a90 	vmov	r2, s15
   d47be:	f001 fdd3 	bl	d6368 <_ZN8I2CSlave11setRegisterEtm>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d47c2:	f001 ffd7 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
   d47c6:	4604      	mov	r4, r0

    telemetrySend( "imu", "{ '_time': '%lu', 'type': 'imu', 'X': '%f', 'Y':'%f', Z' : '%f' }",millis(), event.orientation.x, event.orientation.y, event.orientation.z );
   d47c8:	9818      	ldr	r0, [sp, #96]	; 0x60
   d47ca:	f003 fee9 	bl	d85a0 <__aeabi_f2d>
   d47ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d47d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
   d47d4:	f003 fee4 	bl	d85a0 <__aeabi_f2d>
   d47d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47dc:	9816      	ldr	r0, [sp, #88]	; 0x58
   d47de:	f003 fedf 	bl	d85a0 <__aeabi_f2d>
   d47e2:	4622      	mov	r2, r4
   d47e4:	e9cd 0100 	strd	r0, r1, [sp]
   d47e8:	4985      	ldr	r1, [pc, #532]	; (d4a00 <loop+0x2d8>)
   d47ea:	4886      	ldr	r0, [pc, #536]	; (d4a04 <loop+0x2dc>)
   d47ec:	f7ff ff74 	bl	d46d8 <_Z13telemetrySendPKcS0_z>
    balanceInput=balanceCorrection( event.orientation.z );
   d47f0:	9818      	ldr	r0, [sp, #96]	; 0x60
   d47f2:	f003 fed5 	bl	d85a0 <__aeabi_f2d>
   d47f6:	a378      	add	r3, pc, #480	; (adr r3, d49d8 <loop+0x2b0>)
   d47f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47fc:	f003 fd72 	bl	d82e4 <__adddf3>
   d4800:	4b81      	ldr	r3, [pc, #516]	; (d4a08 <loop+0x2e0>)
   d4802:	e9c3 0100 	strd	r0, r1, [r3]


#endif
  }
  //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
  if ( balancePID.Compute() )
   d4806:	4881      	ldr	r0, [pc, #516]	; (d4a0c <loop+0x2e4>)
   d4808:	f000 fb62 	bl	d4ed0 <_ZN3PID7ComputeEv>
   d480c:	2800      	cmp	r0, #0
   d480e:	d05a      	beq.n	d48c6 <loop+0x19e>
  {
    leftInput=balanceOutput;
   d4810:	4c7f      	ldr	r4, [pc, #508]	; (d4a10 <loop+0x2e8>)
   d4812:	4980      	ldr	r1, [pc, #512]	; (d4a14 <loop+0x2ec>)
    rightInput=balanceOutput;

    Serial.printlnf( "balancePid { \"_time\": \"%lu\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\" }", millis(), balanceInput, balanceSetpoint, balanceOutput  ) ;
   d4814:	4d80      	ldr	r5, [pc, #512]	; (d4a18 <loop+0x2f0>)
   d4816:	4e7c      	ldr	r6, [pc, #496]	; (d4a08 <loop+0x2e0>)
#endif
  }
  //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
  if ( balancePID.Compute() )
  {
    leftInput=balanceOutput;
   d4818:	e9d4 2300 	ldrd	r2, r3, [r4]
   d481c:	e9c1 2300 	strd	r2, r3, [r1]
    rightInput=balanceOutput;
   d4820:	497e      	ldr	r1, [pc, #504]	; (d4a1c <loop+0x2f4>)
   d4822:	e9c1 2300 	strd	r2, r3, [r1]

    Serial.printlnf( "balancePid { \"_time\": \"%lu\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\" }", millis(), balanceInput, balanceSetpoint, balanceOutput  ) ;
   d4826:	f002 fe71 	bl	d750c <_Z16_fetch_usbserialv>
   d482a:	4607      	mov	r7, r0
   d482c:	f001 ffa2 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
   d4830:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4834:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d4838:	e9d5 2300 	ldrd	r2, r3, [r5]
   d483c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4840:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4844:	2101      	movs	r1, #1
   d4846:	e9cd 2300 	strd	r2, r3, [sp]
   d484a:	4603      	mov	r3, r0
   d484c:	4a74      	ldr	r2, [pc, #464]	; (d4a20 <loop+0x2f8>)
   d484e:	4638      	mov	r0, r7
   d4850:	f003 f98b 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
   d4854:	f001 ff8e 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
   d4858:	4607      	mov	r7, r0

    telemetrySend( "balancePid", "{ \"_time\": \"%lu\", \"type\":\"pid\", \"name\":\"balancePid\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\", \"Kp\":\"%f\", \"Ki\":\"%f\", \"Kd\":\"%f\", \"mode\":\"%s\"  }", millis(), balanceInput, balanceSetpoint, balanceOutput, balancePID.GetKp(), balancePID.GetKi(), balancePID.GetKd(), (balancePID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d485a:	486c      	ldr	r0, [pc, #432]	; (d4a0c <loop+0x2e4>)
   d485c:	e9d5 ab00 	ldrd	sl, fp, [r5]
   d4860:	e9d6 8900 	ldrd	r8, r9, [r6]
   d4864:	e9d4 4500 	ldrd	r4, r5, [r4]
   d4868:	f000 fd22 	bl	d52b0 <_ZN3PID5GetKpEv>
   d486c:	4867      	ldr	r0, [pc, #412]	; (d4a0c <loop+0x2e4>)
   d486e:	eeb0 8a40 	vmov.f32	s16, s0
   d4872:	eef0 8a60 	vmov.f32	s17, s1
   d4876:	f000 fd1e 	bl	d52b6 <_ZN3PID5GetKiEv>
   d487a:	4864      	ldr	r0, [pc, #400]	; (d4a0c <loop+0x2e4>)
   d487c:	eeb0 9a40 	vmov.f32	s18, s0
   d4880:	eef0 9a60 	vmov.f32	s19, s1
   d4884:	f000 fd1a 	bl	d52bc <_ZN3PID5GetKdEv>
   d4888:	4860      	ldr	r0, [pc, #384]	; (d4a0c <loop+0x2e4>)
   d488a:	eeb0 aa40 	vmov.f32	s20, s0
   d488e:	eef0 aa60 	vmov.f32	s21, s1
   d4892:	f000 fd16 	bl	d52c2 <_ZN3PID7GetModeEv>
   d4896:	4a63      	ldr	r2, [pc, #396]	; (d4a24 <loop+0x2fc>)
   d4898:	4b63      	ldr	r3, [pc, #396]	; (d4a28 <loop+0x300>)
   d489a:	4964      	ldr	r1, [pc, #400]	; (d4a2c <loop+0x304>)
   d489c:	2801      	cmp	r0, #1
   d489e:	bf0c      	ite	eq
   d48a0:	4618      	moveq	r0, r3
   d48a2:	4610      	movne	r0, r2
   d48a4:	900c      	str	r0, [sp, #48]	; 0x30
   d48a6:	ed8d ab0a 	vstr	d10, [sp, #40]	; 0x28
   d48aa:	ed8d 9b08 	vstr	d9, [sp, #32]
   d48ae:	ed8d 8b06 	vstr	d8, [sp, #24]
   d48b2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d48b6:	e9cd ab02 	strd	sl, fp, [sp, #8]
   d48ba:	e9cd 8900 	strd	r8, r9, [sp]
   d48be:	463a      	mov	r2, r7
   d48c0:	485b      	ldr	r0, [pc, #364]	; (d4a30 <loop+0x308>)
   d48c2:	f7ff ff09 	bl	d46d8 <_Z13telemetrySendPKcS0_z>

#endif

  //if ( digitalRead(RX_ENABLE) ) 
  { 
    IBus.loop();
   d48c6:	485b      	ldr	r0, [pc, #364]	; (d4a34 <loop+0x30c>)
   d48c8:	4c5b      	ldr	r4, [pc, #364]	; (d4a38 <loop+0x310>)
   d48ca:	f000 fed3 	bl	d5674 <_ZN10FlySkyIBus4loopEv>

    // TX ON ( top left switch )
    if ( IBus.readChannel(5)==0x7d0 )
   d48ce:	2105      	movs	r1, #5
   d48d0:	4858      	ldr	r0, [pc, #352]	; (d4a34 <loop+0x30c>)
   d48d2:	f000 ff31 	bl	d5738 <_ZN10FlySkyIBus11readChannelEh>
   d48d6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d48da:	d153      	bne.n	d4984 <loop+0x25c>
    {
      static double prevLeftSetpoint=-1;
      static double prevRightSetpoint=-1;
      
      TxOn=true;
   d48dc:	2101      	movs	r1, #1

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d48de:	4855      	ldr	r0, [pc, #340]	; (d4a34 <loop+0x30c>)
    if ( IBus.readChannel(5)==0x7d0 )
    {
      static double prevLeftSetpoint=-1;
      static double prevRightSetpoint=-1;
      
      TxOn=true;
   d48e0:	7021      	strb	r1, [r4, #0]

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d48e2:	f000 ff29 	bl	d5738 <_ZN10FlySkyIBus11readChannelEh>
   d48e6:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d48ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d48ee:	da04      	bge.n	d48fa <loop+0x1d2>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d48f0:	4b52      	ldr	r3, [pc, #328]	; (d4a3c <loop+0x314>)
   d48f2:	4298      	cmp	r0, r3
   d48f4:	bfb8      	it	lt
   d48f6:	4618      	movlt	r0, r3
   d48f8:	e001      	b.n	d48fe <loop+0x1d6>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d48fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d48fe:	f003 fe3d 	bl	d857c <__aeabi_i2d>
   d4902:	4c4f      	ldr	r4, [pc, #316]	; (d4a40 <loop+0x318>)
      if ( rightSetpoint != prevRightSetpoint ) {
   d4904:	4d4f      	ldr	r5, [pc, #316]	; (d4a44 <loop+0x31c>)
      static double prevRightSetpoint=-1;
      
      TxOn=true;

      // right
      rightSetpoint=max( min( IBus.readChannel(1)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d4906:	e9c4 0100 	strd	r0, r1, [r4]
      if ( rightSetpoint != prevRightSetpoint ) {
   d490a:	e9d5 2300 	ldrd	r2, r3, [r5]
   d490e:	f004 f903 	bl	d8b18 <__aeabi_dcmpeq>
   d4912:	b968      	cbnz	r0, d4930 <loop+0x208>
        Serial.printlnf("rightSpeed from RX = %d", rightSetpoint );
   d4914:	f002 fdfa 	bl	d750c <_Z16_fetch_usbserialv>
   d4918:	e9d4 2300 	ldrd	r2, r3, [r4]
   d491c:	2101      	movs	r1, #1
   d491e:	e9cd 2300 	strd	r2, r3, [sp]
   d4922:	4a49      	ldr	r2, [pc, #292]	; (d4a48 <loop+0x320>)
   d4924:	f003 f921 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
        prevRightSetpoint=rightSetpoint;
   d4928:	e9d4 2300 	ldrd	r2, r3, [r4]
   d492c:	e9c5 2300 	strd	r2, r3, [r5]
      }

      // left
      leftSetpoint=max( min( IBus.readChannel(2)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d4930:	2102      	movs	r1, #2
   d4932:	4840      	ldr	r0, [pc, #256]	; (d4a34 <loop+0x30c>)
   d4934:	f000 ff00 	bl	d5738 <_ZN10FlySkyIBus11readChannelEh>
   d4938:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
   d493c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4940:	da04      	bge.n	d494c <loop+0x224>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d4942:	4b3e      	ldr	r3, [pc, #248]	; (d4a3c <loop+0x314>)
   d4944:	4298      	cmp	r0, r3
   d4946:	bfb8      	it	lt
   d4948:	4618      	movlt	r0, r3
   d494a:	e001      	b.n	d4950 <loop+0x228>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d494c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4950:	f003 fe14 	bl	d857c <__aeabi_i2d>
   d4954:	4c3d      	ldr	r4, [pc, #244]	; (d4a4c <loop+0x324>)
      if ( leftSetpoint != prevLeftSetpoint ){
   d4956:	4d3e      	ldr	r5, [pc, #248]	; (d4a50 <loop+0x328>)
        Serial.printlnf("rightSpeed from RX = %d", rightSetpoint );
        prevRightSetpoint=rightSetpoint;
      }

      // left
      leftSetpoint=max( min( IBus.readChannel(2)-0x5dc, SPEED_MAX ), SPEED_MIN );
   d4958:	e9c4 0100 	strd	r0, r1, [r4]
      if ( leftSetpoint != prevLeftSetpoint ){
   d495c:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4960:	f004 f8da 	bl	d8b18 <__aeabi_dcmpeq>
   d4964:	b9c0      	cbnz	r0, d4998 <loop+0x270>
        Serial.printlnf("leftSpeed from RX = %d", leftSetpoint );
   d4966:	f002 fdd1 	bl	d750c <_Z16_fetch_usbserialv>
   d496a:	e9d4 2300 	ldrd	r2, r3, [r4]
   d496e:	2101      	movs	r1, #1
   d4970:	e9cd 2300 	strd	r2, r3, [sp]
   d4974:	4a37      	ldr	r2, [pc, #220]	; (d4a54 <loop+0x32c>)
   d4976:	f003 f8f8 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
        prevLeftSetpoint=leftSetpoint;
   d497a:	e9d4 2300 	ldrd	r2, r3, [r4]
   d497e:	e9c5 2300 	strd	r2, r3, [r5]
   d4982:	e009      	b.n	d4998 <loop+0x270>
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
   d4984:	7823      	ldrb	r3, [r4, #0]
   d4986:	b13b      	cbz	r3, d4998 <loop+0x270>
   d4988:	2105      	movs	r1, #5
   d498a:	482a      	ldr	r0, [pc, #168]	; (d4a34 <loop+0x30c>)
   d498c:	f000 fed4 	bl	d5738 <_ZN10FlySkyIBus11readChannelEh>
   d4990:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4994:	f040 8187 	bne.w	d4ca6 <loop+0x57e>
      TxOn=false;
      speed=setTargetSpeed(0);    
    }
  }

  if (Serial.available())
   d4998:	f002 fdb8 	bl	d750c <_Z16_fetch_usbserialv>
   d499c:	6803      	ldr	r3, [r0, #0]
   d499e:	691b      	ldr	r3, [r3, #16]
   d49a0:	4798      	blx	r3
   d49a2:	2800      	cmp	r0, #0
   d49a4:	f000 808c 	beq.w	d4ac0 <loop+0x398>
  {
    int inByte = Serial.read();
   d49a8:	f002 fdb0 	bl	d750c <_Z16_fetch_usbserialv>
   d49ac:	6803      	ldr	r3, [r0, #0]
   d49ae:	695b      	ldr	r3, [r3, #20]
   d49b0:	4798      	blx	r3
    switch (inByte)
   d49b2:	2832      	cmp	r0, #50	; 0x32
   d49b4:	d07a      	beq.n	d4aac <loop+0x384>
   d49b6:	dc07      	bgt.n	d49c8 <loop+0x2a0>
   d49b8:	2820      	cmp	r0, #32
   d49ba:	d04f      	beq.n	d4a5c <loop+0x334>
   d49bc:	2831      	cmp	r0, #49	; 0x31
   d49be:	d17f      	bne.n	d4ac0 <loop+0x398>
          speed=setTargetSpeed(0);
          leftPID.SetMode(PID::AUTOMATIC);
          rightPID.SetMode(PID::AUTOMATIC);
          break;
        case '1':
          speed=setTargetSpeed(speed-SPEED_DELTA);
   d49c0:	4c25      	ldr	r4, [pc, #148]	; (d4a58 <loop+0x330>)
   d49c2:	6820      	ldr	r0, [r4, #0]
   d49c4:	3864      	subs	r0, #100	; 0x64
   d49c6:	e078      	b.n	d4aba <loop+0x392>
  }

  if (Serial.available())
  {
    int inByte = Serial.read();
    switch (inByte)
   d49c8:	2833      	cmp	r0, #51	; 0x33
   d49ca:	d073      	beq.n	d4ab4 <loop+0x38c>
   d49cc:	2839      	cmp	r0, #57	; 0x39
   d49ce:	d177      	bne.n	d4ac0 <loop+0x398>
          break;
        case '3':
          speed=setTargetSpeed(-speed);
          break;
        case '9':
          SleepStateToggle();
   d49d0:	f7ff fc5e 	bl	d4290 <_Z16SleepStateTogglev>
          break;
   d49d4:	e074      	b.n	d4ac0 <loop+0x398>
   d49d6:	bf00      	nop
   d49d8:	00000000 	.word	0x00000000
   d49dc:	405b2000 	.word	0x405b2000
   d49e0:	2003dfa4 	.word	0x2003dfa4
   d49e4:	000d8f50 	.word	0x000d8f50
   d49e8:	2003dfc0 	.word	0x2003dfc0
   d49ec:	000d8ded 	.word	0x000d8ded
   d49f0:	000d8f22 	.word	0x000d8f22
   d49f4:	2003e0d0 	.word	0x2003e0d0
   d49f8:	2003e1a8 	.word	0x2003e1a8
   d49fc:	42c80000 	.word	0x42c80000
   d4a00:	000d8f68 	.word	0x000d8f68
   d4a04:	000d8faa 	.word	0x000d8faa
   d4a08:	2003e0e0 	.word	0x2003e0e0
   d4a0c:	2003e038 	.word	0x2003e038
   d4a10:	2003e020 	.word	0x2003e020
   d4a14:	2003e030 	.word	0x2003e030
   d4a18:	2003e0c8 	.word	0x2003e0c8
   d4a1c:	2003e1b8 	.word	0x2003e1b8
   d4a20:	000d8fae 	.word	0x000d8fae
   d4a24:	000d8f49 	.word	0x000d8f49
   d4a28:	000d8f3f 	.word	0x000d8f3f
   d4a2c:	000d9001 	.word	0x000d9001
   d4a30:	000d909b 	.word	0x000d909b
   d4a34:	2003e2d8 	.word	0x2003e2d8
   d4a38:	2003e238 	.word	0x2003e238
   d4a3c:	fffffe0c 	.word	0xfffffe0c
   d4a40:	2003e190 	.word	0x2003e190
   d4a44:	2003df30 	.word	0x2003df30
   d4a48:	000d90a6 	.word	0x000d90a6
   d4a4c:	2003e0b8 	.word	0x2003e0b8
   d4a50:	2003df20 	.word	0x2003df20
   d4a54:	000d90be 	.word	0x000d90be
   d4a58:	2003e23c 	.word	0x2003e23c
    int inByte = Serial.read();
    switch (inByte)
    {
        case ' ':
          // reset PID
          leftPID.SetMode(PID::MANUAL);
   d4a5c:	2100      	movs	r1, #0
   d4a5e:	4898      	ldr	r0, [pc, #608]	; (d4cc0 <loop+0x598>)
   d4a60:	f000 fbae 	bl	d51c0 <_ZN3PID7SetModeENS_6mode_tE>
          leftOutput=0;
   d4a64:	4b97      	ldr	r3, [pc, #604]	; (d4cc4 <loop+0x59c>)
   d4a66:	2400      	movs	r4, #0
   d4a68:	2500      	movs	r5, #0
   d4a6a:	e9c3 4500 	strd	r4, r5, [r3]
   d4a6e:	4b96      	ldr	r3, [pc, #600]	; (d4cc8 <loop+0x5a0>)
   d4a70:	2100      	movs	r1, #0
   d4a72:	6818      	ldr	r0, [r3, #0]
   d4a74:	f7ff fbe4 	bl	d4240 <_Z6setPwmP16Adafruit_DCMotori.part.2>
          setPwm( leftMotor, leftOutput);

          rightPID.SetMode(PID::MANUAL);
   d4a78:	2100      	movs	r1, #0
   d4a7a:	4894      	ldr	r0, [pc, #592]	; (d4ccc <loop+0x5a4>)
   d4a7c:	f000 fba0 	bl	d51c0 <_ZN3PID7SetModeENS_6mode_tE>
          rightOutput=0;
   d4a80:	4b93      	ldr	r3, [pc, #588]	; (d4cd0 <loop+0x5a8>)
   d4a82:	e9c3 4500 	strd	r4, r5, [r3]
   d4a86:	4b93      	ldr	r3, [pc, #588]	; (d4cd4 <loop+0x5ac>)
   d4a88:	2100      	movs	r1, #0
   d4a8a:	6818      	ldr	r0, [r3, #0]
   d4a8c:	f7ff fbd8 	bl	d4240 <_Z6setPwmP16Adafruit_DCMotori.part.2>
          setPwm( rightMotor, rightOutput);

          speed=setTargetSpeed(0);
   d4a90:	2000      	movs	r0, #0
   d4a92:	f7ff fc57 	bl	d4344 <_Z14setTargetSpeedi>
   d4a96:	4b90      	ldr	r3, [pc, #576]	; (d4cd8 <loop+0x5b0>)
          leftPID.SetMode(PID::AUTOMATIC);
   d4a98:	2101      	movs	r1, #1

          rightPID.SetMode(PID::MANUAL);
          rightOutput=0;
          setPwm( rightMotor, rightOutput);

          speed=setTargetSpeed(0);
   d4a9a:	6018      	str	r0, [r3, #0]
          leftPID.SetMode(PID::AUTOMATIC);
   d4a9c:	4888      	ldr	r0, [pc, #544]	; (d4cc0 <loop+0x598>)
   d4a9e:	f000 fb8f 	bl	d51c0 <_ZN3PID7SetModeENS_6mode_tE>
          rightPID.SetMode(PID::AUTOMATIC);
   d4aa2:	2101      	movs	r1, #1
   d4aa4:	4889      	ldr	r0, [pc, #548]	; (d4ccc <loop+0x5a4>)
   d4aa6:	f000 fb8b 	bl	d51c0 <_ZN3PID7SetModeENS_6mode_tE>
          break;
   d4aaa:	e009      	b.n	d4ac0 <loop+0x398>
        case '1':
          speed=setTargetSpeed(speed-SPEED_DELTA);
          break;
        case'2':
          speed=setTargetSpeed(speed+SPEED_DELTA);
   d4aac:	4c8a      	ldr	r4, [pc, #552]	; (d4cd8 <loop+0x5b0>)
   d4aae:	6820      	ldr	r0, [r4, #0]
   d4ab0:	3064      	adds	r0, #100	; 0x64
   d4ab2:	e002      	b.n	d4aba <loop+0x392>
          break;
        case '3':
          speed=setTargetSpeed(-speed);
   d4ab4:	4c88      	ldr	r4, [pc, #544]	; (d4cd8 <loop+0x5b0>)
   d4ab6:	6820      	ldr	r0, [r4, #0]
   d4ab8:	4240      	negs	r0, r0
   d4aba:	f7ff fc43 	bl	d4344 <_Z14setTargetSpeedi>
   d4abe:	6020      	str	r0, [r4, #0]

	inline int32_t read(void) {
		noInterrupts();
   d4ac0:	f002 fe91 	bl	d77e6 <_Z12noInterruptsv>
		int32_t ret = position;
   d4ac4:	4b85      	ldr	r3, [pc, #532]	; (d4cdc <loop+0x5b4>)
  long newRightPosition = rightEnc.read();
  int now=millis();

#if 1

  if ( oldLeftTime==0 )
   d4ac6:	4d86      	ldr	r5, [pc, #536]	; (d4ce0 <loop+0x5b8>)
   d4ac8:	f8d3 a014 	ldr.w	sl, [r3, #20]
		interrupts();
   d4acc:	f002 fe8d 	bl	d77ea <_Z10interruptsv>
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
	}

	inline int32_t read(void) {
		noInterrupts();
   d4ad0:	f002 fe89 	bl	d77e6 <_Z12noInterruptsv>
		int32_t ret = position;
   d4ad4:	4b83      	ldr	r3, [pc, #524]	; (d4ce4 <loop+0x5bc>)
   d4ad6:	695e      	ldr	r6, [r3, #20]
		interrupts();
   d4ad8:	f002 fe87 	bl	d77ea <_Z10interruptsv>
   d4adc:	f001 fe4a 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
   d4ae0:	682b      	ldr	r3, [r5, #0]
   d4ae2:	4604      	mov	r4, r0
   d4ae4:	2b00      	cmp	r3, #0
   d4ae6:	d06c      	beq.n	d4bc2 <loop+0x49a>
  {
    // do nothing
    oldLeftTime = now;
  } 
  else if (now-oldLeftTime>0)
   d4ae8:	1ac3      	subs	r3, r0, r3
   d4aea:	2b00      	cmp	r3, #0
   d4aec:	930f      	str	r3, [sp, #60]	; 0x3c
   d4aee:	dd69      	ble.n	d4bc4 <loop+0x49c>
  {  
    //Serial.printlnf( "[%s]%d", __FUNCTION__, now-oldLeftTime );
    leftInput = (((newLeftPosition-oldLeftPosition)*60000)/(18.75*64*(now-oldLeftTime)));
   d4af0:	4f7d      	ldr	r7, [pc, #500]	; (d4ce8 <loop+0x5c0>)
   d4af2:	f8df b220 	ldr.w	fp, [pc, #544]	; d4d14 <loop+0x5ec>
   d4af6:	6838      	ldr	r0, [r7, #0]
   d4af8:	f64e 2260 	movw	r2, #60000	; 0xea60
   d4afc:	ebc0 000a 	rsb	r0, r0, sl
   d4b00:	4350      	muls	r0, r2
   d4b02:	f003 fd3b 	bl	d857c <__aeabi_i2d>
   d4b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4b08:	4680      	mov	r8, r0
   d4b0a:	4618      	mov	r0, r3
   d4b0c:	4689      	mov	r9, r1
   d4b0e:	f003 fd35 	bl	d857c <__aeabi_i2d>
   d4b12:	2200      	movs	r2, #0
   d4b14:	4b75      	ldr	r3, [pc, #468]	; (d4cec <loop+0x5c4>)
   d4b16:	f003 fd97 	bl	d8648 <__aeabi_dmul>
   d4b1a:	4602      	mov	r2, r0
   d4b1c:	460b      	mov	r3, r1
   d4b1e:	4640      	mov	r0, r8
   d4b20:	4649      	mov	r1, r9
   d4b22:	f003 febb 	bl	d889c <__aeabi_ddiv>
   d4b26:	e9cb 0100 	strd	r0, r1, [fp]
    //Serial.printlnf( "[%s]%f", __FUNCTION__, leftInput );
    if ( leftPID.Compute() )
   d4b2a:	4865      	ldr	r0, [pc, #404]	; (d4cc0 <loop+0x598>)
   d4b2c:	f000 f9d0 	bl	d4ed0 <_ZN3PID7ComputeEv>
   d4b30:	2800      	cmp	r0, #0
   d4b32:	d047      	beq.n	d4bc4 <loop+0x49c>
    {
      setPwm( leftMotor, leftOutput);
   d4b34:	f8df 818c 	ldr.w	r8, [pc, #396]	; d4cc4 <loop+0x59c>
   d4b38:	e9d8 0100 	ldrd	r0, r1, [r8]
   d4b3c:	f004 f834 	bl	d8ba8 <__aeabi_d2iz>
   d4b40:	4b61      	ldr	r3, [pc, #388]	; (d4cc8 <loop+0x5a0>)
   d4b42:	4601      	mov	r1, r0
   d4b44:	6818      	ldr	r0, [r3, #0]
   d4b46:	f7ff fbe5 	bl	d4314 <_Z6setPwmP16Adafruit_DCMotori>
   d4b4a:	f001 fe13 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
      //Serial.printlnf( "[%s]%d left speed=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, now, speed, newLeftPosition-oldLeftPosition, newLeftPosition, leftInput );
      VERBOSE( Serial.printlnf( "[%s] %d - left pid input=%f, setpoint=%f, output=%f", __FUNCTION__, now, leftInput, leftSetpoint, leftOutput) );

      telemetrySend( "leftPid", "{ \"_time\": \"%lu\", \"type\":\"pid\", \"name\":\"leftPid\", \"Input\" : \"%f\", \"Setpoint\"  : \"%f\", \"Output\" : \"%f\", \"Kp\":\"%f\", \"Ki\":\"%f\", \"Kd\":\"%f\", \"mode\":\"%s\"  }", millis(), leftInput, leftSetpoint, leftOutput, leftPID.GetKp(), leftPID.GetKi(), leftPID.GetKd(), (leftPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d4b4e:	4b68      	ldr	r3, [pc, #416]	; (d4cf0 <loop+0x5c8>)
   d4b50:	4681      	mov	r9, r0
   d4b52:	485b      	ldr	r0, [pc, #364]	; (d4cc0 <loop+0x598>)
   d4b54:	ed93 9b00 	vldr	d9, [r3]
   d4b58:	ed9b 8b00 	vldr	d8, [fp]
   d4b5c:	ed98 ab00 	vldr	d10, [r8]
   d4b60:	f000 fba6 	bl	d52b0 <_ZN3PID5GetKpEv>
   d4b64:	4856      	ldr	r0, [pc, #344]	; (d4cc0 <loop+0x598>)
   d4b66:	eeb0 ba40 	vmov.f32	s22, s0
   d4b6a:	eef0 ba60 	vmov.f32	s23, s1
   d4b6e:	f000 fba2 	bl	d52b6 <_ZN3PID5GetKiEv>
   d4b72:	4853      	ldr	r0, [pc, #332]	; (d4cc0 <loop+0x598>)
   d4b74:	eeb0 ca40 	vmov.f32	s24, s0
   d4b78:	eef0 ca60 	vmov.f32	s25, s1
   d4b7c:	f000 fb9e 	bl	d52bc <_ZN3PID5GetKdEv>
   d4b80:	484f      	ldr	r0, [pc, #316]	; (d4cc0 <loop+0x598>)
   d4b82:	eeb0 da40 	vmov.f32	s26, s0
   d4b86:	eef0 da60 	vmov.f32	s27, s1
   d4b8a:	f000 fb9a 	bl	d52c2 <_ZN3PID7GetModeEv>
   d4b8e:	4a59      	ldr	r2, [pc, #356]	; (d4cf4 <loop+0x5cc>)
   d4b90:	4b59      	ldr	r3, [pc, #356]	; (d4cf8 <loop+0x5d0>)
   d4b92:	495a      	ldr	r1, [pc, #360]	; (d4cfc <loop+0x5d4>)
   d4b94:	2801      	cmp	r0, #1
   d4b96:	bf0c      	ite	eq
   d4b98:	4618      	moveq	r0, r3
   d4b9a:	4610      	movne	r0, r2
   d4b9c:	900c      	str	r0, [sp, #48]	; 0x30
   d4b9e:	ed8d db0a 	vstr	d13, [sp, #40]	; 0x28
   d4ba2:	ed8d cb08 	vstr	d12, [sp, #32]
   d4ba6:	ed8d bb06 	vstr	d11, [sp, #24]
   d4baa:	ed8d ab04 	vstr	d10, [sp, #16]
   d4bae:	ed8d 9b02 	vstr	d9, [sp, #8]
   d4bb2:	ed8d 8b00 	vstr	d8, [sp]
   d4bb6:	464a      	mov	r2, r9
   d4bb8:	4851      	ldr	r0, [pc, #324]	; (d4d00 <loop+0x5d8>)
   d4bba:	f7ff fd8d 	bl	d46d8 <_Z13telemetrySendPKcS0_z>

      oldLeftPosition = newLeftPosition;
   d4bbe:	f8c7 a000 	str.w	sl, [r7]
      oldLeftTime = now;
   d4bc2:	602c      	str	r4, [r5, #0]
    }
  }
#endif

#if 1
  if ( oldRightTime==0 )
   d4bc4:	4f4f      	ldr	r7, [pc, #316]	; (d4d04 <loop+0x5dc>)
   d4bc6:	683d      	ldr	r5, [r7, #0]
   d4bc8:	2d00      	cmp	r5, #0
   d4bca:	d06a      	beq.n	d4ca2 <loop+0x57a>
  {
    // do nothing
    oldRightTime = now;
  } 
  else if (now-oldRightTime>0)
   d4bcc:	1b65      	subs	r5, r4, r5
   d4bce:	2d00      	cmp	r5, #0
   d4bd0:	dd70      	ble.n	d4cb4 <loop+0x58c>
  {  
    rightInput = (((newRightPosition-oldRightPosition)*60000)/(18.75*64*(now-oldRightTime)));
   d4bd2:	f8df a144 	ldr.w	sl, [pc, #324]	; d4d18 <loop+0x5f0>
   d4bd6:	f8df b144 	ldr.w	fp, [pc, #324]	; d4d1c <loop+0x5f4>
   d4bda:	f8da 0000 	ldr.w	r0, [sl]
   d4bde:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4be2:	1a30      	subs	r0, r6, r0
   d4be4:	4358      	muls	r0, r3
   d4be6:	f003 fcc9 	bl	d857c <__aeabi_i2d>
   d4bea:	4680      	mov	r8, r0
   d4bec:	4628      	mov	r0, r5
   d4bee:	4689      	mov	r9, r1
   d4bf0:	f003 fcc4 	bl	d857c <__aeabi_i2d>
   d4bf4:	2200      	movs	r2, #0
   d4bf6:	4b3d      	ldr	r3, [pc, #244]	; (d4cec <loop+0x5c4>)
   d4bf8:	f003 fd26 	bl	d8648 <__aeabi_dmul>
   d4bfc:	4602      	mov	r2, r0
   d4bfe:	460b      	mov	r3, r1
   d4c00:	4640      	mov	r0, r8
   d4c02:	4649      	mov	r1, r9
   d4c04:	f003 fe4a 	bl	d889c <__aeabi_ddiv>
   d4c08:	e9cb 0100 	strd	r0, r1, [fp]
    if ( rightPID.Compute() )
   d4c0c:	482f      	ldr	r0, [pc, #188]	; (d4ccc <loop+0x5a4>)
   d4c0e:	f000 f95f 	bl	d4ed0 <_ZN3PID7ComputeEv>
   d4c12:	2800      	cmp	r0, #0
   d4c14:	d04e      	beq.n	d4cb4 <loop+0x58c>
    {
      setPwm( rightMotor, rightOutput);
   d4c16:	4d2e      	ldr	r5, [pc, #184]	; (d4cd0 <loop+0x5a8>)
   d4c18:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4c1c:	f003 ffc4 	bl	d8ba8 <__aeabi_d2iz>
   d4c20:	4b2c      	ldr	r3, [pc, #176]	; (d4cd4 <loop+0x5ac>)
   d4c22:	4601      	mov	r1, r0
   d4c24:	6818      	ldr	r0, [r3, #0]
   d4c26:	f7ff fb75 	bl	d4314 <_Z6setPwmP16Adafruit_DCMotori>
   d4c2a:	f001 fda3 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
      //Serial.printlnf( "[%s]%d right speed=%d, delta=%d (position=%d) RPM=%f", __FUNCTION__, time, speed, newRightPosition-oldRightPosition, newRightPosition, rightInput);
      VERBOSE( Serial.printlnf( "[%s] %d - right pid input=%f, setpoint=%f, output=%f", __FUNCTION__, now, rightInput, rightSetpoint, rightOutput) );

      telemetrySend( "rightPid", "{ \"_time\": %lu, \"type\":\"pid\", \"name\":\"rightPid\", \"Input\" : %f, \"Setpoint\"  : %f, \"Output\" : %f, \"Kp\":%f, \"Ki\":%f, \"Kd\":%f, \"mode\":\"%s\"  }"        , millis(), rightInput, rightSetpoint, rightOutput, rightPID.GetKp(), rightPID.GetKi(), rightPID.GetKd(), (rightPID.GetMode()==PID::AUTOMATIC)?"AUTOMATIC":"MANUAL" ) ;
   d4c2e:	4b36      	ldr	r3, [pc, #216]	; (d4d08 <loop+0x5e0>)
   d4c30:	4680      	mov	r8, r0
   d4c32:	4826      	ldr	r0, [pc, #152]	; (d4ccc <loop+0x5a4>)
   d4c34:	ed93 9b00 	vldr	d9, [r3]
   d4c38:	ed9b 8b00 	vldr	d8, [fp]
   d4c3c:	ed95 ab00 	vldr	d10, [r5]
   d4c40:	f000 fb36 	bl	d52b0 <_ZN3PID5GetKpEv>
   d4c44:	4821      	ldr	r0, [pc, #132]	; (d4ccc <loop+0x5a4>)
   d4c46:	eeb0 ba40 	vmov.f32	s22, s0
   d4c4a:	eef0 ba60 	vmov.f32	s23, s1
   d4c4e:	f000 fb32 	bl	d52b6 <_ZN3PID5GetKiEv>
   d4c52:	481e      	ldr	r0, [pc, #120]	; (d4ccc <loop+0x5a4>)
   d4c54:	eeb0 ca40 	vmov.f32	s24, s0
   d4c58:	eef0 ca60 	vmov.f32	s25, s1
   d4c5c:	f000 fb2e 	bl	d52bc <_ZN3PID5GetKdEv>
   d4c60:	481a      	ldr	r0, [pc, #104]	; (d4ccc <loop+0x5a4>)
   d4c62:	eeb0 da40 	vmov.f32	s26, s0
   d4c66:	eef0 da60 	vmov.f32	s27, s1
   d4c6a:	f000 fb2a 	bl	d52c2 <_ZN3PID7GetModeEv>
   d4c6e:	4a21      	ldr	r2, [pc, #132]	; (d4cf4 <loop+0x5cc>)
   d4c70:	4b21      	ldr	r3, [pc, #132]	; (d4cf8 <loop+0x5d0>)
   d4c72:	4926      	ldr	r1, [pc, #152]	; (d4d0c <loop+0x5e4>)
   d4c74:	2801      	cmp	r0, #1
   d4c76:	bf0c      	ite	eq
   d4c78:	4618      	moveq	r0, r3
   d4c7a:	4610      	movne	r0, r2
   d4c7c:	900c      	str	r0, [sp, #48]	; 0x30
   d4c7e:	ed8d db0a 	vstr	d13, [sp, #40]	; 0x28
   d4c82:	ed8d cb08 	vstr	d12, [sp, #32]
   d4c86:	ed8d bb06 	vstr	d11, [sp, #24]
   d4c8a:	ed8d ab04 	vstr	d10, [sp, #16]
   d4c8e:	ed8d 9b02 	vstr	d9, [sp, #8]
   d4c92:	ed8d 8b00 	vstr	d8, [sp]
   d4c96:	4642      	mov	r2, r8
   d4c98:	481d      	ldr	r0, [pc, #116]	; (d4d10 <loop+0x5e8>)
   d4c9a:	f7ff fd1d 	bl	d46d8 <_Z13telemetrySendPKcS0_z>

      oldRightPosition = newRightPosition;
   d4c9e:	f8ca 6000 	str.w	r6, [sl]
      oldRightTime = now;
   d4ca2:	603c      	str	r4, [r7, #0]
    }
  }
#endif


}
   d4ca4:	e006      	b.n	d4cb4 <loop+0x58c>
        prevLeftSetpoint=leftSetpoint;
      }
    }
    else if ( TxOn && IBus.readChannel(5)!=0x7d0 )
    {
      TxOn=false;
   d4ca6:	2000      	movs	r0, #0
   d4ca8:	7020      	strb	r0, [r4, #0]
      speed=setTargetSpeed(0);    
   d4caa:	f7ff fb4b 	bl	d4344 <_Z14setTargetSpeedi>
   d4cae:	4b0a      	ldr	r3, [pc, #40]	; (d4cd8 <loop+0x5b0>)
   d4cb0:	6018      	str	r0, [r3, #0]
   d4cb2:	e671      	b.n	d4998 <loop+0x270>
    }
  }
#endif


}
   d4cb4:	b01b      	add	sp, #108	; 0x6c
   d4cb6:	ecbd 8b0c 	vpop	{d8-d13}
   d4cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4cbe:	bf00      	nop
   d4cc0:	2003e260 	.word	0x2003e260
   d4cc4:	2003e1a0 	.word	0x2003e1a0
   d4cc8:	2003e104 	.word	0x2003e104
   d4ccc:	2003e110 	.word	0x2003e110
   d4cd0:	2003e1b0 	.word	0x2003e1b0
   d4cd4:	2003e018 	.word	0x2003e018
   d4cd8:	2003e23c 	.word	0x2003e23c
   d4cdc:	2003e240 	.word	0x2003e240
   d4ce0:	2003e0c0 	.word	0x2003e0c0
   d4ce4:	2003e0e8 	.word	0x2003e0e8
   d4ce8:	2003e1c4 	.word	0x2003e1c4
   d4cec:	4092c000 	.word	0x4092c000
   d4cf0:	2003e0b8 	.word	0x2003e0b8
   d4cf4:	000d8f49 	.word	0x000d8f49
   d4cf8:	000d8f3f 	.word	0x000d8f3f
   d4cfc:	000d90d5 	.word	0x000d90d5
   d4d00:	000d916c 	.word	0x000d916c
   d4d04:	2003e198 	.word	0x2003e198
   d4d08:	2003e190 	.word	0x2003e190
   d4d0c:	000d9174 	.word	0x000d9174
   d4d10:	000d91fe 	.word	0x000d91fe
   d4d14:	2003e030 	.word	0x2003e030
   d4d18:	2003e0b0 	.word	0x2003e0b0
   d4d1c:	2003e1b8 	.word	0x2003e1b8

000d4d20 <_ZN15Adafruit_BNO055D0Ev>:
   d4d20:	b510      	push	{r4, lr}
   d4d22:	4604      	mov	r4, r0
   d4d24:	f7ff f9bb 	bl	d409e <_ZdlPv>
   d4d28:	4620      	mov	r0, r4
   d4d2a:	bd10      	pop	{r4, pc}
   d4d2c:	0000      	movs	r0, r0
	...

000d4d30 <_GLOBAL__sub_I_leftSetpoint>:
   d4d30:	b530      	push	{r4, r5, lr}
   d4d32:	ed2d 8b04 	vpush	{d8-d9}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4d36:	4b4a      	ldr	r3, [pc, #296]	; (d4e60 <_GLOBAL__sub_I_leftSetpoint+0x130>)
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d4d38:	4d4a      	ldr	r5, [pc, #296]	; (d4e64 <_GLOBAL__sub_I_leftSetpoint+0x134>)
    }
  }
#endif


}
   d4d3a:	b083      	sub	sp, #12
   d4d3c:	2400      	movs	r4, #0
const double kp=0, ki=1.0, kd=0;
double leftSetpoint, leftInput, leftOutput;
double rightSetpoint, rightInput, rightOutput;

//Specify the links and initial tuning parameters
PID leftPID(&leftInput, &leftOutput, &leftSetpoint, kp, ki, kd, PID::DIRECT);
   d4d3e:	ed9f 8b44 	vldr	d8, [pc, #272]	; d4e50 <_GLOBAL__sub_I_leftSetpoint+0x120>
   d4d42:	ed9f 9b45 	vldr	d9, [pc, #276]	; d4e58 <_GLOBAL__sub_I_leftSetpoint+0x128>
   d4d46:	601c      	str	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4d48:	f001 fd34 	bl	d67b4 <HAL_Pin_Map>
   d4d4c:	eeb0 2a48 	vmov.f32	s4, s16
   d4d50:	eef0 2a68 	vmov.f32	s5, s17
   d4d54:	eeb0 1a49 	vmov.f32	s2, s18
   d4d58:	eef0 1a69 	vmov.f32	s3, s19
   d4d5c:	4b42      	ldr	r3, [pc, #264]	; (d4e68 <_GLOBAL__sub_I_leftSetpoint+0x138>)
   d4d5e:	eeb0 0a48 	vmov.f32	s0, s16
   d4d62:	eef0 0a68 	vmov.f32	s1, s17
   d4d66:	6018      	str	r0, [r3, #0]
   d4d68:	4a40      	ldr	r2, [pc, #256]	; (d4e6c <_GLOBAL__sub_I_leftSetpoint+0x13c>)
   d4d6a:	9400      	str	r4, [sp, #0]
   d4d6c:	4b40      	ldr	r3, [pc, #256]	; (d4e70 <_GLOBAL__sub_I_leftSetpoint+0x140>)
   d4d6e:	4941      	ldr	r1, [pc, #260]	; (d4e74 <_GLOBAL__sub_I_leftSetpoint+0x144>)
   d4d70:	4841      	ldr	r0, [pc, #260]	; (d4e78 <_GLOBAL__sub_I_leftSetpoint+0x148>)
   d4d72:	f000 fa59 	bl	d5228 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>
PID rightPID(&rightInput, &rightOutput, &rightSetpoint, kp, ki, kd, PID::DIRECT);
   d4d76:	eeb0 2a48 	vmov.f32	s4, s16
   d4d7a:	eef0 2a68 	vmov.f32	s5, s17
   d4d7e:	eeb0 1a49 	vmov.f32	s2, s18
   d4d82:	eef0 1a69 	vmov.f32	s3, s19
   d4d86:	9400      	str	r4, [sp, #0]
   d4d88:	eeb0 0a48 	vmov.f32	s0, s16
   d4d8c:	eef0 0a68 	vmov.f32	s1, s17
   d4d90:	4b3a      	ldr	r3, [pc, #232]	; (d4e7c <_GLOBAL__sub_I_leftSetpoint+0x14c>)
   d4d92:	4a3b      	ldr	r2, [pc, #236]	; (d4e80 <_GLOBAL__sub_I_leftSetpoint+0x150>)
   d4d94:	493b      	ldr	r1, [pc, #236]	; (d4e84 <_GLOBAL__sub_I_leftSetpoint+0x154>)
   d4d96:	483c      	ldr	r0, [pc, #240]	; (d4e88 <_GLOBAL__sub_I_leftSetpoint+0x158>)
   d4d98:	f000 fa46 	bl	d5228 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>

//  balancing PID
const double bkp=1.0, bki=0, bkd=0;
double balanceSetpoint, balanceInput, balanceOutput;
PID balancePID(&balanceInput, &balanceOutput, &balanceSetpoint, bkp, bki, bkd, PID::DIRECT);
   d4d9c:	eeb0 2a48 	vmov.f32	s4, s16
   d4da0:	eef0 2a68 	vmov.f32	s5, s17
   d4da4:	eeb0 1a48 	vmov.f32	s2, s16
   d4da8:	eef0 1a68 	vmov.f32	s3, s17
   d4dac:	eeb0 0a49 	vmov.f32	s0, s18
   d4db0:	eef0 0a69 	vmov.f32	s1, s19
   d4db4:	4b35      	ldr	r3, [pc, #212]	; (d4e8c <_GLOBAL__sub_I_leftSetpoint+0x15c>)
   d4db6:	9400      	str	r4, [sp, #0]
   d4db8:	4a35      	ldr	r2, [pc, #212]	; (d4e90 <_GLOBAL__sub_I_leftSetpoint+0x160>)
   d4dba:	4936      	ldr	r1, [pc, #216]	; (d4e94 <_GLOBAL__sub_I_leftSetpoint+0x164>)
   d4dbc:	4836      	ldr	r0, [pc, #216]	; (d4e98 <_GLOBAL__sub_I_leftSetpoint+0x168>)
long oldRightPosition  = 0;
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
   d4dbe:	4c37      	ldr	r4, [pc, #220]	; (d4e9c <_GLOBAL__sub_I_leftSetpoint+0x16c>)
PID rightPID(&rightInput, &rightOutput, &rightSetpoint, kp, ki, kd, PID::DIRECT);

//  balancing PID
const double bkp=1.0, bki=0, bkd=0;
double balanceSetpoint, balanceInput, balanceOutput;
PID balancePID(&balanceInput, &balanceOutput, &balanceSetpoint, bkp, bki, bkd, PID::DIRECT);
   d4dc0:	f000 fa32 	bl	d5228 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>



// Change these two numbers to the pins connected to your encoder.
// Both pins must have interrupt capability
Encoder rightEnc(D6, D8);
   d4dc4:	2208      	movs	r2, #8
   d4dc6:	2106      	movs	r1, #6
   d4dc8:	4835      	ldr	r0, [pc, #212]	; (d4ea0 <_GLOBAL__sub_I_leftSetpoint+0x170>)
   d4dca:	f7ff fafb 	bl	d43c4 <_ZN7EncoderC1Ett>
Encoder leftEnc(D5, D4);
   d4dce:	2204      	movs	r2, #4
   d4dd0:	2105      	movs	r1, #5
   d4dd2:	4834      	ldr	r0, [pc, #208]	; (d4ea4 <_GLOBAL__sub_I_leftSetpoint+0x174>)
   d4dd4:	f7ff faf6 	bl	d43c4 <_ZN7EncoderC1Ett>
long oldRightPosition  = 0;
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
   d4dd8:	2160      	movs	r1, #96	; 0x60
   d4dda:	4620      	mov	r0, r4
   d4ddc:	f000 faee 	bl	d53bc <_ZN20Adafruit_MotorShieldC1Eh>
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d4de0:	2103      	movs	r1, #3
   d4de2:	4620      	mov	r0, r4
   d4de4:	f000 fab0 	bl	d5348 <_ZN20Adafruit_MotorShield8getMotorEh>
   d4de8:	4b2f      	ldr	r3, [pc, #188]	; (d4ea8 <_GLOBAL__sub_I_leftSetpoint+0x178>)
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d4dea:	2104      	movs	r1, #4
int oldLeftTime  = 0;
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
   d4dec:	6018      	str	r0, [r3, #0]
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d4dee:	4620      	mov	r0, r4
   d4df0:	f000 faaa 	bl	d5348 <_ZN20Adafruit_MotorShield8getMotorEh>
   d4df4:	4b2d      	ldr	r3, [pc, #180]	; (d4eac <_GLOBAL__sub_I_leftSetpoint+0x17c>)
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d4df6:	4c2e      	ldr	r4, [pc, #184]	; (d4eb0 <_GLOBAL__sub_I_leftSetpoint+0x180>)
int oldRightTime  = 0;
int speed=0;

Adafruit_MotorShield shield = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = shield.getMotor(3);
Adafruit_DCMotor *rightMotor = shield.getMotor(4);
   d4df8:	6018      	str	r0, [r3, #0]
#include "I2CSlaveRK.h"

//SYSTEM_MODE(MANUAL);
//SYSTEM_THREAD(ENABLED);

Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d4dfa:	2228      	movs	r2, #40	; 0x28
   d4dfc:	2137      	movs	r1, #55	; 0x37
   d4dfe:	4628      	mov	r0, r5
   d4e00:	f001 f8e4 	bl	d5fcc <_ZN15Adafruit_BNO055C1Elh>
   d4e04:	4622      	mov	r2, r4
   d4e06:	492b      	ldr	r1, [pc, #172]	; (d4eb4 <_GLOBAL__sub_I_leftSetpoint+0x184>)
   d4e08:	4628      	mov	r0, r5
   d4e0a:	f003 f885 	bl	d7f18 <__aeabi_atexit>

unsigned long serialTime; //this will help us know when to talk with processing

I2CSlave device(Wire1, 0x10, 10);
   d4e0e:	f002 fff9 	bl	d7e04 <_Z20__fetch_global_Wire1v>
   d4e12:	4d29      	ldr	r5, [pc, #164]	; (d4eb8 <_GLOBAL__sub_I_leftSetpoint+0x188>)
   d4e14:	230a      	movs	r3, #10
   d4e16:	4601      	mov	r1, r0
   d4e18:	2210      	movs	r2, #16
   d4e1a:	4628      	mov	r0, r5
   d4e1c:	f001 fa72 	bl	d6304 <_ZN8I2CSlaveC1ER7TwoWirehj>
   d4e20:	4628      	mov	r0, r5
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);
   d4e22:	4d26      	ldr	r5, [pc, #152]	; (d4ebc <_GLOBAL__sub_I_leftSetpoint+0x18c>)

Adafruit_BNO055 bno = Adafruit_BNO055(55);

unsigned long serialTime; //this will help us know when to talk with processing

I2CSlave device(Wire1, 0x10, 10);
   d4e24:	4926      	ldr	r1, [pc, #152]	; (d4ec0 <_GLOBAL__sub_I_leftSetpoint+0x190>)
   d4e26:	4622      	mov	r2, r4
   d4e28:	f003 f876 	bl	d7f18 <__aeabi_atexit>
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);
   d4e2c:	4b25      	ldr	r3, [pc, #148]	; (d4ec4 <_GLOBAL__sub_I_leftSetpoint+0x194>)
   d4e2e:	4926      	ldr	r1, [pc, #152]	; (d4ec8 <_GLOBAL__sub_I_leftSetpoint+0x198>)
   d4e30:	f240 725b 	movw	r2, #1883	; 0x75b
   d4e34:	4628      	mov	r0, r5
   d4e36:	f000 fccf 	bl	d57d8 <_ZN4MQTTC1EPhtPFvPcS0_jE>
   d4e3a:	4924      	ldr	r1, [pc, #144]	; (d4ecc <_GLOBAL__sub_I_leftSetpoint+0x19c>)
   d4e3c:	4622      	mov	r2, r4
   d4e3e:	4628      	mov	r0, r5
    }
  }
#endif


}
   d4e40:	b003      	add	sp, #12
   d4e42:	ecbd 8b04 	vpop	{d8-d9}
   d4e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 * exp) iot.eclipse.org is Eclipse Open MQTT Broker: https://iot.eclipse.org/getting-started
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
byte MQTTserver[] = { 172,16,2,135 };//the IP of broker

MQTT MQTTclient(MQTTserver, 1883, MQTTcallback);
   d4e4a:	f003 b865 	b.w	d7f18 <__aeabi_atexit>
   d4e4e:	bf00      	nop
	...
   d4e5c:	3ff00000 	.word	0x3ff00000
   d4e60:	2003e108 	.word	0x2003e108
   d4e64:	2003e0d0 	.word	0x2003e0d0
   d4e68:	2003e188 	.word	0x2003e188
   d4e6c:	2003e1a0 	.word	0x2003e1a0
   d4e70:	2003e0b8 	.word	0x2003e0b8
   d4e74:	2003e030 	.word	0x2003e030
   d4e78:	2003e260 	.word	0x2003e260
   d4e7c:	2003e190 	.word	0x2003e190
   d4e80:	2003e1b0 	.word	0x2003e1b0
   d4e84:	2003e1b8 	.word	0x2003e1b8
   d4e88:	2003e110 	.word	0x2003e110
   d4e8c:	2003e0c8 	.word	0x2003e0c8
   d4e90:	2003e020 	.word	0x2003e020
   d4e94:	2003e0e0 	.word	0x2003e0e0
   d4e98:	2003e038 	.word	0x2003e038
   d4e9c:	2003e1c8 	.word	0x2003e1c8
   d4ea0:	2003e0e8 	.word	0x2003e0e8
   d4ea4:	2003e240 	.word	0x2003e240
   d4ea8:	2003e104 	.word	0x2003e104
   d4eac:	2003e018 	.word	0x2003e018
   d4eb0:	2003dfa0 	.word	0x2003dfa0
   d4eb4:	000d40d5 	.word	0x000d40d5
   d4eb8:	2003dfa4 	.word	0x2003dfa4
   d4ebc:	2003dfc0 	.word	0x2003dfc0
   d4ec0:	000d62d1 	.word	0x000d62d1
   d4ec4:	000d40d9 	.word	0x000d40d9
   d4ec8:	2003df28 	.word	0x2003df28
   d4ecc:	000d5f5d 	.word	0x000d5f5d

000d4ed0 <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
   d4ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if(!inAuto) return false;
   d4ed4:	f890 5070 	ldrb.w	r5, [r0, #112]	; 0x70
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
   d4ed8:	b087      	sub	sp, #28
   d4eda:	4604      	mov	r4, r0
   if(!inAuto) return false;
   d4edc:	b90d      	cbnz	r5, d4ee2 <_ZN3PID7ComputeEv+0x12>
   d4ede:	2500      	movs	r5, #0
   d4ee0:	e06f      	b.n	d4fc2 <_ZN3PID7ComputeEv+0xf2>
   d4ee2:	f001 fc47 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
   unsigned long now = millis();
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   d4ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d4ee8:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d4eea:	9003      	str	r0, [sp, #12]
   d4eec:	1ac3      	subs	r3, r0, r3
   d4eee:	4293      	cmp	r3, r2
   d4ef0:	d3f5      	bcc.n	d4ede <_ZN3PID7ComputeEv+0xe>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
   d4ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
      double error = *mySetpoint - input;
   d4ef4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   unsigned long now = millis();
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
   d4ef6:	e9d3 8900 	ldrd	r8, r9, [r3]
      double error = *mySetpoint - input;
   d4efa:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4efe:	4642      	mov	r2, r8
   d4f00:	464b      	mov	r3, r9
   d4f02:	f003 f9ed 	bl	d82e0 <__aeabi_dsub>
      ITerm+= (ki * error);
   d4f06:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
      double error = *mySetpoint - input;
   d4f0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
      ITerm+= (ki * error);
   d4f0e:	f003 fb9b 	bl	d8648 <__aeabi_dmul>
   d4f12:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d4f16:	f003 f9e5 	bl	d82e4 <__adddf3>
      if(ITerm > outMax) ITerm= outMax;
   d4f1a:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
   d4f1e:	4606      	mov	r6, r0
   d4f20:	460f      	mov	r7, r1
   d4f22:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
      if(ITerm > outMax) ITerm= outMax;
   d4f26:	4652      	mov	r2, sl
   d4f28:	465b      	mov	r3, fp
   d4f2a:	f003 fe1d 	bl	d8b68 <__aeabi_dcmpgt>
   d4f2e:	b110      	cbz	r0, d4f36 <_ZN3PID7ComputeEv+0x66>
   d4f30:	e9c4 ab12 	strd	sl, fp, [r4, #72]	; 0x48
   d4f34:	e00e      	b.n	d4f54 <_ZN3PID7ComputeEv+0x84>
      else if(ITerm < outMin) ITerm= outMin;
   d4f36:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
   d4f3a:	4630      	mov	r0, r6
   d4f3c:	ec53 2b17 	vmov	r2, r3, d7
   d4f40:	4639      	mov	r1, r7
   d4f42:	ed8d 7b00 	vstr	d7, [sp]
   d4f46:	f003 fdf1 	bl	d8b2c <__aeabi_dcmplt>
   d4f4a:	b118      	cbz	r0, d4f54 <_ZN3PID7ComputeEv+0x84>
   d4f4c:	ed9d 7b00 	vldr	d7, [sp]
   d4f50:	ed84 7b12 	vstr	d7, [r4, #72]	; 0x48
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
   d4f54:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d4f58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4f5c:	f003 fb74 	bl	d8648 <__aeabi_dmul>
   d4f60:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   d4f64:	f003 f9be 	bl	d82e4 <__adddf3>
   d4f68:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
   d4f6c:	4606      	mov	r6, r0
   d4f6e:	460f      	mov	r7, r1
   d4f70:	4640      	mov	r0, r8
   d4f72:	4649      	mov	r1, r9
   d4f74:	f003 f9b4 	bl	d82e0 <__aeabi_dsub>
   d4f78:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   d4f7c:	f003 fb64 	bl	d8648 <__aeabi_dmul>
   d4f80:	4602      	mov	r2, r0
   d4f82:	460b      	mov	r3, r1
   d4f84:	4630      	mov	r0, r6
   d4f86:	4639      	mov	r1, r7
   d4f88:	f003 f9aa 	bl	d82e0 <__aeabi_dsub>
   d4f8c:	4606      	mov	r6, r0
   d4f8e:	460f      	mov	r7, r1
      
	  if(output > outMax) output = outMax;
   d4f90:	4602      	mov	r2, r0
   d4f92:	460b      	mov	r3, r1
   d4f94:	4650      	mov	r0, sl
   d4f96:	4659      	mov	r1, fp
   d4f98:	f003 fdc8 	bl	d8b2c <__aeabi_dcmplt>
   d4f9c:	b950      	cbnz	r0, d4fb4 <_ZN3PID7ComputeEv+0xe4>
      else if(output < outMin) output = outMin;
   d4f9e:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
   d4fa2:	4630      	mov	r0, r6
   d4fa4:	4652      	mov	r2, sl
   d4fa6:	465b      	mov	r3, fp
   d4fa8:	4639      	mov	r1, r7
   d4faa:	f003 fdbf 	bl	d8b2c <__aeabi_dcmplt>
   d4fae:	b908      	cbnz	r0, d4fb4 <_ZN3PID7ComputeEv+0xe4>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
   d4fb0:	46b2      	mov	sl, r6
   d4fb2:	46bb      	mov	fp, r7
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
   d4fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d4fb6:	e9c3 ab00 	strd	sl, fp, [r3]
	  
      /*Remember some variables for next time*/
      lastInput = input;
   d4fba:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
      lastTime = now;
   d4fbe:	9b03      	ldr	r3, [sp, #12]
   d4fc0:	6423      	str	r3, [r4, #64]	; 0x40
	  return true;
   }
   else return false;
}
   d4fc2:	4628      	mov	r0, r5
   d4fc4:	b007      	add	sp, #28
   d4fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d4fcc <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
   d4fcc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4fd0:	ec55 4b10 	vmov	r4, r5, d0
   d4fd4:	4682      	mov	sl, r0
   if (Kp<0 || Ki<0 || Kd<0) return;
   d4fd6:	2200      	movs	r2, #0
   d4fd8:	2300      	movs	r3, #0
   d4fda:	ee10 0a10 	vmov	r0, s0
   d4fde:	4629      	mov	r1, r5
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
   d4fe0:	ec59 8b11 	vmov	r8, r9, d1
   d4fe4:	ec57 6b12 	vmov	r6, r7, d2
   if (Kp<0 || Ki<0 || Kd<0) return;
   d4fe8:	f003 fda0 	bl	d8b2c <__aeabi_dcmplt>
   d4fec:	2800      	cmp	r0, #0
   d4fee:	d151      	bne.n	d5094 <_ZN3PID10SetTuningsEddd+0xc8>
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	2300      	movs	r3, #0
   d4ff4:	4640      	mov	r0, r8
   d4ff6:	4649      	mov	r1, r9
   d4ff8:	f003 fd98 	bl	d8b2c <__aeabi_dcmplt>
   d4ffc:	2800      	cmp	r0, #0
   d4ffe:	d149      	bne.n	d5094 <_ZN3PID10SetTuningsEddd+0xc8>
   d5000:	2200      	movs	r2, #0
   d5002:	2300      	movs	r3, #0
   d5004:	4630      	mov	r0, r6
   d5006:	4639      	mov	r1, r7
   d5008:	f003 fd90 	bl	d8b2c <__aeabi_dcmplt>
   d500c:	2800      	cmp	r0, #0
   d500e:	d141      	bne.n	d5094 <_ZN3PID10SetTuningsEddd+0xc8>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   d5010:	e9ca 8902 	strd	r8, r9, [sl, #8]
   d5014:	e9ca 6704 	strd	r6, r7, [sl, #16]
   d5018:	e9ca 4500 	strd	r4, r5, [sl]
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d501c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   d5020:	f003 fa9c 	bl	d855c <__aeabi_ui2d>
   d5024:	2200      	movs	r2, #0
   d5026:	4b1d      	ldr	r3, [pc, #116]	; (d509c <_ZN3PID10SetTuningsEddd+0xd0>)
   d5028:	f003 fc38 	bl	d889c <__aeabi_ddiv>
   kp = Kp;
   d502c:	e9ca 4506 	strd	r4, r5, [sl, #24]
{
   if (Kp<0 || Ki<0 || Kd<0) return;
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   d5030:	e9cd 0100 	strd	r0, r1, [sp]
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   d5034:	4602      	mov	r2, r0
   d5036:	460b      	mov	r3, r1
   d5038:	4640      	mov	r0, r8
   d503a:	4649      	mov	r1, r9
   d503c:	f003 fb04 	bl	d8648 <__aeabi_dmul>
   d5040:	4680      	mov	r8, r0
   d5042:	4689      	mov	r9, r1
   kd = Kd / SampleTimeInSec;
   d5044:	e9dd 2300 	ldrd	r2, r3, [sp]
   d5048:	4630      	mov	r0, r6
   d504a:	4639      	mov	r1, r7
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   d504c:	e9ca 8908 	strd	r8, r9, [sl, #32]
   kd = Kd / SampleTimeInSec;
   d5050:	f003 fc24 	bl	d889c <__aeabi_ddiv>
 
  if(controllerDirection ==REVERSE)
   d5054:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
   d5058:	4606      	mov	r6, r0
   d505a:	460f      	mov	r7, r1
 
  if(controllerDirection ==REVERSE)
   d505c:	2b01      	cmp	r3, #1
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
   d505e:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
 
  if(controllerDirection ==REVERSE)
   d5062:	d117      	bne.n	d5094 <_ZN3PID10SetTuningsEddd+0xc8>
   {
      kp = (0 - kp);
   d5064:	4622      	mov	r2, r4
   d5066:	462b      	mov	r3, r5
   d5068:	2000      	movs	r0, #0
   d506a:	2100      	movs	r1, #0
   d506c:	f003 f938 	bl	d82e0 <__aeabi_dsub>
      ki = (0 - ki);
   d5070:	4642      	mov	r2, r8
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
 
  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
   d5072:	e9ca 0106 	strd	r0, r1, [sl, #24]
      ki = (0 - ki);
   d5076:	464b      	mov	r3, r9
   d5078:	2000      	movs	r0, #0
   d507a:	2100      	movs	r1, #0
   d507c:	f003 f930 	bl	d82e0 <__aeabi_dsub>
      kd = (0 - kd);
   d5080:	4632      	mov	r2, r6
   kd = Kd / SampleTimeInSec;
 
  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
      ki = (0 - ki);
   d5082:	e9ca 0108 	strd	r0, r1, [sl, #32]
      kd = (0 - kd);
   d5086:	463b      	mov	r3, r7
   d5088:	2000      	movs	r0, #0
   d508a:	2100      	movs	r1, #0
   d508c:	f003 f928 	bl	d82e0 <__aeabi_dsub>
   d5090:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
   }
}
   d5094:	b002      	add	sp, #8
   d5096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d509a:	bf00      	nop
   d509c:	408f4000 	.word	0x408f4000

000d50a0 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   d50a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (NewSampleTime > 0)
   d50a2:	1e0d      	subs	r5, r1, #0
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   d50a4:	4604      	mov	r4, r0
   if (NewSampleTime > 0)
   d50a6:	dd20      	ble.n	d50ea <_ZN3PID13SetSampleTimeEi+0x4a>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
   d50a8:	4628      	mov	r0, r5
   d50aa:	f003 fa67 	bl	d857c <__aeabi_i2d>
   d50ae:	4606      	mov	r6, r0
   d50b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   d50b2:	460f      	mov	r7, r1
   d50b4:	f003 fa52 	bl	d855c <__aeabi_ui2d>
   d50b8:	4602      	mov	r2, r0
   d50ba:	460b      	mov	r3, r1
   d50bc:	4630      	mov	r0, r6
   d50be:	4639      	mov	r1, r7
   d50c0:	f003 fbec 	bl	d889c <__aeabi_ddiv>
      ki *= ratio;
   d50c4:	4602      	mov	r2, r0
   d50c6:	460b      	mov	r3, r1
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
   d50c8:	4606      	mov	r6, r0
   d50ca:	460f      	mov	r7, r1
      ki *= ratio;
   d50cc:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   d50d0:	f003 faba 	bl	d8648 <__aeabi_dmul>
      kd /= ratio;
   d50d4:	4632      	mov	r2, r6
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
      ki *= ratio;
   d50d6:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd /= ratio;
   d50da:	463b      	mov	r3, r7
   d50dc:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   d50e0:	f003 fbdc 	bl	d889c <__aeabi_ddiv>
   d50e4:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
      SampleTime = (unsigned long)NewSampleTime;
   d50e8:	65a5      	str	r5, [r4, #88]	; 0x58
   d50ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50ec <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   d50ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50f0:	ec55 4b10 	vmov	r4, r5, d0
   d50f4:	ec57 6b11 	vmov	r6, r7, d1
   d50f8:	4682      	mov	sl, r0
   if(Min >= Max) return;
   d50fa:	ee11 2a10 	vmov	r2, s2
   d50fe:	463b      	mov	r3, r7
   d5100:	ee10 0a10 	vmov	r0, s0
   d5104:	4629      	mov	r1, r5
   d5106:	f003 fd25 	bl	d8b54 <__aeabi_dcmpge>
   d510a:	2800      	cmp	r0, #0
   d510c:	d133      	bne.n	d5176 <_ZN3PID15SetOutputLimitsEdd+0x8a>
   outMin = Min;
   outMax = Max;
 
   if(inAuto)
   d510e:	f89a 3070 	ldrb.w	r3, [sl, #112]	; 0x70
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   d5112:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
   outMax = Max;
   d5116:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
 
   if(inAuto)
   d511a:	b363      	cbz	r3, d5176 <_ZN3PID15SetOutputLimitsEdd+0x8a>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   d511c:	f8da b038 	ldr.w	fp, [sl, #56]	; 0x38
   d5120:	e9db 8900 	ldrd	r8, r9, [fp]
   d5124:	4630      	mov	r0, r6
   d5126:	4642      	mov	r2, r8
   d5128:	464b      	mov	r3, r9
   d512a:	4639      	mov	r1, r7
   d512c:	f003 fcfe 	bl	d8b2c <__aeabi_dcmplt>
   d5130:	b110      	cbz	r0, d5138 <_ZN3PID15SetOutputLimitsEdd+0x4c>
   d5132:	e9cb 6700 	strd	r6, r7, [fp]
   d5136:	e008      	b.n	d514a <_ZN3PID15SetOutputLimitsEdd+0x5e>
	   else if(*myOutput < outMin) *myOutput = outMin;
   d5138:	4642      	mov	r2, r8
   d513a:	464b      	mov	r3, r9
   d513c:	4620      	mov	r0, r4
   d513e:	4629      	mov	r1, r5
   d5140:	f003 fd12 	bl	d8b68 <__aeabi_dcmpgt>
   d5144:	b108      	cbz	r0, d514a <_ZN3PID15SetOutputLimitsEdd+0x5e>
   d5146:	e9cb 4500 	strd	r4, r5, [fp]
	 
	   if(ITerm > outMax) ITerm= outMax;
   d514a:	e9da 6712 	ldrd	r6, r7, [sl, #72]	; 0x48
   d514e:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
   d5152:	4630      	mov	r0, r6
   d5154:	4622      	mov	r2, r4
   d5156:	462b      	mov	r3, r5
   d5158:	4639      	mov	r1, r7
   d515a:	f003 fd05 	bl	d8b68 <__aeabi_dcmpgt>
   d515e:	b940      	cbnz	r0, d5172 <_ZN3PID15SetOutputLimitsEdd+0x86>
	   else if(ITerm < outMin) ITerm= outMin;
   d5160:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
   d5164:	4630      	mov	r0, r6
   d5166:	4622      	mov	r2, r4
   d5168:	462b      	mov	r3, r5
   d516a:	4639      	mov	r1, r7
   d516c:	f003 fcde 	bl	d8b2c <__aeabi_dcmplt>
   d5170:	b108      	cbz	r0, d5176 <_ZN3PID15SetOutputLimitsEdd+0x8a>
   d5172:	e9ca 4512 	strd	r4, r5, [sl, #72]	; 0x48
   d5176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d517a <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   d517a:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
   ITerm = *myOutput;
   d517e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5180:	e9d3 6700 	ldrd	r6, r7, [r3]
   d5184:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
   lastInput = *myInput;
   d5188:	6b43      	ldr	r3, [r0, #52]	; 0x34
   if(ITerm > outMax) ITerm = outMax;
   d518a:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   ITerm = *myOutput;
   lastInput = *myInput;
   d518e:	e9d3 2300 	ldrd	r2, r3, [r3]
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
   d5192:	4604      	mov	r4, r0
   ITerm = *myOutput;
   lastInput = *myInput;
   d5194:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
   if(ITerm > outMax) ITerm = outMax;
   d5198:	4639      	mov	r1, r7
   d519a:	4642      	mov	r2, r8
   d519c:	464b      	mov	r3, r9
   d519e:	4630      	mov	r0, r6
   d51a0:	f003 fce2 	bl	d8b68 <__aeabi_dcmpgt>
   d51a4:	b940      	cbnz	r0, d51b8 <_ZN3PID10InitializeEv+0x3e>
   else if(ITerm < outMin) ITerm = outMin;
   d51a6:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
   d51aa:	4630      	mov	r0, r6
   d51ac:	4642      	mov	r2, r8
   d51ae:	464b      	mov	r3, r9
   d51b0:	4639      	mov	r1, r7
   d51b2:	f003 fcbb 	bl	d8b2c <__aeabi_dcmplt>
   d51b6:	b108      	cbz	r0, d51bc <_ZN3PID10InitializeEv+0x42>
   d51b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   d51bc:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

000d51c0 <_ZN3PID7SetModeENS_6mode_tE>:
 * Allows the controller Mode to be set to MANUAL (0) or AUTOMATIC (1)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(mode_t Mode)
{
   d51c0:	b538      	push	{r3, r4, r5, lr}
    bool newAuto = (Mode == AUTOMATIC);
   d51c2:	1e4b      	subs	r3, r1, #1
   d51c4:	425d      	negs	r5, r3
   d51c6:	415d      	adcs	r5, r3
    if(newAuto == !inAuto)
   d51c8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   d51cc:	f083 0301 	eor.w	r3, r3, #1
   d51d0:	429d      	cmp	r5, r3
 * Allows the controller Mode to be set to MANUAL (0) or AUTOMATIC (1)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(mode_t Mode)
{
   d51d2:	4604      	mov	r4, r0
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto == !inAuto)
   d51d4:	d101      	bne.n	d51da <_ZN3PID7SetModeENS_6mode_tE+0x1a>
    {  /*we just went from manual to auto*/
        PID::Initialize();
   d51d6:	f7ff ffd0 	bl	d517a <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
   d51da:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
   d51de:	bd38      	pop	{r3, r4, r5, pc}

000d51e0 <_ZN3PID22SetControllerDirectionENS_11direction_tE>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   d51e0:	b538      	push	{r3, r4, r5, lr}
   if(inAuto && Direction !=controllerDirection)
   d51e2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   d51e6:	4604      	mov	r4, r0
   d51e8:	460d      	mov	r5, r1
   if(inAuto && Direction !=controllerDirection)
   d51ea:	b1d3      	cbz	r3, d5222 <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   d51ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d51ee:	4299      	cmp	r1, r3
   d51f0:	d017      	beq.n	d5222 <_ZN3PID22SetControllerDirectionENS_11direction_tE+0x42>
   {
	  kp = (0 - kp);
   d51f2:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   d51f6:	2100      	movs	r1, #0
   d51f8:	2000      	movs	r0, #0
   d51fa:	f003 f871 	bl	d82e0 <__aeabi_dsub>
      ki = (0 - ki);
   d51fe:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 ******************************************************************************/
void PID::SetControllerDirection(direction_t Direction)
{
   if(inAuto && Direction !=controllerDirection)
   {
	  kp = (0 - kp);
   d5202:	e9c4 0106 	strd	r0, r1, [r4, #24]
      ki = (0 - ki);
   d5206:	2000      	movs	r0, #0
   d5208:	2100      	movs	r1, #0
   d520a:	f003 f869 	bl	d82e0 <__aeabi_dsub>
      kd = (0 - kd);
   d520e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
void PID::SetControllerDirection(direction_t Direction)
{
   if(inAuto && Direction !=controllerDirection)
   {
	  kp = (0 - kp);
      ki = (0 - ki);
   d5212:	e9c4 0108 	strd	r0, r1, [r4, #32]
      kd = (0 - kd);
   d5216:	2000      	movs	r0, #0
   d5218:	2100      	movs	r1, #0
   d521a:	f003 f861 	bl	d82e0 <__aeabi_dsub>
   d521e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
   }   
   controllerDirection = Direction;
   d5222:	6325      	str	r5, [r4, #48]	; 0x30
   d5224:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5228 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d5228:	b510      	push	{r4, lr}
   d522a:	ed2d 8b06 	vpush	{d8-d10}
   d522e:	eeb0 8a40 	vmov.f32	s16, s0
   d5232:	eef0 8a60 	vmov.f32	s17, s1
   d5236:	eeb0 9a41 	vmov.f32	s18, s2
   d523a:	eef0 9a61 	vmov.f32	s19, s3
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
    myInput = Input;
    mySetpoint = Setpoint;
   d523e:	63c3      	str	r3, [r0, #60]	; 0x3c
	inAuto = false;
   d5240:	2300      	movs	r3, #0
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
   d5242:	6382      	str	r2, [r0, #56]	; 0x38
    myInput = Input;
    mySetpoint = Setpoint;
	inAuto = false;
   d5244:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   d5248:	2200      	movs	r2, #0
   d524a:	2300      	movs	r3, #0
   d524c:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d5250:	eeb0 aa42 	vmov.f32	s20, s4
   d5254:	eef0 aa62 	vmov.f32	s21, s5
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   outMax = Max;
   d5258:	a313      	add	r3, pc, #76	; (adr r3, d52a8 <_ZN3PIDC1EPdS0_S0_dddNS_11direction_tE+0x80>)
   d525a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d525e:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d5262:	2364      	movs	r3, #100	; 0x64

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   d5264:	4604      	mov	r4, r0
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   d5266:	6583      	str	r3, [r0, #88]	; 0x58
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, direction_t ControllerDirection)
{
	
    myOutput = Output;
    myInput = Input;
   d5268:	6341      	str	r1, [r0, #52]	; 0x34
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
   d526a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   d526e:	f7ff ffb7 	bl	d51e0 <_ZN3PID22SetControllerDirectionENS_11direction_tE>
    PID::SetTunings(Kp, Ki, Kd);
   d5272:	eeb0 2a4a 	vmov.f32	s4, s20
   d5276:	eef0 2a6a 	vmov.f32	s5, s21
   d527a:	eeb0 1a49 	vmov.f32	s2, s18
   d527e:	eef0 1a69 	vmov.f32	s3, s19
   d5282:	eeb0 0a48 	vmov.f32	s0, s16
   d5286:	eef0 0a68 	vmov.f32	s1, s17
   d528a:	4620      	mov	r0, r4
   d528c:	f7ff fe9e 	bl	d4fcc <_ZN3PID10SetTuningsEddd>
   d5290:	f001 fa70 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>

    lastTime = millis()-SampleTime;				
}
   d5294:	ecbd 8b06 	vpop	{d8-d10}
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd);

    lastTime = millis()-SampleTime;				
   d5298:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d529a:	1ac0      	subs	r0, r0, r3
   d529c:	6420      	str	r0, [r4, #64]	; 0x40
}
   d529e:	4620      	mov	r0, r4
   d52a0:	bd10      	pop	{r4, pc}
   d52a2:	bf00      	nop
   d52a4:	f3af 8000 	nop.w
   d52a8:	00000000 	.word	0x00000000
   d52ac:	406fe000 	.word	0x406fe000

000d52b0 <_ZN3PID5GetKpEv>:
/* Status Funcions*************************************************************
 * Just because you set the Kp=-1 doesn't mean it actually happened.  these
 * functions query the internal state of the PID.  they're here for display 
 * purposes.  this are the functions the PID Front-end uses for example
 ******************************************************************************/
double PID::GetKp(){ return  dispKp; }
   d52b0:	ed90 0b00 	vldr	d0, [r0]
   d52b4:	4770      	bx	lr

000d52b6 <_ZN3PID5GetKiEv>:
double PID::GetKi(){ return  dispKi;}
   d52b6:	ed90 0b02 	vldr	d0, [r0, #8]
   d52ba:	4770      	bx	lr

000d52bc <_ZN3PID5GetKdEv>:
double PID::GetKd(){ return  dispKd;}
   d52bc:	ed90 0b04 	vldr	d0, [r0, #16]
   d52c0:	4770      	bx	lr

000d52c2 <_ZN3PID7GetModeEv>:
int PID::GetMode(){ return  inAuto ? AUTOMATIC : MANUAL;}
   d52c2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
   d52c6:	4770      	bx	lr

000d52c8 <_GLOBAL__sub_I__ZN3PIDC2EPdS0_S0_dddNS_11direction_tE>:
   d52c8:	f001 ba74 	b.w	d67b4 <HAL_Pin_Map>

000d52cc <_ZN20Adafruit_MotorShield6setPinEhb.part.1>:
  } else
    _pwm.setPWM(pin, 0, value);
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
   d52cc:	2300      	movs	r3, #0
   d52ce:	461a      	mov	r2, r3
   d52d0:	306c      	adds	r0, #108	; 0x6c
   d52d2:	f000 b8d0 	b.w	d5476 <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d52d6 <_ZN20Adafruit_MotorShield5beginEt>:
Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
  _addr = addr;
  _pwm = Adafruit_PWMServoDriver(_addr);
}

void Adafruit_MotorShield::begin(uint16_t freq) {
   d52d6:	b570      	push	{r4, r5, r6, lr}
   d52d8:	4606      	mov	r6, r0
   d52da:	460c      	mov	r4, r1
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
   d52dc:	f106 056c 	add.w	r5, r6, #108	; 0x6c
  _pwm = Adafruit_PWMServoDriver(_addr);
}

void Adafruit_MotorShield::begin(uint16_t freq) {
  // init PWM w/_freq
  Wire.begin();
   d52e0:	f002 fd70 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d52e4:	f002 f828 	bl	d7338 <_ZN7TwoWire5beginEv>
  _pwm.begin();
   d52e8:	4628      	mov	r0, r5
   d52ea:	f000 f92d 	bl	d5548 <_ZN23Adafruit_PWMServoDriver5beginEv>
  _freq = freq;
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d52ee:	ee07 4a90 	vmov	s15, r4

void Adafruit_MotorShield::begin(uint16_t freq) {
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
  _freq = freq;
   d52f2:	8074      	strh	r4, [r6, #2]
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
   d52f4:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d52f8:	4628      	mov	r0, r5
   d52fa:	f000 f931 	bl	d5560 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>
   d52fe:	2400      	movs	r4, #0
  for (uint8_t i=0; i<16; i++)
    _pwm.setPWM(i, 0, 0);
   d5300:	2300      	movs	r3, #0
   d5302:	b2e1      	uxtb	r1, r4
   d5304:	461a      	mov	r2, r3
   d5306:	4628      	mov	r0, r5
   d5308:	3401      	adds	r4, #1
   d530a:	f000 f8b4 	bl	d5476 <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>
  // init PWM w/_freq
  Wire.begin();
  _pwm.begin();
  _freq = freq;
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
  for (uint8_t i=0; i<16; i++)
   d530e:	2c10      	cmp	r4, #16
   d5310:	d1f6      	bne.n	d5300 <_ZN20Adafruit_MotorShield5beginEt+0x2a>
    _pwm.setPWM(i, 0, 0);
}
   d5312:	bd70      	pop	{r4, r5, r6, pc}

000d5314 <_ZN20Adafruit_MotorShield6setPWMEht>:

void Adafruit_MotorShield::setPWM(uint8_t pin, uint16_t value) {
  if (value > 4095) {
   d5314:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  _pwm.setPWMFreq(_freq);  // This is the maximum PWM frequency
  for (uint8_t i=0; i<16; i++)
    _pwm.setPWM(i, 0, 0);
}

void Adafruit_MotorShield::setPWM(uint8_t pin, uint16_t value) {
   d5318:	4613      	mov	r3, r2
   d531a:	f100 006c 	add.w	r0, r0, #108	; 0x6c
  if (value > 4095) {
    _pwm.setPWM(pin, 4096, 0);
   d531e:	bf26      	itte	cs
   d5320:	2300      	movcs	r3, #0
   d5322:	f44f 5280 	movcs.w	r2, #4096	; 0x1000
  } else
    _pwm.setPWM(pin, 0, value);
   d5326:	2200      	movcc	r2, #0
   d5328:	f000 b8a5 	b.w	d5476 <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d532c <_ZN20Adafruit_MotorShield6setPinEhb>:
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
   d532c:	b410      	push	{r4}
  if (value == LOW)
   d532e:	b91a      	cbnz	r2, d5338 <_ZN20Adafruit_MotorShield6setPinEhb+0xc>
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
}
   d5330:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5334:	f7ff bfca 	b.w	d52cc <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
   d5338:	2300      	movs	r3, #0
   d533a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d533e:	306c      	adds	r0, #108	; 0x6c
}
   d5340:	f85d 4b04 	ldr.w	r4, [sp], #4
}
void Adafruit_MotorShield::setPin(uint8_t pin, boolean value) {
  if (value == LOW)
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
   d5344:	f000 b897 	b.w	d5476 <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>

000d5348 <_ZN20Adafruit_MotorShield8getMotorEh>:
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
  if (num > 4) return NULL;
   d5348:	2904      	cmp	r1, #4
    _pwm.setPWM(pin, 0, 0);
  else
    _pwm.setPWM(pin, 4096, 0);
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
   d534a:	b530      	push	{r4, r5, lr}
  if (num > 4) return NULL;
   d534c:	d82d      	bhi.n	d53aa <_ZN20Adafruit_MotorShield8getMotorEh+0x62>

  num--;
   d534e:	3901      	subs	r1, #1
   d5350:	b2c9      	uxtb	r1, r1

  if (dcmotors[num].motornum == 0) {
   d5352:	230c      	movs	r3, #12
   d5354:	fb03 0201 	mla	r2, r3, r1, r0
   d5358:	7b14      	ldrb	r4, [r2, #12]
   d535a:	bb0c      	cbnz	r4, d53a0 <_ZN20Adafruit_MotorShield8getMotorEh+0x58>
    // not init'd yet!
    dcmotors[num].motornum = num;
   d535c:	7311      	strb	r1, [r2, #12]
   d535e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   d5362:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    dcmotors[num].MC = this;
   d5366:	6090      	str	r0, [r2, #8]
    uint8_t pwm=8, in1=10, in2=9;
    if (num == 0) {
   d5368:	b169      	cbz	r1, d5386 <_ZN20Adafruit_MotorShield8getMotorEh+0x3e>
      pwm = 8; in2 = 9; in1 = 10;
    } else if (num == 1) {
   d536a:	2901      	cmp	r1, #1
   d536c:	d00f      	beq.n	d538e <_ZN20Adafruit_MotorShield8getMotorEh+0x46>
      pwm = 13; in2 = 12; in1 = 11;
    } else if (num == 2) {
   d536e:	2902      	cmp	r1, #2
   d5370:	d010      	beq.n	d5394 <_ZN20Adafruit_MotorShield8getMotorEh+0x4c>
      pwm = 2; in2 = 3; in1 = 4;
    } else if (num == 3) {
   d5372:	2903      	cmp	r1, #3
      pwm = 7; in2 = 6; in1 = 5;
   d5374:	bf15      	itete	ne
   d5376:	2309      	movne	r3, #9
   d5378:	2306      	moveq	r3, #6
   d537a:	240a      	movne	r4, #10
   d537c:	2405      	moveq	r4, #5
   d537e:	bf14      	ite	ne
   d5380:	2508      	movne	r5, #8
   d5382:	2507      	moveq	r5, #7
   d5384:	e009      	b.n	d539a <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    // not init'd yet!
    dcmotors[num].motornum = num;
    dcmotors[num].MC = this;
    uint8_t pwm=8, in1=10, in2=9;
    if (num == 0) {
      pwm = 8; in2 = 9; in1 = 10;
   d5386:	2309      	movs	r3, #9
   d5388:	240a      	movs	r4, #10
   d538a:	2508      	movs	r5, #8
   d538c:	e005      	b.n	d539a <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    } else if (num == 1) {
      pwm = 13; in2 = 12; in1 = 11;
   d538e:	240b      	movs	r4, #11
   d5390:	250d      	movs	r5, #13
   d5392:	e002      	b.n	d539a <_ZN20Adafruit_MotorShield8getMotorEh+0x52>
    } else if (num == 2) {
      pwm = 2; in2 = 3; in1 = 4;
   d5394:	2303      	movs	r3, #3
   d5396:	2404      	movs	r4, #4
   d5398:	460d      	mov	r5, r1
    } else if (num == 3) {
      pwm = 7; in2 = 6; in1 = 5;
    }
    dcmotors[num].PWMpin = pwm;
   d539a:	7115      	strb	r5, [r2, #4]
    dcmotors[num].IN1pin = in1;
   d539c:	7154      	strb	r4, [r2, #5]
    dcmotors[num].IN2pin = in2;
   d539e:	7193      	strb	r3, [r2, #6]
  }
  return &dcmotors[num];
   d53a0:	230c      	movs	r3, #12
   d53a2:	fb03 0001 	mla	r0, r3, r1, r0
   d53a6:	3004      	adds	r0, #4
   d53a8:	bd30      	pop	{r4, r5, pc}
  else
    _pwm.setPWM(pin, 4096, 0);
}

Adafruit_DCMotor *Adafruit_MotorShield::getMotor(uint8_t num) {
  if (num > 4) return NULL;
   d53aa:	2000      	movs	r0, #0
    dcmotors[num].PWMpin = pwm;
    dcmotors[num].IN1pin = in1;
    dcmotors[num].IN2pin = in2;
  }
  return &dcmotors[num];
}
   d53ac:	bd30      	pop	{r4, r5, pc}

000d53ae <_ZN16Adafruit_DCMotorC1Ev>:
/******************************************
               MOTORS
******************************************/

Adafruit_DCMotor::Adafruit_DCMotor(void) {
  MC = NULL;
   d53ae:	2200      	movs	r2, #0
   d53b0:	6042      	str	r2, [r0, #4]
  motornum = 0;
   d53b2:	7202      	strb	r2, [r0, #8]
  PWMpin = IN1pin = IN2pin = 0;
   d53b4:	7082      	strb	r2, [r0, #2]
   d53b6:	7042      	strb	r2, [r0, #1]
   d53b8:	7002      	strb	r2, [r0, #0]
}
   d53ba:	4770      	bx	lr

000d53bc <_ZN20Adafruit_MotorShieldC1Eh>:
uint8_t microstepcurve[] = {0, 50, 98, 142, 180, 212, 236, 250, 255};
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d53bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d53be:	1d03      	adds	r3, r0, #4
   d53c0:	460d      	mov	r5, r1
   d53c2:	4604      	mov	r4, r0
   d53c4:	f100 0134 	add.w	r1, r0, #52	; 0x34
   d53c8:	4618      	mov	r0, r3
   d53ca:	f7ff fff0 	bl	d53ae <_ZN16Adafruit_DCMotorC1Ev>
   d53ce:	330c      	adds	r3, #12
   d53d0:	428b      	cmp	r3, r1
   d53d2:	d1f9      	bne.n	d53c8 <_ZN20Adafruit_MotorShieldC1Eh+0xc>
/******************************************
               STEPPERS
******************************************/

Adafruit_StepperMotor::Adafruit_StepperMotor(void) {
  revsteps = steppernum = currentstep = 0;
   d53d4:	2300      	movs	r3, #0
   d53d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   d53da:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   d53de:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   d53e2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   d53e6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   d53ea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
uint8_t microstepcurve[] = {0, 50, 98, 142, 180, 212, 236, 250, 255};
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

Adafruit_MotorShield::Adafruit_MotorShield(uint8_t addr) {
   d53ee:	2140      	movs	r1, #64	; 0x40
   d53f0:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d53f4:	f000 f83d 	bl	d5472 <_ZN23Adafruit_PWMServoDriverC1Eh>
  _addr = addr;
   d53f8:	7025      	strb	r5, [r4, #0]
  _pwm = Adafruit_PWMServoDriver(_addr);
   d53fa:	4629      	mov	r1, r5
   d53fc:	a801      	add	r0, sp, #4
   d53fe:	f000 f838 	bl	d5472 <_ZN23Adafruit_PWMServoDriverC1Eh>
   d5402:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5406:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   d540a:	4620      	mov	r0, r4
   d540c:	b003      	add	sp, #12
   d540e:	bd30      	pop	{r4, r5, pc}

000d5410 <_ZN16Adafruit_DCMotor3runEh>:
  motornum = 0;
  PWMpin = IN1pin = IN2pin = 0;
}

void Adafruit_DCMotor::run(uint8_t cmd) {
  switch (cmd) {
   d5410:	2902      	cmp	r1, #2
  MC = NULL;
  motornum = 0;
  PWMpin = IN1pin = IN2pin = 0;
}

void Adafruit_DCMotor::run(uint8_t cmd) {
   d5412:	b538      	push	{r3, r4, r5, lr}
   d5414:	4604      	mov	r4, r0
   d5416:	460d      	mov	r5, r1
  switch (cmd) {
   d5418:	d00a      	beq.n	d5430 <_ZN16Adafruit_DCMotor3runEh+0x20>
   d541a:	2904      	cmp	r1, #4
   d541c:	d013      	beq.n	d5446 <_ZN16Adafruit_DCMotor3runEh+0x36>
   d541e:	2901      	cmp	r1, #1
   d5420:	d11b      	bne.n	d545a <_ZN16Adafruit_DCMotor3runEh+0x4a>
   d5422:	7881      	ldrb	r1, [r0, #2]
   d5424:	6840      	ldr	r0, [r0, #4]
   d5426:	f7ff ff51 	bl	d52cc <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
  case FORWARD:
    MC->setPin(IN2pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN1pin, HIGH);
   d542a:	462a      	mov	r2, r5
   d542c:	7861      	ldrb	r1, [r4, #1]
   d542e:	e005      	b.n	d543c <_ZN16Adafruit_DCMotor3runEh+0x2c>
   d5430:	7841      	ldrb	r1, [r0, #1]
   d5432:	6840      	ldr	r0, [r0, #4]
   d5434:	f7ff ff4a 	bl	d52cc <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
    break;
  case BACKWARD:
    MC->setPin(IN1pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN2pin, HIGH);
   d5438:	78a1      	ldrb	r1, [r4, #2]
   d543a:	2201      	movs	r2, #1
   d543c:	6860      	ldr	r0, [r4, #4]
  case RELEASE:
    MC->setPin(IN1pin, LOW);
    MC->setPin(IN2pin, LOW);
    break;
  }
}
   d543e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MC->setPin(IN2pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN1pin, HIGH);
    break;
  case BACKWARD:
    MC->setPin(IN1pin, LOW);  // take low first to avoid 'break'
    MC->setPin(IN2pin, HIGH);
   d5442:	f7ff bf73 	b.w	d532c <_ZN20Adafruit_MotorShield6setPinEhb>
   d5446:	7841      	ldrb	r1, [r0, #1]
   d5448:	6840      	ldr	r0, [r0, #4]
   d544a:	f7ff ff3f 	bl	d52cc <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
   d544e:	78a1      	ldrb	r1, [r4, #2]
   d5450:	6860      	ldr	r0, [r4, #4]
  case RELEASE:
    MC->setPin(IN1pin, LOW);
    MC->setPin(IN2pin, LOW);
    break;
  }
}
   d5452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5456:	f7ff bf39 	b.w	d52cc <_ZN20Adafruit_MotorShield6setPinEhb.part.1>
   d545a:	bd38      	pop	{r3, r4, r5, pc}

000d545c <_ZN16Adafruit_DCMotor8setSpeedEh>:

void Adafruit_DCMotor::setSpeed(uint8_t speed) {
  MC->setPWM(PWMpin, speed*16);
   d545c:	010a      	lsls	r2, r1, #4
   d545e:	7801      	ldrb	r1, [r0, #0]
   d5460:	6840      	ldr	r0, [r0, #4]
   d5462:	f7ff bf57 	b.w	d5314 <_ZN20Adafruit_MotorShield6setPWMEht>

000d5466 <_GLOBAL__sub_I_microstepcurve>:
   d5466:	f001 b9a5 	b.w	d67b4 <HAL_Pin_Map>

000d546a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d546a:	6803      	ldr	r3, [r0, #0]
   d546c:	b2c9      	uxtb	r1, r1
   d546e:	689b      	ldr	r3, [r3, #8]
   d5470:	4718      	bx	r3

000d5472 <_ZN23Adafruit_PWMServoDriverC1Eh>:
#include "Adafruit_PWMServoDriver.h"
#include "application.h"
#include "math.h"

Adafruit_PWMServoDriver::Adafruit_PWMServoDriver(uint8_t addr) {
  _i2caddr = addr;
   d5472:	7001      	strb	r1, [r0, #0]
}
   d5474:	4770      	bx	lr

000d5476 <_ZN23Adafruit_PWMServoDriver6setPWMEhtt>:
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}

void Adafruit_PWMServoDriver::setPWM(uint8_t num, uint16_t on, uint16_t off) {
   d5476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5478:	4607      	mov	r7, r0
   d547a:	4615      	mov	r5, r2
   d547c:	461c      	mov	r4, r3
   d547e:	460e      	mov	r6, r1
  //Serial.print("Setting PWM "); Serial.print(num); Serial.print(": "); Serial.print(on); Serial.print("->"); Serial.println(off);

  Wire.beginTransmission(_i2caddr);
   d5480:	f002 fca0 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5484:	7839      	ldrb	r1, [r7, #0]
   d5486:	f001 ff6f 	bl	d7368 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(LED0_ON_L+4*num);
   d548a:	f002 fc9b 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d548e:	2106      	movs	r1, #6
   d5490:	eb01 0186 	add.w	r1, r1, r6, lsl #2
   d5494:	f7ff ffe9 	bl	d546a <_ZN7TwoWire5writeEi>
  Wire.write(on);
   d5498:	f002 fc94 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d549c:	4629      	mov	r1, r5
   d549e:	f7ff ffe4 	bl	d546a <_ZN7TwoWire5writeEi>
  Wire.write(on>>8);
   d54a2:	f002 fc8f 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d54a6:	0a29      	lsrs	r1, r5, #8
   d54a8:	f7ff ffdf 	bl	d546a <_ZN7TwoWire5writeEi>
  Wire.write(off);
   d54ac:	f002 fc8a 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d54b0:	4621      	mov	r1, r4
   d54b2:	f7ff ffda 	bl	d546a <_ZN7TwoWire5writeEi>
  Wire.write(off>>8);
   d54b6:	f002 fc85 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d54ba:	0a21      	lsrs	r1, r4, #8
   d54bc:	f7ff ffd5 	bl	d546a <_ZN7TwoWire5writeEi>

  Wire.endTransmission();
   d54c0:	f002 fc80 	bl	d7dc4 <_Z19__fetch_global_Wirev>
}
   d54c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(on);
  Wire.write(on>>8);
  Wire.write(off);
  Wire.write(off>>8);

  Wire.endTransmission();
   d54c8:	f001 bf56 	b.w	d7378 <_ZN7TwoWire15endTransmissionEv>

000d54cc <_ZN23Adafruit_PWMServoDriver5read8Eh>:
}

uint8_t Adafruit_PWMServoDriver::read8(uint8_t addr) {
   d54cc:	b538      	push	{r3, r4, r5, lr}
   d54ce:	4604      	mov	r4, r0
   d54d0:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d54d2:	f002 fc77 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d54d6:	7821      	ldrb	r1, [r4, #0]
   d54d8:	f001 ff46 	bl	d7368 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d54dc:	f002 fc72 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d54e0:	6803      	ldr	r3, [r0, #0]
   d54e2:	4629      	mov	r1, r5
   d54e4:	689b      	ldr	r3, [r3, #8]
   d54e6:	4798      	blx	r3

  Wire.endTransmission();
   d54e8:	f002 fc6c 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d54ec:	f001 ff44 	bl	d7378 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
   d54f0:	f002 fc68 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d54f4:	2201      	movs	r2, #1
   d54f6:	7821      	ldrb	r1, [r4, #0]
   d54f8:	f001 ff33 	bl	d7362 <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
   d54fc:	f002 fc62 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5500:	6803      	ldr	r3, [r0, #0]
   d5502:	695b      	ldr	r3, [r3, #20]
   d5504:	4798      	blx	r3
}
   d5506:	b2c0      	uxtb	r0, r0
   d5508:	bd38      	pop	{r3, r4, r5, pc}

000d550a <_ZN23Adafruit_PWMServoDriver6write8Ehh>:

void Adafruit_PWMServoDriver::write8(uint8_t addr, uint8_t d) {
   d550a:	b570      	push	{r4, r5, r6, lr}
   d550c:	4606      	mov	r6, r0
   d550e:	4614      	mov	r4, r2
   d5510:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d5512:	f002 fc57 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5516:	7831      	ldrb	r1, [r6, #0]
   d5518:	f001 ff26 	bl	d7368 <_ZN7TwoWire17beginTransmissionEh>

  Wire.write(addr);
   d551c:	f002 fc52 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5520:	6803      	ldr	r3, [r0, #0]
   d5522:	4629      	mov	r1, r5
   d5524:	689b      	ldr	r3, [r3, #8]
   d5526:	4798      	blx	r3
  Wire.write(d);
   d5528:	f002 fc4c 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d552c:	6803      	ldr	r3, [r0, #0]
   d552e:	4621      	mov	r1, r4
   d5530:	689b      	ldr	r3, [r3, #8]
   d5532:	4798      	blx	r3

  Wire.endTransmission();
   d5534:	f002 fc46 	bl	d7dc4 <_Z19__fetch_global_Wirev>
}
   d5538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.beginTransmission(_i2caddr);

  Wire.write(addr);
  Wire.write(d);

  Wire.endTransmission();
   d553c:	f001 bf1c 	b.w	d7378 <_ZN7TwoWire15endTransmissionEv>

000d5540 <_ZN23Adafruit_PWMServoDriver5resetEv>:
 reset();
}


void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
   d5540:	2200      	movs	r2, #0
   d5542:	4611      	mov	r1, r2
   d5544:	f7ff bfe1 	b.w	d550a <_ZN23Adafruit_PWMServoDriver6write8Ehh>

000d5548 <_ZN23Adafruit_PWMServoDriver5beginEv>:

Adafruit_PWMServoDriver::Adafruit_PWMServoDriver(uint8_t addr) {
  _i2caddr = addr;
}

void Adafruit_PWMServoDriver::begin(void) {
   d5548:	b510      	push	{r4, lr}
   d554a:	4604      	mov	r4, r0
 Wire.begin();
   d554c:	f002 fc3a 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5550:	f001 fef2 	bl	d7338 <_ZN7TwoWire5beginEv>
 reset();
   d5554:	4620      	mov	r0, r4
}
   d5556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _i2caddr = addr;
}

void Adafruit_PWMServoDriver::begin(void) {
 Wire.begin();
 reset();
   d555a:	f7ff bff1 	b.w	d5540 <_ZN23Adafruit_PWMServoDriver5resetEv>
	...

000d5560 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf>:

void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
}

void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d5560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //Serial.print("Attempting to set freq ");
  //Serial.println(freq);

  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
   d5562:	eddf 7a2f 	vldr	s15, [pc, #188]	; d5620 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc0>

void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
}

void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d5566:	ed2d 8b02 	vpush	{d8}
  //Serial.print("Attempting to set freq ");
  //Serial.println(freq);

  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
   d556a:	ee87 8a80 	vdiv.f32	s16, s15, s0

void Adafruit_PWMServoDriver::reset(void) {
 write8(PCA9685_MODE1, 0x0);
}

void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
   d556e:	4604      	mov	r4, r0

  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
  Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
   d5570:	f001 ffcc 	bl	d750c <_Z16_fetch_usbserialv>
   d5574:	492b      	ldr	r1, [pc, #172]	; (d5624 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc4>)
   d5576:	f002 f9cc 	bl	d7912 <_ZN5Print5printEPKc>
   d557a:	f001 ffc7 	bl	d750c <_Z16_fetch_usbserialv>
   d557e:	4605      	mov	r5, r0
   d5580:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d5584:	ee78 7a67 	vsub.f32	s15, s16, s15
   d5588:	ee17 0a90 	vmov	r0, s15
   d558c:	f003 f808 	bl	d85a0 <__aeabi_f2d>
   d5590:	4606      	mov	r6, r0
   d5592:	460f      	mov	r7, r1
   d5594:	ec47 6b10 	vmov	d0, r6, r7
   d5598:	2102      	movs	r1, #2
   d559a:	4628      	mov	r0, r5
   d559c:	f002 fada 	bl	d7b54 <_ZN5Print7printlnEdi>
  uint8_t prescale = floor(prescaleval + 0.5);
   d55a0:	4b21      	ldr	r3, [pc, #132]	; (d5628 <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xc8>)
   d55a2:	2200      	movs	r2, #0
   d55a4:	4630      	mov	r0, r6
   d55a6:	4639      	mov	r1, r7
   d55a8:	f002 fe9c 	bl	d82e4 <__adddf3>
   d55ac:	ec41 0b10 	vmov	d0, r0, r1
   d55b0:	f002 fe02 	bl	d81b8 <floor>
   d55b4:	ec51 0b10 	vmov	r0, r1, d0
   d55b8:	f003 fb1e 	bl	d8bf8 <__aeabi_d2uiz>
   d55bc:	b2c6      	uxtb	r6, r0
  Serial.print("Final pre-scale: "); Serial.println(prescale);
   d55be:	f001 ffa5 	bl	d750c <_Z16_fetch_usbserialv>
   d55c2:	491a      	ldr	r1, [pc, #104]	; (d562c <_ZN23Adafruit_PWMServoDriver10setPWMFreqEf+0xcc>)
   d55c4:	f002 f9a5 	bl	d7912 <_ZN5Print5printEPKc>
   d55c8:	f001 ffa0 	bl	d750c <_Z16_fetch_usbserialv>
   d55cc:	220a      	movs	r2, #10
   d55ce:	4631      	mov	r1, r6
   d55d0:	f002 f9e1 	bl	d7996 <_ZN5Print7printlnEhi>

  uint8_t oldmode = read8(PCA9685_MODE1);
   d55d4:	2100      	movs	r1, #0
   d55d6:	4620      	mov	r0, r4
   d55d8:	f7ff ff78 	bl	d54cc <_ZN23Adafruit_PWMServoDriver5read8Eh>
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
   d55dc:	f000 026f 	and.w	r2, r0, #111	; 0x6f
  prescaleval -= 1;
  Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  uint8_t prescale = floor(prescaleval + 0.5);
  Serial.print("Final pre-scale: "); Serial.println(prescale);

  uint8_t oldmode = read8(PCA9685_MODE1);
   d55e0:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
   d55e2:	f042 0210 	orr.w	r2, r2, #16
   d55e6:	4620      	mov	r0, r4
   d55e8:	2100      	movs	r1, #0
   d55ea:	f7ff ff8e 	bl	d550a <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
   d55ee:	4632      	mov	r2, r6
   d55f0:	4620      	mov	r0, r4
   d55f2:	21fe      	movs	r1, #254	; 0xfe
   d55f4:	f7ff ff89 	bl	d550a <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  write8(PCA9685_MODE1, oldmode);
   d55f8:	462a      	mov	r2, r5
   d55fa:	2100      	movs	r1, #0
   d55fc:	4620      	mov	r0, r4
   d55fe:	f7ff ff84 	bl	d550a <_ZN23Adafruit_PWMServoDriver6write8Ehh>
  delay(5);
   d5602:	2005      	movs	r0, #5
   d5604:	f002 f95c 	bl	d78c0 <delay>
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}
   d5608:	ecbd 8b02 	vpop	{d8}
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
  write8(PCA9685_MODE1, oldmode);
  delay(5);
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d560c:	f065 025e 	orn	r2, r5, #94	; 0x5e
   d5610:	4620      	mov	r0, r4
   d5612:	b2d2      	uxtb	r2, r2
   d5614:	2100      	movs	r1, #0
                                          // This is why the beginTransmission below was not working.
  //  Serial.print("Mode now 0x"); Serial.println(read8(PCA9685_MODE1), HEX);
}
   d5616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  uint8_t newmode = (oldmode&0x7F) | 0x10; // sleep
  write8(PCA9685_MODE1, newmode); // go to sleep
  write8(PCA9685_PRESCALE, prescale); // set the prescaler
  write8(PCA9685_MODE1, oldmode);
  delay(5);
  write8(PCA9685_MODE1, oldmode | 0xa1);  //  This sets the MODE1 register to turn on auto increment.
   d561a:	f7ff bf76 	b.w	d550a <_ZN23Adafruit_PWMServoDriver6write8Ehh>
   d561e:	bf00      	nop
   d5620:	45bebc20 	.word	0x45bebc20
   d5624:	000d9207 	.word	0x000d9207
   d5628:	3fe00000 	.word	0x3fe00000
   d562c:	000d921d 	.word	0x000d921d

000d5630 <_GLOBAL__sub_I__ZN23Adafruit_PWMServoDriverC2Eh>:
   d5630:	f001 b8c0 	b.w	d67b4 <HAL_Pin_Map>

000d5634 <_ZN10FlySkyIBus5beginER6Stream>:
}

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
  this->state = DISCARD;
   d5634:	2304      	movs	r3, #4
  serial.begin(115200);
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
   d5636:	b510      	push	{r4, lr}
  this->stream = &stream;
  this->state = DISCARD;
   d5638:	7003      	strb	r3, [r0, #0]
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
   d563a:	6041      	str	r1, [r0, #4]
  serial.begin(115200);
  begin((Stream&)serial);
}

void FlySkyIBus::begin(Stream& stream)
{
   d563c:	4604      	mov	r4, r0
   d563e:	f001 f899 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
  this->stream = &stream;
  this->state = DISCARD;
  this->last = millis();
  this->ptr = 0;
   d5642:	2300      	movs	r3, #0

void FlySkyIBus::begin(Stream& stream)
{
  this->stream = &stream;
  this->state = DISCARD;
  this->last = millis();
   d5644:	60a0      	str	r0, [r4, #8]
  this->ptr = 0;
   d5646:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  this->len = 0;
   d564a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  this->chksum = 0;
   d564e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  this->lchksum = 0;
   d5652:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   d5656:	bd10      	pop	{r4, pc}

000d5658 <_ZN10FlySkyIBus5beginER11USARTSerial>:
FlySkyIBus IBus;

//#define serial Serial

void FlySkyIBus::begin(USARTSerial& serial)
{
   d5658:	b538      	push	{r3, r4, r5, lr}
   d565a:	460c      	mov	r4, r1
   d565c:	4605      	mov	r5, r0
  serial.begin(115200);
   d565e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d5662:	4620      	mov	r0, r4
   d5664:	f001 fedc 	bl	d7420 <_ZN11USARTSerial5beginEm>
  begin((Stream&)serial);
   d5668:	4621      	mov	r1, r4
   d566a:	4628      	mov	r0, r5
}
   d566c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
//#define serial Serial

void FlySkyIBus::begin(USARTSerial& serial)
{
  serial.begin(115200);
  begin((Stream&)serial);
   d5670:	f7ff bfe0 	b.w	d5634 <_ZN10FlySkyIBus5beginER6Stream>

000d5674 <_ZN10FlySkyIBus4loopEv>:
  this->chksum = 0;
  this->lchksum = 0;
}

void FlySkyIBus::loop(void)
{
   d5674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5676:	4604      	mov	r4, r0
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
    {
      state = GET_LENGTH;
   d5678:	2600      	movs	r6, #0

            default:
              break;
          }
        }
        state = DISCARD;
   d567a:	2504      	movs	r5, #4
  this->lchksum = 0;
}

void FlySkyIBus::loop(void)
{
  while (stream->available() > 0)
   d567c:	6860      	ldr	r0, [r4, #4]
   d567e:	6803      	ldr	r3, [r0, #0]
   d5680:	691b      	ldr	r3, [r3, #16]
   d5682:	4798      	blx	r3
   d5684:	2800      	cmp	r0, #0
   d5686:	dd56      	ble.n	d5736 <_ZN10FlySkyIBus4loopEv+0xc2>
   d5688:	f001 f874 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
   d568c:	68a3      	ldr	r3, [r4, #8]
    {
      state = GET_LENGTH;
    }
    last = now;
   d568e:	60a0      	str	r0, [r4, #8]
void FlySkyIBus::loop(void)
{
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
   d5690:	1ac3      	subs	r3, r0, r3
   d5692:	2b02      	cmp	r3, #2
    {
      state = GET_LENGTH;
    }
    last = now;

    uint8_t v = stream->read();
   d5694:	6860      	ldr	r0, [r4, #4]
  while (stream->available() > 0)
  {
    uint32_t now = millis();
    if (now - last >= PROTOCOL_TIMEGAP)
    {
      state = GET_LENGTH;
   d5696:	bf88      	it	hi
   d5698:	7026      	strbhi	r6, [r4, #0]
    }
    last = now;

    uint8_t v = stream->read();
   d569a:	6803      	ldr	r3, [r0, #0]
   d569c:	695b      	ldr	r3, [r3, #20]
   d569e:	4798      	blx	r3
    switch (state)
   d56a0:	7822      	ldrb	r2, [r4, #0]
    {
      state = GET_LENGTH;
    }
    last = now;

    uint8_t v = stream->read();
   d56a2:	b2c3      	uxtb	r3, r0
    switch (state)
   d56a4:	2a03      	cmp	r2, #3
   d56a6:	d8e9      	bhi.n	d567c <_ZN10FlySkyIBus4loopEv+0x8>
   d56a8:	e8df f002 	tbb	[pc, r2]
   d56ac:	26210e02 	.word	0x26210e02
    {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH)
   d56b0:	2b20      	cmp	r3, #32
   d56b2:	d83e      	bhi.n	d5732 <_ZN10FlySkyIBus4loopEv+0xbe>
        {
          ptr = 0;
          len = v - PROTOCOL_OVERHEAD;
   d56b4:	1eda      	subs	r2, r3, #3
          chksum = 0xFFFF - v;
   d56b6:	43db      	mvns	r3, r3
   d56b8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    switch (state)
    {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH)
        {
          ptr = 0;
   d56bc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
          len = v - PROTOCOL_OVERHEAD;
   d56c0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
          chksum = 0xFFFF - v;
          state = GET_DATA;
   d56c4:	2301      	movs	r3, #1
   d56c6:	e015      	b.n	d56f4 <_ZN10FlySkyIBus4loopEv+0x80>
          state = DISCARD;
        }
        break;

      case GET_DATA:
        buffer[ptr++] = v;
   d56c8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d56cc:	1c4a      	adds	r2, r1, #1
   d56ce:	4421      	add	r1, r4
   d56d0:	b2d2      	uxtb	r2, r2
   d56d2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
   d56d6:	730b      	strb	r3, [r1, #12]
        chksum -= v;
   d56d8:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   d56dc:	1acb      	subs	r3, r1, r3
   d56de:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        if (ptr == len)
   d56e2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   d56e6:	4293      	cmp	r3, r2
   d56e8:	d1c8      	bne.n	d567c <_ZN10FlySkyIBus4loopEv+0x8>
        {
          state = GET_CHKSUML;
   d56ea:	2302      	movs	r3, #2
   d56ec:	e002      	b.n	d56f4 <_ZN10FlySkyIBus4loopEv+0x80>
        }
        break;

      case GET_CHKSUML:
        lchksum = v;
   d56ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        state = GET_CHKSUMH;
   d56f2:	2303      	movs	r3, #3
   d56f4:	7023      	strb	r3, [r4, #0]
        break;
   d56f6:	e7c1      	b.n	d567c <_ZN10FlySkyIBus4loopEv+0x8>

      case GET_CHKSUMH:
        // Validate checksum
        if (chksum == (v << 8) + lchksum)
   d56f8:	0200      	lsls	r0, r0, #8
   d56fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d56fe:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
   d5702:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   d5706:	4418      	add	r0, r3
   d5708:	4282      	cmp	r2, r0
   d570a:	d112      	bne.n	d5732 <_ZN10FlySkyIBus4loopEv+0xbe>
        {
          // Execute command - we only know command 0x40
          switch (buffer[0])
   d570c:	7b23      	ldrb	r3, [r4, #12]
   d570e:	2b40      	cmp	r3, #64	; 0x40
   d5710:	d10f      	bne.n	d5732 <_ZN10FlySkyIBus4loopEv+0xbe>
   d5712:	4622      	mov	r2, r4
   d5714:	2301      	movs	r3, #1
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d5716:	7b97      	ldrb	r7, [r2, #14]
   d5718:	7b50      	ldrb	r0, [r2, #13]
   d571a:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d571e:	3302      	adds	r3, #2
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d5720:	4421      	add	r1, r4
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d5722:	b2db      	uxtb	r3, r3
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d5724:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d5728:	2b15      	cmp	r3, #21
              {
                channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
   d572a:	85c8      	strh	r0, [r1, #46]	; 0x2e
   d572c:	f102 0202 	add.w	r2, r2, #2
          // Execute command - we only know command 0x40
          switch (buffer[0])
          {
            case PROTOCOL_COMMAND40:
              // Valid - extract channel data
              for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2)
   d5730:	d1f1      	bne.n	d5716 <_ZN10FlySkyIBus4loopEv+0xa2>

            default:
              break;
          }
        }
        state = DISCARD;
   d5732:	7025      	strb	r5, [r4, #0]
        break;
   d5734:	e7a2      	b.n	d567c <_ZN10FlySkyIBus4loopEv+0x8>
   d5736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5738 <_ZN10FlySkyIBus11readChannelEh>:
  }
}

uint16_t FlySkyIBus::readChannel(uint8_t channelNr)
{
  if (channelNr < PROTOCOL_CHANNELS)
   d5738:	2909      	cmp	r1, #9
  {
    return channel[channelNr];
   d573a:	bf9a      	itte	ls
   d573c:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
   d5740:	8dc0      	ldrhls	r0, [r0, #46]	; 0x2e
  }
  else
  {
    return 0;
   d5742:	2000      	movhi	r0, #0
  }
}
   d5744:	4770      	bx	lr

000d5746 <_GLOBAL__sub_I_IBus>:
   d5746:	f001 b835 	b.w	d67b4 <HAL_Pin_Map>
	...

000d574c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d574c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d574e:	6984      	ldr	r4, [r0, #24]
   d5750:	4b0a      	ldr	r3, [pc, #40]	; (d577c <_ZN9TCPClientD1Ev+0x30>)
   d5752:	6003      	str	r3, [r0, #0]
   d5754:	4605      	mov	r5, r0
   d5756:	b17c      	cbz	r4, d5778 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5758:	6863      	ldr	r3, [r4, #4]
   d575a:	3b01      	subs	r3, #1
   d575c:	6063      	str	r3, [r4, #4]
   d575e:	b95b      	cbnz	r3, d5778 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5760:	6823      	ldr	r3, [r4, #0]
   d5762:	4620      	mov	r0, r4
   d5764:	689b      	ldr	r3, [r3, #8]
   d5766:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5768:	68a3      	ldr	r3, [r4, #8]
   d576a:	3b01      	subs	r3, #1
   d576c:	60a3      	str	r3, [r4, #8]
   d576e:	b91b      	cbnz	r3, d5778 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5770:	6823      	ldr	r3, [r4, #0]
   d5772:	4620      	mov	r0, r4
   d5774:	68db      	ldr	r3, [r3, #12]
   d5776:	4798      	blx	r3
   d5778:	4628      	mov	r0, r5
   d577a:	bd38      	pop	{r3, r4, r5, pc}
   d577c:	000d92cc 	.word	0x000d92cc

000d5780 <_ZN9TCPClientD0Ev>:
   d5780:	b510      	push	{r4, lr}
   d5782:	4604      	mov	r4, r0
   d5784:	f7ff ffe2 	bl	d574c <_ZN9TCPClientD1Ev>
   d5788:	4620      	mov	r0, r4
   d578a:	f7fe fc88 	bl	d409e <_ZdlPv>
   d578e:	4620      	mov	r0, r4
   d5790:	bd10      	pop	{r4, pc}

000d5792 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5792:	b538      	push	{r3, r4, r5, lr}
   d5794:	461d      	mov	r5, r3
    this->callback = callback;
   d5796:	9b05      	ldr	r3, [sp, #20]
   d5798:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d579a:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d579c:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d579e:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d57a0:	b102      	cbz	r2, d57a4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d57a2:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d57a4:	b119      	cbz	r1, d57ae <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d57a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d57aa:	f002 fa72 	bl	d7c92 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d57ae:	9b04      	ldr	r3, [sp, #16]
   d57b0:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d57b2:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d57b4:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d57b6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d57ba:	2bff      	cmp	r3, #255	; 0xff
   d57bc:	bfb8      	it	lt
   d57be:	23ff      	movlt	r3, #255	; 0xff
   d57c0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d57c4:	b108      	cbz	r0, d57ca <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d57c6:	f7fe fc6c 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d57ca:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d57ce:	f7fe fc64 	bl	d409a <_Znaj>
   d57d2:	61e0      	str	r0, [r4, #28]
   d57d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d57d8 <_ZN4MQTTC1EPhtPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d57d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d57dc:	4604      	mov	r4, r0
   d57de:	2500      	movs	r5, #0
   d57e0:	4617      	mov	r7, r2
   d57e2:	4698      	mov	r8, r3
   d57e4:	460e      	mov	r6, r1
   d57e6:	f001 fc55 	bl	d7094 <_ZN9TCPClientC1Ev>
   d57ea:	61e5      	str	r5, [r4, #28]
   d57ec:	490a      	ldr	r1, [pc, #40]	; (d5818 <_ZN4MQTTC1EPhtPFvPcS0_jE+0x40>)
   d57ee:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d57f2:	f002 fa3b 	bl	d7c6c <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d57f6:	23ff      	movs	r3, #255	; 0xff
   d57f8:	9302      	str	r3, [sp, #8]
   d57fa:	230f      	movs	r3, #15
   d57fc:	9300      	str	r3, [sp, #0]
   d57fe:	4620      	mov	r0, r4

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d5800:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d5802:	f8cd 8004 	str.w	r8, [sp, #4]
   d5806:	463b      	mov	r3, r7
   d5808:	4632      	mov	r2, r6
   d580a:	4629      	mov	r1, r5
   d580c:	f7ff ffc1 	bl	d5792 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d5810:	4620      	mov	r0, r4
   d5812:	b004      	add	sp, #16
   d5814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5818:	000d9479 	.word	0x000d9479

000d581c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d581c:	b510      	push	{r4, lr}
   d581e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5820:	4620      	mov	r0, r4
   d5822:	f001 fb9b 	bl	d6f5c <_ZN9TCPClient9availableEv>
   d5826:	2800      	cmp	r0, #0
   d5828:	d0fa      	beq.n	d5820 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d582a:	4620      	mov	r0, r4
   d582c:	f001 fab7 	bl	d6d9e <_ZN9TCPClient4readEv>
}
   d5830:	b2c0      	uxtb	r0, r0
   d5832:	bd10      	pop	{r4, pc}

000d5834 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5838:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d583a:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d583c:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d583e:	f7ff ffed 	bl	d581c <_ZN4MQTT8readByteEv>
   d5842:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5844:	69eb      	ldr	r3, [r5, #28]
   d5846:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d584a:	f04f 0901 	mov.w	r9, #1
   d584e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d5852:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5854:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d5856:	4628      	mov	r0, r5
   d5858:	f7ff ffe0 	bl	d581c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d585c:	69eb      	ldr	r3, [r5, #28]
   d585e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5860:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d5864:	fb13 f309 	smulbb	r3, r3, r9
   d5868:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d586a:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d586c:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d586e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5870:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d5872:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d5876:	d501      	bpl.n	d587c <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5878:	4626      	mov	r6, r4
   d587a:	e7ec      	b.n	d5856 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d587c:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d587e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5882:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d5886:	d113      	bne.n	d58b0 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d5888:	4628      	mov	r0, r5
   d588a:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d588e:	f7ff ffc5 	bl	d581c <_ZN4MQTT8readByteEv>
   d5892:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d5896:	4628      	mov	r0, r5
   d5898:	1cf4      	adds	r4, r6, #3
   d589a:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d589e:	3602      	adds	r6, #2
   d58a0:	f7ff ffbc 	bl	d581c <_ZN4MQTT8readByteEv>
   d58a4:	b2b6      	uxth	r6, r6
   d58a6:	b2a4      	uxth	r4, r4
   d58a8:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d58ac:	2302      	movs	r3, #2
   d58ae:	e000      	b.n	d58b2 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d58b0:	2300      	movs	r3, #0
   d58b2:	1b1b      	subs	r3, r3, r4
   d58b4:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d58b6:	19a3      	adds	r3, r4, r6
   d58b8:	b29b      	uxth	r3, r3
   d58ba:	429f      	cmp	r7, r3
   d58bc:	d90b      	bls.n	d58d6 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d58be:	4628      	mov	r0, r5
   d58c0:	f7ff ffac 	bl	d581c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d58c4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d58c8:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d58ca:	bf84      	itt	hi
   d58cc:	69eb      	ldrhi	r3, [r5, #28]
   d58ce:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d58d0:	3401      	adds	r4, #1
   d58d2:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d58d4:	e7ef      	b.n	d58b6 <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d58d6:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d58da:	42a0      	cmp	r0, r4
   d58dc:	bf2c      	ite	cs
   d58de:	4620      	movcs	r0, r4
   d58e0:	2000      	movcc	r0, #0
   d58e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d58e6 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d58e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d58e8:	4607      	mov	r7, r0
   d58ea:	468e      	mov	lr, r1
   d58ec:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d58ee:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d58f0:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d58f2:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d58f4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d58f8:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d58fa:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d58fc:	bf18      	it	ne
   d58fe:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d5902:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5904:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d5908:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d590a:	2d00      	cmp	r5, #0
   d590c:	d1f1      	bne.n	d58f2 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d590e:	f1c4 0304 	rsb	r3, r4, #4
   d5912:	18d1      	adds	r1, r2, r3
   d5914:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5918:	42a5      	cmp	r5, r4
   d591a:	da06      	bge.n	d592a <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d591c:	1b2b      	subs	r3, r5, r4
   d591e:	a801      	add	r0, sp, #4
   d5920:	4413      	add	r3, r2
   d5922:	5c28      	ldrb	r0, [r5, r0]
   d5924:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d5926:	3501      	adds	r5, #1
   d5928:	e7f6      	b.n	d5918 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d592a:	1c72      	adds	r2, r6, #1
   d592c:	4422      	add	r2, r4
   d592e:	4638      	mov	r0, r7
   d5930:	f001 f913 	bl	d6b5a <_ZN9TCPClient5writeEPKhj>
   d5934:	4605      	mov	r5, r0
   d5936:	f000 ff1d 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d593a:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d593c:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d593e:	4434      	add	r4, r6
   d5940:	b2a8      	uxth	r0, r5
}
   d5942:	1a23      	subs	r3, r4, r0
   d5944:	4258      	negs	r0, r3
   d5946:	4158      	adcs	r0, r3
   d5948:	b003      	add	sp, #12
   d594a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d594c <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d594c:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d594e:	69c3      	ldr	r3, [r0, #28]
   d5950:	22e0      	movs	r2, #224	; 0xe0
   d5952:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d5954:	69c3      	ldr	r3, [r0, #28]
   d5956:	2200      	movs	r2, #0
   d5958:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d595a:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d595c:	2202      	movs	r2, #2
   d595e:	69c1      	ldr	r1, [r0, #28]
   d5960:	f001 f8fb 	bl	d6b5a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d5964:	4620      	mov	r0, r4
   d5966:	f001 fae2 	bl	d6f2e <_ZN9TCPClient4stopEv>
   d596a:	f000 ff03 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d596e:	6260      	str	r0, [r4, #36]	; 0x24
   d5970:	62a0      	str	r0, [r4, #40]	; 0x28
   d5972:	bd10      	pop	{r4, pc}

000d5974 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5974:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5976:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5978:	b29b      	uxth	r3, r3
   d597a:	460d      	mov	r5, r1
   d597c:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d597e:	f815 6b01 	ldrb.w	r6, [r5], #1
   d5982:	b2a4      	uxth	r4, r4
   d5984:	b13e      	cbz	r6, d5996 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d5986:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d598a:	429f      	cmp	r7, r3
   d598c:	d903      	bls.n	d5996 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d598e:	1c5c      	adds	r4, r3, #1
   d5990:	54d6      	strb	r6, [r2, r3]
   d5992:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d5994:	e7f2      	b.n	d597c <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5996:	1b19      	subs	r1, r3, r4
   d5998:	440a      	add	r2, r1
   d599a:	1221      	asrs	r1, r4, #8
   d599c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d59a0:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d59a4:	4618      	mov	r0, r3
   d59a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59a8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d59a8:	b538      	push	{r3, r4, r5, lr}
   d59aa:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d59ac:	f001 f8eb 	bl	d6b86 <_ZN9TCPClient9connectedEv>
   d59b0:	2800      	cmp	r0, #0
   d59b2:	bf14      	ite	ne
   d59b4:	2401      	movne	r4, #1
   d59b6:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d59b8:	d102      	bne.n	d59c0 <_ZN4MQTT11isConnectedEv+0x18>
   d59ba:	4628      	mov	r0, r5
   d59bc:	f001 fab7 	bl	d6f2e <_ZN9TCPClient4stopEv>
    return rc;
}
   d59c0:	4620      	mov	r0, r4
   d59c2:	bd38      	pop	{r3, r4, r5, pc}

000d59c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d59c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59c8:	b087      	sub	sp, #28
   d59ca:	4604      	mov	r4, r0
   d59cc:	4689      	mov	r9, r1
   d59ce:	4617      	mov	r7, r2
   d59d0:	461e      	mov	r6, r3
   d59d2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d59d6:	f7ff ffe7 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d59da:	4605      	mov	r5, r0
   d59dc:	2800      	cmp	r0, #0
   d59de:	f040 80bd 	bne.w	d5b5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d59e2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d59e4:	b939      	cbnz	r1, d59f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d59e6:	4603      	mov	r3, r0
   d59e8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d59ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d59ee:	4620      	mov	r0, r4
   d59f0:	f001 f8f6 	bl	d6be0 <_ZN9TCPClient7connectEPKctm>
   d59f4:	e009      	b.n	d5a0a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d59f6:	4668      	mov	r0, sp
   d59f8:	f001 fe36 	bl	d7668 <_ZN9IPAddressC1EPKh>
   d59fc:	462b      	mov	r3, r5
   d59fe:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5a02:	4669      	mov	r1, sp
   d5a04:	4620      	mov	r0, r4
   d5a06:	f001 fa15 	bl	d6e34 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d5a0a:	2800      	cmp	r0, #0
   d5a0c:	f000 80a2 	beq.w	d5b54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d5a10:	2301      	movs	r3, #1
   d5a12:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d5a14:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d5a18:	2b04      	cmp	r3, #4
   d5a1a:	d115      	bne.n	d5a48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5a1c:	4b52      	ldr	r3, [pc, #328]	; (d5b68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d5a1e:	6818      	ldr	r0, [r3, #0]
   d5a20:	889a      	ldrh	r2, [r3, #4]
   d5a22:	f8ad 2004 	strh.w	r2, [sp, #4]
   d5a26:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5a28:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5a2a:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5a2c:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5a2e:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5a32:	1d53      	adds	r3, r2, #5
   d5a34:	f8c2 0005 	str.w	r0, [r2, #5]
   d5a38:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d5a3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d5a40:	719a      	strb	r2, [r3, #6]
   d5a42:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d5a44:	230c      	movs	r3, #12
   d5a46:	e012      	b.n	d5a6e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5a48:	4b48      	ldr	r3, [pc, #288]	; (d5b6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5a4a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5a4e:	6818      	ldr	r0, [r3, #0]
   d5a50:	6859      	ldr	r1, [r3, #4]
   d5a52:	7a1b      	ldrb	r3, [r3, #8]
   d5a54:	466a      	mov	r2, sp
   d5a56:	c203      	stmia	r2!, {r0, r1}
   d5a58:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5a5a:	466b      	mov	r3, sp
   d5a5c:	cb03      	ldmia	r3!, {r0, r1}
   d5a5e:	f8cc 0005 	str.w	r0, [ip, #5]
   d5a62:	f8cc 1009 	str.w	r1, [ip, #9]
   d5a66:	7813      	ldrb	r3, [r2, #0]
   d5a68:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5a6c:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d5a6e:	f1b8 0f00 	cmp.w	r8, #0
   d5a72:	d00a      	beq.n	d5a8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5a74:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d5a78:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d5a7c:	0152      	lsls	r2, r2, #5
   d5a7e:	f042 0206 	orr.w	r2, r2, #6
   d5a82:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d5a86:	b2d2      	uxtb	r2, r2
   d5a88:	e000      	b.n	d5a8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d5a8a:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d5a8c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d5a90:	b909      	cbnz	r1, d5a96 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d5a92:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d5a96:	b12f      	cbz	r7, d5aa4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d5a98:	b916      	cbnz	r6, d5aa0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d5a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d5a9e:	e001      	b.n	d5aa4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d5aa0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d5aa4:	69e1      	ldr	r1, [r4, #28]
   d5aa6:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d5aa8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5aaa:	69e1      	ldr	r1, [r4, #28]
   d5aac:	1c58      	adds	r0, r3, #1
   d5aae:	1212      	asrs	r2, r2, #8
   d5ab0:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d5ab2:	1c9a      	adds	r2, r3, #2
   d5ab4:	69e1      	ldr	r1, [r4, #28]
   d5ab6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5ab8:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5aba:	3303      	adds	r3, #3
   d5abc:	69e2      	ldr	r2, [r4, #28]
   d5abe:	4649      	mov	r1, r9
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	f7ff ff57 	bl	d5974 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d5ac6:	f1b8 0f00 	cmp.w	r8, #0
   d5aca:	d00b      	beq.n	d5ae4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d5acc:	4603      	mov	r3, r0
   d5ace:	69e2      	ldr	r2, [r4, #28]
   d5ad0:	4641      	mov	r1, r8
   d5ad2:	4620      	mov	r0, r4
   d5ad4:	f7ff ff4e 	bl	d5974 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5ad8:	69e2      	ldr	r2, [r4, #28]
   d5ada:	9911      	ldr	r1, [sp, #68]	; 0x44
   d5adc:	4603      	mov	r3, r0
   d5ade:	4620      	mov	r0, r4
   d5ae0:	f7ff ff48 	bl	d5974 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d5ae4:	b167      	cbz	r7, d5b00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d5ae6:	4603      	mov	r3, r0
   d5ae8:	69e2      	ldr	r2, [r4, #28]
   d5aea:	4639      	mov	r1, r7
   d5aec:	4620      	mov	r0, r4
   d5aee:	f7ff ff41 	bl	d5974 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d5af2:	b12e      	cbz	r6, d5b00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d5af4:	4603      	mov	r3, r0
   d5af6:	69e2      	ldr	r2, [r4, #28]
   d5af8:	4631      	mov	r1, r6
   d5afa:	4620      	mov	r0, r4
   d5afc:	f7ff ff3a 	bl	d5974 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d5b00:	1f43      	subs	r3, r0, #5
   d5b02:	b29b      	uxth	r3, r3
   d5b04:	69e2      	ldr	r2, [r4, #28]
   d5b06:	2110      	movs	r1, #16
   d5b08:	4620      	mov	r0, r4
   d5b0a:	f7ff feec 	bl	d58e6 <_ZN4MQTT5writeEhPht>
   d5b0e:	f000 fe31 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5b12:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d5b16:	6260      	str	r0, [r4, #36]	; 0x24
   d5b18:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	f001 fa1e 	bl	d6f5c <_ZN9TCPClient9availableEv>
   d5b20:	b940      	cbnz	r0, d5b34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d5b22:	f000 fe27 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5b28:	1ac0      	subs	r0, r0, r3
   d5b2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5b2c:	4373      	muls	r3, r6
   d5b2e:	4298      	cmp	r0, r3
   d5b30:	d9f3      	bls.n	d5b1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d5b32:	e00f      	b.n	d5b54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5b34:	4669      	mov	r1, sp
   d5b36:	4620      	mov	r0, r4
   d5b38:	f7ff fe7c 	bl	d5834 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d5b3c:	2804      	cmp	r0, #4
   d5b3e:	d109      	bne.n	d5b54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d5b40:	69e3      	ldr	r3, [r4, #28]
   d5b42:	78de      	ldrb	r6, [r3, #3]
   d5b44:	b936      	cbnz	r6, d5b54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d5b46:	f000 fe15 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d5b4a:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d5b4c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d5b4e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d5b52:	e004      	b.n	d5b5e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d5b54:	4620      	mov	r0, r4
   d5b56:	f001 f9ea 	bl	d6f2e <_ZN9TCPClient4stopEv>
   d5b5a:	e000      	b.n	d5b5e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d5b5c:	2500      	movs	r5, #0
}
   d5b5e:	4628      	mov	r0, r5
   d5b60:	b007      	add	sp, #28
   d5b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5b66:	bf00      	nop
   d5b68:	000d922f 	.word	0x000d922f
   d5b6c:	000d9236 	.word	0x000d9236

000d5b70 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d5b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d5b72:	2304      	movs	r3, #4
   d5b74:	9305      	str	r3, [sp, #20]
   d5b76:	2301      	movs	r3, #1
   d5b78:	9304      	str	r3, [sp, #16]
   d5b7a:	2300      	movs	r3, #0
   d5b7c:	9303      	str	r3, [sp, #12]
   d5b7e:	9302      	str	r3, [sp, #8]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	9300      	str	r3, [sp, #0]
   d5b84:	461a      	mov	r2, r3
   d5b86:	f7ff ff1d 	bl	d59c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5b8a:	b007      	add	sp, #28
   d5b8c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b90 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5b90:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b94:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d5b96:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5b9a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5b9e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d5ba2:	4604      	mov	r4, r0
   d5ba4:	468b      	mov	fp, r1
   d5ba6:	4691      	mov	r9, r2
   d5ba8:	469a      	mov	sl, r3
    if (isConnected()) {
   d5baa:	f7ff fefd 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d5bae:	2800      	cmp	r0, #0
   d5bb0:	d04c      	beq.n	d5c4c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d5bb2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5bb6:	69e0      	ldr	r0, [r4, #28]
   d5bb8:	2100      	movs	r1, #0
   d5bba:	f003 f8a6 	bl	d8d0a <memset>

        length = writeString(topic, buffer, length);
   d5bbe:	2305      	movs	r3, #5
   d5bc0:	69e2      	ldr	r2, [r4, #28]
   d5bc2:	4659      	mov	r1, fp
   d5bc4:	4620      	mov	r0, r4
   d5bc6:	f7ff fed5 	bl	d5974 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d5bca:	1e6b      	subs	r3, r5, #1
   d5bcc:	2b01      	cmp	r3, #1
   d5bce:	d812      	bhi.n	d5bf6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d5bd0:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5bd2:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d5bd4:	3301      	adds	r3, #1
   d5bd6:	b29b      	uxth	r3, r3
   d5bd8:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5bda:	121b      	asrs	r3, r3, #8
   d5bdc:	5413      	strb	r3, [r2, r0]
   d5bde:	1c41      	adds	r1, r0, #1
   d5be0:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d5be2:	69e3      	ldr	r3, [r4, #28]
   d5be4:	8c22      	ldrh	r2, [r4, #32]
   d5be6:	545a      	strb	r2, [r3, r1]
   d5be8:	3002      	adds	r0, #2
   d5bea:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d5bec:	b11e      	cbz	r6, d5bf6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d5bee:	8c23      	ldrh	r3, [r4, #32]
   d5bf0:	1c5a      	adds	r2, r3, #1
   d5bf2:	8422      	strh	r2, [r4, #32]
   d5bf4:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5bf6:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5bf8:	b291      	uxth	r1, r2
   d5bfa:	1883      	adds	r3, r0, r2
   d5bfc:	458a      	cmp	sl, r1
   d5bfe:	b29b      	uxth	r3, r3
   d5c00:	d90a      	bls.n	d5c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d5c02:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5c06:	429e      	cmp	r6, r3
   d5c08:	f102 0201 	add.w	r2, r2, #1
   d5c0c:	d904      	bls.n	d5c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d5c0e:	f819 6001 	ldrb.w	r6, [r9, r1]
   d5c12:	69e1      	ldr	r1, [r4, #28]
   d5c14:	54ce      	strb	r6, [r1, r3]
   d5c16:	e7ef      	b.n	d5bf8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d5c18:	f1b8 0f00 	cmp.w	r8, #0
   d5c1c:	bf0c      	ite	eq
   d5c1e:	2130      	moveq	r1, #48	; 0x30
   d5c20:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d5c22:	b10f      	cbz	r7, d5c28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d5c24:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d5c28:	2d02      	cmp	r5, #2
   d5c2a:	d102      	bne.n	d5c32 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d5c2c:	f041 0104 	orr.w	r1, r1, #4
   d5c30:	e003      	b.n	d5c3a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d5c32:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5c34:	bf08      	it	eq
   d5c36:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5c3a:	3b05      	subs	r3, #5
   d5c3c:	69e2      	ldr	r2, [r4, #28]
   d5c3e:	b29b      	uxth	r3, r3
   d5c40:	4620      	mov	r0, r4
    }
    return false;
}
   d5c42:	b001      	add	sp, #4
   d5c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5c48:	f7ff be4d 	b.w	d58e6 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5c4c:	b001      	add	sp, #4
   d5c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5c52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5c52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5c54:	9c08      	ldr	r4, [sp, #32]
   d5c56:	9403      	str	r4, [sp, #12]
   d5c58:	2400      	movs	r4, #0
   d5c5a:	9402      	str	r4, [sp, #8]
   d5c5c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5c60:	9401      	str	r4, [sp, #4]
   d5c62:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5c66:	9400      	str	r4, [sp, #0]
   d5c68:	f7ff ff92 	bl	d5b90 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d5c6c:	b004      	add	sp, #16
   d5c6e:	bd10      	pop	{r4, pc}

000d5c70 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d5c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5c72:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5c74:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d5c76:	460e      	mov	r6, r1
   d5c78:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5c7a:	f003 f881 	bl	d8d80 <strlen>
   d5c7e:	2300      	movs	r3, #0
   d5c80:	9302      	str	r3, [sp, #8]
   d5c82:	9301      	str	r3, [sp, #4]
   d5c84:	9300      	str	r3, [sp, #0]
   d5c86:	4622      	mov	r2, r4
   d5c88:	4603      	mov	r3, r0
   d5c8a:	4631      	mov	r1, r6
   d5c8c:	4628      	mov	r0, r5
   d5c8e:	f7ff ffe0 	bl	d5c52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5c92:	b004      	add	sp, #16
   d5c94:	bd70      	pop	{r4, r5, r6, pc}

000d5c96 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d5c96:	b538      	push	{r3, r4, r5, lr}
   d5c98:	4604      	mov	r4, r0
   d5c9a:	460d      	mov	r5, r1
    if (isConnected()) {
   d5c9c:	f7ff fe84 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d5ca0:	b190      	cbz	r0, d5cc8 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5ca2:	69e3      	ldr	r3, [r4, #28]
   d5ca4:	2262      	movs	r2, #98	; 0x62
   d5ca6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5ca8:	69e3      	ldr	r3, [r4, #28]
   d5caa:	2202      	movs	r2, #2
   d5cac:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5cae:	69e3      	ldr	r3, [r4, #28]
   d5cb0:	122a      	asrs	r2, r5, #8
   d5cb2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5cb4:	69e3      	ldr	r3, [r4, #28]
   d5cb6:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5cb8:	2204      	movs	r2, #4
   d5cba:	69e1      	ldr	r1, [r4, #28]
   d5cbc:	4620      	mov	r0, r4
   d5cbe:	f000 ff4c 	bl	d6b5a <_ZN9TCPClient5writeEPKhj>
   d5cc2:	3000      	adds	r0, #0
   d5cc4:	bf18      	it	ne
   d5cc6:	2001      	movne	r0, #1
    }
    return false;
}
   d5cc8:	bd38      	pop	{r3, r4, r5, pc}

000d5cca <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d5cca:	b538      	push	{r3, r4, r5, lr}
   d5ccc:	4604      	mov	r4, r0
   d5cce:	460d      	mov	r5, r1
    if (isConnected()) {
   d5cd0:	f7ff fe6a 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d5cd4:	b190      	cbz	r0, d5cfc <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d5cd6:	69e3      	ldr	r3, [r4, #28]
   d5cd8:	2272      	movs	r2, #114	; 0x72
   d5cda:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5cdc:	69e3      	ldr	r3, [r4, #28]
   d5cde:	2202      	movs	r2, #2
   d5ce0:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5ce2:	69e3      	ldr	r3, [r4, #28]
   d5ce4:	122a      	asrs	r2, r5, #8
   d5ce6:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5ce8:	69e3      	ldr	r3, [r4, #28]
   d5cea:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5cec:	2204      	movs	r2, #4
   d5cee:	69e1      	ldr	r1, [r4, #28]
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	f000 ff32 	bl	d6b5a <_ZN9TCPClient5writeEPKhj>
   d5cf6:	3000      	adds	r0, #0
   d5cf8:	bf18      	it	ne
   d5cfa:	2001      	movne	r0, #1
    }
    return false;
}
   d5cfc:	bd38      	pop	{r3, r4, r5, pc}

000d5cfe <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d5cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d02:	b083      	sub	sp, #12
   d5d04:	af00      	add	r7, sp, #0
   d5d06:	4604      	mov	r4, r0
    if (isConnected()) {
   d5d08:	f7ff fe4e 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d5d0c:	4681      	mov	r9, r0
   d5d0e:	2800      	cmp	r0, #0
   d5d10:	f000 80f6 	beq.w	d5f00 <_ZN4MQTT4loopEv+0x202>
   d5d14:	f000 fd2e 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d5d18:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d1e:	4353      	muls	r3, r2
   d5d20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5d22:	1a82      	subs	r2, r0, r2
   d5d24:	429a      	cmp	r2, r3
   d5d26:	4605      	mov	r5, r0
   d5d28:	d803      	bhi.n	d5d32 <_ZN4MQTT4loopEv+0x34>
   d5d2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5d2c:	1a82      	subs	r2, r0, r2
   d5d2e:	4293      	cmp	r3, r2
   d5d30:	d217      	bcs.n	d5d62 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d5d32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5d36:	b12b      	cbz	r3, d5d44 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d5d38:	4620      	mov	r0, r4
   d5d3a:	f001 f8f8 	bl	d6f2e <_ZN9TCPClient4stopEv>
                return false;
   d5d3e:	f04f 0900 	mov.w	r9, #0
   d5d42:	e0dd      	b.n	d5f00 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d5d44:	69e2      	ldr	r2, [r4, #28]
   d5d46:	21c0      	movs	r1, #192	; 0xc0
   d5d48:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5d4a:	69e2      	ldr	r2, [r4, #28]
   d5d4c:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5d4e:	69e1      	ldr	r1, [r4, #28]
   d5d50:	2202      	movs	r2, #2
   d5d52:	4620      	mov	r0, r4
   d5d54:	f000 ff01 	bl	d6b5a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d5d58:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d5d5a:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d5d5c:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d5d5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d5d62:	4620      	mov	r0, r4
   d5d64:	f001 f8fa 	bl	d6f5c <_ZN9TCPClient9availableEv>
   d5d68:	2800      	cmp	r0, #0
   d5d6a:	f000 80c9 	beq.w	d5f00 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5d6e:	1df9      	adds	r1, r7, #7
   d5d70:	4620      	mov	r0, r4
   d5d72:	f7ff fd5f 	bl	d5834 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d5d76:	4602      	mov	r2, r0
   d5d78:	2800      	cmp	r0, #0
   d5d7a:	f000 80c1 	beq.w	d5f00 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d5d7e:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d5d80:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d5d82:	7818      	ldrb	r0, [r3, #0]
   d5d84:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5d88:	2930      	cmp	r1, #48	; 0x30
   d5d8a:	d17d      	bne.n	d5e88 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d5d8c:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d5d90:	f1bb 0f00 	cmp.w	fp, #0
   d5d94:	f000 80b4 	beq.w	d5f00 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5d98:	f897 c007 	ldrb.w	ip, [r7, #7]
   d5d9c:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d5da0:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5da2:	7881      	ldrb	r1, [r0, #2]
   d5da4:	f890 e001 	ldrb.w	lr, [r0, #1]
   d5da8:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d5dac:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d5db0:	f10e 0108 	add.w	r1, lr, #8
   d5db4:	f021 0107 	bic.w	r1, r1, #7
   d5db8:	ebad 0d01 	sub.w	sp, sp, r1
   d5dbc:	4668      	mov	r0, sp
   d5dbe:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d5dc0:	b28e      	uxth	r6, r1
   d5dc2:	45b6      	cmp	lr, r6
   d5dc4:	d906      	bls.n	d5dd4 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d5dc6:	eb0c 0601 	add.w	r6, ip, r1
   d5dca:	441e      	add	r6, r3
   d5dcc:	78f6      	ldrb	r6, [r6, #3]
   d5dce:	5446      	strb	r6, [r0, r1]
   d5dd0:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d5dd2:	e7f5      	b.n	d5dc0 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d5dd4:	2100      	movs	r1, #0
   d5dd6:	f800 100e 	strb.w	r1, [r0, lr]
   d5dda:	781e      	ldrb	r6, [r3, #0]
   d5ddc:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5de0:	2e02      	cmp	r6, #2
   d5de2:	f10c 0103 	add.w	r1, ip, #3
   d5de6:	ebcc 0202 	rsb	r2, ip, r2
   d5dea:	d11e      	bne.n	d5e2a <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5dec:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5dee:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5df2:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5df6:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5df8:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5dfa:	7849      	ldrb	r1, [r1, #1]
   d5dfc:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5e00:	f10c 0105 	add.w	r1, ip, #5
   d5e04:	4471      	add	r1, lr
   d5e06:	4419      	add	r1, r3
   d5e08:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d5e0a:	69e3      	ldr	r3, [r4, #28]
   d5e0c:	2240      	movs	r2, #64	; 0x40
   d5e0e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d5e10:	69e3      	ldr	r3, [r4, #28]
   d5e12:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d5e14:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5e16:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d5e1a:	ea4f 2228 	mov.w	r2, r8, asr #8
   d5e1e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d5e20:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d5e22:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d5e24:	f883 8003 	strb.w	r8, [r3, #3]
   d5e28:	e020      	b.n	d5e6c <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d5e2a:	2e04      	cmp	r6, #4
   d5e2c:	d124      	bne.n	d5e78 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e2e:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5e30:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e34:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5e38:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5e3a:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e3c:	7849      	ldrb	r1, [r1, #1]
   d5e3e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5e42:	f10c 0105 	add.w	r1, ip, #5
   d5e46:	4471      	add	r1, lr
   d5e48:	4419      	add	r1, r3
   d5e4a:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d5e4c:	69e3      	ldr	r3, [r4, #28]
   d5e4e:	2250      	movs	r2, #80	; 0x50
   d5e50:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d5e52:	69e3      	ldr	r3, [r4, #28]
   d5e54:	2202      	movs	r2, #2
   d5e56:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d5e58:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5e5a:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d5e5e:	ea4f 2228 	mov.w	r2, r8, asr #8
   d5e62:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d5e64:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d5e66:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d5e68:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d5e6c:	69e1      	ldr	r1, [r4, #28]
   d5e6e:	4620      	mov	r0, r4
   d5e70:	f000 fe73 	bl	d6b5a <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d5e74:	6265      	str	r5, [r4, #36]	; 0x24
   d5e76:	e005      	b.n	d5e84 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d5e78:	3a03      	subs	r2, #3
   d5e7a:	4471      	add	r1, lr
   d5e7c:	ebce 0202 	rsb	r2, lr, r2
   d5e80:	4419      	add	r1, r3
   d5e82:	47d8      	blx	fp
   d5e84:	46d5      	mov	sp, sl
   d5e86:	e03b      	b.n	d5f00 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d5e88:	2950      	cmp	r1, #80	; 0x50
   d5e8a:	d108      	bne.n	d5e9e <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d5e8c:	7899      	ldrb	r1, [r3, #2]
   d5e8e:	78db      	ldrb	r3, [r3, #3]
   d5e90:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d5e94:	b289      	uxth	r1, r1
   d5e96:	4620      	mov	r0, r4
   d5e98:	f7ff fefd 	bl	d5c96 <_ZN4MQTT14publishReleaseEt>
   d5e9c:	e030      	b.n	d5f00 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d5e9e:	2940      	cmp	r1, #64	; 0x40
   d5ea0:	d00c      	beq.n	d5ebc <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d5ea2:	2960      	cmp	r1, #96	; 0x60
   d5ea4:	d108      	bne.n	d5eb8 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d5ea6:	7899      	ldrb	r1, [r3, #2]
   d5ea8:	78db      	ldrb	r3, [r3, #3]
   d5eaa:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d5eae:	b289      	uxth	r1, r1
   d5eb0:	4620      	mov	r0, r4
   d5eb2:	f7ff ff0a 	bl	d5cca <_ZN4MQTT15publishCompleteEt>
   d5eb6:	e023      	b.n	d5f00 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d5eb8:	2970      	cmp	r1, #112	; 0x70
   d5eba:	d10d      	bne.n	d5ed8 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d5ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5ebe:	b1f9      	cbz	r1, d5f00 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d5ec0:	2a04      	cmp	r2, #4
   d5ec2:	d11d      	bne.n	d5f00 <_ZN4MQTT4loopEv+0x202>
   d5ec4:	f010 0f06 	tst.w	r0, #6
   d5ec8:	d11a      	bne.n	d5f00 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d5eca:	7898      	ldrb	r0, [r3, #2]
   d5ecc:	78db      	ldrb	r3, [r3, #3]
   d5ece:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d5ed2:	b280      	uxth	r0, r0
   d5ed4:	4788      	blx	r1
   d5ed6:	e013      	b.n	d5f00 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d5ed8:	2990      	cmp	r1, #144	; 0x90
   d5eda:	d011      	beq.n	d5f00 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d5edc:	29c0      	cmp	r1, #192	; 0xc0
   d5ede:	d10a      	bne.n	d5ef6 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d5ee0:	22d0      	movs	r2, #208	; 0xd0
   d5ee2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d5ee4:	69e3      	ldr	r3, [r4, #28]
   d5ee6:	2200      	movs	r2, #0
   d5ee8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d5eea:	69e1      	ldr	r1, [r4, #28]
   d5eec:	2202      	movs	r2, #2
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f000 fe33 	bl	d6b5a <_ZN9TCPClient5writeEPKhj>
   d5ef4:	e004      	b.n	d5f00 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d5ef6:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d5ef8:	bf04      	itt	eq
   d5efa:	2300      	moveq	r3, #0
   d5efc:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d5f00:	4648      	mov	r0, r9
   d5f02:	370c      	adds	r7, #12
   d5f04:	46bd      	mov	sp, r7
   d5f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5f0a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d5f0a:	b570      	push	{r4, r5, r6, lr}
   d5f0c:	4604      	mov	r4, r0
   d5f0e:	460e      	mov	r6, r1
   d5f10:	4615      	mov	r5, r2

    if (isConnected()) {
   d5f12:	f7ff fd49 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d5f16:	b1e8      	cbz	r0, d5f54 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d5f18:	8c23      	ldrh	r3, [r4, #32]
   d5f1a:	3301      	adds	r3, #1
   d5f1c:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5f1e:	b903      	cbnz	r3, d5f22 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d5f20:	2301      	movs	r3, #1
   d5f22:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d5f24:	8c23      	ldrh	r3, [r4, #32]
   d5f26:	69e2      	ldr	r2, [r4, #28]
   d5f28:	121b      	asrs	r3, r3, #8
   d5f2a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5f2c:	69e3      	ldr	r3, [r4, #28]
   d5f2e:	8c22      	ldrh	r2, [r4, #32]
   d5f30:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5f32:	69e2      	ldr	r2, [r4, #28]
   d5f34:	4631      	mov	r1, r6
   d5f36:	2307      	movs	r3, #7
   d5f38:	4620      	mov	r0, r4
   d5f3a:	f7ff fd1b 	bl	d5974 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5f3e:	69e3      	ldr	r3, [r4, #28]
   d5f40:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5f42:	1f03      	subs	r3, r0, #4
   d5f44:	69e2      	ldr	r2, [r4, #28]
   d5f46:	4620      	mov	r0, r4
   d5f48:	b29b      	uxth	r3, r3
   d5f4a:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d5f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5f50:	f7ff bcc9 	b.w	d58e6 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5f54:	bd70      	pop	{r4, r5, r6, pc}

000d5f56 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d5f56:	2200      	movs	r2, #0
   d5f58:	f7ff bfd7 	b.w	d5f0a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d5f5c <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d5f5c:	b510      	push	{r4, lr}
   d5f5e:	4604      	mov	r4, r0
    if (isConnected()) {
   d5f60:	f7ff fd22 	bl	d59a8 <_ZN4MQTT11isConnectedEv>
   d5f64:	b110      	cbz	r0, d5f6c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d5f66:	4620      	mov	r0, r4
   d5f68:	f7ff fcf0 	bl	d594c <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d5f6c:	69e0      	ldr	r0, [r4, #28]
   d5f6e:	b108      	cbz	r0, d5f74 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5f70:	f7fe f897 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d5f74:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5f78:	f001 fe31 	bl	d7bde <_ZN6StringD1Ev>
   d5f7c:	4620      	mov	r0, r4
   d5f7e:	f7ff fbe5 	bl	d574c <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d5f82:	4620      	mov	r0, r4
   d5f84:	bd10      	pop	{r4, pc}

000d5f86 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d5f86:	f000 bc15 	b.w	d67b4 <HAL_Pin_Map>
	...

000d5f8c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
   d5f8c:	b538      	push	{r3, r4, r5, lr}
   d5f8e:	460c      	mov	r4, r1
   d5f90:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5f92:	2228      	movs	r2, #40	; 0x28
   d5f94:	2100      	movs	r1, #0
   d5f96:	4620      	mov	r0, r4
   d5f98:	f002 feb7 	bl	d8d0a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d5f9c:	220b      	movs	r2, #11
   d5f9e:	4909      	ldr	r1, [pc, #36]	; (d5fc4 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	f002 fef5 	bl	d8d90 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5fa6:	2300      	movs	r3, #0
  sensor->version     = 1;
   d5fa8:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5faa:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d5fac:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d5fae:	68aa      	ldr	r2, [r5, #8]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay   = 0;
   d5fb0:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0.0F;
   d5fb2:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d5fb4:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
   d5fb6:	61a3      	str	r3, [r4, #24]
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d5fb8:	2203      	movs	r2, #3
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
  sensor->min_value   = 0.0F;
   d5fba:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0.01F;
   d5fbc:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_ORIENTATION;
   d5fbe:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0.0F;
  sensor->min_value   = 0.0F;
  sensor->resolution  = 0.01F;
   d5fc0:	6223      	str	r3, [r4, #32]
   d5fc2:	bd38      	pop	{r3, r4, r5, pc}
   d5fc4:	000d923f 	.word	0x000d923f
   d5fc8:	3c23d70a 	.word	0x3c23d70a

000d5fcc <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
   d5fcc:	b510      	push	{r4, lr}
   d5fce:	4c02      	ldr	r4, [pc, #8]	; (d5fd8 <_ZN15Adafruit_BNO055C1Elh+0xc>)
   d5fd0:	6004      	str	r4, [r0, #0]
{
  _sensorID = sensorID;
   d5fd2:	6081      	str	r1, [r0, #8]
  _address = address;
   d5fd4:	7142      	strb	r2, [r0, #5]
}
   d5fd6:	bd10      	pop	{r4, pc}
   d5fd8:	000d9250 	.word	0x000d9250

000d5fdc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
/*!
    @brief  Writes an 8 bit value over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value)
{
   d5fdc:	b570      	push	{r4, r5, r6, lr}
   d5fde:	4606      	mov	r6, r0
   d5fe0:	4614      	mov	r4, r2
   d5fe2:	460d      	mov	r5, r1
  Wire.beginTransmission(_address);
   d5fe4:	f001 feee 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5fe8:	7971      	ldrb	r1, [r6, #5]
   d5fea:	f001 f9bd 	bl	d7368 <_ZN7TwoWire17beginTransmissionEh>

    Wire.write((uint8_t)reg);
   d5fee:	f001 fee9 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5ff2:	6803      	ldr	r3, [r0, #0]
   d5ff4:	4629      	mov	r1, r5
   d5ff6:	689b      	ldr	r3, [r3, #8]
   d5ff8:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d5ffa:	f001 fee3 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d5ffe:	6803      	ldr	r3, [r0, #0]
   d6000:	4621      	mov	r1, r4
   d6002:	689b      	ldr	r3, [r3, #8]
   d6004:	4798      	blx	r3

  Wire.endTransmission();
   d6006:	f001 fedd 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d600a:	f001 f9b5 	bl	d7378 <_ZN7TwoWire15endTransmissionEv>

  /* ToDo: Check for error! */
  return true;
}
   d600e:	2001      	movs	r0, #1
   d6010:	bd70      	pop	{r4, r5, r6, pc}

000d6012 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Puts the chip in the specified operating mode
*/
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
   d6012:	b508      	push	{r3, lr}
   d6014:	460a      	mov	r2, r1
  _mode = mode;
   d6016:	7301      	strb	r1, [r0, #12]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d6018:	213d      	movs	r1, #61	; 0x3d
   d601a:	f7ff ffdf 	bl	d5fdc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d601e:	201e      	movs	r0, #30
}
   d6020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
  _mode = mode;
  write8(BNO055_OPR_MODE_ADDR, _mode);
  delay(30);
   d6024:	f001 bc4c 	b.w	d78c0 <delay>

000d6028 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg )
{
   d6028:	b538      	push	{r3, r4, r5, lr}
   d602a:	4604      	mov	r4, r0
   d602c:	460d      	mov	r5, r1
  byte value = 0;

  Wire.beginTransmission(_address);
   d602e:	f001 fec9 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d6032:	7961      	ldrb	r1, [r4, #5]
   d6034:	f001 f998 	bl	d7368 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d6038:	f001 fec4 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d603c:	6803      	ldr	r3, [r0, #0]
   d603e:	4629      	mov	r1, r5
   d6040:	689b      	ldr	r3, [r3, #8]
   d6042:	4798      	blx	r3
  Wire.endTransmission();
   d6044:	f001 febe 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d6048:	f001 f996 	bl	d7378 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)1);
   d604c:	f001 feba 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d6050:	2201      	movs	r2, #1
   d6052:	7961      	ldrb	r1, [r4, #5]
   d6054:	f001 f985 	bl	d7362 <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
   d6058:	f001 feb4 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d605c:	6803      	ldr	r3, [r0, #0]
   d605e:	695b      	ldr	r3, [r3, #20]
   d6060:	4798      	blx	r3

  return value;
}
   d6062:	b2c0      	uxtb	r0, r0
   d6064:	bd38      	pop	{r3, r4, r5, pc}

000d6066 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Sets up the HW
*/
/**************************************************************************/
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode)
{
   d6066:	b538      	push	{r3, r4, r5, lr}
   d6068:	460d      	mov	r5, r1
   d606a:	4604      	mov	r4, r0
  /* Enable I2C */
  Wire.begin();
   d606c:	f001 feaa 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d6070:	f001 f962 	bl	d7338 <_ZN7TwoWire5beginEv>

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6074:	2100      	movs	r1, #0
   d6076:	4620      	mov	r0, r4
   d6078:	f7ff ffd6 	bl	d6028 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if(id != BNO055_ID)
   d607c:	28a0      	cmp	r0, #160	; 0xa0
   d607e:	d109      	bne.n	d6094 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2e>
      return false;  // still not? ok bail
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
   d6080:	4620      	mov	r0, r4
   d6082:	2100      	movs	r1, #0
   d6084:	f7ff ffc5 	bl	d6012 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6088:	2220      	movs	r2, #32
   d608a:	213f      	movs	r1, #63	; 0x3f
   d608c:	4620      	mov	r0, r4
   d608e:	f7ff ffa5 	bl	d5fdc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
   d6092:	e00b      	b.n	d60ac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x46>

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
  if(id != BNO055_ID)
  {
    delay(1000); // hold on for boot
   d6094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6098:	f001 fc12 	bl	d78c0 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d609c:	2100      	movs	r1, #0
   d609e:	4620      	mov	r0, r4
   d60a0:	f7ff ffc2 	bl	d6028 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if(id != BNO055_ID) {
   d60a4:	28a0      	cmp	r0, #160	; 0xa0
   d60a6:	d0eb      	beq.n	d6080 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x1a>
      return false;  // still not? ok bail
   d60a8:	2000      	movs	r0, #0
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
  delay(20);

  return true;
}
   d60aa:	bd38      	pop	{r3, r4, r5, pc}
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d60ac:	2100      	movs	r1, #0
   d60ae:	4620      	mov	r0, r4
   d60b0:	f7ff ffba 	bl	d6028 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d60b4:	28a0      	cmp	r0, #160	; 0xa0
   d60b6:	d003      	beq.n	d60c0 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5a>
  {
    delay(10);
   d60b8:	200a      	movs	r0, #10
   d60ba:	f001 fc01 	bl	d78c0 <delay>
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
   d60be:	e7f5      	b.n	d60ac <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x46>
  {
    delay(10);
  }
  delay(50);
   d60c0:	2032      	movs	r0, #50	; 0x32
   d60c2:	f001 fbfd 	bl	d78c0 <delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d60c6:	2200      	movs	r2, #0
   d60c8:	213e      	movs	r1, #62	; 0x3e
   d60ca:	4620      	mov	r0, r4
   d60cc:	f7ff ff86 	bl	d5fdc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d60d0:	200a      	movs	r0, #10
   d60d2:	f001 fbf5 	bl	d78c0 <delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
   d60d6:	2200      	movs	r2, #0
   d60d8:	2107      	movs	r1, #7
   d60da:	4620      	mov	r0, r4
   d60dc:	f7ff ff7e 	bl	d5fdc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d60e0:	2200      	movs	r2, #0
   d60e2:	213f      	movs	r1, #63	; 0x3f
   d60e4:	4620      	mov	r0, r4
   d60e6:	f7ff ff79 	bl	d5fdc <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d60ea:	200a      	movs	r0, #10
   d60ec:	f001 fbe8 	bl	d78c0 <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
   d60f0:	4629      	mov	r1, r5
   d60f2:	4620      	mov	r0, r4
   d60f4:	f7ff ff8d 	bl	d6012 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d60f8:	2014      	movs	r0, #20
   d60fa:	f001 fbe1 	bl	d78c0 <delay>

  return true;
   d60fe:	2001      	movs	r0, #1
   d6100:	bd38      	pop	{r3, r4, r5, pc}

000d6102 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
   d6102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6104:	4605      	mov	r5, r0
   d6106:	4616      	mov	r6, r2
   d6108:	461c      	mov	r4, r3
   d610a:	460f      	mov	r7, r1
  Wire.beginTransmission(_address);
   d610c:	f001 fe5a 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d6110:	7969      	ldrb	r1, [r5, #5]
   d6112:	f001 f929 	bl	d7368 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg);
   d6116:	f001 fe55 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d611a:	6803      	ldr	r3, [r0, #0]
   d611c:	4639      	mov	r1, r7
   d611e:	689b      	ldr	r3, [r3, #8]
   d6120:	4798      	blx	r3
  Wire.endTransmission();
   d6122:	f001 fe4f 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d6126:	f001 f927 	bl	d7378 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_address, (byte)len);
   d612a:	f001 fe4b 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d612e:	4622      	mov	r2, r4
   d6130:	7969      	ldrb	r1, [r5, #5]
   d6132:	f001 f916 	bl	d7362 <_ZN7TwoWire11requestFromEhh>
   d6136:	3c01      	subs	r4, #1
   d6138:	1e75      	subs	r5, r6, #1
   d613a:	4434      	add	r4, r6

  for (uint8_t i = 0; i < len; i++)
   d613c:	42a5      	cmp	r5, r4
   d613e:	d007      	beq.n	d6150 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x4e>
  {
      buffer[i] = Wire.read();
   d6140:	f001 fe40 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d6144:	6803      	ldr	r3, [r0, #0]
   d6146:	695b      	ldr	r3, [r3, #20]
   d6148:	4798      	blx	r3
   d614a:	f805 0f01 	strb.w	r0, [r5, #1]!
  Wire.beginTransmission(_address);
  Wire.write((uint8_t)reg);
  Wire.endTransmission();
  Wire.requestFrom(_address, (byte)len);

  for (uint8_t i = 0; i < len; i++)
   d614e:	e7f5      	b.n	d613c <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x3a>
      buffer[i] = Wire.read();
  }

  /* ToDo: Check for errors! */
  return true;
}
   d6150:	2001      	movs	r0, #1
   d6152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6154 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
   d6154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6156:	460d      	mov	r5, r1
   d6158:	4617      	mov	r7, r2
template <uint8_t N> class Vector
{
public:
    Vector()
    {
        memset(p_vec, 0, sizeof(double)*N);
   d615a:	2100      	movs	r1, #0
   d615c:	2218      	movs	r2, #24
   d615e:	4604      	mov	r4, r0
   d6160:	f002 fdd3 	bl	d8d0a <memset>
  imu::Vector<3> xyz;
  uint8_t buffer[6];
  memset (buffer, 0, 6);
   d6164:	2300      	movs	r3, #0
   d6166:	9300      	str	r3, [sp, #0]
   d6168:	f8ad 3004 	strh.w	r3, [sp, #4]

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d616c:	4628      	mov	r0, r5
   d616e:	2306      	movs	r3, #6
   d6170:	466a      	mov	r2, sp
   d6172:	4639      	mov	r1, r7
   d6174:	f7ff ffc5 	bl	d6102 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6178:	f89d 3000 	ldrb.w	r3, [sp]
   d617c:	f89d 0001 	ldrb.w	r0, [sp, #1]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6180:	f89d 6003 	ldrb.w	r6, [sp, #3]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6184:	f89d 5005 	ldrb.w	r5, [sp, #5]
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6188:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d618c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d6190:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6194:	f89d 3004 	ldrb.w	r3, [sp, #4]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
   d6198:	2f14      	cmp	r7, #20
  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d619a:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d619e:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d61a0:	b236      	sxth	r6, r6
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d61a2:	b22d      	sxth	r5, r5

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
   d61a4:	d023      	beq.n	d61ee <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9a>
   d61a6:	d803      	bhi.n	d61b0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5c>
   d61a8:	2f08      	cmp	r7, #8
   d61aa:	d037      	beq.n	d621c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d61ac:	2f0e      	cmp	r7, #14
   d61ae:	e004      	b.n	d61ba <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d61b0:	2f28      	cmp	r7, #40	; 0x28
   d61b2:	d033      	beq.n	d621c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d61b4:	2f2e      	cmp	r7, #46	; 0x2e
   d61b6:	d031      	beq.n	d621c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xc8>
   d61b8:	2f1a      	cmp	r7, #26
   d61ba:	d149      	bne.n	d6250 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xfc>
      xyz[1] = ((double)y)/900.0;
      xyz[2] = ((double)z)/900.0;
      break;
    case VECTOR_EULER:
      /* 1 degree = 16 LSB */
      xyz[0] = ((double)x)/16.0;
   d61bc:	f002 f9de 	bl	d857c <__aeabi_i2d>
   d61c0:	2200      	movs	r2, #0
   d61c2:	4b25      	ldr	r3, [pc, #148]	; (d6258 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d61c4:	f002 fa40 	bl	d8648 <__aeabi_dmul>
   d61c8:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/16.0;
   d61cc:	4630      	mov	r0, r6
   d61ce:	f002 f9d5 	bl	d857c <__aeabi_i2d>
   d61d2:	2200      	movs	r2, #0
   d61d4:	4b20      	ldr	r3, [pc, #128]	; (d6258 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d61d6:	f002 fa37 	bl	d8648 <__aeabi_dmul>
   d61da:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/16.0;
   d61de:	4628      	mov	r0, r5
   d61e0:	f002 f9cc 	bl	d857c <__aeabi_i2d>
   d61e4:	2200      	movs	r2, #0
   d61e6:	4b1c      	ldr	r3, [pc, #112]	; (d6258 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x104>)
   d61e8:	f002 fa2e 	bl	d8648 <__aeabi_dmul>
   d61ec:	e02e      	b.n	d624c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xf8>
      xyz[1] = ((double)y)/16.0;
      xyz[2] = ((double)z)/16.0;
      break;
    case VECTOR_GYROSCOPE:
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
   d61ee:	f002 f9c5 	bl	d857c <__aeabi_i2d>
   d61f2:	2200      	movs	r2, #0
   d61f4:	4b19      	ldr	r3, [pc, #100]	; (d625c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d61f6:	f002 fb51 	bl	d889c <__aeabi_ddiv>
   d61fa:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/900.0;
   d61fe:	4630      	mov	r0, r6
   d6200:	f002 f9bc 	bl	d857c <__aeabi_i2d>
   d6204:	2200      	movs	r2, #0
   d6206:	4b15      	ldr	r3, [pc, #84]	; (d625c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d6208:	f002 fb48 	bl	d889c <__aeabi_ddiv>
   d620c:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/900.0;
   d6210:	4628      	mov	r0, r5
   d6212:	f002 f9b3 	bl	d857c <__aeabi_i2d>
   d6216:	2200      	movs	r2, #0
   d6218:	4b10      	ldr	r3, [pc, #64]	; (d625c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x108>)
   d621a:	e015      	b.n	d6248 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xf4>
      break;
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
   d621c:	f002 f9ae 	bl	d857c <__aeabi_i2d>
   d6220:	2200      	movs	r2, #0
   d6222:	4b0f      	ldr	r3, [pc, #60]	; (d6260 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6224:	f002 fb3a 	bl	d889c <__aeabi_ddiv>
   d6228:	e9c4 0100 	strd	r0, r1, [r4]
      xyz[1] = ((double)y)/100.0;
   d622c:	4630      	mov	r0, r6
   d622e:	f002 f9a5 	bl	d857c <__aeabi_i2d>
   d6232:	2200      	movs	r2, #0
   d6234:	4b0a      	ldr	r3, [pc, #40]	; (d6260 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6236:	f002 fb31 	bl	d889c <__aeabi_ddiv>
   d623a:	e9c4 0102 	strd	r0, r1, [r4, #8]
      xyz[2] = ((double)z)/100.0;
   d623e:	4628      	mov	r0, r5
   d6240:	f002 f99c 	bl	d857c <__aeabi_i2d>
   d6244:	4b06      	ldr	r3, [pc, #24]	; (d6260 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x10c>)
   d6246:	2200      	movs	r2, #0
   d6248:	f002 fb28 	bl	d889c <__aeabi_ddiv>
   d624c:	e9c4 0104 	strd	r0, r1, [r4, #16]
      break;
  }

  return xyz;
}
   d6250:	4620      	mov	r0, r4
   d6252:	b003      	add	sp, #12
   d6254:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6256:	bf00      	nop
   d6258:	3fb00000 	.word	0x3fb00000
   d625c:	408c2000 	.word	0x408c2000
   d6260:	40590000 	.word	0x40590000

000d6264 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
   d6264:	b570      	push	{r4, r5, r6, lr}
   d6266:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6268:	2624      	movs	r6, #36	; 0x24
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
   d626a:	b086      	sub	sp, #24
   d626c:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d626e:	4632      	mov	r2, r6
   d6270:	2100      	movs	r1, #0
   d6272:	4620      	mov	r0, r4
   d6274:	f002 fd49 	bl	d8d0a <memset>

  event->version   = sizeof(sensors_event_t);
   d6278:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
   d627a:	68ab      	ldr	r3, [r5, #8]
   d627c:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
   d627e:	2303      	movs	r3, #3
   d6280:	60a3      	str	r3, [r4, #8]
   d6282:	f000 fa77 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6286:	221a      	movs	r2, #26
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_ORIENTATION;
  event->timestamp = millis();
   d6288:	6120      	str	r0, [r4, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d628a:	4629      	mov	r1, r5
   d628c:	4668      	mov	r0, sp
   d628e:	f7ff ff61 	bl	d6154 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6292:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6296:	f002 fccf 	bl	d8c38 <__aeabi_d2f>
   d629a:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d629c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d62a0:	f002 fcca 	bl	d8c38 <__aeabi_d2f>
   d62a4:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d62a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d62aa:	f002 fcc5 	bl	d8c38 <__aeabi_d2f>
   d62ae:	61e0      	str	r0, [r4, #28]

  return true;
}
   d62b0:	2001      	movs	r0, #1
   d62b2:	b006      	add	sp, #24
   d62b4:	bd70      	pop	{r4, r5, r6, pc}

000d62b6 <_GLOBAL__sub_I__ZN15Adafruit_BNO055C2Elh>:
   d62b6:	f000 ba7d 	b.w	d67b4 <HAL_Pin_Map>

000d62ba <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d62ba:	f000 ba7b 	b.w	d67b4 <HAL_Pin_Map>
	...

000d62c0 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d62c0:	b508      	push	{r3, lr}
   d62c2:	f000 fa77 	bl	d67b4 <HAL_Pin_Map>
   d62c6:	4b01      	ldr	r3, [pc, #4]	; (d62cc <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d62c8:	6018      	str	r0, [r3, #0]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	2003e320 	.word	0x2003e320

000d62d0 <_ZN8I2CSlaveD1Ev>:
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
	globalObj = this;
}

I2CSlave::~I2CSlave() {
   d62d0:	b510      	push	{r4, lr}
   d62d2:	4b05      	ldr	r3, [pc, #20]	; (d62e8 <_ZN8I2CSlaveD1Ev+0x18>)
   d62d4:	6003      	str	r3, [r0, #0]
   d62d6:	4604      	mov	r4, r0
	free(registers);
   d62d8:	6900      	ldr	r0, [r0, #16]
   d62da:	f000 fb89 	bl	d69f0 <free>
	globalObj = 0;
   d62de:	4b03      	ldr	r3, [pc, #12]	; (d62ec <_ZN8I2CSlaveD1Ev+0x1c>)
   d62e0:	2200      	movs	r2, #0
   d62e2:	601a      	str	r2, [r3, #0]
}
   d62e4:	4620      	mov	r0, r4
   d62e6:	bd10      	pop	{r4, pc}
   d62e8:	000d926c 	.word	0x000d926c
   d62ec:	2003e324 	.word	0x2003e324

000d62f0 <_ZN8I2CSlaveD0Ev>:
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
	globalObj = this;
}

I2CSlave::~I2CSlave() {
   d62f0:	b510      	push	{r4, lr}
   d62f2:	4604      	mov	r4, r0
	free(registers);
	globalObj = 0;
}
   d62f4:	f7ff ffec 	bl	d62d0 <_ZN8I2CSlaveD1Ev>
   d62f8:	4620      	mov	r0, r4
   d62fa:	f7fd fed0 	bl	d409e <_ZdlPv>
   d62fe:	4620      	mov	r0, r4
   d6300:	bd10      	pop	{r4, pc}
	...

000d6304 <_ZN8I2CSlaveC1ER7TwoWirehj>:
#include "Particle.h"
#include "I2CSlaveRK.h"

static I2CSlave *globalObj = 0;

I2CSlave::I2CSlave(TwoWire &wire, uint8_t addr, size_t numRegisters) :
   d6304:	b510      	push	{r4, lr}
   d6306:	4604      	mov	r4, r0
		wire(wire), addr(addr), numRegisters(numRegisters),
		nextReadAddr(0), registerSetFlags(0) {
   d6308:	4807      	ldr	r0, [pc, #28]	; (d6328 <_ZN8I2CSlaveC1ER7TwoWirehj+0x24>)
   d630a:	7222      	strb	r2, [r4, #8]
   d630c:	2200      	movs	r2, #0
   d630e:	e884 0003 	stmia.w	r4, {r0, r1}
   d6312:	60e3      	str	r3, [r4, #12]
   d6314:	82a2      	strh	r2, [r4, #20]
   d6316:	61a2      	str	r2, [r4, #24]
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d6318:	0098      	lsls	r0, r3, #2
   d631a:	f000 fb61 	bl	d69e0 <malloc>
	globalObj = this;
   d631e:	4b03      	ldr	r3, [pc, #12]	; (d632c <_ZN8I2CSlaveC1ER7TwoWirehj+0x28>)
static I2CSlave *globalObj = 0;

I2CSlave::I2CSlave(TwoWire &wire, uint8_t addr, size_t numRegisters) :
		wire(wire), addr(addr), numRegisters(numRegisters),
		nextReadAddr(0), registerSetFlags(0) {
	registers = (uint32_t *)malloc(numRegisters * sizeof(uint32_t));
   d6320:	6120      	str	r0, [r4, #16]
	globalObj = this;
   d6322:	601c      	str	r4, [r3, #0]
}
   d6324:	4620      	mov	r0, r4
   d6326:	bd10      	pop	{r4, pc}
   d6328:	000d926c 	.word	0x000d926c
   d632c:	2003e324 	.word	0x2003e324

000d6330 <_ZN8I2CSlave5beginEv>:
I2CSlave::~I2CSlave() {
	free(registers);
	globalObj = 0;
}

void I2CSlave::begin() {
   d6330:	b510      	push	{r4, lr}
   d6332:	4604      	mov	r4, r0

	wire.begin(addr);
   d6334:	7a01      	ldrb	r1, [r0, #8]
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	f001 f804 	bl	d7344 <_ZN7TwoWire5beginEh>
	wire.onReceive(receiveEventStatic);
   d633c:	6860      	ldr	r0, [r4, #4]
   d633e:	4904      	ldr	r1, [pc, #16]	; (d6350 <_ZN8I2CSlave5beginEv+0x20>)
   d6340:	f001 f81d 	bl	d737e <_ZN7TwoWire9onReceiveEPFviE>
	wire.onRequest(requestEventStatic);
   d6344:	6860      	ldr	r0, [r4, #4]
   d6346:	4903      	ldr	r1, [pc, #12]	; (d6354 <_ZN8I2CSlave5beginEv+0x24>)
}
   d6348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void I2CSlave::begin() {

	wire.begin(addr);
	wire.onReceive(receiveEventStatic);
	wire.onRequest(requestEventStatic);
   d634c:	f001 b81b 	b.w	d7386 <_ZN7TwoWire9onRequestEPFvvE>
   d6350:	000d644d 	.word	0x000d644d
   d6354:	000d648d 	.word	0x000d648d

000d6358 <_ZNK8I2CSlave11getRegisterEt>:
}

uint32_t I2CSlave::getRegister(uint16_t regAddr) const {
	if (regAddr < numRegisters) {
   d6358:	68c3      	ldr	r3, [r0, #12]
   d635a:	4299      	cmp	r1, r3
		return registers[regAddr];
   d635c:	bf3a      	itte	cc
   d635e:	6903      	ldrcc	r3, [r0, #16]
   d6360:	f853 0021 	ldrcc.w	r0, [r3, r1, lsl #2]
	}
	else {
		return 0;
   d6364:	2000      	movcs	r0, #0
	}
}
   d6366:	4770      	bx	lr

000d6368 <_ZN8I2CSlave11setRegisterEtm>:

void I2CSlave::setRegister(uint16_t regAddr, uint32_t value) {
	if (regAddr < numRegisters) {
   d6368:	68c3      	ldr	r3, [r0, #12]
   d636a:	4299      	cmp	r1, r3
		registers[regAddr] = value;
   d636c:	bf3c      	itt	cc
   d636e:	6903      	ldrcc	r3, [r0, #16]
   d6370:	f843 2021 	strcc.w	r2, [r3, r1, lsl #2]
   d6374:	4770      	bx	lr

000d6376 <_ZN8I2CSlave14getRegisterSetERt>:
	}
}

bool I2CSlave::getRegisterSet(uint16_t &regAddr) {
   d6376:	b570      	push	{r4, r5, r6, lr}
	if (registerSetFlags) {
   d6378:	6983      	ldr	r3, [r0, #24]
   d637a:	b18b      	cbz	r3, d63a0 <_ZN8I2CSlave14getRegisterSetERt+0x2a>
   d637c:	2200      	movs	r2, #0
		for(uint16_t ii = 0; ii < 32; ii++) {
			if (registerSetFlags & (1 << ii)) {
   d637e:	2501      	movs	r5, #1
   d6380:	6983      	ldr	r3, [r0, #24]
   d6382:	fa05 f402 	lsl.w	r4, r5, r2
   d6386:	4023      	ands	r3, r4
   d6388:	b296      	uxth	r6, r2
   d638a:	d006      	beq.n	d639a <_ZN8I2CSlave14getRegisterSetERt+0x24>
				// Bit is set, return the address and clear the flag
				regAddr = ii;
   d638c:	800e      	strh	r6, [r1, #0]
				registerSetFlags &= ~(1 << ii);
   d638e:	6983      	ldr	r3, [r0, #24]
   d6390:	ea23 0304 	bic.w	r3, r3, r4
   d6394:	6183      	str	r3, [r0, #24]
				return true;
   d6396:	2001      	movs	r0, #1
   d6398:	bd70      	pop	{r4, r5, r6, pc}
   d639a:	3201      	adds	r2, #1
	}
}

bool I2CSlave::getRegisterSet(uint16_t &regAddr) {
	if (registerSetFlags) {
		for(uint16_t ii = 0; ii < 32; ii++) {
   d639c:	2a20      	cmp	r2, #32
   d639e:	d1ef      	bne.n	d6380 <_ZN8I2CSlave14getRegisterSetERt+0xa>
			}
		}
		return false;
	}
	else {
		return false;
   d63a0:	4618      	mov	r0, r3
	}
}
   d63a2:	bd70      	pop	{r4, r5, r6, pc}

000d63a4 <_ZN8I2CSlave12receiveEventEi>:


void I2CSlave::receiveEvent(int numBytes) {

	if (numBytes == sizeof(uint16_t)) {
   d63a4:	2902      	cmp	r1, #2
		return false;
	}
}


void I2CSlave::receiveEvent(int numBytes) {
   d63a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63aa:	4604      	mov	r4, r0

	if (numBytes == sizeof(uint16_t)) {
   d63ac:	d10f      	bne.n	d63ce <_ZN8I2CSlave12receiveEventEi+0x2a>
		// This is just an  address to read the register. Save for requestEvent.
		nextReadAddr = (wire.read() & 0xff);
   d63ae:	6840      	ldr	r0, [r0, #4]
   d63b0:	6803      	ldr	r3, [r0, #0]
   d63b2:	695b      	ldr	r3, [r3, #20]
   d63b4:	4798      	blx	r3
   d63b6:	b2c0      	uxtb	r0, r0
   d63b8:	82a0      	strh	r0, [r4, #20]
		nextReadAddr |= (wire.read() & 0xff) << 8;
   d63ba:	6860      	ldr	r0, [r4, #4]
   d63bc:	6803      	ldr	r3, [r0, #0]
   d63be:	695b      	ldr	r3, [r3, #20]
   d63c0:	4798      	blx	r3
   d63c2:	8aa3      	ldrh	r3, [r4, #20]
   d63c4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d63c8:	82a0      	strh	r0, [r4, #20]
   d63ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	if (numBytes == (sizeof(uint16_t) + sizeof(uint32_t))) {
   d63ce:	2906      	cmp	r1, #6
   d63d0:	d139      	bne.n	d6446 <_ZN8I2CSlave12receiveEventEi+0xa2>
		// Set a register
		uint16_t writeAddr = (wire.read() & 0xff);
   d63d2:	6840      	ldr	r0, [r0, #4]
   d63d4:	6803      	ldr	r3, [r0, #0]
   d63d6:	695b      	ldr	r3, [r3, #20]
   d63d8:	4798      	blx	r3
   d63da:	4605      	mov	r5, r0
		writeAddr |= (wire.read() & 0xff) << 8;
   d63dc:	6860      	ldr	r0, [r4, #4]
   d63de:	6803      	ldr	r3, [r0, #0]
   d63e0:	695b      	ldr	r3, [r3, #20]
   d63e2:	4798      	blx	r3
   d63e4:	b2ed      	uxtb	r5, r5
   d63e6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   d63ea:	b285      	uxth	r5, r0

		uint32_t value = (wire.read() & 0xff);
   d63ec:	6860      	ldr	r0, [r4, #4]
   d63ee:	6803      	ldr	r3, [r0, #0]
   d63f0:	695b      	ldr	r3, [r3, #20]
   d63f2:	4798      	blx	r3
   d63f4:	4680      	mov	r8, r0
		value |= (wire.read() & 0xff) << 8;
   d63f6:	6860      	ldr	r0, [r4, #4]
   d63f8:	6803      	ldr	r3, [r0, #0]
   d63fa:	695b      	ldr	r3, [r3, #20]
   d63fc:	4798      	blx	r3
   d63fe:	4606      	mov	r6, r0
		value |= (wire.read() & 0xff) << 16;
   d6400:	6860      	ldr	r0, [r4, #4]
   d6402:	6803      	ldr	r3, [r0, #0]
   d6404:	695b      	ldr	r3, [r3, #20]
   d6406:	4798      	blx	r3
   d6408:	4607      	mov	r7, r0
		value |= (wire.read() & 0xff) << 24;
   d640a:	6860      	ldr	r0, [r4, #4]
   d640c:	6803      	ldr	r3, [r0, #0]
   d640e:	695b      	ldr	r3, [r3, #20]
   d6410:	4798      	blx	r3

		if (writeAddr < numRegisters) {
   d6412:	68e3      	ldr	r3, [r4, #12]
   d6414:	429d      	cmp	r5, r3
   d6416:	d216      	bcs.n	d6446 <_ZN8I2CSlave12receiveEventEi+0xa2>
   d6418:	fa5f f888 	uxtb.w	r8, r8
   d641c:	0236      	lsls	r6, r6, #8
   d641e:	ea48 6000 	orr.w	r0, r8, r0, lsl #24
   d6422:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   d6426:	4306      	orrs	r6, r0
			registers[writeAddr] = value;
   d6428:	0438      	lsls	r0, r7, #16
   d642a:	6923      	ldr	r3, [r4, #16]
   d642c:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   d6430:	4330      	orrs	r0, r6

			if (writeAddr < 32) {
   d6432:	2d1f      	cmp	r5, #31
		value |= (wire.read() & 0xff) << 8;
		value |= (wire.read() & 0xff) << 16;
		value |= (wire.read() & 0xff) << 24;

		if (writeAddr < numRegisters) {
			registers[writeAddr] = value;
   d6434:	f843 0025 	str.w	r0, [r3, r5, lsl #2]

			if (writeAddr < 32) {
   d6438:	d805      	bhi.n	d6446 <_ZN8I2CSlave12receiveEventEi+0xa2>
				registerSetFlags |= 1 << writeAddr;
   d643a:	69a3      	ldr	r3, [r4, #24]
   d643c:	2001      	movs	r0, #1
   d643e:	fa00 f505 	lsl.w	r5, r0, r5
   d6442:	431d      	orrs	r5, r3
   d6444:	61a5      	str	r5, [r4, #24]
   d6446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d644c <_ZN8I2CSlave18receiveEventStaticEi>:
	wire.write((const uint8_t *)&value, sizeof(value));
}

// [static]
void I2CSlave::receiveEventStatic(int numBytes) {
	if (globalObj) {
   d644c:	4b03      	ldr	r3, [pc, #12]	; (d645c <_ZN8I2CSlave18receiveEventStaticEi+0x10>)
	}
	wire.write((const uint8_t *)&value, sizeof(value));
}

// [static]
void I2CSlave::receiveEventStatic(int numBytes) {
   d644e:	4601      	mov	r1, r0
	if (globalObj) {
   d6450:	6818      	ldr	r0, [r3, #0]
   d6452:	b108      	cbz	r0, d6458 <_ZN8I2CSlave18receiveEventStaticEi+0xc>
		globalObj->receiveEvent(numBytes);
   d6454:	f7ff bfa6 	b.w	d63a4 <_ZN8I2CSlave12receiveEventEi>
   d6458:	4770      	bx	lr
   d645a:	bf00      	nop
   d645c:	2003e324 	.word	0x2003e324

000d6460 <_ZN8I2CSlave12requestEventEv>:
		}
	}

}

void I2CSlave::requestEvent() {
   d6460:	b507      	push	{r0, r1, r2, lr}
	// Request to read
	uint32_t value = 0;
   d6462:	2300      	movs	r3, #0
   d6464:	9301      	str	r3, [sp, #4]

	if (nextReadAddr < numRegisters) {
   d6466:	68c2      	ldr	r2, [r0, #12]
   d6468:	8a83      	ldrh	r3, [r0, #20]
   d646a:	4293      	cmp	r3, r2
		value = registers[nextReadAddr];
   d646c:	bf38      	it	cc
   d646e:	6902      	ldrcc	r2, [r0, #16]
	}
	wire.write((const uint8_t *)&value, sizeof(value));
   d6470:	6840      	ldr	r0, [r0, #4]
void I2CSlave::requestEvent() {
	// Request to read
	uint32_t value = 0;

	if (nextReadAddr < numRegisters) {
		value = registers[nextReadAddr];
   d6472:	bf3c      	itt	cc
   d6474:	f852 3023 	ldrcc.w	r3, [r2, r3, lsl #2]
   d6478:	9301      	strcc	r3, [sp, #4]
	}
	wire.write((const uint8_t *)&value, sizeof(value));
   d647a:	6803      	ldr	r3, [r0, #0]
   d647c:	2204      	movs	r2, #4
   d647e:	68db      	ldr	r3, [r3, #12]
   d6480:	eb0d 0102 	add.w	r1, sp, r2
   d6484:	4798      	blx	r3
}
   d6486:	b003      	add	sp, #12
   d6488:	f85d fb04 	ldr.w	pc, [sp], #4

000d648c <_ZN8I2CSlave18requestEventStaticEv>:
	}
}

// [static]
void I2CSlave::requestEventStatic() {
	if (globalObj) {
   d648c:	4b02      	ldr	r3, [pc, #8]	; (d6498 <_ZN8I2CSlave18requestEventStaticEv+0xc>)
   d648e:	6818      	ldr	r0, [r3, #0]
   d6490:	b108      	cbz	r0, d6496 <_ZN8I2CSlave18requestEventStaticEv+0xa>
		globalObj->requestEvent();
   d6492:	f7ff bfe5 	b.w	d6460 <_ZN8I2CSlave12requestEventEv>
   d6496:	4770      	bx	lr
   d6498:	2003e324 	.word	0x2003e324

000d649c <_GLOBAL__sub_I__ZN8I2CSlaveC2ER7TwoWirehj>:
   d649c:	f000 b98a 	b.w	d67b4 <HAL_Pin_Map>

000d64a0 <_GLOBAL__sub_I__ZN14I2CSlaveMasterC2ER7TwoWireh>:
   d64a0:	f000 b988 	b.w	d67b4 <HAL_Pin_Map>

000d64a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d64a4:	b508      	push	{r3, lr}
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <HAL_USB_USART_Init+0xc>)
   d64a8:	681b      	ldr	r3, [r3, #0]
   d64aa:	681b      	ldr	r3, [r3, #0]
   d64ac:	9301      	str	r3, [sp, #4]
   d64ae:	bd08      	pop	{r3, pc}
   d64b0:	0003024c 	.word	0x0003024c

000d64b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d64b4:	b508      	push	{r3, lr}
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <HAL_USB_USART_Begin+0xc>)
   d64b8:	681b      	ldr	r3, [r3, #0]
   d64ba:	685b      	ldr	r3, [r3, #4]
   d64bc:	9301      	str	r3, [sp, #4]
   d64be:	bd08      	pop	{r3, pc}
   d64c0:	0003024c 	.word	0x0003024c

000d64c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <HAL_USB_USART_Available_Data+0xc>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	691b      	ldr	r3, [r3, #16]
   d64cc:	9301      	str	r3, [sp, #4]
   d64ce:	bd08      	pop	{r3, pc}
   d64d0:	0003024c 	.word	0x0003024c

000d64d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	695b      	ldr	r3, [r3, #20]
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	0003024c 	.word	0x0003024c

000d64e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <HAL_USB_USART_Receive_Data+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	699b      	ldr	r3, [r3, #24]
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	0003024c 	.word	0x0003024c

000d64f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <HAL_USB_USART_Send_Data+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	69db      	ldr	r3, [r3, #28]
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	0003024c 	.word	0x0003024c

000d6504 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <HAL_USB_USART_Flush_Data+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	6a1b      	ldr	r3, [r3, #32]
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	0003024c 	.word	0x0003024c

000d6514 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <sock_setsockopt+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	699b      	ldr	r3, [r3, #24]
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	00030238 	.word	0x00030238

000d6524 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <sock_close+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	69db      	ldr	r3, [r3, #28]
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	00030238 	.word	0x00030238

000d6534 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <sock_connect+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	6a1b      	ldr	r3, [r3, #32]
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	00030238 	.word	0x00030238

000d6544 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <sock_recv+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	00030238 	.word	0x00030238

000d6554 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <sock_send+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	00030238 	.word	0x00030238

000d6564 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <sock_socket+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	00030238 	.word	0x00030238

000d6574 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <HAL_I2C_Begin+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	68db      	ldr	r3, [r3, #12]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	00030228 	.word	0x00030228

000d6584 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <HAL_I2C_Request_Data+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	695b      	ldr	r3, [r3, #20]
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	00030228 	.word	0x00030228

000d6594 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <HAL_I2C_Begin_Transmission+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	699b      	ldr	r3, [r3, #24]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	00030228 	.word	0x00030228

000d65a4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <HAL_I2C_End_Transmission+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	69db      	ldr	r3, [r3, #28]
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	00030228 	.word	0x00030228

000d65b4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <HAL_I2C_Write_Data+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	6a1b      	ldr	r3, [r3, #32]
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	00030228 	.word	0x00030228

000d65c4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <HAL_I2C_Available_Data+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	00030228 	.word	0x00030228

000d65d4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <HAL_I2C_Read_Data+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	00030228 	.word	0x00030228

000d65e4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <HAL_I2C_Peek_Data+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	00030228 	.word	0x00030228

000d65f4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <HAL_I2C_Flush_Data+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	00030228 	.word	0x00030228

000d6604 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <HAL_I2C_Is_Enabled+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	00030228 	.word	0x00030228

000d6614 <HAL_I2C_Set_Callback_On_Receive>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <HAL_I2C_Set_Callback_On_Receive+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	00030228 	.word	0x00030228

000d6624 <HAL_I2C_Set_Callback_On_Request>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <HAL_I2C_Set_Callback_On_Request+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030228 	.word	0x00030228

000d6634 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <HAL_I2C_Init+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030228 	.word	0x00030228

000d6644 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <HAL_USART_Init+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	681b      	ldr	r3, [r3, #0]
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	0003023c 	.word	0x0003023c

000d6654 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <HAL_USART_Write_Data+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	68db      	ldr	r3, [r3, #12]
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	0003023c 	.word	0x0003023c

000d6664 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <HAL_USART_Available_Data+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	691b      	ldr	r3, [r3, #16]
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	0003023c 	.word	0x0003023c

000d6674 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <HAL_USART_Read_Data+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	695b      	ldr	r3, [r3, #20]
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	0003023c 	.word	0x0003023c

000d6684 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <HAL_USART_Peek_Data+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	699b      	ldr	r3, [r3, #24]
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	0003023c 	.word	0x0003023c

000d6694 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <HAL_USART_Flush_Data+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	69db      	ldr	r3, [r3, #28]
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	0003023c 	.word	0x0003023c

000d66a4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <HAL_USART_Is_Enabled+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	6a1b      	ldr	r3, [r3, #32]
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	0003023c 	.word	0x0003023c

000d66b4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <HAL_USART_Available_Data_For_Write+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	0003023c 	.word	0x0003023c

000d66c4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <HAL_USART_BeginConfig+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	0003023c 	.word	0x0003023c

000d66d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b02      	ldr	r3, [pc, #8]	; (d66e0 <inet_inet_ntop+0xc>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	695b      	ldr	r3, [r3, #20]
   d66dc:	9301      	str	r3, [sp, #4]
   d66de:	bd08      	pop	{r3, pc}
   d66e0:	00030264 	.word	0x00030264

000d66e4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d66e4:	b508      	push	{r3, lr}
   d66e6:	4b02      	ldr	r3, [pc, #8]	; (d66f0 <inet_htonl+0xc>)
   d66e8:	681b      	ldr	r3, [r3, #0]
   d66ea:	6a1b      	ldr	r3, [r3, #32]
   d66ec:	9301      	str	r3, [sp, #4]
   d66ee:	bd08      	pop	{r3, pc}
   d66f0:	00030264 	.word	0x00030264

000d66f4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d66f4:	b508      	push	{r3, lr}
   d66f6:	4b02      	ldr	r3, [pc, #8]	; (d6700 <inet_htons+0xc>)
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	bd08      	pop	{r3, pc}
   d6700:	00030264 	.word	0x00030264

000d6704 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6704:	b508      	push	{r3, lr}
   d6706:	4b02      	ldr	r3, [pc, #8]	; (d6710 <os_thread_is_current+0xc>)
   d6708:	681b      	ldr	r3, [r3, #0]
   d670a:	689b      	ldr	r3, [r3, #8]
   d670c:	9301      	str	r3, [sp, #4]
   d670e:	bd08      	pop	{r3, pc}
   d6710:	00030248 	.word	0x00030248

000d6714 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6714:	b508      	push	{r3, lr}
   d6716:	4b02      	ldr	r3, [pc, #8]	; (d6720 <os_thread_join+0xc>)
   d6718:	681b      	ldr	r3, [r3, #0]
   d671a:	691b      	ldr	r3, [r3, #16]
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	bd08      	pop	{r3, pc}
   d6720:	00030248 	.word	0x00030248

000d6724 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <os_thread_cleanup+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	695b      	ldr	r3, [r3, #20]
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	00030248 	.word	0x00030248

000d6734 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <os_mutex_create+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	00030248 	.word	0x00030248

000d6744 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <os_mutex_recursive_create+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	00030248 	.word	0x00030248

000d6754 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <HAL_RNG_GetRandomNumber+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	685b      	ldr	r3, [r3, #4]
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	00030218 	.word	0x00030218

000d6764 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <HAL_Delay_Microseconds+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	68db      	ldr	r3, [r3, #12]
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	00030218 	.word	0x00030218

000d6774 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	695b      	ldr	r3, [r3, #20]
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	00030218 	.word	0x00030218

000d6784 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6784:	b508      	push	{r3, lr}
   d6786:	4b02      	ldr	r3, [pc, #8]	; (d6790 <if_index_to_name+0xc>)
   d6788:	681b      	ldr	r3, [r3, #0]
   d678a:	695b      	ldr	r3, [r3, #20]
   d678c:	9301      	str	r3, [sp, #4]
   d678e:	bd08      	pop	{r3, pc}
   d6790:	0003026c 	.word	0x0003026c

000d6794 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6794:	b508      	push	{r3, lr}
   d6796:	4b02      	ldr	r3, [pc, #8]	; (d67a0 <HAL_SPI_Init+0xc>)
   d6798:	681b      	ldr	r3, [r3, #0]
   d679a:	69db      	ldr	r3, [r3, #28]
   d679c:	9301      	str	r3, [sp, #4]
   d679e:	bd08      	pop	{r3, pc}
   d67a0:	00030230 	.word	0x00030230

000d67a4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d67a4:	b508      	push	{r3, lr}
   d67a6:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <HAL_SPI_Is_Enabled+0xc>)
   d67a8:	681b      	ldr	r3, [r3, #0]
   d67aa:	6a1b      	ldr	r3, [r3, #32]
   d67ac:	9301      	str	r3, [sp, #4]
   d67ae:	bd08      	pop	{r3, pc}
   d67b0:	00030230 	.word	0x00030230

000d67b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d67b4:	b508      	push	{r3, lr}
   d67b6:	4b02      	ldr	r3, [pc, #8]	; (d67c0 <HAL_Pin_Map+0xc>)
   d67b8:	681b      	ldr	r3, [r3, #0]
   d67ba:	681b      	ldr	r3, [r3, #0]
   d67bc:	9301      	str	r3, [sp, #4]
   d67be:	bd08      	pop	{r3, pc}
   d67c0:	0003022c 	.word	0x0003022c

000d67c4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d67c4:	b508      	push	{r3, lr}
   d67c6:	4b02      	ldr	r3, [pc, #8]	; (d67d0 <HAL_Pin_Mode+0xc>)
   d67c8:	681b      	ldr	r3, [r3, #0]
   d67ca:	689b      	ldr	r3, [r3, #8]
   d67cc:	9301      	str	r3, [sp, #4]
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	0003022c 	.word	0x0003022c

000d67d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d67d4:	b508      	push	{r3, lr}
   d67d6:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <HAL_Get_Pin_Mode+0xc>)
   d67d8:	681b      	ldr	r3, [r3, #0]
   d67da:	68db      	ldr	r3, [r3, #12]
   d67dc:	9301      	str	r3, [sp, #4]
   d67de:	bd08      	pop	{r3, pc}
   d67e0:	0003022c 	.word	0x0003022c

000d67e4 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <HAL_GPIO_Read+0xc>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	695b      	ldr	r3, [r3, #20]
   d67ec:	9301      	str	r3, [sp, #4]
   d67ee:	bd08      	pop	{r3, pc}
   d67f0:	0003022c 	.word	0x0003022c

000d67f4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d67f4:	b508      	push	{r3, lr}
   d67f6:	4b02      	ldr	r3, [pc, #8]	; (d6800 <HAL_Interrupts_Attach+0xc>)
   d67f8:	681b      	ldr	r3, [r3, #0]
   d67fa:	699b      	ldr	r3, [r3, #24]
   d67fc:	9301      	str	r3, [sp, #4]
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	0003022c 	.word	0x0003022c

000d6804 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
   d6804:	b508      	push	{r3, lr}
   d6806:	4b02      	ldr	r3, [pc, #8]	; (d6810 <HAL_Interrupts_Detach+0xc>)
   d6808:	681b      	ldr	r3, [r3, #0]
   d680a:	69db      	ldr	r3, [r3, #28]
   d680c:	9301      	str	r3, [sp, #4]
   d680e:	bd08      	pop	{r3, pc}
   d6810:	0003022c 	.word	0x0003022c

000d6814 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <HAL_Interrupts_Enable_All+0xc>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	6a1b      	ldr	r3, [r3, #32]
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	bd08      	pop	{r3, pc}
   d6820:	0003022c 	.word	0x0003022c

000d6824 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d6824:	b508      	push	{r3, lr}
   d6826:	4b02      	ldr	r3, [pc, #8]	; (d6830 <HAL_Interrupts_Disable_All+0xc>)
   d6828:	681b      	ldr	r3, [r3, #0]
   d682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	bd08      	pop	{r3, pc}
   d6830:	0003022c 	.word	0x0003022c

000d6834 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6834:	b508      	push	{r3, lr}
   d6836:	4b02      	ldr	r3, [pc, #8]	; (d6840 <netdb_freeaddrinfo+0xc>)
   d6838:	681b      	ldr	r3, [r3, #0]
   d683a:	689b      	ldr	r3, [r3, #8]
   d683c:	9301      	str	r3, [sp, #4]
   d683e:	bd08      	pop	{r3, pc}
   d6840:	00030268 	.word	0x00030268

000d6844 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6844:	b508      	push	{r3, lr}
   d6846:	4b02      	ldr	r3, [pc, #8]	; (d6850 <netdb_getaddrinfo+0xc>)
   d6848:	681b      	ldr	r3, [r3, #0]
   d684a:	68db      	ldr	r3, [r3, #12]
   d684c:	9301      	str	r3, [sp, #4]
   d684e:	bd08      	pop	{r3, pc}
   d6850:	00030268 	.word	0x00030268

000d6854 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d6854:	b508      	push	{r3, lr}
   d6856:	4b02      	ldr	r3, [pc, #8]	; (d6860 <LED_SetSignalingColor+0xc>)
   d6858:	681b      	ldr	r3, [r3, #0]
   d685a:	685b      	ldr	r3, [r3, #4]
   d685c:	9301      	str	r3, [sp, #4]
   d685e:	bd08      	pop	{r3, pc}
   d6860:	00030260 	.word	0x00030260

000d6864 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b02      	ldr	r3, [pc, #8]	; (d6870 <LED_Signaling_Start+0xc>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	689b      	ldr	r3, [r3, #8]
   d686c:	9301      	str	r3, [sp, #4]
   d686e:	bd08      	pop	{r3, pc}
   d6870:	00030260 	.word	0x00030260

000d6874 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d6874:	b508      	push	{r3, lr}
   d6876:	4b02      	ldr	r3, [pc, #8]	; (d6880 <LED_Signaling_Stop+0xc>)
   d6878:	681b      	ldr	r3, [r3, #0]
   d687a:	68db      	ldr	r3, [r3, #12]
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	bd08      	pop	{r3, pc}
   d6880:	00030260 	.word	0x00030260

000d6884 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d6884:	b508      	push	{r3, lr}
   d6886:	4b02      	ldr	r3, [pc, #8]	; (d6890 <LED_RGB_IsOverRidden+0xc>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	699b      	ldr	r3, [r3, #24]
   d688c:	9301      	str	r3, [sp, #4]
   d688e:	bd08      	pop	{r3, pc}
   d6890:	00030260 	.word	0x00030260

000d6894 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d6894:	b508      	push	{r3, lr}
   d6896:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <LED_On+0xc>)
   d6898:	681b      	ldr	r3, [r3, #0]
   d689a:	69db      	ldr	r3, [r3, #28]
   d689c:	9301      	str	r3, [sp, #4]
   d689e:	bd08      	pop	{r3, pc}
   d68a0:	00030260 	.word	0x00030260

000d68a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d68a4:	b508      	push	{r3, lr}
   d68a6:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <panic_+0xc>)
   d68a8:	681b      	ldr	r3, [r3, #0]
   d68aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	bd08      	pop	{r3, pc}
   d68b0:	00030260 	.word	0x00030260

000d68b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d68b4:	b508      	push	{r3, lr}
   d68b6:	4b02      	ldr	r3, [pc, #8]	; (d68c0 <log_message+0xc>)
   d68b8:	681b      	ldr	r3, [r3, #0]
   d68ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d68bc:	9301      	str	r3, [sp, #4]
   d68be:	bd08      	pop	{r3, pc}
   d68c0:	00030260 	.word	0x00030260

000d68c4 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d68c4:	b508      	push	{r3, lr}
   d68c6:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <spark_deviceID+0xc>)
   d68c8:	681b      	ldr	r3, [r3, #0]
   d68ca:	69db      	ldr	r3, [r3, #28]
   d68cc:	9301      	str	r3, [sp, #4]
   d68ce:	bd08      	pop	{r3, pc}
   d68d0:	00030244 	.word	0x00030244

000d68d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d68d4:	b508      	push	{r3, lr}
   d68d6:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d68d8:	681b      	ldr	r3, [r3, #0]
   d68da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	00030244 	.word	0x00030244

000d68e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d68e4:	b508      	push	{r3, lr}
   d68e6:	4b02      	ldr	r3, [pc, #8]	; (d68f0 <network_connect+0xc>)
   d68e8:	681b      	ldr	r3, [r3, #0]
   d68ea:	685b      	ldr	r3, [r3, #4]
   d68ec:	9301      	str	r3, [sp, #4]
   d68ee:	bd08      	pop	{r3, pc}
   d68f0:	00030240 	.word	0x00030240

000d68f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b02      	ldr	r3, [pc, #8]	; (d6900 <network_connecting+0xc>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	689b      	ldr	r3, [r3, #8]
   d68fc:	9301      	str	r3, [sp, #4]
   d68fe:	bd08      	pop	{r3, pc}
   d6900:	00030240 	.word	0x00030240

000d6904 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <network_disconnect+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	68db      	ldr	r3, [r3, #12]
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	00030240 	.word	0x00030240

000d6914 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <network_ready+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	691b      	ldr	r3, [r3, #16]
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030240 	.word	0x00030240

000d6924 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <network_on+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	695b      	ldr	r3, [r3, #20]
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030240 	.word	0x00030240

000d6934 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <network_off+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	699b      	ldr	r3, [r3, #24]
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	00030240 	.word	0x00030240

000d6944 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <network_listen+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	69db      	ldr	r3, [r3, #28]
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	00030240 	.word	0x00030240

000d6954 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b02      	ldr	r3, [pc, #8]	; (d6960 <network_listening+0xc>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	6a1b      	ldr	r3, [r3, #32]
   d695c:	9301      	str	r3, [sp, #4]
   d695e:	bd08      	pop	{r3, pc}
   d6960:	00030240 	.word	0x00030240

000d6964 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6964:	b508      	push	{r3, lr}
   d6966:	4b02      	ldr	r3, [pc, #8]	; (d6970 <network_set_listen_timeout+0xc>)
   d6968:	681b      	ldr	r3, [r3, #0]
   d696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d696c:	9301      	str	r3, [sp, #4]
   d696e:	bd08      	pop	{r3, pc}
   d6970:	00030240 	.word	0x00030240

000d6974 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6974:	b508      	push	{r3, lr}
   d6976:	4b02      	ldr	r3, [pc, #8]	; (d6980 <network_get_listen_timeout+0xc>)
   d6978:	681b      	ldr	r3, [r3, #0]
   d697a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	bd08      	pop	{r3, pc}
   d6980:	00030240 	.word	0x00030240

000d6984 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6984:	b508      	push	{r3, lr}
   d6986:	4b02      	ldr	r3, [pc, #8]	; (d6990 <set_system_mode+0xc>)
   d6988:	681b      	ldr	r3, [r3, #0]
   d698a:	685b      	ldr	r3, [r3, #4]
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	00030220 	.word	0x00030220

000d6994 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <system_delay_ms+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	695b      	ldr	r3, [r3, #20]
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	00030220 	.word	0x00030220

000d69a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b03      	ldr	r3, [pc, #12]	; (d69b4 <system_ctrl_set_app_request_handler+0x10>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d69ae:	9301      	str	r3, [sp, #4]
   d69b0:	bd08      	pop	{r3, pc}
   d69b2:	0000      	.short	0x0000
   d69b4:	00030220 	.word	0x00030220

000d69b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d69b8:	b508      	push	{r3, lr}
   d69ba:	4b03      	ldr	r3, [pc, #12]	; (d69c8 <system_ctrl_set_result+0x10>)
   d69bc:	681b      	ldr	r3, [r3, #0]
   d69be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d69c2:	9301      	str	r3, [sp, #4]
   d69c4:	bd08      	pop	{r3, pc}
   d69c6:	0000      	.short	0x0000
   d69c8:	00030220 	.word	0x00030220

000d69cc <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b03      	ldr	r3, [pc, #12]	; (d69dc <system_sleep_pins+0x10>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d69d6:	9301      	str	r3, [sp, #4]
   d69d8:	bd08      	pop	{r3, pc}
   d69da:	0000      	.short	0x0000
   d69dc:	00030220 	.word	0x00030220

000d69e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <malloc+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	681b      	ldr	r3, [r3, #0]
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	0003021c 	.word	0x0003021c

000d69f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <free+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	685b      	ldr	r3, [r3, #4]
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	0003021c 	.word	0x0003021c

000d6a00 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <realloc+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	689b      	ldr	r3, [r3, #8]
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	0003021c 	.word	0x0003021c

000d6a10 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <vsnprintf+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	0003021c 	.word	0x0003021c

000d6a20 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <abort+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	0003021c 	.word	0x0003021c

000d6a30 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <__errno+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	0003021c 	.word	0x0003021c

000d6a40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6a40:	2300      	movs	r3, #0
   d6a42:	461a      	mov	r2, r3
   d6a44:	6840      	ldr	r0, [r0, #4]
   d6a46:	f7ff bf4d 	b.w	d68e4 <network_connect>

000d6a4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6a4a:	2200      	movs	r2, #0
   d6a4c:	2102      	movs	r1, #2
   d6a4e:	6840      	ldr	r0, [r0, #4]
   d6a50:	f7ff bf58 	b.w	d6904 <network_disconnect>

000d6a54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6a54:	2200      	movs	r2, #0
   d6a56:	4611      	mov	r1, r2
   d6a58:	6840      	ldr	r0, [r0, #4]
   d6a5a:	f7ff bf4b 	b.w	d68f4 <network_connecting>

000d6a5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6a5e:	2200      	movs	r2, #0
   d6a60:	4611      	mov	r1, r2
   d6a62:	6840      	ldr	r0, [r0, #4]
   d6a64:	f7ff bf56 	b.w	d6914 <network_ready>

000d6a68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6a68:	2300      	movs	r3, #0
   d6a6a:	461a      	mov	r2, r3
   d6a6c:	4619      	mov	r1, r3
   d6a6e:	6840      	ldr	r0, [r0, #4]
   d6a70:	f7ff bf58 	b.w	d6924 <network_on>

000d6a74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6a74:	2300      	movs	r3, #0
   d6a76:	461a      	mov	r2, r3
   d6a78:	4619      	mov	r1, r3
   d6a7a:	6840      	ldr	r0, [r0, #4]
   d6a7c:	f7ff bf5a 	b.w	d6934 <network_off>

000d6a80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6a80:	2200      	movs	r2, #0
   d6a82:	f081 0101 	eor.w	r1, r1, #1
   d6a86:	6840      	ldr	r0, [r0, #4]
   d6a88:	f7ff bf5c 	b.w	d6944 <network_listen>

000d6a8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6a8c:	2200      	movs	r2, #0
   d6a8e:	6840      	ldr	r0, [r0, #4]
   d6a90:	f7ff bf68 	b.w	d6964 <network_set_listen_timeout>

000d6a94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6a94:	2200      	movs	r2, #0
   d6a96:	4611      	mov	r1, r2
   d6a98:	6840      	ldr	r0, [r0, #4]
   d6a9a:	f7ff bf6b 	b.w	d6974 <network_get_listen_timeout>

000d6a9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6a9e:	2200      	movs	r2, #0
   d6aa0:	4611      	mov	r1, r2
   d6aa2:	6840      	ldr	r0, [r0, #4]
   d6aa4:	f7ff bf56 	b.w	d6954 <network_listening>

000d6aa8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6aa8:	b570      	push	{r4, r5, r6, lr}
   d6aaa:	b08c      	sub	sp, #48	; 0x30
   d6aac:	4614      	mov	r4, r2
   d6aae:	4606      	mov	r6, r0
    IPAddress addr;
   d6ab0:	f000 fd8c 	bl	d75cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ab4:	ab0c      	add	r3, sp, #48	; 0x30
   d6ab6:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6ab8:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6aba:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6abe:	4620      	mov	r0, r4
   d6ac0:	f7ff fec0 	bl	d6844 <netdb_getaddrinfo>
    if (!r && ai) {
   d6ac4:	4601      	mov	r1, r0
   d6ac6:	bb58      	cbnz	r0, d6b20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d6ac8:	9b00      	ldr	r3, [sp, #0]
   d6aca:	b34b      	cbz	r3, d6b20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d6acc:	685a      	ldr	r2, [r3, #4]
   d6ace:	2a02      	cmp	r2, #2
   d6ad0:	d00e      	beq.n	d6af0 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d6ad2:	2a0a      	cmp	r2, #10
   d6ad4:	d124      	bne.n	d6b20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d6ad6:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d6ad8:	2211      	movs	r2, #17
   d6ada:	a801      	add	r0, sp, #4
   d6adc:	f002 f915 	bl	d8d0a <memset>
                a.v = 6;
   d6ae0:	2306      	movs	r3, #6
   d6ae2:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ae6:	ad01      	add	r5, sp, #4
   d6ae8:	f104 0308 	add.w	r3, r4, #8
   d6aec:	3418      	adds	r4, #24
   d6aee:	e005      	b.n	d6afc <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6af0:	6959      	ldr	r1, [r3, #20]
   d6af2:	4630      	mov	r0, r6
   d6af4:	3104      	adds	r1, #4
   d6af6:	f000 fdac 	bl	d7652 <_ZN9IPAddressaSEPKh>
                break;
   d6afa:	e011      	b.n	d6b20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6afc:	6818      	ldr	r0, [r3, #0]
   d6afe:	6859      	ldr	r1, [r3, #4]
   d6b00:	462a      	mov	r2, r5
   d6b02:	c203      	stmia	r2!, {r0, r1}
   d6b04:	3308      	adds	r3, #8
   d6b06:	42a3      	cmp	r3, r4
   d6b08:	4615      	mov	r5, r2
   d6b0a:	d1f7      	bne.n	d6afc <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d6b0c:	a901      	add	r1, sp, #4
   d6b0e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6b10:	ad07      	add	r5, sp, #28
   d6b12:	f000 fd69 	bl	d75e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b18:	1d34      	adds	r4, r6, #4
   d6b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b1c:	682b      	ldr	r3, [r5, #0]
   d6b1e:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d6b20:	9800      	ldr	r0, [sp, #0]
   d6b22:	f7ff fe87 	bl	d6834 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6b26:	4630      	mov	r0, r6
   d6b28:	b00c      	add	sp, #48	; 0x30
   d6b2a:	bd70      	pop	{r4, r5, r6, pc}

000d6b2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6b2c:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6b2e:	4a03      	ldr	r2, [pc, #12]	; (d6b3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6b30:	601a      	str	r2, [r3, #0]
   d6b32:	2200      	movs	r2, #0
   d6b34:	605a      	str	r2, [r3, #4]
   d6b36:	4770      	bx	lr
   d6b38:	2003e328 	.word	0x2003e328
   d6b3c:	000d927c 	.word	0x000d927c

000d6b40 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d6b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6b42:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6b44:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d6b46:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6b4a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6b4c:	2201      	movs	r2, #1
   d6b4e:	f04f 33ff 	mov.w	r3, #4294967295
   d6b52:	4621      	mov	r1, r4
   d6b54:	47a8      	blx	r5
}
   d6b56:	b003      	add	sp, #12
   d6b58:	bd30      	pop	{r4, r5, pc}

000d6b5a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6b5a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6b5c:	6803      	ldr	r3, [r0, #0]
   d6b5e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6b60:	f04f 33ff 	mov.w	r3, #4294967295
   d6b64:	46a4      	mov	ip, r4
}
   d6b66:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6b6a:	4760      	bx	ip

000d6b6c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6b6e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6b70:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6b72:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6b76:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6b78:	4621      	mov	r1, r4
   d6b7a:	4613      	mov	r3, r2
   d6b7c:	2201      	movs	r2, #1
   d6b7e:	47a8      	blx	r5
}
   d6b80:	b003      	add	sp, #12
   d6b82:	bd30      	pop	{r4, r5, pc}

000d6b84 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6b84:	4770      	bx	lr

000d6b86 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6b86:	b538      	push	{r3, r4, r5, lr}
   d6b88:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6b8a:	681a      	ldr	r2, [r3, #0]
   d6b8c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6b8e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6b90:	da05      	bge.n	d6b9e <_ZN9TCPClient9connectedEv+0x18>
   d6b92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6b96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6b9a:	429a      	cmp	r2, r3
   d6b9c:	d001      	beq.n	d6ba2 <_ZN9TCPClient9connectedEv+0x1c>
   d6b9e:	2501      	movs	r5, #1
   d6ba0:	e00b      	b.n	d6bba <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6ba2:	6803      	ldr	r3, [r0, #0]
   d6ba4:	691b      	ldr	r3, [r3, #16]
   d6ba6:	4798      	blx	r3
   d6ba8:	2800      	cmp	r0, #0
   d6baa:	bf14      	ite	ne
   d6bac:	2501      	movne	r5, #1
   d6bae:	2500      	moveq	r5, #0
        if (!rv) {
   d6bb0:	d103      	bne.n	d6bba <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6bb2:	6823      	ldr	r3, [r4, #0]
   d6bb4:	4620      	mov	r0, r4
   d6bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6bb8:	4798      	blx	r3
        }
    }
    return rv;
}
   d6bba:	4628      	mov	r0, r5
   d6bbc:	bd38      	pop	{r3, r4, r5, pc}

000d6bbe <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6bbe:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6bc0:	6818      	ldr	r0, [r3, #0]
}
   d6bc2:	43c0      	mvns	r0, r0
   d6bc4:	0fc0      	lsrs	r0, r0, #31
   d6bc6:	4770      	bx	lr

000d6bc8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6bc8:	4770      	bx	lr

000d6bca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6bca:	2000      	movs	r0, #0
   d6bcc:	4770      	bx	lr

000d6bce <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6bce:	b510      	push	{r4, lr}
   d6bd0:	4604      	mov	r4, r0
   d6bd2:	f7fd fa64 	bl	d409e <_ZdlPv>
   d6bd6:	4620      	mov	r0, r4
   d6bd8:	bd10      	pop	{r4, pc}

000d6bda <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6bda:	f7fd ba60 	b.w	d409e <_ZdlPv>
	...

000d6be0 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6be4:	4698      	mov	r8, r3
    stop();
   d6be6:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6be8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6bec:	460c      	mov	r4, r1
   d6bee:	4606      	mov	r6, r0
   d6bf0:	4617      	mov	r7, r2
    stop();
   d6bf2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6bf4:	ab12      	add	r3, sp, #72	; 0x48
   d6bf6:	2500      	movs	r5, #0
   d6bf8:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6bfc:	462a      	mov	r2, r5
   d6bfe:	4629      	mov	r1, r5
   d6c00:	4620      	mov	r0, r4
   d6c02:	f7ff fe1f 	bl	d6844 <netdb_getaddrinfo>
   d6c06:	2800      	cmp	r0, #0
   d6c08:	db3a      	blt.n	d6c80 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6c0a:	9b00      	ldr	r3, [sp, #0]
   d6c0c:	2b00      	cmp	r3, #0
   d6c0e:	d039      	beq.n	d6c84 <_ZN9TCPClient7connectEPKctm+0xa4>
   d6c10:	695b      	ldr	r3, [r3, #20]
   d6c12:	2b00      	cmp	r3, #0
   d6c14:	d036      	beq.n	d6c84 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d6c16:	a806      	add	r0, sp, #24
   d6c18:	f000 fcd8 	bl	d75cc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6c1c:	9b00      	ldr	r3, [sp, #0]
   d6c1e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6c20:	7863      	ldrb	r3, [r4, #1]
   d6c22:	2b02      	cmp	r3, #2
   d6c24:	d101      	bne.n	d6c2a <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6c26:	1d21      	adds	r1, r4, #4
   d6c28:	e013      	b.n	d6c52 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6c2a:	2b0a      	cmp	r3, #10
   d6c2c:	d114      	bne.n	d6c58 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6c2e:	2211      	movs	r2, #17
   d6c30:	4629      	mov	r1, r5
   d6c32:	a801      	add	r0, sp, #4
   d6c34:	f002 f869 	bl	d8d0a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6c38:	68a3      	ldr	r3, [r4, #8]
   d6c3a:	bb33      	cbnz	r3, d6c8a <_ZN9TCPClient7connectEPKctm+0xaa>
   d6c3c:	68e3      	ldr	r3, [r4, #12]
   d6c3e:	bb23      	cbnz	r3, d6c8a <_ZN9TCPClient7connectEPKctm+0xaa>
   d6c40:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6c44:	6925      	ldr	r5, [r4, #16]
   d6c46:	f7ff fd4d 	bl	d66e4 <inet_htonl>
   d6c4a:	4285      	cmp	r5, r0
   d6c4c:	d11d      	bne.n	d6c8a <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6c4e:	f104 0114 	add.w	r1, r4, #20
   d6c52:	a806      	add	r0, sp, #24
   d6c54:	f000 fcfd 	bl	d7652 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6c58:	a806      	add	r0, sp, #24
   d6c5a:	f000 fcd7 	bl	d760c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6c5e:	b188      	cbz	r0, d6c84 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d6c60:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6c62:	ad07      	add	r5, sp, #28
   d6c64:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6c68:	4b18      	ldr	r3, [pc, #96]	; (d6ccc <_ZN9TCPClient7connectEPKctm+0xec>)
   d6c6a:	930c      	str	r3, [sp, #48]	; 0x30
   d6c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c6e:	ac0d      	add	r4, sp, #52	; 0x34
   d6c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c72:	682b      	ldr	r3, [r5, #0]
   d6c74:	7023      	strb	r3, [r4, #0]
   d6c76:	463a      	mov	r2, r7
   d6c78:	4643      	mov	r3, r8
   d6c7a:	a90c      	add	r1, sp, #48	; 0x30
   d6c7c:	4630      	mov	r0, r6
   d6c7e:	47c8      	blx	r9
   d6c80:	4604      	mov	r4, r0
   d6c82:	e01c      	b.n	d6cbe <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d6c84:	f04f 34ff 	mov.w	r4, #4294967295
   d6c88:	e019      	b.n	d6cbe <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c8a:	f104 0308 	add.w	r3, r4, #8
   d6c8e:	ad01      	add	r5, sp, #4
   d6c90:	3418      	adds	r4, #24
   d6c92:	6818      	ldr	r0, [r3, #0]
   d6c94:	6859      	ldr	r1, [r3, #4]
   d6c96:	462a      	mov	r2, r5
   d6c98:	c203      	stmia	r2!, {r0, r1}
   d6c9a:	3308      	adds	r3, #8
   d6c9c:	42a3      	cmp	r3, r4
   d6c9e:	4615      	mov	r5, r2
   d6ca0:	d1f7      	bne.n	d6c92 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d6ca2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6ca4:	a901      	add	r1, sp, #4
   d6ca6:	a80c      	add	r0, sp, #48	; 0x30
   d6ca8:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6caa:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6cae:	f000 fc9b 	bl	d75e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cb4:	ac07      	add	r4, sp, #28
   d6cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cb8:	682b      	ldr	r3, [r5, #0]
   d6cba:	7023      	strb	r3, [r4, #0]
   d6cbc:	e7cc      	b.n	d6c58 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6cbe:	9800      	ldr	r0, [sp, #0]
   d6cc0:	f7ff fdb8 	bl	d6834 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	b013      	add	sp, #76	; 0x4c
   d6cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6ccc:	000d9430 	.word	0x000d9430

000d6cd0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6cd2:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6cd4:	2200      	movs	r2, #0
   d6cd6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6cd8:	9202      	str	r2, [sp, #8]
   d6cda:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6cdc:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6cde:	4604      	mov	r4, r0
   d6ce0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6ce2:	d008      	beq.n	d6cf6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6ce8:	fbb3 f1f2 	udiv	r1, r3, r2
   d6cec:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6cee:	fb02 3111 	mls	r1, r2, r1, r3
   d6cf2:	434a      	muls	r2, r1
   d6cf4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6cf6:	6960      	ldr	r0, [r4, #20]
   d6cf8:	2308      	movs	r3, #8
   d6cfa:	9300      	str	r3, [sp, #0]
   d6cfc:	f241 0205 	movw	r2, #4101	; 0x1005
   d6d00:	446b      	add	r3, sp
   d6d02:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6d06:	6800      	ldr	r0, [r0, #0]
   d6d08:	f7ff fc04 	bl	d6514 <sock_setsockopt>
    if (ret < 0) {
   d6d0c:	2800      	cmp	r0, #0
   d6d0e:	db08      	blt.n	d6d22 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6d10:	6960      	ldr	r0, [r4, #20]
   d6d12:	2300      	movs	r3, #0
   d6d14:	4632      	mov	r2, r6
   d6d16:	4629      	mov	r1, r5
   d6d18:	6800      	ldr	r0, [r0, #0]
   d6d1a:	f7ff fc1b 	bl	d6554 <sock_send>
    if (ret < 0) {
   d6d1e:	2800      	cmp	r0, #0
   d6d20:	da04      	bge.n	d6d2c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6d22:	f7ff fe85 	bl	d6a30 <__errno>
   d6d26:	6803      	ldr	r3, [r0, #0]
   d6d28:	6063      	str	r3, [r4, #4]
   d6d2a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6d2c:	b004      	add	sp, #16
   d6d2e:	bd70      	pop	{r4, r5, r6, pc}

000d6d30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d30:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6d32:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d34:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6d36:	689b      	ldr	r3, [r3, #8]
   d6d38:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6d3a:	68a3      	ldr	r3, [r4, #8]
   d6d3c:	3b01      	subs	r3, #1
   d6d3e:	60a3      	str	r3, [r4, #8]
   d6d40:	b92b      	cbnz	r3, d6d4e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6d42:	6823      	ldr	r3, [r4, #0]
   d6d44:	4620      	mov	r0, r4
   d6d46:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6d4c:	4718      	bx	r3
   d6d4e:	bd10      	pop	{r4, pc}

000d6d50 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6d50:	b570      	push	{r4, r5, r6, lr}
   d6d52:	4604      	mov	r4, r0
   d6d54:	694d      	ldr	r5, [r1, #20]
   d6d56:	4b05      	ldr	r3, [pc, #20]	; (d6d6c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6d58:	f844 3b04 	str.w	r3, [r4], #4
   d6d5c:	358c      	adds	r5, #140	; 0x8c
   d6d5e:	4606      	mov	r6, r0
   d6d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d64:	682b      	ldr	r3, [r5, #0]
   d6d66:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6d68:	4630      	mov	r0, r6
   d6d6a:	bd70      	pop	{r4, r5, r6, pc}
   d6d6c:	000d9430 	.word	0x000d9430

000d6d70 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6d70:	b510      	push	{r4, lr}
   d6d72:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6d74:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6d78:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6d7c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6d7e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6d80:	d005      	beq.n	d6d8e <_ZN9TCPClient4peekEv+0x1e>
   d6d82:	6962      	ldr	r2, [r4, #20]
   d6d84:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6d88:	4413      	add	r3, r2
   d6d8a:	7918      	ldrb	r0, [r3, #4]
   d6d8c:	bd10      	pop	{r4, pc}
   d6d8e:	6803      	ldr	r3, [r0, #0]
   d6d90:	691b      	ldr	r3, [r3, #16]
   d6d92:	4798      	blx	r3
   d6d94:	2800      	cmp	r0, #0
   d6d96:	d1f4      	bne.n	d6d82 <_ZN9TCPClient4peekEv+0x12>
   d6d98:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6d9c:	bd10      	pop	{r4, pc}

000d6d9e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6d9e:	b510      	push	{r4, lr}
   d6da0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6da2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6da6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6daa:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6dac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6dae:	d008      	beq.n	d6dc2 <_ZN9TCPClient4readEv+0x24>
   d6db0:	6962      	ldr	r2, [r4, #20]
   d6db2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6db6:	1c59      	adds	r1, r3, #1
   d6db8:	4413      	add	r3, r2
   d6dba:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6dbe:	7918      	ldrb	r0, [r3, #4]
   d6dc0:	bd10      	pop	{r4, pc}
   d6dc2:	6803      	ldr	r3, [r0, #0]
   d6dc4:	691b      	ldr	r3, [r3, #16]
   d6dc6:	4798      	blx	r3
   d6dc8:	2800      	cmp	r0, #0
   d6dca:	d1f1      	bne.n	d6db0 <_ZN9TCPClient4readEv+0x12>
   d6dcc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6dd0:	bd10      	pop	{r4, pc}

000d6dd2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6dd4:	6943      	ldr	r3, [r0, #20]
   d6dd6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6dd8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ddc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6de0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6de2:	4605      	mov	r5, r0
   d6de4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6de6:	d106      	bne.n	d6df6 <_ZN9TCPClient4readEPhj+0x24>
   d6de8:	6803      	ldr	r3, [r0, #0]
   d6dea:	691b      	ldr	r3, [r3, #16]
   d6dec:	4798      	blx	r3
   d6dee:	b910      	cbnz	r0, d6df6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6df0:	f04f 34ff 	mov.w	r4, #4294967295
   d6df4:	e014      	b.n	d6e20 <_ZN9TCPClient4readEPhj+0x4e>
   d6df6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6df8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6dfc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6e00:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6e02:	42bc      	cmp	r4, r7
   d6e04:	bf28      	it	cs
   d6e06:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6e08:	4419      	add	r1, r3
   d6e0a:	4622      	mov	r2, r4
   d6e0c:	3104      	adds	r1, #4
   d6e0e:	4630      	mov	r0, r6
   d6e10:	f001 ff70 	bl	d8cf4 <memcpy>
   d6e14:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6e16:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6e1a:	4423      	add	r3, r4
   d6e1c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6e20:	4620      	mov	r0, r4
   d6e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e24 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6e24:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6e26:	2300      	movs	r3, #0
   d6e28:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6e2c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6e2e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6e32:	4770      	bx	lr

000d6e34 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e38:	4698      	mov	r8, r3
    stop();
   d6e3a:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6e3c:	460d      	mov	r5, r1
   d6e3e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6e42:	4606      	mov	r6, r0
   d6e44:	4617      	mov	r7, r2
    stop();
   d6e46:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6e48:	7d2b      	ldrb	r3, [r5, #20]
   d6e4a:	6974      	ldr	r4, [r6, #20]
   d6e4c:	2b04      	cmp	r3, #4
   d6e4e:	bf0c      	ite	eq
   d6e50:	2002      	moveq	r0, #2
   d6e52:	200a      	movne	r0, #10
   d6e54:	2206      	movs	r2, #6
   d6e56:	2101      	movs	r1, #1
   d6e58:	f7ff fb84 	bl	d6564 <sock_socket>
   d6e5c:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d6e5e:	6973      	ldr	r3, [r6, #20]
   d6e60:	681c      	ldr	r4, [r3, #0]
   d6e62:	2c00      	cmp	r4, #0
   d6e64:	db5b      	blt.n	d6f1e <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d6e66:	4630      	mov	r0, r6
   d6e68:	f7ff ffdc 	bl	d6e24 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6e6c:	f1b8 0f00 	cmp.w	r8, #0
   d6e70:	d017      	beq.n	d6ea2 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d6e72:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d6e74:	a903      	add	r1, sp, #12
   d6e76:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6e7a:	9303      	str	r3, [sp, #12]
   d6e7c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d6e80:	f7ff fc80 	bl	d6784 <if_index_to_name>
   d6e84:	2800      	cmp	r0, #0
   d6e86:	db49      	blt.n	d6f1c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d6e88:	6970      	ldr	r0, [r6, #20]
   d6e8a:	2306      	movs	r3, #6
   d6e8c:	9300      	str	r3, [sp, #0]
   d6e8e:	f241 020b 	movw	r2, #4107	; 0x100b
   d6e92:	ab03      	add	r3, sp, #12
   d6e94:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6e98:	6800      	ldr	r0, [r0, #0]
   d6e9a:	f7ff fb3b 	bl	d6514 <sock_setsockopt>
   d6e9e:	2800      	cmp	r0, #0
   d6ea0:	db3c      	blt.n	d6f1c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6ea2:	241c      	movs	r4, #28
   d6ea4:	4622      	mov	r2, r4
   d6ea6:	2100      	movs	r1, #0
   d6ea8:	a803      	add	r0, sp, #12
   d6eaa:	f001 ff2e 	bl	d8d0a <memset>
    if (ip.version() == 4) {
   d6eae:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6eb0:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6eb4:	2b04      	cmp	r3, #4
   d6eb6:	d10c      	bne.n	d6ed2 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6eb8:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6eba:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6ebc:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6ec0:	f7ff fc18 	bl	d66f4 <inet_htons>
   d6ec4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6ec8:	6868      	ldr	r0, [r5, #4]
   d6eca:	f7ff fc0b 	bl	d66e4 <inet_htonl>
   d6ece:	9004      	str	r0, [sp, #16]
   d6ed0:	e013      	b.n	d6efa <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6ed2:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6ed4:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6ed6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6eda:	f7ff fc0b 	bl	d66f4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6ede:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6ee0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6ee4:	1d2b      	adds	r3, r5, #4
   d6ee6:	f105 0714 	add.w	r7, r5, #20
   d6eea:	6818      	ldr	r0, [r3, #0]
   d6eec:	6859      	ldr	r1, [r3, #4]
   d6eee:	4622      	mov	r2, r4
   d6ef0:	c203      	stmia	r2!, {r0, r1}
   d6ef2:	3308      	adds	r3, #8
   d6ef4:	42bb      	cmp	r3, r7
   d6ef6:	4614      	mov	r4, r2
   d6ef8:	d1f7      	bne.n	d6eea <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d6efa:	6973      	ldr	r3, [r6, #20]
   d6efc:	221c      	movs	r2, #28
   d6efe:	a903      	add	r1, sp, #12
   d6f00:	6818      	ldr	r0, [r3, #0]
   d6f02:	f7ff fb17 	bl	d6534 <sock_connect>
   d6f06:	2800      	cmp	r0, #0
   d6f08:	db08      	blt.n	d6f1c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d6f0a:	1d2c      	adds	r4, r5, #4
   d6f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6f0e:	6976      	ldr	r6, [r6, #20]
   d6f10:	368c      	adds	r6, #140	; 0x8c
   d6f12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6f14:	6823      	ldr	r3, [r4, #0]
   d6f16:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d6f18:	2401      	movs	r4, #1
   d6f1a:	e004      	b.n	d6f26 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d6f1c:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6f1e:	6833      	ldr	r3, [r6, #0]
   d6f20:	4630      	mov	r0, r6
   d6f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f24:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d6f26:	4620      	mov	r0, r4
   d6f28:	b00a      	add	sp, #40	; 0x28
   d6f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6f2e <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6f2e:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6f30:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6f32:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6f34:	6818      	ldr	r0, [r3, #0]
   d6f36:	2800      	cmp	r0, #0
   d6f38:	db01      	blt.n	d6f3e <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6f3a:	f7ff faf3 	bl	d6524 <sock_close>
   d6f3e:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6f40:	f04f 32ff 	mov.w	r2, #4294967295
   d6f44:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6f46:	6960      	ldr	r0, [r4, #20]
   d6f48:	2211      	movs	r2, #17
   d6f4a:	2100      	movs	r1, #0
   d6f4c:	308c      	adds	r0, #140	; 0x8c
   d6f4e:	f001 fedc 	bl	d8d0a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6f52:	4620      	mov	r0, r4
}
   d6f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6f58:	f7ff bf64 	b.w	d6e24 <_ZN9TCPClient12flush_bufferEv>

000d6f5c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6f5c:	b530      	push	{r4, r5, lr}
   d6f5e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6f60:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6f64:	b08b      	sub	sp, #44	; 0x2c
   d6f66:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6f68:	b11b      	cbz	r3, d6f72 <_ZN9TCPClient9availableEv+0x16>
   d6f6a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6f6e:	429a      	cmp	r2, r3
   d6f70:	d040      	beq.n	d6ff4 <_ZN9TCPClient9availableEv+0x98>
   d6f72:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6f74:	6818      	ldr	r0, [r3, #0]
   d6f76:	2800      	cmp	r0, #0
   d6f78:	db3f      	blt.n	d6ffa <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6f7a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6f7e:	2d7f      	cmp	r5, #127	; 0x7f
   d6f80:	d83b      	bhi.n	d6ffa <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6f82:	1d19      	adds	r1, r3, #4
   d6f84:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6f88:	2308      	movs	r3, #8
   d6f8a:	4429      	add	r1, r5
   d6f8c:	f7ff fada 	bl	d6544 <sock_recv>
            if (ret > 0) {
   d6f90:	2800      	cmp	r0, #0
   d6f92:	dd0c      	ble.n	d6fae <_ZN9TCPClient9availableEv+0x52>
   d6f94:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6f96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6f9a:	b90a      	cbnz	r2, d6fa0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6f9c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6fa0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6fa2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6fa6:	4418      	add	r0, r3
   d6fa8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6fac:	e025      	b.n	d6ffa <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6fae:	f7ff fd3f 	bl	d6a30 <__errno>
   d6fb2:	6803      	ldr	r3, [r0, #0]
   d6fb4:	2b0b      	cmp	r3, #11
   d6fb6:	d020      	beq.n	d6ffa <_ZN9TCPClient9availableEv+0x9e>
   d6fb8:	f7ff fd3a 	bl	d6a30 <__errno>
   d6fbc:	6803      	ldr	r3, [r0, #0]
   d6fbe:	2b0b      	cmp	r3, #11
   d6fc0:	d01b      	beq.n	d6ffa <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6fc2:	2320      	movs	r3, #32
   d6fc4:	2500      	movs	r5, #0
   d6fc6:	9302      	str	r3, [sp, #8]
   d6fc8:	9503      	str	r5, [sp, #12]
   d6fca:	f7ff fd31 	bl	d6a30 <__errno>
   d6fce:	6803      	ldr	r3, [r0, #0]
   d6fd0:	9301      	str	r3, [sp, #4]
   d6fd2:	4b0e      	ldr	r3, [pc, #56]	; (d700c <_ZN9TCPClient9availableEv+0xb0>)
   d6fd4:	9300      	str	r3, [sp, #0]
   d6fd6:	aa02      	add	r2, sp, #8
   d6fd8:	462b      	mov	r3, r5
   d6fda:	490d      	ldr	r1, [pc, #52]	; (d7010 <_ZN9TCPClient9availableEv+0xb4>)
   d6fdc:	2032      	movs	r0, #50	; 0x32
   d6fde:	f7ff fc69 	bl	d68b4 <log_message>
                    sock_close(d_->sock);
   d6fe2:	6963      	ldr	r3, [r4, #20]
   d6fe4:	6818      	ldr	r0, [r3, #0]
   d6fe6:	f7ff fa9d 	bl	d6524 <sock_close>
   d6fea:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6fec:	f04f 32ff 	mov.w	r2, #4294967295
   d6ff0:	601a      	str	r2, [r3, #0]
   d6ff2:	e002      	b.n	d6ffa <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6ff4:	f7ff ff16 	bl	d6e24 <_ZN9TCPClient12flush_bufferEv>
   d6ff8:	e7bb      	b.n	d6f72 <_ZN9TCPClient9availableEv+0x16>
   d6ffa:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6ffc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7000:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7004:	1a18      	subs	r0, r3, r0
}
   d7006:	b00b      	add	sp, #44	; 0x2c
   d7008:	bd30      	pop	{r4, r5, pc}
   d700a:	bf00      	nop
   d700c:	000d9317 	.word	0x000d9317
   d7010:	000d9310 	.word	0x000d9310

000d7014 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7014:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7016:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7018:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d701a:	6001      	str	r1, [r0, #0]
   d701c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7020:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7024:	3088      	adds	r0, #136	; 0x88
   d7026:	f000 fad1 	bl	d75cc <_ZN9IPAddressC1Ev>
}
   d702a:	4620      	mov	r0, r4
   d702c:	bd10      	pop	{r4, pc}
	...

000d7030 <_ZN9TCPClientC1Ei>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7034:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7036:	2300      	movs	r3, #0
   d7038:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d703a:	4a14      	ldr	r2, [pc, #80]	; (d708c <_ZN9TCPClientC1Ei+0x5c>)
   d703c:	6043      	str	r3, [r0, #4]
   d703e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7040:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7042:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7044:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7046:	20a0      	movs	r0, #160	; 0xa0
   d7048:	460e      	mov	r6, r1
   d704a:	f7fd f824 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d704e:	4605      	mov	r5, r0
   d7050:	b110      	cbz	r0, d7058 <_ZN9TCPClientC1Ei+0x28>
   d7052:	4631      	mov	r1, r6
   d7054:	f7ff ffde 	bl	d7014 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7058:	2014      	movs	r0, #20
   d705a:	f7fd f81c 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d705e:	4603      	mov	r3, r0
   d7060:	b128      	cbz	r0, d706e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7062:	2201      	movs	r2, #1
   d7064:	6042      	str	r2, [r0, #4]
   d7066:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7068:	4a09      	ldr	r2, [pc, #36]	; (d7090 <_ZN9TCPClientC1Ei+0x60>)
   d706a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d706c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d706e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7070:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7072:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7074:	b128      	cbz	r0, d7082 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7076:	6843      	ldr	r3, [r0, #4]
   d7078:	3b01      	subs	r3, #1
   d707a:	6043      	str	r3, [r0, #4]
   d707c:	b90b      	cbnz	r3, d7082 <_ZN9TCPClientC1Ei+0x52>
   d707e:	f7ff fe57 	bl	d6d30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7082:	4620      	mov	r0, r4
   d7084:	f7ff fece 	bl	d6e24 <_ZN9TCPClient12flush_bufferEv>
}
   d7088:	4620      	mov	r0, r4
   d708a:	bd70      	pop	{r4, r5, r6, pc}
   d708c:	000d92cc 	.word	0x000d92cc
   d7090:	000d92b0 	.word	0x000d92b0

000d7094 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7094:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7096:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d709a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d709c:	f7ff ffc8 	bl	d7030 <_ZN9TCPClientC1Ei>
}
   d70a0:	4620      	mov	r0, r4
   d70a2:	bd10      	pop	{r4, pc}

000d70a4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d70a4:	b510      	push	{r4, lr}
   d70a6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d70a8:	6800      	ldr	r0, [r0, #0]
   d70aa:	2800      	cmp	r0, #0
   d70ac:	db01      	blt.n	d70b2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d70ae:	f7ff fa39 	bl	d6524 <sock_close>
    }
}
   d70b2:	4620      	mov	r0, r4
   d70b4:	bd10      	pop	{r4, pc}

000d70b6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d70b6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d70b8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d70ba:	4620      	mov	r0, r4
   d70bc:	f7ff fff2 	bl	d70a4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d70c0:	b124      	cbz	r4, d70cc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d70c2:	4620      	mov	r0, r4
   d70c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d70c8:	f7fc bfe9 	b.w	d409e <_ZdlPv>
   d70cc:	bd10      	pop	{r4, pc}

000d70ce <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70ce:	2200      	movs	r2, #0
   d70d0:	4611      	mov	r1, r2
   d70d2:	6840      	ldr	r0, [r0, #4]
   d70d4:	f7ff bc3e 	b.w	d6954 <network_listening>

000d70d8 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d70d8:	2200      	movs	r2, #0
   d70da:	4611      	mov	r1, r2
   d70dc:	6840      	ldr	r0, [r0, #4]
   d70de:	f7ff bc49 	b.w	d6974 <network_get_listen_timeout>

000d70e2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d70e2:	2200      	movs	r2, #0
   d70e4:	6840      	ldr	r0, [r0, #4]
   d70e6:	f7ff bc3d 	b.w	d6964 <network_set_listen_timeout>

000d70ea <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d70ea:	2200      	movs	r2, #0
   d70ec:	f081 0101 	eor.w	r1, r1, #1
   d70f0:	6840      	ldr	r0, [r0, #4]
   d70f2:	f7ff bc27 	b.w	d6944 <network_listen>

000d70f6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d70f6:	2300      	movs	r3, #0
   d70f8:	461a      	mov	r2, r3
   d70fa:	4619      	mov	r1, r3
   d70fc:	6840      	ldr	r0, [r0, #4]
   d70fe:	f7ff bc19 	b.w	d6934 <network_off>

000d7102 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7102:	2300      	movs	r3, #0
   d7104:	461a      	mov	r2, r3
   d7106:	4619      	mov	r1, r3
   d7108:	6840      	ldr	r0, [r0, #4]
   d710a:	f7ff bc0b 	b.w	d6924 <network_on>

000d710e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d710e:	2200      	movs	r2, #0
   d7110:	4611      	mov	r1, r2
   d7112:	6840      	ldr	r0, [r0, #4]
   d7114:	f7ff bbfe 	b.w	d6914 <network_ready>

000d7118 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7118:	2200      	movs	r2, #0
   d711a:	4611      	mov	r1, r2
   d711c:	6840      	ldr	r0, [r0, #4]
   d711e:	f7ff bbe9 	b.w	d68f4 <network_connecting>

000d7122 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7122:	2200      	movs	r2, #0
   d7124:	2102      	movs	r1, #2
   d7126:	6840      	ldr	r0, [r0, #4]
   d7128:	f7ff bbec 	b.w	d6904 <network_disconnect>

000d712c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d712c:	2300      	movs	r3, #0
   d712e:	461a      	mov	r2, r3
   d7130:	6840      	ldr	r0, [r0, #4]
   d7132:	f7ff bbd7 	b.w	d68e4 <network_connect>

000d7136 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7136:	b110      	cbz	r0, d713e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d7138:	6803      	ldr	r3, [r0, #0]
   d713a:	685b      	ldr	r3, [r3, #4]
   d713c:	4718      	bx	r3
   d713e:	4770      	bx	lr

000d7140 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d7140:	b538      	push	{r3, r4, r5, lr}
   d7142:	4604      	mov	r4, r0
   d7144:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d7146:	b1d0      	cbz	r0, d717e <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d7148:	f7ff fadc 	bl	d6704 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d714c:	b9b8      	cbnz	r0, d717e <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d714e:	7c23      	ldrb	r3, [r4, #16]
   d7150:	b91b      	cbnz	r3, d715a <_ZN6Thread7disposeEv+0x1a>
   d7152:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d7154:	b108      	cbz	r0, d715a <_ZN6Thread7disposeEv+0x1a>
   d7156:	f7ff fadd 	bl	d6714 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d715a:	6865      	ldr	r5, [r4, #4]
   d715c:	b155      	cbz	r5, d7174 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d715e:	68ab      	ldr	r3, [r5, #8]
   d7160:	b11b      	cbz	r3, d716a <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7162:	2203      	movs	r2, #3
   d7164:	4629      	mov	r1, r5
   d7166:	4628      	mov	r0, r5
   d7168:	4798      	blx	r3
            delete wrapper;
   d716a:	4628      	mov	r0, r5
   d716c:	f7fc ff97 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d7170:	2300      	movs	r3, #0
   d7172:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d7174:	6820      	ldr	r0, [r4, #0]
   d7176:	f7ff fad5 	bl	d6724 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d717a:	2300      	movs	r3, #0
   d717c:	6023      	str	r3, [r4, #0]
   d717e:	bd38      	pop	{r3, r4, r5, pc}

000d7180 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7180:	b538      	push	{r3, r4, r5, lr}
   d7182:	4b0b      	ldr	r3, [pc, #44]	; (d71b0 <_ZN5spark9MeshClassD1Ev+0x30>)
   d7184:	6003      	str	r3, [r0, #0]
   d7186:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7188:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d718c:	b108      	cbz	r0, d7192 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d718e:	f7fc ff88 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7192:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7196:	b12d      	cbz	r5, d71a4 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d7198:	4628      	mov	r0, r5
   d719a:	f7ff ffd1 	bl	d7140 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d719e:	4628      	mov	r0, r5
   d71a0:	f7fc ff7d 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71a4:	68a0      	ldr	r0, [r4, #8]
   d71a6:	b108      	cbz	r0, d71ac <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d71a8:	f7ff ffc5 	bl	d7136 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d71ac:	4620      	mov	r0, r4
   d71ae:	bd38      	pop	{r3, r4, r5, pc}
   d71b0:	000d9330 	.word	0x000d9330

000d71b4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d71b4:	b538      	push	{r3, r4, r5, lr}
   d71b6:	4c0d      	ldr	r4, [pc, #52]	; (d71ec <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d71b8:	4b0d      	ldr	r3, [pc, #52]	; (d71f0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d71ba:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d71bc:	2500      	movs	r5, #0
   d71be:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d71c0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d71c4:	6063      	str	r3, [r4, #4]
   d71c6:	60a5      	str	r5, [r4, #8]
   d71c8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d71cc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d71d0:	f7ff fab8 	bl	d6744 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d71d4:	4b07      	ldr	r3, [pc, #28]	; (d71f4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d71d6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d71da:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d71dc:	4620      	mov	r0, r4
   d71de:	4a06      	ldr	r2, [pc, #24]	; (d71f8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d71e0:	4906      	ldr	r1, [pc, #24]	; (d71fc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d71e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d71e6:	f000 be97 	b.w	d7f18 <__aeabi_atexit>
   d71ea:	bf00      	nop
   d71ec:	2003e330 	.word	0x2003e330
   d71f0:	000d927c 	.word	0x000d927c
   d71f4:	000d9330 	.word	0x000d9330
   d71f8:	2003dfa0 	.word	0x2003dfa0
   d71fc:	000d7181 	.word	0x000d7181

000d7200 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7200:	4770      	bx	lr

000d7202 <_ZN8SPIClassD0Ev>:
   d7202:	b510      	push	{r4, lr}
   d7204:	4604      	mov	r4, r0
   d7206:	f7fc ff4a 	bl	d409e <_ZdlPv>
   d720a:	4620      	mov	r0, r4
   d720c:	bd10      	pop	{r4, pc}
	...

000d7210 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7210:	b570      	push	{r4, r5, r6, lr}
   d7212:	4b08      	ldr	r3, [pc, #32]	; (d7234 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d7214:	6003      	str	r3, [r0, #0]
   d7216:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d7218:	2500      	movs	r5, #0
   d721a:	460e      	mov	r6, r1
   d721c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d7220:	f7ff fa88 	bl	d6734 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d7224:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d7226:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d7228:	f7ff fab4 	bl	d6794 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d722c:	60a5      	str	r5, [r4, #8]
}
   d722e:	4620      	mov	r0, r4
   d7230:	bd70      	pop	{r4, r5, r6, pc}
   d7232:	bf00      	nop
   d7234:	000d9364 	.word	0x000d9364

000d7238 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7238:	7900      	ldrb	r0, [r0, #4]
   d723a:	f7ff bab3 	b.w	d67a4 <HAL_SPI_Is_Enabled>

000d723e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d723e:	2200      	movs	r2, #0
   d7240:	4611      	mov	r1, r2
   d7242:	6840      	ldr	r0, [r0, #4]
   d7244:	f7ff bb66 	b.w	d6914 <network_ready>

000d7248 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7248:	2200      	movs	r2, #0
   d724a:	4611      	mov	r1, r2
   d724c:	6840      	ldr	r0, [r0, #4]
   d724e:	f7ff bb81 	b.w	d6954 <network_listening>

000d7252 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7252:	2200      	movs	r2, #0
   d7254:	4611      	mov	r1, r2
   d7256:	6840      	ldr	r0, [r0, #4]
   d7258:	f7ff bb8c 	b.w	d6974 <network_get_listen_timeout>

000d725c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d725c:	2200      	movs	r2, #0
   d725e:	6840      	ldr	r0, [r0, #4]
   d7260:	f7ff bb80 	b.w	d6964 <network_set_listen_timeout>

000d7264 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7264:	2200      	movs	r2, #0
   d7266:	f081 0101 	eor.w	r1, r1, #1
   d726a:	6840      	ldr	r0, [r0, #4]
   d726c:	f7ff bb6a 	b.w	d6944 <network_listen>

000d7270 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7270:	2300      	movs	r3, #0
   d7272:	461a      	mov	r2, r3
   d7274:	4619      	mov	r1, r3
   d7276:	6840      	ldr	r0, [r0, #4]
   d7278:	f7ff bb5c 	b.w	d6934 <network_off>

000d727c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d727c:	2300      	movs	r3, #0
   d727e:	461a      	mov	r2, r3
   d7280:	4619      	mov	r1, r3
   d7282:	6840      	ldr	r0, [r0, #4]
   d7284:	f7ff bb4e 	b.w	d6924 <network_on>

000d7288 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7288:	2200      	movs	r2, #0
   d728a:	4611      	mov	r1, r2
   d728c:	6840      	ldr	r0, [r0, #4]
   d728e:	f7ff bb31 	b.w	d68f4 <network_connecting>

000d7292 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7292:	2200      	movs	r2, #0
   d7294:	2102      	movs	r1, #2
   d7296:	6840      	ldr	r0, [r0, #4]
   d7298:	f7ff bb34 	b.w	d6904 <network_disconnect>

000d729c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d729c:	2300      	movs	r3, #0
   d729e:	461a      	mov	r2, r3
   d72a0:	6840      	ldr	r0, [r0, #4]
   d72a2:	f7ff bb1f 	b.w	d68e4 <network_connect>
	...

000d72a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d72a8:	4b02      	ldr	r3, [pc, #8]	; (d72b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d72aa:	2204      	movs	r2, #4
   d72ac:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d72ae:	4a02      	ldr	r2, [pc, #8]	; (d72b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d72b0:	601a      	str	r2, [r3, #0]
   d72b2:	4770      	bx	lr
   d72b4:	2003e500 	.word	0x2003e500
   d72b8:	000d9374 	.word	0x000d9374

000d72bc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d72bc:	4770      	bx	lr

000d72be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d72be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72c0:	4606      	mov	r6, r0
   d72c2:	4615      	mov	r5, r2
   d72c4:	460c      	mov	r4, r1
   d72c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d72c8:	42bc      	cmp	r4, r7
   d72ca:	d006      	beq.n	d72da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d72cc:	6833      	ldr	r3, [r6, #0]
   d72ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d72d2:	689b      	ldr	r3, [r3, #8]
   d72d4:	4630      	mov	r0, r6
   d72d6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d72d8:	e7f6      	b.n	d72c8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d72da:	4628      	mov	r0, r5
   d72dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72de <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d72de:	2200      	movs	r2, #0
   d72e0:	7c00      	ldrb	r0, [r0, #16]
   d72e2:	f7ff b967 	b.w	d65b4 <HAL_I2C_Write_Data>

000d72e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d72e6:	2100      	movs	r1, #0
   d72e8:	7c00      	ldrb	r0, [r0, #16]
   d72ea:	f7ff b96b 	b.w	d65c4 <HAL_I2C_Available_Data>

000d72ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d72ee:	2100      	movs	r1, #0
   d72f0:	7c00      	ldrb	r0, [r0, #16]
   d72f2:	f7ff b96f 	b.w	d65d4 <HAL_I2C_Read_Data>

000d72f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d72f6:	2100      	movs	r1, #0
   d72f8:	7c00      	ldrb	r0, [r0, #16]
   d72fa:	f7ff b973 	b.w	d65e4 <HAL_I2C_Peek_Data>

000d72fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d72fe:	2100      	movs	r1, #0
   d7300:	7c00      	ldrb	r0, [r0, #16]
   d7302:	f7ff b977 	b.w	d65f4 <HAL_I2C_Flush_Data>

000d7306 <_ZN7TwoWireD0Ev>:
   d7306:	b510      	push	{r4, lr}
   d7308:	4604      	mov	r4, r0
   d730a:	f7fc fec8 	bl	d409e <_ZdlPv>
   d730e:	4620      	mov	r0, r4
   d7310:	bd10      	pop	{r4, pc}
	...

000d7314 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7314:	b510      	push	{r4, lr}
   d7316:	4604      	mov	r4, r0
   d7318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d731c:	4608      	mov	r0, r1
   d731e:	60a3      	str	r3, [r4, #8]
   d7320:	2100      	movs	r1, #0
   d7322:	4b04      	ldr	r3, [pc, #16]	; (d7334 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7324:	7420      	strb	r0, [r4, #16]
   d7326:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7328:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d732a:	f7ff f983 	bl	d6634 <HAL_I2C_Init>

}
   d732e:	4620      	mov	r0, r4
   d7330:	bd10      	pop	{r4, pc}
   d7332:	bf00      	nop
   d7334:	000d93a8 	.word	0x000d93a8

000d7338 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7338:	2300      	movs	r3, #0
   d733a:	461a      	mov	r2, r3
   d733c:	4619      	mov	r1, r3
   d733e:	7c00      	ldrb	r0, [r0, #16]
   d7340:	f7ff b918 	b.w	d6574 <HAL_I2C_Begin>

000d7344 <_ZN7TwoWire5beginEh>:
}

void TwoWire::begin(uint8_t address)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d7344:	460a      	mov	r2, r1
   d7346:	2300      	movs	r3, #0
   d7348:	2101      	movs	r1, #1
   d734a:	7c00      	ldrb	r0, [r0, #16]
   d734c:	f7ff b912 	b.w	d6574 <HAL_I2C_Begin>

000d7350 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d7350:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d7352:	2400      	movs	r4, #0
   d7354:	7c00      	ldrb	r0, [r0, #16]
   d7356:	9400      	str	r4, [sp, #0]
   d7358:	f7ff f914 	bl	d6584 <HAL_I2C_Request_Data>
  return result;
}
   d735c:	b2c0      	uxtb	r0, r0
   d735e:	b002      	add	sp, #8
   d7360:	bd10      	pop	{r4, pc}

000d7362 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7362:	2301      	movs	r3, #1
   d7364:	f7ff bff4 	b.w	d7350 <_ZN7TwoWire11requestFromEhhh>

000d7368 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7368:	2200      	movs	r2, #0
   d736a:	7c00      	ldrb	r0, [r0, #16]
   d736c:	f7ff b912 	b.w	d6594 <HAL_I2C_Begin_Transmission>

000d7370 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7370:	2200      	movs	r2, #0
   d7372:	7c00      	ldrb	r0, [r0, #16]
   d7374:	f7ff b916 	b.w	d65a4 <HAL_I2C_End_Transmission>

000d7378 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7378:	2101      	movs	r1, #1
   d737a:	f7ff bff9 	b.w	d7370 <_ZN7TwoWire15endTransmissionEh>

000d737e <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  HAL_I2C_Set_Callback_On_Receive(_i2c, function, NULL);
   d737e:	2200      	movs	r2, #0
   d7380:	7c00      	ldrb	r0, [r0, #16]
   d7382:	f7ff b947 	b.w	d6614 <HAL_I2C_Set_Callback_On_Receive>

000d7386 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
   d7386:	2200      	movs	r2, #0
   d7388:	7c00      	ldrb	r0, [r0, #16]
   d738a:	f7ff b94b 	b.w	d6624 <HAL_I2C_Set_Callback_On_Request>

000d738e <_ZN7TwoWire9isEnabledEv>:
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d738e:	2100      	movs	r1, #0
   d7390:	7c00      	ldrb	r0, [r0, #16]
   d7392:	f7ff b937 	b.w	d6604 <HAL_I2C_Is_Enabled>

000d7396 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7396:	4770      	bx	lr

000d7398 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7398:	7441      	strb	r1, [r0, #17]
   d739a:	4770      	bx	lr

000d739c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d739c:	7c00      	ldrb	r0, [r0, #16]
   d739e:	f7ff b989 	b.w	d66b4 <HAL_USART_Available_Data_For_Write>

000d73a2 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d73a2:	7c00      	ldrb	r0, [r0, #16]
   d73a4:	f7ff b95e 	b.w	d6664 <HAL_USART_Available_Data>

000d73a8 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d73a8:	7c00      	ldrb	r0, [r0, #16]
   d73aa:	f7ff b96b 	b.w	d6684 <HAL_USART_Peek_Data>

000d73ae <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d73ae:	7c00      	ldrb	r0, [r0, #16]
   d73b0:	f7ff b960 	b.w	d6674 <HAL_USART_Read_Data>

000d73b4 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d73b4:	7c00      	ldrb	r0, [r0, #16]
   d73b6:	f7ff b96d 	b.w	d6694 <HAL_USART_Flush_Data>

000d73ba <_ZN11USARTSerialD0Ev>:
   d73ba:	b510      	push	{r4, lr}
   d73bc:	4604      	mov	r4, r0
   d73be:	f7fc fe6e 	bl	d409e <_ZdlPv>
   d73c2:	4620      	mov	r0, r4
   d73c4:	bd10      	pop	{r4, pc}

000d73c6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d73c6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d73c8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d73ca:	4604      	mov	r4, r0
   d73cc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d73ce:	b925      	cbnz	r5, d73da <_ZN11USARTSerial5writeEh+0x14>
   d73d0:	7c00      	ldrb	r0, [r0, #16]
   d73d2:	f7ff f96f 	bl	d66b4 <HAL_USART_Available_Data_For_Write>
   d73d6:	2800      	cmp	r0, #0
   d73d8:	dd05      	ble.n	d73e6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d73da:	4631      	mov	r1, r6
   d73dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d73de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d73e2:	f7ff b937 	b.w	d6654 <HAL_USART_Write_Data>
  }
  return 0;
}
   d73e6:	4628      	mov	r0, r5
   d73e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d73ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d73ec:	b510      	push	{r4, lr}
   d73ee:	4604      	mov	r4, r0
   d73f0:	4608      	mov	r0, r1
   d73f2:	4611      	mov	r1, r2
   d73f4:	2200      	movs	r2, #0
   d73f6:	6062      	str	r2, [r4, #4]
   d73f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d73fc:	60a2      	str	r2, [r4, #8]
   d73fe:	4a05      	ldr	r2, [pc, #20]	; (d7414 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7400:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7402:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7404:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7406:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7408:	461a      	mov	r2, r3
   d740a:	f7ff f91b 	bl	d6644 <HAL_USART_Init>
}
   d740e:	4620      	mov	r0, r4
   d7410:	bd10      	pop	{r4, pc}
   d7412:	bf00      	nop
   d7414:	000d93d0 	.word	0x000d93d0

000d7418 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7418:	2300      	movs	r3, #0
   d741a:	7c00      	ldrb	r0, [r0, #16]
   d741c:	f7ff b952 	b.w	d66c4 <HAL_USART_BeginConfig>

000d7420 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7420:	2200      	movs	r2, #0
   d7422:	f7ff bff9 	b.w	d7418 <_ZN11USARTSerial5beginEmm>

000d7426 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7426:	7c00      	ldrb	r0, [r0, #16]
   d7428:	f7ff b93c 	b.w	d66a4 <HAL_USART_Is_Enabled>

000d742c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d742c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d742e:	4d0c      	ldr	r5, [pc, #48]	; (d7460 <_Z22__fetch_global_Serial1v+0x34>)
   d7430:	6829      	ldr	r1, [r5, #0]
   d7432:	f011 0401 	ands.w	r4, r1, #1
   d7436:	d111      	bne.n	d745c <_Z22__fetch_global_Serial1v+0x30>
   d7438:	4628      	mov	r0, r5
   d743a:	f7fc fe34 	bl	d40a6 <__cxa_guard_acquire>
   d743e:	b168      	cbz	r0, d745c <_Z22__fetch_global_Serial1v+0x30>
   d7440:	4a08      	ldr	r2, [pc, #32]	; (d7464 <_Z22__fetch_global_Serial1v+0x38>)
   d7442:	4b09      	ldr	r3, [pc, #36]	; (d7468 <_Z22__fetch_global_Serial1v+0x3c>)
   d7444:	4809      	ldr	r0, [pc, #36]	; (d746c <_Z22__fetch_global_Serial1v+0x40>)
   d7446:	4621      	mov	r1, r4
   d7448:	f7ff ffd0 	bl	d73ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d744c:	4628      	mov	r0, r5
   d744e:	f7fc fe2f 	bl	d40b0 <__cxa_guard_release>
   d7452:	4a07      	ldr	r2, [pc, #28]	; (d7470 <_Z22__fetch_global_Serial1v+0x44>)
   d7454:	4907      	ldr	r1, [pc, #28]	; (d7474 <_Z22__fetch_global_Serial1v+0x48>)
   d7456:	4805      	ldr	r0, [pc, #20]	; (d746c <_Z22__fetch_global_Serial1v+0x40>)
   d7458:	f000 fd5e 	bl	d7f18 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d745c:	4803      	ldr	r0, [pc, #12]	; (d746c <_Z22__fetch_global_Serial1v+0x40>)
   d745e:	bd38      	pop	{r3, r4, r5, pc}
   d7460:	2003e5a0 	.word	0x2003e5a0
   d7464:	2003e5a4 	.word	0x2003e5a4
   d7468:	2003e51c 	.word	0x2003e51c
   d746c:	2003e508 	.word	0x2003e508
   d7470:	2003dfa0 	.word	0x2003dfa0
   d7474:	000d7397 	.word	0x000d7397

000d7478 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7478:	7441      	strb	r1, [r0, #17]
   d747a:	4770      	bx	lr

000d747c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d747c:	4770      	bx	lr

000d747e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d747e:	2100      	movs	r1, #0
   d7480:	7c00      	ldrb	r0, [r0, #16]
   d7482:	f7ff b82f 	b.w	d64e4 <HAL_USB_USART_Receive_Data>

000d7486 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d7486:	2101      	movs	r1, #1
   d7488:	7c00      	ldrb	r0, [r0, #16]
   d748a:	f7ff b82b 	b.w	d64e4 <HAL_USB_USART_Receive_Data>

000d748e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d748e:	7c00      	ldrb	r0, [r0, #16]
   d7490:	f7ff b820 	b.w	d64d4 <HAL_USB_USART_Available_Data_For_Write>

000d7494 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d7494:	7c00      	ldrb	r0, [r0, #16]
   d7496:	f7ff b815 	b.w	d64c4 <HAL_USB_USART_Available_Data>

000d749a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d749a:	b538      	push	{r3, r4, r5, lr}
   d749c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d749e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d74a0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d74a2:	f7ff f817 	bl	d64d4 <HAL_USB_USART_Available_Data_For_Write>
   d74a6:	2800      	cmp	r0, #0
   d74a8:	dc01      	bgt.n	d74ae <_ZN9USBSerial5writeEh+0x14>
   d74aa:	7c60      	ldrb	r0, [r4, #17]
   d74ac:	b120      	cbz	r0, d74b8 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d74ae:	4629      	mov	r1, r5
   d74b0:	7c20      	ldrb	r0, [r4, #16]
   d74b2:	f7ff f81f 	bl	d64f4 <HAL_USB_USART_Send_Data>
    return 1;
   d74b6:	2001      	movs	r0, #1
  }
  return 0;
}
   d74b8:	bd38      	pop	{r3, r4, r5, pc}

000d74ba <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d74ba:	7c00      	ldrb	r0, [r0, #16]
   d74bc:	f7ff b822 	b.w	d6504 <HAL_USB_USART_Flush_Data>

000d74c0 <_ZN9USBSerialD0Ev>:
   d74c0:	b510      	push	{r4, lr}
   d74c2:	4604      	mov	r4, r0
   d74c4:	f7fc fdeb 	bl	d409e <_ZdlPv>
   d74c8:	4620      	mov	r0, r4
   d74ca:	bd10      	pop	{r4, pc}

000d74cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d74cc:	b510      	push	{r4, lr}
   d74ce:	4604      	mov	r4, r0
   d74d0:	2300      	movs	r3, #0
   d74d2:	6063      	str	r3, [r4, #4]
   d74d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d74d8:	60a3      	str	r3, [r4, #8]
   d74da:	4b05      	ldr	r3, [pc, #20]	; (d74f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d74dc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d74de:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d74e0:	4608      	mov	r0, r1
{
  _serial = serial;
   d74e2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d74e4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d74e6:	4611      	mov	r1, r2
   d74e8:	f7fe ffdc 	bl	d64a4 <HAL_USB_USART_Init>
}
   d74ec:	4620      	mov	r0, r4
   d74ee:	bd10      	pop	{r4, pc}
   d74f0:	000d9400 	.word	0x000d9400

000d74f4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d74f4:	2200      	movs	r2, #0
   d74f6:	7c00      	ldrb	r0, [r0, #16]
   d74f8:	f7fe bfdc 	b.w	d64b4 <HAL_USB_USART_Begin>

000d74fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d74fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d74fe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7500:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7502:	2100      	movs	r1, #0
   d7504:	f001 fc01 	bl	d8d0a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7508:	4620      	mov	r0, r4
   d750a:	bd10      	pop	{r4, pc}

000d750c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d750c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d750e:	4d0e      	ldr	r5, [pc, #56]	; (d7548 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7510:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7512:	a801      	add	r0, sp, #4
   d7514:	f7ff fff2 	bl	d74fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7518:	6829      	ldr	r1, [r5, #0]
   d751a:	f011 0401 	ands.w	r4, r1, #1
   d751e:	d110      	bne.n	d7542 <_Z16_fetch_usbserialv+0x36>
   d7520:	4628      	mov	r0, r5
   d7522:	f7fc fdc0 	bl	d40a6 <__cxa_guard_acquire>
   d7526:	b160      	cbz	r0, d7542 <_Z16_fetch_usbserialv+0x36>
   d7528:	aa01      	add	r2, sp, #4
   d752a:	4621      	mov	r1, r4
   d752c:	4807      	ldr	r0, [pc, #28]	; (d754c <_Z16_fetch_usbserialv+0x40>)
   d752e:	f7ff ffcd 	bl	d74cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7532:	4628      	mov	r0, r5
   d7534:	f7fc fdbc 	bl	d40b0 <__cxa_guard_release>
   d7538:	4a05      	ldr	r2, [pc, #20]	; (d7550 <_Z16_fetch_usbserialv+0x44>)
   d753a:	4906      	ldr	r1, [pc, #24]	; (d7554 <_Z16_fetch_usbserialv+0x48>)
   d753c:	4803      	ldr	r0, [pc, #12]	; (d754c <_Z16_fetch_usbserialv+0x40>)
   d753e:	f000 fceb 	bl	d7f18 <__aeabi_atexit>
	return _usbserial;
}
   d7542:	4802      	ldr	r0, [pc, #8]	; (d754c <_Z16_fetch_usbserialv+0x40>)
   d7544:	b007      	add	sp, #28
   d7546:	bd30      	pop	{r4, r5, pc}
   d7548:	2003e628 	.word	0x2003e628
   d754c:	2003e62c 	.word	0x2003e62c
   d7550:	2003dfa0 	.word	0x2003dfa0
   d7554:	000d747d 	.word	0x000d747d

000d7558 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7558:	4770      	bx	lr

000d755a <_ZN9IPAddressD0Ev>:
   d755a:	b510      	push	{r4, lr}
   d755c:	4604      	mov	r4, r0
   d755e:	f7fc fd9e 	bl	d409e <_ZdlPv>
   d7562:	4620      	mov	r0, r4
   d7564:	bd10      	pop	{r4, pc}

000d7566 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7566:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d7568:	7d03      	ldrb	r3, [r0, #20]
   d756a:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d756c:	b08d      	sub	sp, #52	; 0x34
   d756e:	460e      	mov	r6, r1
   d7570:	f100 0704 	add.w	r7, r0, #4
   d7574:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d7578:	d002      	beq.n	d7580 <_ZNK9IPAddress7printToER5Print+0x1a>
   d757a:	f100 0508 	add.w	r5, r0, #8
   d757e:	e018      	b.n	d75b2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7580:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7582:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7584:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7588:	232f      	movs	r3, #47	; 0x2f
   d758a:	462a      	mov	r2, r5
   d758c:	200a      	movs	r0, #10
   d758e:	f7ff f8a1 	bl	d66d4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7592:	4628      	mov	r0, r5
   d7594:	f001 fbf4 	bl	d8d80 <strlen>
   d7598:	6833      	ldr	r3, [r6, #0]
   d759a:	4602      	mov	r2, r0
   d759c:	68db      	ldr	r3, [r3, #12]
   d759e:	4629      	mov	r1, r5
   d75a0:	4630      	mov	r0, r6
   d75a2:	4798      	blx	r3
   d75a4:	e00f      	b.n	d75c6 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d75a6:	b124      	cbz	r4, d75b2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d75a8:	212e      	movs	r1, #46	; 0x2e
   d75aa:	4630      	mov	r0, r6
   d75ac:	f000 f9b5 	bl	d791a <_ZN5Print5printEc>
   d75b0:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d75b2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d75b6:	220a      	movs	r2, #10
   d75b8:	4630      	mov	r0, r6
   d75ba:	f000 f9ea 	bl	d7992 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d75be:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d75c0:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d75c2:	d1f0      	bne.n	d75a6 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d75c4:	4620      	mov	r0, r4
    }
    return n;
}
   d75c6:	b00d      	add	sp, #52	; 0x34
   d75c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d75cc <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d75cc:	b510      	push	{r4, lr}
   d75ce:	4b05      	ldr	r3, [pc, #20]	; (d75e4 <_ZN9IPAddressC1Ev+0x18>)
   d75d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d75d2:	2211      	movs	r2, #17
   d75d4:	f840 3b04 	str.w	r3, [r0], #4
   d75d8:	2100      	movs	r1, #0
   d75da:	f001 fb96 	bl	d8d0a <memset>
{
    clear();
}
   d75de:	4620      	mov	r0, r4
   d75e0:	bd10      	pop	{r4, pc}
   d75e2:	bf00      	nop
   d75e4:	000d9430 	.word	0x000d9430

000d75e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d75e8:	4603      	mov	r3, r0
   d75ea:	4a07      	ldr	r2, [pc, #28]	; (d7608 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d75ec:	b510      	push	{r4, lr}
   d75ee:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d75f2:	f101 0210 	add.w	r2, r1, #16
   d75f6:	f851 4b04 	ldr.w	r4, [r1], #4
   d75fa:	f843 4b04 	str.w	r4, [r3], #4
   d75fe:	4291      	cmp	r1, r2
   d7600:	d1f9      	bne.n	d75f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7602:	780a      	ldrb	r2, [r1, #0]
   d7604:	701a      	strb	r2, [r3, #0]
}
   d7606:	bd10      	pop	{r4, pc}
   d7608:	000d9430 	.word	0x000d9430

000d760c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d760c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d760e:	2b04      	cmp	r3, #4
   d7610:	d101      	bne.n	d7616 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7612:	6840      	ldr	r0, [r0, #4]
   d7614:	e008      	b.n	d7628 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7616:	2b06      	cmp	r3, #6
   d7618:	d10a      	bne.n	d7630 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d761a:	6843      	ldr	r3, [r0, #4]
   d761c:	b153      	cbz	r3, d7634 <_ZNK9IPAddresscvbEv+0x28>
   d761e:	6883      	ldr	r3, [r0, #8]
   d7620:	b143      	cbz	r3, d7634 <_ZNK9IPAddresscvbEv+0x28>
   d7622:	68c3      	ldr	r3, [r0, #12]
   d7624:	b133      	cbz	r3, d7634 <_ZNK9IPAddresscvbEv+0x28>
   d7626:	6900      	ldr	r0, [r0, #16]
   d7628:	3000      	adds	r0, #0
   d762a:	bf18      	it	ne
   d762c:	2001      	movne	r0, #1
   d762e:	4770      	bx	lr
   d7630:	2000      	movs	r0, #0
   d7632:	4770      	bx	lr
   d7634:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7636:	4770      	bx	lr

000d7638 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7638:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d763a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d763e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7642:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7646:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d764a:	2304      	movs	r3, #4
   d764c:	6041      	str	r1, [r0, #4]
   d764e:	7503      	strb	r3, [r0, #20]
   d7650:	bd10      	pop	{r4, pc}

000d7652 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7652:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7654:	780d      	ldrb	r5, [r1, #0]
   d7656:	788b      	ldrb	r3, [r1, #2]
   d7658:	784a      	ldrb	r2, [r1, #1]
   d765a:	78c9      	ldrb	r1, [r1, #3]
   d765c:	9100      	str	r1, [sp, #0]
   d765e:	4629      	mov	r1, r5
   d7660:	f7ff ffea 	bl	d7638 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7664:	b003      	add	sp, #12
   d7666:	bd30      	pop	{r4, r5, pc}

000d7668 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d7668:	b510      	push	{r4, lr}
   d766a:	4b03      	ldr	r3, [pc, #12]	; (d7678 <_ZN9IPAddressC1EPKh+0x10>)
   d766c:	6003      	str	r3, [r0, #0]
   d766e:	4604      	mov	r4, r0
{
    *this = address;
   d7670:	f7ff ffef 	bl	d7652 <_ZN9IPAddressaSEPKh>
}
   d7674:	4620      	mov	r0, r4
   d7676:	bd10      	pop	{r4, pc}
   d7678:	000d9430 	.word	0x000d9430

000d767c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d767c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d767e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7680:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7682:	b113      	cbz	r3, d768a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7684:	2203      	movs	r2, #3
   d7686:	4601      	mov	r1, r0
   d7688:	4798      	blx	r3
    }
   d768a:	4620      	mov	r0, r4
   d768c:	bd10      	pop	{r4, pc}
	...

000d7690 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7690:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7692:	4b0c      	ldr	r3, [pc, #48]	; (d76c4 <serialEventRun+0x34>)
   d7694:	b133      	cbz	r3, d76a4 <serialEventRun+0x14>
   d7696:	f7ff ff39 	bl	d750c <_Z16_fetch_usbserialv>
   d769a:	6803      	ldr	r3, [r0, #0]
   d769c:	691b      	ldr	r3, [r3, #16]
   d769e:	4798      	blx	r3
   d76a0:	2800      	cmp	r0, #0
   d76a2:	dc09      	bgt.n	d76b8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d76a4:	4b08      	ldr	r3, [pc, #32]	; (d76c8 <serialEventRun+0x38>)
   d76a6:	b163      	cbz	r3, d76c2 <serialEventRun+0x32>
   d76a8:	f7ff fec0 	bl	d742c <_Z22__fetch_global_Serial1v>
   d76ac:	6803      	ldr	r3, [r0, #0]
   d76ae:	691b      	ldr	r3, [r3, #16]
   d76b0:	4798      	blx	r3
   d76b2:	2800      	cmp	r0, #0
   d76b4:	dc03      	bgt.n	d76be <serialEventRun+0x2e>
   d76b6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d76b8:	f3af 8000 	nop.w
   d76bc:	e7f2      	b.n	d76a4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d76be:	f3af 8000 	nop.w
   d76c2:	bd08      	pop	{r3, pc}
	...

000d76cc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d76cc:	b508      	push	{r3, lr}
	serialEventRun();
   d76ce:	f7ff ffdf 	bl	d7690 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d76d2:	f7ff f84f 	bl	d6774 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d76d6:	4b01      	ldr	r3, [pc, #4]	; (d76dc <_post_loop+0x10>)
   d76d8:	6018      	str	r0, [r3, #0]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	2003e72c 	.word	0x2003e72c

000d76e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d76e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d76e2:	2300      	movs	r3, #0
   d76e4:	9300      	str	r3, [sp, #0]
   d76e6:	461a      	mov	r2, r3
   d76e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d76ec:	f7ff f964 	bl	d69b8 <system_ctrl_set_result>
}
   d76f0:	b003      	add	sp, #12
   d76f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d76f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d76f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d76fa:	8843      	ldrh	r3, [r0, #2]
   d76fc:	2b0a      	cmp	r3, #10
   d76fe:	d008      	beq.n	d7712 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7700:	2b50      	cmp	r3, #80	; 0x50
   d7702:	d109      	bne.n	d7718 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7704:	4b09      	ldr	r3, [pc, #36]	; (d772c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7706:	681b      	ldr	r3, [r3, #0]
   d7708:	b13b      	cbz	r3, d771a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d770a:	b003      	add	sp, #12
   d770c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7710:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7712:	f7ff ffe5 	bl	d76e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7716:	e006      	b.n	d7726 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7718:	2300      	movs	r3, #0
   d771a:	9300      	str	r3, [sp, #0]
   d771c:	461a      	mov	r2, r3
   d771e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7722:	f7ff f949 	bl	d69b8 <system_ctrl_set_result>
        break;
    }
}
   d7726:	b003      	add	sp, #12
   d7728:	f85d fb04 	ldr.w	pc, [sp], #4
   d772c:	2003e640 	.word	0x2003e640

000d7730 <module_user_init_hook>:

void module_user_init_hook()
{
   d7730:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7732:	f7ff f80f 	bl	d6754 <HAL_RNG_GetRandomNumber>
   d7736:	4604      	mov	r4, r0
    srand(seed);
   d7738:	f001 faf0 	bl	d8d1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d773c:	4b07      	ldr	r3, [pc, #28]	; (d775c <module_user_init_hook+0x2c>)
   d773e:	b113      	cbz	r3, d7746 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7740:	4620      	mov	r0, r4
   d7742:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7746:	2100      	movs	r1, #0
   d7748:	4804      	ldr	r0, [pc, #16]	; (d775c <module_user_init_hook+0x2c>)
   d774a:	f7ff f8c3 	bl	d68d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d774e:	2100      	movs	r1, #0
   d7750:	4803      	ldr	r0, [pc, #12]	; (d7760 <module_user_init_hook+0x30>)
}
   d7752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7756:	f7ff b925 	b.w	d69a4 <system_ctrl_set_app_request_handler>
   d775a:	bf00      	nop
   d775c:	00000000 	.word	0x00000000
   d7760:	000d76f9 	.word	0x000d76f9

000d7764 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7764:	b510      	push	{r4, lr}
   d7766:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7768:	f7ff ff88 	bl	d767c <_ZNSt14_Function_baseD1Ev>
   d776c:	4620      	mov	r0, r4
   d776e:	bd10      	pop	{r4, pc}

000d7770 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d7770:	b510      	push	{r4, lr}
   d7772:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7774:	f7ff f886 	bl	d6884 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d7778:	4284      	cmp	r4, r0
   d777a:	d008      	beq.n	d778e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d777c:	b11c      	cbz	r4, d7786 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d7782:	f7ff b86f 	b.w	d6864 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d7786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d778a:	f7ff b873 	b.w	d6874 <LED_Signaling_Stop>
   d778e:	bd10      	pop	{r4, pc}

000d7790 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d7790:	b570      	push	{r4, r5, r6, lr}
   d7792:	4605      	mov	r5, r0
   d7794:	460e      	mov	r6, r1
   d7796:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7798:	f7ff f874 	bl	d6884 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d779c:	b150      	cbz	r0, d77b4 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d779e:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d77a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d77a6:	f7ff f855 	bl	d6854 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d77aa:	20e7      	movs	r0, #231	; 0xe7
}
   d77ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d77b0:	f7ff b870 	b.w	d6894 <LED_On>
   d77b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d77b8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d77b8:	4803      	ldr	r0, [pc, #12]	; (d77c8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d77ba:	4a04      	ldr	r2, [pc, #16]	; (d77cc <_GLOBAL__sub_I_RGB+0x14>)
   d77bc:	4904      	ldr	r1, [pc, #16]	; (d77d0 <_GLOBAL__sub_I_RGB+0x18>)
   d77be:	2300      	movs	r3, #0
   d77c0:	6083      	str	r3, [r0, #8]
   d77c2:	f000 bba9 	b.w	d7f18 <__aeabi_atexit>
   d77c6:	bf00      	nop
   d77c8:	2003e644 	.word	0x2003e644
   d77cc:	2003dfa0 	.word	0x2003dfa0
   d77d0:	000d7765 	.word	0x000d7765

000d77d4 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d77d4:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   d77d6:	b510      	push	{r4, lr}
   d77d8:	b90a      	cbnz	r2, d77de <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   d77da:	f000 fba2 	bl	d7f22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d77de:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   d77e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d77e4:	4718      	bx	r3

000d77e6 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d77e6:	f7ff b81d 	b.w	d6824 <HAL_Interrupts_Disable_All>

000d77ea <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d77ea:	f7ff b813 	b.w	d6814 <HAL_Interrupts_Enable_All>

000d77ee <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d77ee:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d77f0:	2300      	movs	r3, #0
   d77f2:	6083      	str	r3, [r0, #8]
   d77f4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d77f6:	4604      	mov	r4, r0
   d77f8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d77fa:	b12b      	cbz	r3, d7808 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d77fc:	2202      	movs	r2, #2
   d77fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7800:	68eb      	ldr	r3, [r5, #12]
   d7802:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7804:	68ab      	ldr	r3, [r5, #8]
   d7806:	60a3      	str	r3, [r4, #8]
	}
    }
   d7808:	4620      	mov	r0, r4
   d780a:	bd38      	pop	{r3, r4, r5, pc}

000d780c <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   d780e:	4b0c      	ldr	r3, [pc, #48]	; (d7840 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
   d7810:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d7814:	4606      	mov	r6, r0
   d7816:	460f      	mov	r7, r1
   d7818:	461c      	mov	r4, r3
    delete handlers[pin];
   d781a:	b12d      	cbz	r5, d7828 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d781c:	4628      	mov	r0, r5
   d781e:	f7ff ff2d 	bl	d767c <_ZNSt14_Function_baseD1Ev>
   d7822:	4628      	mov	r0, r5
   d7824:	f7fc fc3b 	bl	d409e <_ZdlPv>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   d7828:	2010      	movs	r0, #16
   d782a:	f7fc fc34 	bl	d4096 <_Znwj>
   d782e:	4605      	mov	r5, r0
   d7830:	b110      	cbz	r0, d7838 <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
   d7832:	4639      	mov	r1, r7
   d7834:	f7ff ffdb 	bl	d77ee <_ZNSt8functionIFvvEEC1ERKS1_>
   d7838:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   d783c:	4628      	mov	r0, r5
   d783e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7840:	2003e654 	.word	0x2003e654

000d7844 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7844:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7846:	460c      	mov	r4, r1
   d7848:	b085      	sub	sp, #20
   d784a:	4605      	mov	r5, r0
   d784c:	4617      	mov	r7, r2
   d784e:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
   d7850:	f7fe ffd8 	bl	d6804 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   d7854:	4621      	mov	r1, r4
   d7856:	4628      	mov	r0, r5
   d7858:	f7ff ffd8 	bl	d780c <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   d785c:	4604      	mov	r4, r0
   d785e:	b1b0      	cbz	r0, d788e <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4a>
        HAL_InterruptExtraConfiguration extra = {0};
   d7860:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7862:	2304      	movs	r3, #4
  if (priority >= 0) {
   d7864:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   d7866:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7868:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d786c:	bfa5      	ittet	ge
   d786e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7872:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d7876:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d7878:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
   d787a:	9300      	str	r3, [sp, #0]
   d787c:	4602      	mov	r2, r0
   d787e:	463b      	mov	r3, r7
   d7880:	4905      	ldr	r1, [pc, #20]	; (d7898 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7882:	bfa8      	it	ge
   d7884:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
   d7888:	4628      	mov	r0, r5
   d788a:	f7fe ffb3 	bl	d67f4 <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
   d788e:	1c20      	adds	r0, r4, #0
   d7890:	bf18      	it	ne
   d7892:	2001      	movne	r0, #1
   d7894:	b005      	add	sp, #20
   d7896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7898:	000d77d5 	.word	0x000d77d5

000d789c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d789c:	4b02      	ldr	r3, [pc, #8]	; (d78a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d789e:	681a      	ldr	r2, [r3, #0]
   d78a0:	4b02      	ldr	r3, [pc, #8]	; (d78ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d78a2:	601a      	str	r2, [r3, #0]
   d78a4:	4770      	bx	lr
   d78a6:	bf00      	nop
   d78a8:	2003df38 	.word	0x2003df38
   d78ac:	2003e6e4 	.word	0x2003e6e4

000d78b0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d78b0:	4b01      	ldr	r3, [pc, #4]	; (d78b8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d78b2:	4a02      	ldr	r2, [pc, #8]	; (d78bc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d78b4:	601a      	str	r2, [r3, #0]
   d78b6:	4770      	bx	lr
   d78b8:	2003e6e8 	.word	0x2003e6e8
   d78bc:	000d9515 	.word	0x000d9515

000d78c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d78c0:	2100      	movs	r1, #0
   d78c2:	f7ff b867 	b.w	d6994 <system_delay_ms>

000d78c6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d78c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78c8:	4606      	mov	r6, r0
   d78ca:	460d      	mov	r5, r1
   d78cc:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d78ce:	2400      	movs	r4, #0
  while (size--) {
   d78d0:	42bd      	cmp	r5, r7
   d78d2:	d00c      	beq.n	d78ee <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d78d4:	6833      	ldr	r3, [r6, #0]
   d78d6:	f815 1b01 	ldrb.w	r1, [r5], #1
   d78da:	689b      	ldr	r3, [r3, #8]
   d78dc:	4630      	mov	r0, r6
   d78de:	4798      	blx	r3
     if (chunk>=0)
   d78e0:	2800      	cmp	r0, #0
   d78e2:	db01      	blt.n	d78e8 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d78e4:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d78e6:	e7f3      	b.n	d78d0 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d78e8:	2c00      	cmp	r4, #0
   d78ea:	bf08      	it	eq
   d78ec:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d78ee:	4620      	mov	r0, r4
   d78f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78f2 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d78f2:	b570      	push	{r4, r5, r6, lr}
   d78f4:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d78f6:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d78f8:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d78fa:	b149      	cbz	r1, d7910 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d78fc:	f001 fa40 	bl	d8d80 <strlen>
   d7900:	682b      	ldr	r3, [r5, #0]
   d7902:	4602      	mov	r2, r0
   d7904:	4621      	mov	r1, r4
   d7906:	4628      	mov	r0, r5
   d7908:	68db      	ldr	r3, [r3, #12]
    }
   d790a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d790e:	4718      	bx	r3
    }
   d7910:	bd70      	pop	{r4, r5, r6, pc}

000d7912 <_ZN5Print5printEPKc>:
   d7912:	b508      	push	{r3, lr}
   d7914:	f7ff ffed 	bl	d78f2 <_ZN5Print5writeEPKc>
   d7918:	bd08      	pop	{r3, pc}

000d791a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d791a:	6803      	ldr	r3, [r0, #0]
   d791c:	689b      	ldr	r3, [r3, #8]
   d791e:	4718      	bx	r3

000d7920 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7920:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7922:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7924:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7926:	f7ff fff8 	bl	d791a <_ZN5Print5printEc>
  n += print('\n');
   d792a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d792c:	4604      	mov	r4, r0
  n += print('\n');
   d792e:	4628      	mov	r0, r5
   d7930:	f7ff fff3 	bl	d791a <_ZN5Print5printEc>
  return n;
}
   d7934:	4420      	add	r0, r4
   d7936:	bd38      	pop	{r3, r4, r5, pc}

000d7938 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7938:	b530      	push	{r4, r5, lr}
   d793a:	b08b      	sub	sp, #44	; 0x2c
   d793c:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d793e:	2100      	movs	r1, #0
   d7940:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7944:	2a01      	cmp	r2, #1
   d7946:	bf98      	it	ls
   d7948:	220a      	movls	r2, #10
   d794a:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d794e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d7952:	fb05 3312 	mls	r3, r5, r2, r3
   d7956:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d795a:	2b09      	cmp	r3, #9
   d795c:	bf94      	ite	ls
   d795e:	3330      	addls	r3, #48	; 0x30
   d7960:	3337      	addhi	r3, #55	; 0x37
   d7962:	b2db      	uxtb	r3, r3
   d7964:	4621      	mov	r1, r4
   d7966:	f804 3901 	strb.w	r3, [r4], #-1
   d796a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d796c:	2d00      	cmp	r5, #0
   d796e:	d1ee      	bne.n	d794e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7970:	f7ff ffbf 	bl	d78f2 <_ZN5Print5writeEPKc>
}
   d7974:	b00b      	add	sp, #44	; 0x2c
   d7976:	bd30      	pop	{r4, r5, pc}

000d7978 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d7978:	b410      	push	{r4}
  if (base == 0) return write(n);
   d797a:	b92a      	cbnz	r2, d7988 <_ZN5Print5printEmi+0x10>
   d797c:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d797e:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7982:	689b      	ldr	r3, [r3, #8]
   d7984:	b2c9      	uxtb	r1, r1
   d7986:	4718      	bx	r3
  else return printNumber(n, base);
   d7988:	b2d2      	uxtb	r2, r2
}
   d798a:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d798e:	f7ff bfd3 	b.w	d7938 <_ZN5Print11printNumberEmh>

000d7992 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7992:	f7ff bff1 	b.w	d7978 <_ZN5Print5printEmi>

000d7996 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d7996:	b538      	push	{r3, r4, r5, lr}
   d7998:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d799a:	f7ff ffed 	bl	d7978 <_ZN5Print5printEmi>
   d799e:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d79a0:	4628      	mov	r0, r5
   d79a2:	f7ff ffbd 	bl	d7920 <_ZN5Print7printlnEv>
  return n;
}
   d79a6:	4420      	add	r0, r4
   d79a8:	bd38      	pop	{r3, r4, r5, pc}

000d79aa <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d79aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79ae:	4607      	mov	r7, r0
   d79b0:	460e      	mov	r6, r1
  if (base == 0) {
   d79b2:	4615      	mov	r5, r2
   d79b4:	b92a      	cbnz	r2, d79c2 <_ZN5Print5printEli+0x18>
    return write(n);
   d79b6:	6803      	ldr	r3, [r0, #0]
   d79b8:	b2c9      	uxtb	r1, r1
   d79ba:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d79bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d79c0:	4718      	bx	r3
  } else if (base == 10) {
   d79c2:	2a0a      	cmp	r2, #10
   d79c4:	d102      	bne.n	d79cc <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d79c6:	2900      	cmp	r1, #0
   d79c8:	da01      	bge.n	d79ce <_ZN5Print5printEli+0x24>
   d79ca:	e004      	b.n	d79d6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d79cc:	b2d2      	uxtb	r2, r2
  }
}
   d79ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d79d2:	f7ff bfb1 	b.w	d7938 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d79d6:	212d      	movs	r1, #45	; 0x2d
   d79d8:	f7ff ff9f 	bl	d791a <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d79dc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d79de:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d79e0:	4271      	negs	r1, r6
   d79e2:	4638      	mov	r0, r7
   d79e4:	f7ff ffa8 	bl	d7938 <_ZN5Print11printNumberEmh>
   d79e8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d79ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d79f0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d79f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79f4:	ec57 6b10 	vmov	r6, r7, d0
   d79f8:	4682      	mov	sl, r0
   d79fa:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d79fc:	ee10 2a10 	vmov	r2, s0
   d7a00:	463b      	mov	r3, r7
   d7a02:	ee10 0a10 	vmov	r0, s0
   d7a06:	4639      	mov	r1, r7
   d7a08:	f001 f8b8 	bl	d8b7c <__aeabi_dcmpun>
   d7a0c:	b108      	cbz	r0, d7a12 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7a0e:	4948      	ldr	r1, [pc, #288]	; (d7b30 <_ZN5Print10printFloatEdh+0x140>)
   d7a10:	e012      	b.n	d7a38 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7a12:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d7a16:	f04f 32ff 	mov.w	r2, #4294967295
   d7a1a:	4b46      	ldr	r3, [pc, #280]	; (d7b34 <_ZN5Print10printFloatEdh+0x144>)
   d7a1c:	4630      	mov	r0, r6
   d7a1e:	4649      	mov	r1, r9
   d7a20:	f001 f8ac 	bl	d8b7c <__aeabi_dcmpun>
   d7a24:	b968      	cbnz	r0, d7a42 <_ZN5Print10printFloatEdh+0x52>
   d7a26:	f04f 32ff 	mov.w	r2, #4294967295
   d7a2a:	4b42      	ldr	r3, [pc, #264]	; (d7b34 <_ZN5Print10printFloatEdh+0x144>)
   d7a2c:	4630      	mov	r0, r6
   d7a2e:	4649      	mov	r1, r9
   d7a30:	f001 f886 	bl	d8b40 <__aeabi_dcmple>
   d7a34:	b928      	cbnz	r0, d7a42 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7a36:	4940      	ldr	r1, [pc, #256]	; (d7b38 <_ZN5Print10printFloatEdh+0x148>)
   d7a38:	4650      	mov	r0, sl
   d7a3a:	f7ff ff5a 	bl	d78f2 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7a42:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7a46:	4b3d      	ldr	r3, [pc, #244]	; (d7b3c <_ZN5Print10printFloatEdh+0x14c>)
   d7a48:	4630      	mov	r0, r6
   d7a4a:	4639      	mov	r1, r7
   d7a4c:	f001 f88c 	bl	d8b68 <__aeabi_dcmpgt>
   d7a50:	b108      	cbz	r0, d7a56 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7a52:	493b      	ldr	r1, [pc, #236]	; (d7b40 <_ZN5Print10printFloatEdh+0x150>)
   d7a54:	e7f0      	b.n	d7a38 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7a56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7a5a:	4b3a      	ldr	r3, [pc, #232]	; (d7b44 <_ZN5Print10printFloatEdh+0x154>)
   d7a5c:	4630      	mov	r0, r6
   d7a5e:	4639      	mov	r1, r7
   d7a60:	f001 f864 	bl	d8b2c <__aeabi_dcmplt>
   d7a64:	2800      	cmp	r0, #0
   d7a66:	d1f4      	bne.n	d7a52 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d7a68:	2200      	movs	r2, #0
   d7a6a:	2300      	movs	r3, #0
   d7a6c:	4630      	mov	r0, r6
   d7a6e:	4639      	mov	r1, r7
   d7a70:	f001 f85c 	bl	d8b2c <__aeabi_dcmplt>
   d7a74:	b140      	cbz	r0, d7a88 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d7a76:	212d      	movs	r1, #45	; 0x2d
   d7a78:	4650      	mov	r0, sl
   d7a7a:	f7ff ff4e 	bl	d791a <_ZN5Print5printEc>
     number = -number;
   d7a7e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d7a82:	4604      	mov	r4, r0
     number = -number;
   d7a84:	461f      	mov	r7, r3
   d7a86:	e000      	b.n	d7a8a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d7a88:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d7a8a:	492f      	ldr	r1, [pc, #188]	; (d7b48 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d7a8c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d7a90:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d7a92:	fa5f f388 	uxtb.w	r3, r8
   d7a96:	429d      	cmp	r5, r3
   d7a98:	d906      	bls.n	d7aa8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d7a9a:	2200      	movs	r2, #0
   d7a9c:	4b2b      	ldr	r3, [pc, #172]	; (d7b4c <_ZN5Print10printFloatEdh+0x15c>)
   d7a9e:	f000 fefd 	bl	d889c <__aeabi_ddiv>
   d7aa2:	f108 0801 	add.w	r8, r8, #1
   d7aa6:	e7f4      	b.n	d7a92 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d7aa8:	4632      	mov	r2, r6
   d7aaa:	463b      	mov	r3, r7
   d7aac:	f000 fc1a 	bl	d82e4 <__adddf3>
   d7ab0:	460f      	mov	r7, r1
   d7ab2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d7ab4:	f001 f8a0 	bl	d8bf8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7ab8:	220a      	movs	r2, #10
   d7aba:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d7abc:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7abe:	4650      	mov	r0, sl
   d7ac0:	f7ff ff3a 	bl	d7938 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7ac4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d7ac6:	b37d      	cbz	r5, d7b28 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d7ac8:	4640      	mov	r0, r8
   d7aca:	f000 fd47 	bl	d855c <__aeabi_ui2d>
   d7ace:	4602      	mov	r2, r0
   d7ad0:	460b      	mov	r3, r1
   d7ad2:	4630      	mov	r0, r6
   d7ad4:	4639      	mov	r1, r7
   d7ad6:	f000 fc03 	bl	d82e0 <__aeabi_dsub>
   d7ada:	4606      	mov	r6, r0
   d7adc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7ade:	4650      	mov	r0, sl
   d7ae0:	491b      	ldr	r1, [pc, #108]	; (d7b50 <_ZN5Print10printFloatEdh+0x160>)
   d7ae2:	f7ff ff06 	bl	d78f2 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d7ae6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d7ae8:	4b18      	ldr	r3, [pc, #96]	; (d7b4c <_ZN5Print10printFloatEdh+0x15c>)
   d7aea:	2200      	movs	r2, #0
   d7aec:	4630      	mov	r0, r6
   d7aee:	4639      	mov	r1, r7
   d7af0:	f000 fdaa 	bl	d8648 <__aeabi_dmul>
   d7af4:	460f      	mov	r7, r1
   d7af6:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d7af8:	f001 f856 	bl	d8ba8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7afc:	220a      	movs	r2, #10
   d7afe:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d7b00:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7b02:	4650      	mov	r0, sl
   d7b04:	f7ff ff51 	bl	d79aa <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d7b08:	4404      	add	r4, r0
    remainder -= toPrint;
   d7b0a:	4640      	mov	r0, r8
   d7b0c:	f000 fd36 	bl	d857c <__aeabi_i2d>
   d7b10:	4602      	mov	r2, r0
   d7b12:	460b      	mov	r3, r1
   d7b14:	4630      	mov	r0, r6
   d7b16:	4639      	mov	r1, r7
   d7b18:	f000 fbe2 	bl	d82e0 <__aeabi_dsub>
   d7b1c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7b1e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d7b22:	4606      	mov	r6, r0
   d7b24:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7b26:	d1df      	bne.n	d7ae8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7b28:	4620      	mov	r0, r4
   d7b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b2e:	bf00      	nop
   d7b30:	000d953e 	.word	0x000d953e
   d7b34:	7fefffff 	.word	0x7fefffff
   d7b38:	000d9548 	.word	0x000d9548
   d7b3c:	41efffff 	.word	0x41efffff
   d7b40:	000d9542 	.word	0x000d9542
   d7b44:	c1efffff 	.word	0xc1efffff
   d7b48:	3fe00000 	.word	0x3fe00000
   d7b4c:	40240000 	.word	0x40240000
   d7b50:	000d9546 	.word	0x000d9546

000d7b54 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d7b54:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d7b56:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d7b58:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d7b5a:	f7ff ff49 	bl	d79f0 <_ZN5Print10printFloatEdh>
   d7b5e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d7b60:	4628      	mov	r0, r5
   d7b62:	f7ff fedd 	bl	d7920 <_ZN5Print7printlnEv>
  return n;
}
   d7b66:	4420      	add	r0, r4
   d7b68:	bd38      	pop	{r3, r4, r5, pc}

000d7b6a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b6a:	b40c      	push	{r2, r3}
   d7b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b70:	b087      	sub	sp, #28
   d7b72:	af00      	add	r7, sp, #0
   d7b74:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7b78:	4605      	mov	r5, r0
   d7b7a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7b7e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b80:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7b82:	4623      	mov	r3, r4
   d7b84:	464a      	mov	r2, r9
   d7b86:	2114      	movs	r1, #20
   d7b88:	1d38      	adds	r0, r7, #4
   d7b8a:	f7fe ff41 	bl	d6a10 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7b8e:	2813      	cmp	r0, #19
   d7b90:	d805      	bhi.n	d7b9e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b92:	1d39      	adds	r1, r7, #4
   d7b94:	4628      	mov	r0, r5
   d7b96:	f7ff feac 	bl	d78f2 <_ZN5Print5writeEPKc>
   d7b9a:	4604      	mov	r4, r0
   d7b9c:	e013      	b.n	d7bc6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7b9e:	f100 0308 	add.w	r3, r0, #8
   d7ba2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7ba6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7ba8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7bac:	1c41      	adds	r1, r0, #1
   d7bae:	4623      	mov	r3, r4
   d7bb0:	464a      	mov	r2, r9
   d7bb2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7bb4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7bb6:	f7fe ff2b 	bl	d6a10 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7bba:	4669      	mov	r1, sp
   d7bbc:	4628      	mov	r0, r5
   d7bbe:	f7ff fe98 	bl	d78f2 <_ZN5Print5writeEPKc>
   d7bc2:	4604      	mov	r4, r0
   d7bc4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7bc6:	b11e      	cbz	r6, d7bd0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7bc8:	4628      	mov	r0, r5
   d7bca:	f7ff fea9 	bl	d7920 <_ZN5Print7printlnEv>
   d7bce:	4404      	add	r4, r0
    return n;
}
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	371c      	adds	r7, #28
   d7bd4:	46bd      	mov	sp, r7
   d7bd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bda:	b002      	add	sp, #8
   d7bdc:	4770      	bx	lr

000d7bde <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7bde:	b510      	push	{r4, lr}
   d7be0:	4604      	mov	r4, r0
{
	free(buffer);
   d7be2:	6800      	ldr	r0, [r0, #0]
   d7be4:	f7fe ff04 	bl	d69f0 <free>
}
   d7be8:	4620      	mov	r0, r4
   d7bea:	bd10      	pop	{r4, pc}

000d7bec <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7bec:	b510      	push	{r4, lr}
   d7bee:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7bf0:	6800      	ldr	r0, [r0, #0]
   d7bf2:	b108      	cbz	r0, d7bf8 <_ZN6String10invalidateEv+0xc>
   d7bf4:	f7fe fefc 	bl	d69f0 <free>
	buffer = NULL;
   d7bf8:	2300      	movs	r3, #0
   d7bfa:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7bfc:	60a3      	str	r3, [r4, #8]
   d7bfe:	6063      	str	r3, [r4, #4]
   d7c00:	bd10      	pop	{r4, pc}

000d7c02 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7c02:	b538      	push	{r3, r4, r5, lr}
   d7c04:	4604      	mov	r4, r0
   d7c06:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7c08:	6800      	ldr	r0, [r0, #0]
   d7c0a:	3101      	adds	r1, #1
   d7c0c:	f7fe fef8 	bl	d6a00 <realloc>
	if (newbuffer) {
   d7c10:	b110      	cbz	r0, d7c18 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7c12:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7c16:	2001      	movs	r0, #1
	}
	return 0;
}
   d7c18:	bd38      	pop	{r3, r4, r5, pc}

000d7c1a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7c1a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7c1c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7c1e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7c20:	b113      	cbz	r3, d7c28 <_ZN6String7reserveEj+0xe>
   d7c22:	6843      	ldr	r3, [r0, #4]
   d7c24:	428b      	cmp	r3, r1
   d7c26:	d207      	bcs.n	d7c38 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7c28:	4620      	mov	r0, r4
   d7c2a:	f7ff ffea 	bl	d7c02 <_ZN6String12changeBufferEj>
   d7c2e:	b120      	cbz	r0, d7c3a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7c30:	68a3      	ldr	r3, [r4, #8]
   d7c32:	b90b      	cbnz	r3, d7c38 <_ZN6String7reserveEj+0x1e>
   d7c34:	6822      	ldr	r2, [r4, #0]
   d7c36:	7013      	strb	r3, [r2, #0]
   d7c38:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7c3a:	bd10      	pop	{r4, pc}

000d7c3c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c3c:	b570      	push	{r4, r5, r6, lr}
   d7c3e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7c40:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c42:	4604      	mov	r4, r0
   d7c44:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7c46:	f7ff ffe8 	bl	d7c1a <_ZN6String7reserveEj>
   d7c4a:	b918      	cbnz	r0, d7c54 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f7ff ffcd 	bl	d7bec <_ZN6String10invalidateEv>
		return *this;
   d7c52:	e009      	b.n	d7c68 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7c54:	462a      	mov	r2, r5
   d7c56:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7c58:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7c5a:	6820      	ldr	r0, [r4, #0]
   d7c5c:	f001 f84a 	bl	d8cf4 <memcpy>
	buffer[len] = 0;
   d7c60:	6822      	ldr	r2, [r4, #0]
   d7c62:	68a3      	ldr	r3, [r4, #8]
   d7c64:	2100      	movs	r1, #0
   d7c66:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7c68:	4620      	mov	r0, r4
   d7c6a:	bd70      	pop	{r4, r5, r6, pc}

000d7c6c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7c6c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c6e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7c70:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c72:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7c74:	6043      	str	r3, [r0, #4]
	len = 0;
   d7c76:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7c78:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7c7a:	460d      	mov	r5, r1
   d7c7c:	b139      	cbz	r1, d7c8e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7c7e:	4608      	mov	r0, r1
   d7c80:	f001 f87e 	bl	d8d80 <strlen>
   d7c84:	4629      	mov	r1, r5
   d7c86:	4602      	mov	r2, r0
   d7c88:	4620      	mov	r0, r4
   d7c8a:	f7ff ffd7 	bl	d7c3c <_ZN6String4copyEPKcj>
}
   d7c8e:	4620      	mov	r0, r4
   d7c90:	bd38      	pop	{r3, r4, r5, pc}

000d7c92 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7c92:	b538      	push	{r3, r4, r5, lr}
   d7c94:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7c96:	460c      	mov	r4, r1
   d7c98:	b141      	cbz	r1, d7cac <_ZN6StringaSEPKc+0x1a>
   d7c9a:	4608      	mov	r0, r1
   d7c9c:	f001 f870 	bl	d8d80 <strlen>
   d7ca0:	4621      	mov	r1, r4
   d7ca2:	4602      	mov	r2, r0
   d7ca4:	4628      	mov	r0, r5
   d7ca6:	f7ff ffc9 	bl	d7c3c <_ZN6String4copyEPKcj>
   d7caa:	e001      	b.n	d7cb0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7cac:	f7ff ff9e 	bl	d7bec <_ZN6String10invalidateEv>

	return *this;
}
   d7cb0:	4628      	mov	r0, r5
   d7cb2:	bd38      	pop	{r3, r4, r5, pc}

000d7cb4 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7cb4:	b510      	push	{r4, lr}
   d7cb6:	2400      	movs	r4, #0
   d7cb8:	7004      	strb	r4, [r0, #0]
   d7cba:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d7cbc:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7cbe:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d7cc2:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d7cc4:	dd07      	ble.n	d7cd6 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d7cc6:	3901      	subs	r1, #1
   d7cc8:	4299      	cmp	r1, r3
   d7cca:	d209      	bcs.n	d7ce0 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d7ccc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d7cd0:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d7cd2:	2301      	movs	r3, #1
   d7cd4:	e001      	b.n	d7cda <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d7cd6:	d102      	bne.n	d7cde <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d7cd8:	2302      	movs	r3, #2
   d7cda:	7003      	strb	r3, [r0, #0]
   d7cdc:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d7cde:	8041      	strh	r1, [r0, #2]
    }
}
   d7ce0:	bd10      	pop	{r4, pc}
	...

000d7ce4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7ce4:	b570      	push	{r4, r5, r6, lr}
   d7ce6:	b086      	sub	sp, #24
   d7ce8:	4616      	mov	r6, r2
   d7cea:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7cec:	2300      	movs	r3, #0
   d7cee:	9302      	str	r3, [sp, #8]
   d7cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7cf2:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7cf4:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7cf8:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7cfa:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7cfe:	4631      	mov	r1, r6
   d7d00:	4628      	mov	r0, r5
   d7d02:	f7fe fe63 	bl	d69cc <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d7d06:	4633      	mov	r3, r6
   d7d08:	462a      	mov	r2, r5
   d7d0a:	4601      	mov	r1, r0
   d7d0c:	a804      	add	r0, sp, #16
   d7d0e:	f7ff ffd1 	bl	d7cb4 <_ZN11SleepResultC1EiPKtj>
   d7d12:	4b06      	ldr	r3, [pc, #24]	; (d7d2c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d7d14:	9804      	ldr	r0, [sp, #16]
   d7d16:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d7d1a:	6018      	str	r0, [r3, #0]
   d7d1c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d7d1e:	681a      	ldr	r2, [r3, #0]
   d7d20:	889b      	ldrh	r3, [r3, #4]
   d7d22:	6022      	str	r2, [r4, #0]
}
   d7d24:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d7d26:	80a3      	strh	r3, [r4, #4]
}
   d7d28:	b006      	add	sp, #24
   d7d2a:	bd70      	pop	{r4, r5, r6, pc}
   d7d2c:	2003e6ec 	.word	0x2003e6ec

000d7d30 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7d30:	4b04      	ldr	r3, [pc, #16]	; (d7d44 <_GLOBAL__sub_I_System+0x14>)
   d7d32:	2000      	movs	r0, #0
   d7d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7d38:	7018      	strb	r0, [r3, #0]
   d7d3a:	8058      	strh	r0, [r3, #2]
   d7d3c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7d3e:	f7fe be21 	b.w	d6984 <set_system_mode>
   d7d42:	bf00      	nop
   d7d44:	2003e6ec 	.word	0x2003e6ec

000d7d48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d48:	2200      	movs	r2, #0
   d7d4a:	4611      	mov	r1, r2
   d7d4c:	6840      	ldr	r0, [r0, #4]
   d7d4e:	f7fe be01 	b.w	d6954 <network_listening>

000d7d52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7d52:	2200      	movs	r2, #0
   d7d54:	4611      	mov	r1, r2
   d7d56:	6840      	ldr	r0, [r0, #4]
   d7d58:	f7fe be0c 	b.w	d6974 <network_get_listen_timeout>

000d7d5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7d5c:	2200      	movs	r2, #0
   d7d5e:	6840      	ldr	r0, [r0, #4]
   d7d60:	f7fe be00 	b.w	d6964 <network_set_listen_timeout>

000d7d64 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d64:	2200      	movs	r2, #0
   d7d66:	f081 0101 	eor.w	r1, r1, #1
   d7d6a:	6840      	ldr	r0, [r0, #4]
   d7d6c:	f7fe bdea 	b.w	d6944 <network_listen>

000d7d70 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7d70:	2300      	movs	r3, #0
   d7d72:	461a      	mov	r2, r3
   d7d74:	4619      	mov	r1, r3
   d7d76:	6840      	ldr	r0, [r0, #4]
   d7d78:	f7fe bddc 	b.w	d6934 <network_off>

000d7d7c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7d7c:	2300      	movs	r3, #0
   d7d7e:	461a      	mov	r2, r3
   d7d80:	4619      	mov	r1, r3
   d7d82:	6840      	ldr	r0, [r0, #4]
   d7d84:	f7fe bdce 	b.w	d6924 <network_on>

000d7d88 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7d88:	2200      	movs	r2, #0
   d7d8a:	4611      	mov	r1, r2
   d7d8c:	6840      	ldr	r0, [r0, #4]
   d7d8e:	f7fe bdc1 	b.w	d6914 <network_ready>

000d7d92 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7d92:	2200      	movs	r2, #0
   d7d94:	4611      	mov	r1, r2
   d7d96:	6840      	ldr	r0, [r0, #4]
   d7d98:	f7fe bdac 	b.w	d68f4 <network_connecting>

000d7d9c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d9c:	2200      	movs	r2, #0
   d7d9e:	2102      	movs	r1, #2
   d7da0:	6840      	ldr	r0, [r0, #4]
   d7da2:	f7fe bdaf 	b.w	d6904 <network_disconnect>

000d7da6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7da6:	2300      	movs	r3, #0
   d7da8:	461a      	mov	r2, r3
   d7daa:	6840      	ldr	r0, [r0, #4]
   d7dac:	f7fe bd9a 	b.w	d68e4 <network_connect>

000d7db0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7db0:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7db2:	2203      	movs	r2, #3
   d7db4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7db6:	4a02      	ldr	r2, [pc, #8]	; (d7dc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7db8:	601a      	str	r2, [r3, #0]
   d7dba:	4770      	bx	lr
   d7dbc:	2003e6f4 	.word	0x2003e6f4
   d7dc0:	000d9554 	.word	0x000d9554

000d7dc4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7dc4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7dc6:	4d0b      	ldr	r5, [pc, #44]	; (d7df4 <_Z19__fetch_global_Wirev+0x30>)
   d7dc8:	6829      	ldr	r1, [r5, #0]
   d7dca:	f011 0401 	ands.w	r4, r1, #1
   d7dce:	d10f      	bne.n	d7df0 <_Z19__fetch_global_Wirev+0x2c>
   d7dd0:	4628      	mov	r0, r5
   d7dd2:	f7fc f968 	bl	d40a6 <__cxa_guard_acquire>
   d7dd6:	b158      	cbz	r0, d7df0 <_Z19__fetch_global_Wirev+0x2c>
   d7dd8:	4621      	mov	r1, r4
   d7dda:	4807      	ldr	r0, [pc, #28]	; (d7df8 <_Z19__fetch_global_Wirev+0x34>)
   d7ddc:	f7ff fa9a 	bl	d7314 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7de0:	4628      	mov	r0, r5
   d7de2:	f7fc f965 	bl	d40b0 <__cxa_guard_release>
   d7de6:	4a05      	ldr	r2, [pc, #20]	; (d7dfc <_Z19__fetch_global_Wirev+0x38>)
   d7de8:	4905      	ldr	r1, [pc, #20]	; (d7e00 <_Z19__fetch_global_Wirev+0x3c>)
   d7dea:	4803      	ldr	r0, [pc, #12]	; (d7df8 <_Z19__fetch_global_Wirev+0x34>)
   d7dec:	f000 f894 	bl	d7f18 <__aeabi_atexit>
	return wire;
}
   d7df0:	4801      	ldr	r0, [pc, #4]	; (d7df8 <_Z19__fetch_global_Wirev+0x34>)
   d7df2:	bd38      	pop	{r3, r4, r5, pc}
   d7df4:	2003e6fc 	.word	0x2003e6fc
   d7df8:	2003e714 	.word	0x2003e714
   d7dfc:	2003dfa0 	.word	0x2003dfa0
   d7e00:	000d72bd 	.word	0x000d72bd

000d7e04 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7e04:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d7e06:	4c0b      	ldr	r4, [pc, #44]	; (d7e34 <_Z20__fetch_global_Wire1v+0x30>)
   d7e08:	6823      	ldr	r3, [r4, #0]
   d7e0a:	07db      	lsls	r3, r3, #31
   d7e0c:	d40f      	bmi.n	d7e2e <_Z20__fetch_global_Wire1v+0x2a>
   d7e0e:	4620      	mov	r0, r4
   d7e10:	f7fc f949 	bl	d40a6 <__cxa_guard_acquire>
   d7e14:	b158      	cbz	r0, d7e2e <_Z20__fetch_global_Wire1v+0x2a>
   d7e16:	2101      	movs	r1, #1
   d7e18:	4807      	ldr	r0, [pc, #28]	; (d7e38 <_Z20__fetch_global_Wire1v+0x34>)
   d7e1a:	f7ff fa7b 	bl	d7314 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7e1e:	4620      	mov	r0, r4
   d7e20:	f7fc f946 	bl	d40b0 <__cxa_guard_release>
   d7e24:	4a05      	ldr	r2, [pc, #20]	; (d7e3c <_Z20__fetch_global_Wire1v+0x38>)
   d7e26:	4906      	ldr	r1, [pc, #24]	; (d7e40 <_Z20__fetch_global_Wire1v+0x3c>)
   d7e28:	4803      	ldr	r0, [pc, #12]	; (d7e38 <_Z20__fetch_global_Wire1v+0x34>)
   d7e2a:	f000 f875 	bl	d7f18 <__aeabi_atexit>
	return wire;
}
   d7e2e:	4802      	ldr	r0, [pc, #8]	; (d7e38 <_Z20__fetch_global_Wire1v+0x34>)
   d7e30:	bd10      	pop	{r4, pc}
   d7e32:	bf00      	nop
   d7e34:	2003e728 	.word	0x2003e728
   d7e38:	2003e700 	.word	0x2003e700
   d7e3c:	2003dfa0 	.word	0x2003dfa0
   d7e40:	000d72bd 	.word	0x000d72bd

000d7e44 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e44:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7e46:	4c0c      	ldr	r4, [pc, #48]	; (d7e78 <_GLOBAL__sub_I_SPI+0x34>)
   d7e48:	4e0c      	ldr	r6, [pc, #48]	; (d7e7c <_GLOBAL__sub_I_SPI+0x38>)
   d7e4a:	4d0d      	ldr	r5, [pc, #52]	; (d7e80 <_GLOBAL__sub_I_SPI+0x3c>)
   d7e4c:	2100      	movs	r1, #0
   d7e4e:	4620      	mov	r0, r4
   d7e50:	f7ff f9de 	bl	d7210 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e54:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e56:	4c0b      	ldr	r4, [pc, #44]	; (d7e84 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7e58:	4632      	mov	r2, r6
   d7e5a:	4629      	mov	r1, r5
   d7e5c:	f000 f85c 	bl	d7f18 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e60:	2101      	movs	r1, #1
   d7e62:	4620      	mov	r0, r4
   d7e64:	f7ff f9d4 	bl	d7210 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e68:	4632      	mov	r2, r6
   d7e6a:	4629      	mov	r1, r5
   d7e6c:	4620      	mov	r0, r4
   d7e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7e72:	f000 b851 	b.w	d7f18 <__aeabi_atexit>
   d7e76:	bf00      	nop
   d7e78:	2003e730 	.word	0x2003e730
   d7e7c:	2003dfa0 	.word	0x2003dfa0
   d7e80:	000d7201 	.word	0x000d7201
   d7e84:	2003e740 	.word	0x2003e740

000d7e88 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7e88:	b510      	push	{r4, lr}
   d7e8a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7e8c:	480f      	ldr	r0, [pc, #60]	; (d7ecc <pinAvailable+0x44>)
   d7e8e:	f7ff f9d3 	bl	d7238 <_ZN8SPIClass9isEnabledEv>
   d7e92:	b128      	cbz	r0, d7ea0 <pinAvailable+0x18>
   d7e94:	f1a4 030b 	sub.w	r3, r4, #11
   d7e98:	2b02      	cmp	r3, #2
   d7e9a:	d801      	bhi.n	d7ea0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7e9c:	2000      	movs	r0, #0
   d7e9e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7ea0:	f7ff ff90 	bl	d7dc4 <_Z19__fetch_global_Wirev>
   d7ea4:	f7ff fa73 	bl	d738e <_ZN7TwoWire9isEnabledEv>
   d7ea8:	b108      	cbz	r0, d7eae <pinAvailable+0x26>
   d7eaa:	2c01      	cmp	r4, #1
   d7eac:	d9f6      	bls.n	d7e9c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7eae:	f7ff fabd 	bl	d742c <_Z22__fetch_global_Serial1v>
   d7eb2:	f7ff fab8 	bl	d7426 <_ZN11USARTSerial9isEnabledEv>
   d7eb6:	b118      	cbz	r0, d7ec0 <pinAvailable+0x38>
   d7eb8:	f1a4 0309 	sub.w	r3, r4, #9
   d7ebc:	2b01      	cmp	r3, #1
   d7ebe:	d9ed      	bls.n	d7e9c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7ec0:	2c23      	cmp	r4, #35	; 0x23
   d7ec2:	bf8c      	ite	hi
   d7ec4:	2000      	movhi	r0, #0
   d7ec6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7ec8:	bd10      	pop	{r4, pc}
   d7eca:	bf00      	nop
   d7ecc:	2003e730 	.word	0x2003e730

000d7ed0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ed0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7ed2:	b538      	push	{r3, r4, r5, lr}
   d7ed4:	4604      	mov	r4, r0
   d7ed6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ed8:	d80a      	bhi.n	d7ef0 <pinMode+0x20>
   d7eda:	29ff      	cmp	r1, #255	; 0xff
   d7edc:	d008      	beq.n	d7ef0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7ede:	f7ff ffd3 	bl	d7e88 <pinAvailable>
   d7ee2:	b128      	cbz	r0, d7ef0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7ee4:	4629      	mov	r1, r5
   d7ee6:	4620      	mov	r0, r4
}
   d7ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7eec:	f7fe bc6a 	b.w	d67c4 <HAL_Pin_Mode>
   d7ef0:	bd38      	pop	{r3, r4, r5, pc}

000d7ef2 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7ef2:	b510      	push	{r4, lr}
   d7ef4:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ef6:	f7fe fc6d 	bl	d67d4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7efa:	3804      	subs	r0, #4
   d7efc:	b2c0      	uxtb	r0, r0
   d7efe:	2801      	cmp	r0, #1
   d7f00:	d908      	bls.n	d7f14 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7f02:	4620      	mov	r0, r4
   d7f04:	f7ff ffc0 	bl	d7e88 <pinAvailable>
   d7f08:	b120      	cbz	r0, d7f14 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7f0a:	4620      	mov	r0, r4
}
   d7f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7f10:	f7fe bc68 	b.w	d67e4 <HAL_GPIO_Read>
}
   d7f14:	2000      	movs	r0, #0
   d7f16:	bd10      	pop	{r4, pc}

000d7f18 <__aeabi_atexit>:
   d7f18:	460b      	mov	r3, r1
   d7f1a:	4601      	mov	r1, r0
   d7f1c:	4618      	mov	r0, r3
   d7f1e:	f000 bedb 	b.w	d8cd8 <__cxa_atexit>

000d7f22 <_ZSt25__throw_bad_function_callv>:
   d7f22:	b508      	push	{r3, lr}
   d7f24:	f7fe fd7c 	bl	d6a20 <abort>

000d7f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f28:	4b18      	ldr	r3, [pc, #96]	; (d7f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f2a:	681a      	ldr	r2, [r3, #0]
   d7f2c:	07d1      	lsls	r1, r2, #31
   d7f2e:	bf5c      	itt	pl
   d7f30:	2201      	movpl	r2, #1
   d7f32:	601a      	strpl	r2, [r3, #0]
   d7f34:	4b16      	ldr	r3, [pc, #88]	; (d7f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7f36:	681a      	ldr	r2, [r3, #0]
   d7f38:	07d2      	lsls	r2, r2, #31
   d7f3a:	bf5c      	itt	pl
   d7f3c:	2201      	movpl	r2, #1
   d7f3e:	601a      	strpl	r2, [r3, #0]
   d7f40:	4b14      	ldr	r3, [pc, #80]	; (d7f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f42:	681a      	ldr	r2, [r3, #0]
   d7f44:	07d0      	lsls	r0, r2, #31
   d7f46:	bf5c      	itt	pl
   d7f48:	2201      	movpl	r2, #1
   d7f4a:	601a      	strpl	r2, [r3, #0]
   d7f4c:	4b12      	ldr	r3, [pc, #72]	; (d7f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f4e:	681a      	ldr	r2, [r3, #0]
   d7f50:	07d1      	lsls	r1, r2, #31
   d7f52:	bf5c      	itt	pl
   d7f54:	2201      	movpl	r2, #1
   d7f56:	601a      	strpl	r2, [r3, #0]
   d7f58:	4b10      	ldr	r3, [pc, #64]	; (d7f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f5a:	681a      	ldr	r2, [r3, #0]
   d7f5c:	07d2      	lsls	r2, r2, #31
   d7f5e:	bf5c      	itt	pl
   d7f60:	2201      	movpl	r2, #1
   d7f62:	601a      	strpl	r2, [r3, #0]
   d7f64:	4b0e      	ldr	r3, [pc, #56]	; (d7fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f66:	681a      	ldr	r2, [r3, #0]
   d7f68:	07d0      	lsls	r0, r2, #31
   d7f6a:	bf5c      	itt	pl
   d7f6c:	2201      	movpl	r2, #1
   d7f6e:	601a      	strpl	r2, [r3, #0]
   d7f70:	4b0c      	ldr	r3, [pc, #48]	; (d7fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f72:	681a      	ldr	r2, [r3, #0]
   d7f74:	07d1      	lsls	r1, r2, #31
   d7f76:	bf5c      	itt	pl
   d7f78:	2201      	movpl	r2, #1
   d7f7a:	601a      	strpl	r2, [r3, #0]
   d7f7c:	4b0a      	ldr	r3, [pc, #40]	; (d7fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f7e:	681a      	ldr	r2, [r3, #0]
   d7f80:	07d2      	lsls	r2, r2, #31
   d7f82:	bf5c      	itt	pl
   d7f84:	2201      	movpl	r2, #1
   d7f86:	601a      	strpl	r2, [r3, #0]
   d7f88:	4770      	bx	lr
   d7f8a:	bf00      	nop
   d7f8c:	2003e76c 	.word	0x2003e76c
   d7f90:	2003e768 	.word	0x2003e768
   d7f94:	2003e764 	.word	0x2003e764
   d7f98:	2003e760 	.word	0x2003e760
   d7f9c:	2003e75c 	.word	0x2003e75c
   d7fa0:	2003e758 	.word	0x2003e758
   d7fa4:	2003e754 	.word	0x2003e754
   d7fa8:	2003e750 	.word	0x2003e750

000d7fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7fac:	4b24      	ldr	r3, [pc, #144]	; (d8040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7fae:	681a      	ldr	r2, [r3, #0]
   d7fb0:	07d0      	lsls	r0, r2, #31
   d7fb2:	bf5c      	itt	pl
   d7fb4:	2201      	movpl	r2, #1
   d7fb6:	601a      	strpl	r2, [r3, #0]
   d7fb8:	4b22      	ldr	r3, [pc, #136]	; (d8044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7fba:	681a      	ldr	r2, [r3, #0]
   d7fbc:	07d1      	lsls	r1, r2, #31
   d7fbe:	bf5c      	itt	pl
   d7fc0:	2201      	movpl	r2, #1
   d7fc2:	601a      	strpl	r2, [r3, #0]
   d7fc4:	4b20      	ldr	r3, [pc, #128]	; (d8048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7fc6:	681a      	ldr	r2, [r3, #0]
   d7fc8:	07d2      	lsls	r2, r2, #31
   d7fca:	bf5c      	itt	pl
   d7fcc:	2201      	movpl	r2, #1
   d7fce:	601a      	strpl	r2, [r3, #0]
   d7fd0:	4b1e      	ldr	r3, [pc, #120]	; (d804c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7fd2:	681a      	ldr	r2, [r3, #0]
   d7fd4:	07d0      	lsls	r0, r2, #31
   d7fd6:	bf5c      	itt	pl
   d7fd8:	2201      	movpl	r2, #1
   d7fda:	601a      	strpl	r2, [r3, #0]
   d7fdc:	4b1c      	ldr	r3, [pc, #112]	; (d8050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7fde:	681a      	ldr	r2, [r3, #0]
   d7fe0:	07d1      	lsls	r1, r2, #31
   d7fe2:	bf5c      	itt	pl
   d7fe4:	2201      	movpl	r2, #1
   d7fe6:	601a      	strpl	r2, [r3, #0]
   d7fe8:	4b1a      	ldr	r3, [pc, #104]	; (d8054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7fea:	681a      	ldr	r2, [r3, #0]
   d7fec:	07d2      	lsls	r2, r2, #31
   d7fee:	bf5c      	itt	pl
   d7ff0:	2201      	movpl	r2, #1
   d7ff2:	601a      	strpl	r2, [r3, #0]
   d7ff4:	4b18      	ldr	r3, [pc, #96]	; (d8058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7ff6:	681a      	ldr	r2, [r3, #0]
   d7ff8:	07d0      	lsls	r0, r2, #31
   d7ffa:	bf5c      	itt	pl
   d7ffc:	2201      	movpl	r2, #1
   d7ffe:	601a      	strpl	r2, [r3, #0]
   d8000:	4b16      	ldr	r3, [pc, #88]	; (d805c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8002:	681a      	ldr	r2, [r3, #0]
   d8004:	07d1      	lsls	r1, r2, #31
   d8006:	bf5c      	itt	pl
   d8008:	2201      	movpl	r2, #1
   d800a:	601a      	strpl	r2, [r3, #0]
   d800c:	4b14      	ldr	r3, [pc, #80]	; (d8060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d800e:	681a      	ldr	r2, [r3, #0]
   d8010:	07d2      	lsls	r2, r2, #31
   d8012:	bf5c      	itt	pl
   d8014:	2201      	movpl	r2, #1
   d8016:	601a      	strpl	r2, [r3, #0]
   d8018:	4b12      	ldr	r3, [pc, #72]	; (d8064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d801a:	681a      	ldr	r2, [r3, #0]
   d801c:	07d0      	lsls	r0, r2, #31
   d801e:	bf5c      	itt	pl
   d8020:	2201      	movpl	r2, #1
   d8022:	601a      	strpl	r2, [r3, #0]
   d8024:	4b10      	ldr	r3, [pc, #64]	; (d8068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8026:	681a      	ldr	r2, [r3, #0]
   d8028:	07d1      	lsls	r1, r2, #31
   d802a:	bf5c      	itt	pl
   d802c:	2201      	movpl	r2, #1
   d802e:	601a      	strpl	r2, [r3, #0]
   d8030:	4b0e      	ldr	r3, [pc, #56]	; (d806c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8032:	681a      	ldr	r2, [r3, #0]
   d8034:	07d2      	lsls	r2, r2, #31
   d8036:	bf5c      	itt	pl
   d8038:	2201      	movpl	r2, #1
   d803a:	601a      	strpl	r2, [r3, #0]
   d803c:	4770      	bx	lr
   d803e:	bf00      	nop
   d8040:	2003e79c 	.word	0x2003e79c
   d8044:	2003e798 	.word	0x2003e798
   d8048:	2003e794 	.word	0x2003e794
   d804c:	2003e790 	.word	0x2003e790
   d8050:	2003e78c 	.word	0x2003e78c
   d8054:	2003e788 	.word	0x2003e788
   d8058:	2003e784 	.word	0x2003e784
   d805c:	2003e780 	.word	0x2003e780
   d8060:	2003e77c 	.word	0x2003e77c
   d8064:	2003e778 	.word	0x2003e778
   d8068:	2003e774 	.word	0x2003e774
   d806c:	2003e770 	.word	0x2003e770

000d8070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8070:	4b24      	ldr	r3, [pc, #144]	; (d8104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8072:	681a      	ldr	r2, [r3, #0]
   d8074:	07d0      	lsls	r0, r2, #31
   d8076:	bf5c      	itt	pl
   d8078:	2201      	movpl	r2, #1
   d807a:	601a      	strpl	r2, [r3, #0]
   d807c:	4b22      	ldr	r3, [pc, #136]	; (d8108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d807e:	681a      	ldr	r2, [r3, #0]
   d8080:	07d1      	lsls	r1, r2, #31
   d8082:	bf5c      	itt	pl
   d8084:	2201      	movpl	r2, #1
   d8086:	601a      	strpl	r2, [r3, #0]
   d8088:	4b20      	ldr	r3, [pc, #128]	; (d810c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d808a:	681a      	ldr	r2, [r3, #0]
   d808c:	07d2      	lsls	r2, r2, #31
   d808e:	bf5c      	itt	pl
   d8090:	2201      	movpl	r2, #1
   d8092:	601a      	strpl	r2, [r3, #0]
   d8094:	4b1e      	ldr	r3, [pc, #120]	; (d8110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8096:	681a      	ldr	r2, [r3, #0]
   d8098:	07d0      	lsls	r0, r2, #31
   d809a:	bf5c      	itt	pl
   d809c:	2201      	movpl	r2, #1
   d809e:	601a      	strpl	r2, [r3, #0]
   d80a0:	4b1c      	ldr	r3, [pc, #112]	; (d8114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d80a2:	681a      	ldr	r2, [r3, #0]
   d80a4:	07d1      	lsls	r1, r2, #31
   d80a6:	bf5c      	itt	pl
   d80a8:	2201      	movpl	r2, #1
   d80aa:	601a      	strpl	r2, [r3, #0]
   d80ac:	4b1a      	ldr	r3, [pc, #104]	; (d8118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d80ae:	681a      	ldr	r2, [r3, #0]
   d80b0:	07d2      	lsls	r2, r2, #31
   d80b2:	bf5c      	itt	pl
   d80b4:	2201      	movpl	r2, #1
   d80b6:	601a      	strpl	r2, [r3, #0]
   d80b8:	4b18      	ldr	r3, [pc, #96]	; (d811c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d80ba:	681a      	ldr	r2, [r3, #0]
   d80bc:	07d0      	lsls	r0, r2, #31
   d80be:	bf5c      	itt	pl
   d80c0:	2201      	movpl	r2, #1
   d80c2:	601a      	strpl	r2, [r3, #0]
   d80c4:	4b16      	ldr	r3, [pc, #88]	; (d8120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d80c6:	681a      	ldr	r2, [r3, #0]
   d80c8:	07d1      	lsls	r1, r2, #31
   d80ca:	bf5c      	itt	pl
   d80cc:	2201      	movpl	r2, #1
   d80ce:	601a      	strpl	r2, [r3, #0]
   d80d0:	4b14      	ldr	r3, [pc, #80]	; (d8124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d80d2:	681a      	ldr	r2, [r3, #0]
   d80d4:	07d2      	lsls	r2, r2, #31
   d80d6:	bf5c      	itt	pl
   d80d8:	2201      	movpl	r2, #1
   d80da:	601a      	strpl	r2, [r3, #0]
   d80dc:	4b12      	ldr	r3, [pc, #72]	; (d8128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d80de:	681a      	ldr	r2, [r3, #0]
   d80e0:	07d0      	lsls	r0, r2, #31
   d80e2:	bf5c      	itt	pl
   d80e4:	2201      	movpl	r2, #1
   d80e6:	601a      	strpl	r2, [r3, #0]
   d80e8:	4b10      	ldr	r3, [pc, #64]	; (d812c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d80ea:	681a      	ldr	r2, [r3, #0]
   d80ec:	07d1      	lsls	r1, r2, #31
   d80ee:	bf5c      	itt	pl
   d80f0:	2201      	movpl	r2, #1
   d80f2:	601a      	strpl	r2, [r3, #0]
   d80f4:	4b0e      	ldr	r3, [pc, #56]	; (d8130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d80f6:	681a      	ldr	r2, [r3, #0]
   d80f8:	07d2      	lsls	r2, r2, #31
   d80fa:	bf5c      	itt	pl
   d80fc:	2201      	movpl	r2, #1
   d80fe:	601a      	strpl	r2, [r3, #0]
   d8100:	4770      	bx	lr
   d8102:	bf00      	nop
   d8104:	2003e7cc 	.word	0x2003e7cc
   d8108:	2003e7c8 	.word	0x2003e7c8
   d810c:	2003e7c4 	.word	0x2003e7c4
   d8110:	2003e7c0 	.word	0x2003e7c0
   d8114:	2003e7bc 	.word	0x2003e7bc
   d8118:	2003e7b8 	.word	0x2003e7b8
   d811c:	2003e7b4 	.word	0x2003e7b4
   d8120:	2003e7b0 	.word	0x2003e7b0
   d8124:	2003e7ac 	.word	0x2003e7ac
   d8128:	2003e7a8 	.word	0x2003e7a8
   d812c:	2003e7a4 	.word	0x2003e7a4
   d8130:	2003e7a0 	.word	0x2003e7a0

000d8134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8134:	4b18      	ldr	r3, [pc, #96]	; (d8198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8136:	681a      	ldr	r2, [r3, #0]
   d8138:	07d1      	lsls	r1, r2, #31
   d813a:	bf5c      	itt	pl
   d813c:	2201      	movpl	r2, #1
   d813e:	601a      	strpl	r2, [r3, #0]
   d8140:	4b16      	ldr	r3, [pc, #88]	; (d819c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8142:	681a      	ldr	r2, [r3, #0]
   d8144:	07d2      	lsls	r2, r2, #31
   d8146:	bf5c      	itt	pl
   d8148:	2201      	movpl	r2, #1
   d814a:	601a      	strpl	r2, [r3, #0]
   d814c:	4b14      	ldr	r3, [pc, #80]	; (d81a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d814e:	681a      	ldr	r2, [r3, #0]
   d8150:	07d0      	lsls	r0, r2, #31
   d8152:	bf5c      	itt	pl
   d8154:	2201      	movpl	r2, #1
   d8156:	601a      	strpl	r2, [r3, #0]
   d8158:	4b12      	ldr	r3, [pc, #72]	; (d81a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d815a:	681a      	ldr	r2, [r3, #0]
   d815c:	07d1      	lsls	r1, r2, #31
   d815e:	bf5c      	itt	pl
   d8160:	2201      	movpl	r2, #1
   d8162:	601a      	strpl	r2, [r3, #0]
   d8164:	4b10      	ldr	r3, [pc, #64]	; (d81a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8166:	681a      	ldr	r2, [r3, #0]
   d8168:	07d2      	lsls	r2, r2, #31
   d816a:	bf5c      	itt	pl
   d816c:	2201      	movpl	r2, #1
   d816e:	601a      	strpl	r2, [r3, #0]
   d8170:	4b0e      	ldr	r3, [pc, #56]	; (d81ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8172:	681a      	ldr	r2, [r3, #0]
   d8174:	07d0      	lsls	r0, r2, #31
   d8176:	bf5c      	itt	pl
   d8178:	2201      	movpl	r2, #1
   d817a:	601a      	strpl	r2, [r3, #0]
   d817c:	4b0c      	ldr	r3, [pc, #48]	; (d81b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d817e:	681a      	ldr	r2, [r3, #0]
   d8180:	07d1      	lsls	r1, r2, #31
   d8182:	bf5c      	itt	pl
   d8184:	2201      	movpl	r2, #1
   d8186:	601a      	strpl	r2, [r3, #0]
   d8188:	4b0a      	ldr	r3, [pc, #40]	; (d81b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d818a:	681a      	ldr	r2, [r3, #0]
   d818c:	07d2      	lsls	r2, r2, #31
   d818e:	bf5c      	itt	pl
   d8190:	2201      	movpl	r2, #1
   d8192:	601a      	strpl	r2, [r3, #0]
   d8194:	4770      	bx	lr
   d8196:	bf00      	nop
   d8198:	2003e7ec 	.word	0x2003e7ec
   d819c:	2003e7e8 	.word	0x2003e7e8
   d81a0:	2003e7e4 	.word	0x2003e7e4
   d81a4:	2003e7e0 	.word	0x2003e7e0
   d81a8:	2003e7dc 	.word	0x2003e7dc
   d81ac:	2003e7d8 	.word	0x2003e7d8
   d81b0:	2003e7d4 	.word	0x2003e7d4
   d81b4:	2003e7d0 	.word	0x2003e7d0

000d81b8 <floor>:
   d81b8:	ec51 0b10 	vmov	r0, r1, d0
   d81bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   d81c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d81c4:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   d81c8:	2d13      	cmp	r5, #19
   d81ca:	460c      	mov	r4, r1
   d81cc:	460f      	mov	r7, r1
   d81ce:	ee10 6a10 	vmov	r6, s0
   d81d2:	dc1d      	bgt.n	d8210 <floor+0x58>
   d81d4:	2d00      	cmp	r5, #0
   d81d6:	db43      	blt.n	d8260 <floor+0xa8>
   d81d8:	4b3d      	ldr	r3, [pc, #244]	; (d82d0 <floor+0x118>)
   d81da:	fa43 f805 	asr.w	r8, r3, r5
   d81de:	ea01 0308 	and.w	r3, r1, r8
   d81e2:	4303      	orrs	r3, r0
   d81e4:	d019      	beq.n	d821a <floor+0x62>
   d81e6:	a338      	add	r3, pc, #224	; (adr r3, d82c8 <floor+0x110>)
   d81e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81ec:	f000 f87a 	bl	d82e4 <__adddf3>
   d81f0:	2200      	movs	r2, #0
   d81f2:	2300      	movs	r3, #0
   d81f4:	f000 fcb8 	bl	d8b68 <__aeabi_dcmpgt>
   d81f8:	b120      	cbz	r0, d8204 <floor+0x4c>
   d81fa:	2c00      	cmp	r4, #0
   d81fc:	db49      	blt.n	d8292 <floor+0xda>
   d81fe:	ea27 0408 	bic.w	r4, r7, r8
   d8202:	2600      	movs	r6, #0
   d8204:	4623      	mov	r3, r4
   d8206:	4632      	mov	r2, r6
   d8208:	ec43 2b10 	vmov	d0, r2, r3
   d820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8210:	2d33      	cmp	r5, #51	; 0x33
   d8212:	dd06      	ble.n	d8222 <floor+0x6a>
   d8214:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d8218:	d032      	beq.n	d8280 <floor+0xc8>
   d821a:	ec41 0b10 	vmov	d0, r0, r1
   d821e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8222:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   d8226:	f04f 38ff 	mov.w	r8, #4294967295
   d822a:	fa28 f803 	lsr.w	r8, r8, r3
   d822e:	ea10 0f08 	tst.w	r0, r8
   d8232:	d0f2      	beq.n	d821a <floor+0x62>
   d8234:	a324      	add	r3, pc, #144	; (adr r3, d82c8 <floor+0x110>)
   d8236:	e9d3 2300 	ldrd	r2, r3, [r3]
   d823a:	f000 f853 	bl	d82e4 <__adddf3>
   d823e:	2200      	movs	r2, #0
   d8240:	2300      	movs	r3, #0
   d8242:	f000 fc91 	bl	d8b68 <__aeabi_dcmpgt>
   d8246:	2800      	cmp	r0, #0
   d8248:	d0dc      	beq.n	d8204 <floor+0x4c>
   d824a:	2c00      	cmp	r4, #0
   d824c:	db27      	blt.n	d829e <floor+0xe6>
   d824e:	463c      	mov	r4, r7
   d8250:	ea26 0608 	bic.w	r6, r6, r8
   d8254:	4623      	mov	r3, r4
   d8256:	4632      	mov	r2, r6
   d8258:	ec43 2b10 	vmov	d0, r2, r3
   d825c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8260:	a319      	add	r3, pc, #100	; (adr r3, d82c8 <floor+0x110>)
   d8262:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8266:	f000 f83d 	bl	d82e4 <__adddf3>
   d826a:	2200      	movs	r2, #0
   d826c:	2300      	movs	r3, #0
   d826e:	f000 fc7b 	bl	d8b68 <__aeabi_dcmpgt>
   d8272:	2800      	cmp	r0, #0
   d8274:	d0c6      	beq.n	d8204 <floor+0x4c>
   d8276:	2c00      	cmp	r4, #0
   d8278:	db1c      	blt.n	d82b4 <floor+0xfc>
   d827a:	2600      	movs	r6, #0
   d827c:	4634      	mov	r4, r6
   d827e:	e7c1      	b.n	d8204 <floor+0x4c>
   d8280:	ee10 2a10 	vmov	r2, s0
   d8284:	460b      	mov	r3, r1
   d8286:	f000 f82d 	bl	d82e4 <__adddf3>
   d828a:	ec41 0b10 	vmov	d0, r0, r1
   d828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8292:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   d8296:	fa43 f505 	asr.w	r5, r3, r5
   d829a:	442f      	add	r7, r5
   d829c:	e7af      	b.n	d81fe <floor+0x46>
   d829e:	2d14      	cmp	r5, #20
   d82a0:	d010      	beq.n	d82c4 <floor+0x10c>
   d82a2:	2301      	movs	r3, #1
   d82a4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   d82a8:	fa03 f505 	lsl.w	r5, r3, r5
   d82ac:	19ae      	adds	r6, r5, r6
   d82ae:	bf28      	it	cs
   d82b0:	18ff      	addcs	r7, r7, r3
   d82b2:	e7cc      	b.n	d824e <floor+0x96>
   d82b4:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   d82b8:	4b06      	ldr	r3, [pc, #24]	; (d82d4 <floor+0x11c>)
   d82ba:	4332      	orrs	r2, r6
   d82bc:	bf18      	it	ne
   d82be:	461c      	movne	r4, r3
   d82c0:	2600      	movs	r6, #0
   d82c2:	e79f      	b.n	d8204 <floor+0x4c>
   d82c4:	3701      	adds	r7, #1
   d82c6:	e7c2      	b.n	d824e <floor+0x96>
   d82c8:	8800759c 	.word	0x8800759c
   d82cc:	7e37e43c 	.word	0x7e37e43c
   d82d0:	000fffff 	.word	0x000fffff
   d82d4:	bff00000 	.word	0xbff00000

000d82d8 <__aeabi_drsub>:
   d82d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d82dc:	e002      	b.n	d82e4 <__adddf3>
   d82de:	bf00      	nop

000d82e0 <__aeabi_dsub>:
   d82e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d82e4 <__adddf3>:
   d82e4:	b530      	push	{r4, r5, lr}
   d82e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d82ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d82ee:	ea94 0f05 	teq	r4, r5
   d82f2:	bf08      	it	eq
   d82f4:	ea90 0f02 	teqeq	r0, r2
   d82f8:	bf1f      	itttt	ne
   d82fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d82fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d830a:	f000 80e2 	beq.w	d84d2 <__adddf3+0x1ee>
   d830e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8316:	bfb8      	it	lt
   d8318:	426d      	neglt	r5, r5
   d831a:	dd0c      	ble.n	d8336 <__adddf3+0x52>
   d831c:	442c      	add	r4, r5
   d831e:	ea80 0202 	eor.w	r2, r0, r2
   d8322:	ea81 0303 	eor.w	r3, r1, r3
   d8326:	ea82 0000 	eor.w	r0, r2, r0
   d832a:	ea83 0101 	eor.w	r1, r3, r1
   d832e:	ea80 0202 	eor.w	r2, r0, r2
   d8332:	ea81 0303 	eor.w	r3, r1, r3
   d8336:	2d36      	cmp	r5, #54	; 0x36
   d8338:	bf88      	it	hi
   d833a:	bd30      	pophi	{r4, r5, pc}
   d833c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8340:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d834c:	d002      	beq.n	d8354 <__adddf3+0x70>
   d834e:	4240      	negs	r0, r0
   d8350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8358:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d835c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8360:	d002      	beq.n	d8368 <__adddf3+0x84>
   d8362:	4252      	negs	r2, r2
   d8364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8368:	ea94 0f05 	teq	r4, r5
   d836c:	f000 80a7 	beq.w	d84be <__adddf3+0x1da>
   d8370:	f1a4 0401 	sub.w	r4, r4, #1
   d8374:	f1d5 0e20 	rsbs	lr, r5, #32
   d8378:	db0d      	blt.n	d8396 <__adddf3+0xb2>
   d837a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d837e:	fa22 f205 	lsr.w	r2, r2, r5
   d8382:	1880      	adds	r0, r0, r2
   d8384:	f141 0100 	adc.w	r1, r1, #0
   d8388:	fa03 f20e 	lsl.w	r2, r3, lr
   d838c:	1880      	adds	r0, r0, r2
   d838e:	fa43 f305 	asr.w	r3, r3, r5
   d8392:	4159      	adcs	r1, r3
   d8394:	e00e      	b.n	d83b4 <__adddf3+0xd0>
   d8396:	f1a5 0520 	sub.w	r5, r5, #32
   d839a:	f10e 0e20 	add.w	lr, lr, #32
   d839e:	2a01      	cmp	r2, #1
   d83a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d83a4:	bf28      	it	cs
   d83a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d83aa:	fa43 f305 	asr.w	r3, r3, r5
   d83ae:	18c0      	adds	r0, r0, r3
   d83b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d83b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d83b8:	d507      	bpl.n	d83ca <__adddf3+0xe6>
   d83ba:	f04f 0e00 	mov.w	lr, #0
   d83be:	f1dc 0c00 	rsbs	ip, ip, #0
   d83c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d83c6:	eb6e 0101 	sbc.w	r1, lr, r1
   d83ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d83ce:	d31b      	bcc.n	d8408 <__adddf3+0x124>
   d83d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d83d4:	d30c      	bcc.n	d83f0 <__adddf3+0x10c>
   d83d6:	0849      	lsrs	r1, r1, #1
   d83d8:	ea5f 0030 	movs.w	r0, r0, rrx
   d83dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d83e0:	f104 0401 	add.w	r4, r4, #1
   d83e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d83e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d83ec:	f080 809a 	bcs.w	d8524 <__adddf3+0x240>
   d83f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d83f4:	bf08      	it	eq
   d83f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d83fa:	f150 0000 	adcs.w	r0, r0, #0
   d83fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8402:	ea41 0105 	orr.w	r1, r1, r5
   d8406:	bd30      	pop	{r4, r5, pc}
   d8408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d840c:	4140      	adcs	r0, r0
   d840e:	eb41 0101 	adc.w	r1, r1, r1
   d8412:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8416:	f1a4 0401 	sub.w	r4, r4, #1
   d841a:	d1e9      	bne.n	d83f0 <__adddf3+0x10c>
   d841c:	f091 0f00 	teq	r1, #0
   d8420:	bf04      	itt	eq
   d8422:	4601      	moveq	r1, r0
   d8424:	2000      	moveq	r0, #0
   d8426:	fab1 f381 	clz	r3, r1
   d842a:	bf08      	it	eq
   d842c:	3320      	addeq	r3, #32
   d842e:	f1a3 030b 	sub.w	r3, r3, #11
   d8432:	f1b3 0220 	subs.w	r2, r3, #32
   d8436:	da0c      	bge.n	d8452 <__adddf3+0x16e>
   d8438:	320c      	adds	r2, #12
   d843a:	dd08      	ble.n	d844e <__adddf3+0x16a>
   d843c:	f102 0c14 	add.w	ip, r2, #20
   d8440:	f1c2 020c 	rsb	r2, r2, #12
   d8444:	fa01 f00c 	lsl.w	r0, r1, ip
   d8448:	fa21 f102 	lsr.w	r1, r1, r2
   d844c:	e00c      	b.n	d8468 <__adddf3+0x184>
   d844e:	f102 0214 	add.w	r2, r2, #20
   d8452:	bfd8      	it	le
   d8454:	f1c2 0c20 	rsble	ip, r2, #32
   d8458:	fa01 f102 	lsl.w	r1, r1, r2
   d845c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8460:	bfdc      	itt	le
   d8462:	ea41 010c 	orrle.w	r1, r1, ip
   d8466:	4090      	lslle	r0, r2
   d8468:	1ae4      	subs	r4, r4, r3
   d846a:	bfa2      	ittt	ge
   d846c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8470:	4329      	orrge	r1, r5
   d8472:	bd30      	popge	{r4, r5, pc}
   d8474:	ea6f 0404 	mvn.w	r4, r4
   d8478:	3c1f      	subs	r4, #31
   d847a:	da1c      	bge.n	d84b6 <__adddf3+0x1d2>
   d847c:	340c      	adds	r4, #12
   d847e:	dc0e      	bgt.n	d849e <__adddf3+0x1ba>
   d8480:	f104 0414 	add.w	r4, r4, #20
   d8484:	f1c4 0220 	rsb	r2, r4, #32
   d8488:	fa20 f004 	lsr.w	r0, r0, r4
   d848c:	fa01 f302 	lsl.w	r3, r1, r2
   d8490:	ea40 0003 	orr.w	r0, r0, r3
   d8494:	fa21 f304 	lsr.w	r3, r1, r4
   d8498:	ea45 0103 	orr.w	r1, r5, r3
   d849c:	bd30      	pop	{r4, r5, pc}
   d849e:	f1c4 040c 	rsb	r4, r4, #12
   d84a2:	f1c4 0220 	rsb	r2, r4, #32
   d84a6:	fa20 f002 	lsr.w	r0, r0, r2
   d84aa:	fa01 f304 	lsl.w	r3, r1, r4
   d84ae:	ea40 0003 	orr.w	r0, r0, r3
   d84b2:	4629      	mov	r1, r5
   d84b4:	bd30      	pop	{r4, r5, pc}
   d84b6:	fa21 f004 	lsr.w	r0, r1, r4
   d84ba:	4629      	mov	r1, r5
   d84bc:	bd30      	pop	{r4, r5, pc}
   d84be:	f094 0f00 	teq	r4, #0
   d84c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d84c6:	bf06      	itte	eq
   d84c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d84cc:	3401      	addeq	r4, #1
   d84ce:	3d01      	subne	r5, #1
   d84d0:	e74e      	b.n	d8370 <__adddf3+0x8c>
   d84d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d84d6:	bf18      	it	ne
   d84d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d84dc:	d029      	beq.n	d8532 <__adddf3+0x24e>
   d84de:	ea94 0f05 	teq	r4, r5
   d84e2:	bf08      	it	eq
   d84e4:	ea90 0f02 	teqeq	r0, r2
   d84e8:	d005      	beq.n	d84f6 <__adddf3+0x212>
   d84ea:	ea54 0c00 	orrs.w	ip, r4, r0
   d84ee:	bf04      	itt	eq
   d84f0:	4619      	moveq	r1, r3
   d84f2:	4610      	moveq	r0, r2
   d84f4:	bd30      	pop	{r4, r5, pc}
   d84f6:	ea91 0f03 	teq	r1, r3
   d84fa:	bf1e      	ittt	ne
   d84fc:	2100      	movne	r1, #0
   d84fe:	2000      	movne	r0, #0
   d8500:	bd30      	popne	{r4, r5, pc}
   d8502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8506:	d105      	bne.n	d8514 <__adddf3+0x230>
   d8508:	0040      	lsls	r0, r0, #1
   d850a:	4149      	adcs	r1, r1
   d850c:	bf28      	it	cs
   d850e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8512:	bd30      	pop	{r4, r5, pc}
   d8514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8518:	bf3c      	itt	cc
   d851a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d851e:	bd30      	popcc	{r4, r5, pc}
   d8520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d852c:	f04f 0000 	mov.w	r0, #0
   d8530:	bd30      	pop	{r4, r5, pc}
   d8532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8536:	bf1a      	itte	ne
   d8538:	4619      	movne	r1, r3
   d853a:	4610      	movne	r0, r2
   d853c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8540:	bf1c      	itt	ne
   d8542:	460b      	movne	r3, r1
   d8544:	4602      	movne	r2, r0
   d8546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d854a:	bf06      	itte	eq
   d854c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8550:	ea91 0f03 	teqeq	r1, r3
   d8554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8558:	bd30      	pop	{r4, r5, pc}
   d855a:	bf00      	nop

000d855c <__aeabi_ui2d>:
   d855c:	f090 0f00 	teq	r0, #0
   d8560:	bf04      	itt	eq
   d8562:	2100      	moveq	r1, #0
   d8564:	4770      	bxeq	lr
   d8566:	b530      	push	{r4, r5, lr}
   d8568:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d856c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8570:	f04f 0500 	mov.w	r5, #0
   d8574:	f04f 0100 	mov.w	r1, #0
   d8578:	e750      	b.n	d841c <__adddf3+0x138>
   d857a:	bf00      	nop

000d857c <__aeabi_i2d>:
   d857c:	f090 0f00 	teq	r0, #0
   d8580:	bf04      	itt	eq
   d8582:	2100      	moveq	r1, #0
   d8584:	4770      	bxeq	lr
   d8586:	b530      	push	{r4, r5, lr}
   d8588:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d858c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8594:	bf48      	it	mi
   d8596:	4240      	negmi	r0, r0
   d8598:	f04f 0100 	mov.w	r1, #0
   d859c:	e73e      	b.n	d841c <__adddf3+0x138>
   d859e:	bf00      	nop

000d85a0 <__aeabi_f2d>:
   d85a0:	0042      	lsls	r2, r0, #1
   d85a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d85a6:	ea4f 0131 	mov.w	r1, r1, rrx
   d85aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d85ae:	bf1f      	itttt	ne
   d85b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d85b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d85b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d85bc:	4770      	bxne	lr
   d85be:	f092 0f00 	teq	r2, #0
   d85c2:	bf14      	ite	ne
   d85c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d85c8:	4770      	bxeq	lr
   d85ca:	b530      	push	{r4, r5, lr}
   d85cc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d85d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d85d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d85d8:	e720      	b.n	d841c <__adddf3+0x138>
   d85da:	bf00      	nop

000d85dc <__aeabi_ul2d>:
   d85dc:	ea50 0201 	orrs.w	r2, r0, r1
   d85e0:	bf08      	it	eq
   d85e2:	4770      	bxeq	lr
   d85e4:	b530      	push	{r4, r5, lr}
   d85e6:	f04f 0500 	mov.w	r5, #0
   d85ea:	e00a      	b.n	d8602 <__aeabi_l2d+0x16>

000d85ec <__aeabi_l2d>:
   d85ec:	ea50 0201 	orrs.w	r2, r0, r1
   d85f0:	bf08      	it	eq
   d85f2:	4770      	bxeq	lr
   d85f4:	b530      	push	{r4, r5, lr}
   d85f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d85fa:	d502      	bpl.n	d8602 <__aeabi_l2d+0x16>
   d85fc:	4240      	negs	r0, r0
   d85fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8602:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8606:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d860a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d860e:	f43f aedc 	beq.w	d83ca <__adddf3+0xe6>
   d8612:	f04f 0203 	mov.w	r2, #3
   d8616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d861a:	bf18      	it	ne
   d861c:	3203      	addne	r2, #3
   d861e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8622:	bf18      	it	ne
   d8624:	3203      	addne	r2, #3
   d8626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d862a:	f1c2 0320 	rsb	r3, r2, #32
   d862e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8632:	fa20 f002 	lsr.w	r0, r0, r2
   d8636:	fa01 fe03 	lsl.w	lr, r1, r3
   d863a:	ea40 000e 	orr.w	r0, r0, lr
   d863e:	fa21 f102 	lsr.w	r1, r1, r2
   d8642:	4414      	add	r4, r2
   d8644:	e6c1      	b.n	d83ca <__adddf3+0xe6>
   d8646:	bf00      	nop

000d8648 <__aeabi_dmul>:
   d8648:	b570      	push	{r4, r5, r6, lr}
   d864a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d864e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8656:	bf1d      	ittte	ne
   d8658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d865c:	ea94 0f0c 	teqne	r4, ip
   d8660:	ea95 0f0c 	teqne	r5, ip
   d8664:	f000 f8de 	bleq	d8824 <__aeabi_dmul+0x1dc>
   d8668:	442c      	add	r4, r5
   d866a:	ea81 0603 	eor.w	r6, r1, r3
   d866e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d867a:	bf18      	it	ne
   d867c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8688:	d038      	beq.n	d86fc <__aeabi_dmul+0xb4>
   d868a:	fba0 ce02 	umull	ip, lr, r0, r2
   d868e:	f04f 0500 	mov.w	r5, #0
   d8692:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d869a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d869e:	f04f 0600 	mov.w	r6, #0
   d86a2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d86a6:	f09c 0f00 	teq	ip, #0
   d86aa:	bf18      	it	ne
   d86ac:	f04e 0e01 	orrne.w	lr, lr, #1
   d86b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d86b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d86b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d86bc:	d204      	bcs.n	d86c8 <__aeabi_dmul+0x80>
   d86be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d86c2:	416d      	adcs	r5, r5
   d86c4:	eb46 0606 	adc.w	r6, r6, r6
   d86c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d86cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d86d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d86d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d86d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d86dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d86e0:	bf88      	it	hi
   d86e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d86e6:	d81e      	bhi.n	d8726 <__aeabi_dmul+0xde>
   d86e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d86ec:	bf08      	it	eq
   d86ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d86f2:	f150 0000 	adcs.w	r0, r0, #0
   d86f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d86fa:	bd70      	pop	{r4, r5, r6, pc}
   d86fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8700:	ea46 0101 	orr.w	r1, r6, r1
   d8704:	ea40 0002 	orr.w	r0, r0, r2
   d8708:	ea81 0103 	eor.w	r1, r1, r3
   d870c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8710:	bfc2      	ittt	gt
   d8712:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d871a:	bd70      	popgt	{r4, r5, r6, pc}
   d871c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8720:	f04f 0e00 	mov.w	lr, #0
   d8724:	3c01      	subs	r4, #1
   d8726:	f300 80ab 	bgt.w	d8880 <__aeabi_dmul+0x238>
   d872a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d872e:	bfde      	ittt	le
   d8730:	2000      	movle	r0, #0
   d8732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8736:	bd70      	pople	{r4, r5, r6, pc}
   d8738:	f1c4 0400 	rsb	r4, r4, #0
   d873c:	3c20      	subs	r4, #32
   d873e:	da35      	bge.n	d87ac <__aeabi_dmul+0x164>
   d8740:	340c      	adds	r4, #12
   d8742:	dc1b      	bgt.n	d877c <__aeabi_dmul+0x134>
   d8744:	f104 0414 	add.w	r4, r4, #20
   d8748:	f1c4 0520 	rsb	r5, r4, #32
   d874c:	fa00 f305 	lsl.w	r3, r0, r5
   d8750:	fa20 f004 	lsr.w	r0, r0, r4
   d8754:	fa01 f205 	lsl.w	r2, r1, r5
   d8758:	ea40 0002 	orr.w	r0, r0, r2
   d875c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8768:	fa21 f604 	lsr.w	r6, r1, r4
   d876c:	eb42 0106 	adc.w	r1, r2, r6
   d8770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8774:	bf08      	it	eq
   d8776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d877a:	bd70      	pop	{r4, r5, r6, pc}
   d877c:	f1c4 040c 	rsb	r4, r4, #12
   d8780:	f1c4 0520 	rsb	r5, r4, #32
   d8784:	fa00 f304 	lsl.w	r3, r0, r4
   d8788:	fa20 f005 	lsr.w	r0, r0, r5
   d878c:	fa01 f204 	lsl.w	r2, r1, r4
   d8790:	ea40 0002 	orr.w	r0, r0, r2
   d8794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d879c:	f141 0100 	adc.w	r1, r1, #0
   d87a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d87a4:	bf08      	it	eq
   d87a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87aa:	bd70      	pop	{r4, r5, r6, pc}
   d87ac:	f1c4 0520 	rsb	r5, r4, #32
   d87b0:	fa00 f205 	lsl.w	r2, r0, r5
   d87b4:	ea4e 0e02 	orr.w	lr, lr, r2
   d87b8:	fa20 f304 	lsr.w	r3, r0, r4
   d87bc:	fa01 f205 	lsl.w	r2, r1, r5
   d87c0:	ea43 0302 	orr.w	r3, r3, r2
   d87c4:	fa21 f004 	lsr.w	r0, r1, r4
   d87c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87cc:	fa21 f204 	lsr.w	r2, r1, r4
   d87d0:	ea20 0002 	bic.w	r0, r0, r2
   d87d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d87d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d87dc:	bf08      	it	eq
   d87de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87e2:	bd70      	pop	{r4, r5, r6, pc}
   d87e4:	f094 0f00 	teq	r4, #0
   d87e8:	d10f      	bne.n	d880a <__aeabi_dmul+0x1c2>
   d87ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d87ee:	0040      	lsls	r0, r0, #1
   d87f0:	eb41 0101 	adc.w	r1, r1, r1
   d87f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87f8:	bf08      	it	eq
   d87fa:	3c01      	subeq	r4, #1
   d87fc:	d0f7      	beq.n	d87ee <__aeabi_dmul+0x1a6>
   d87fe:	ea41 0106 	orr.w	r1, r1, r6
   d8802:	f095 0f00 	teq	r5, #0
   d8806:	bf18      	it	ne
   d8808:	4770      	bxne	lr
   d880a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d880e:	0052      	lsls	r2, r2, #1
   d8810:	eb43 0303 	adc.w	r3, r3, r3
   d8814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8818:	bf08      	it	eq
   d881a:	3d01      	subeq	r5, #1
   d881c:	d0f7      	beq.n	d880e <__aeabi_dmul+0x1c6>
   d881e:	ea43 0306 	orr.w	r3, r3, r6
   d8822:	4770      	bx	lr
   d8824:	ea94 0f0c 	teq	r4, ip
   d8828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d882c:	bf18      	it	ne
   d882e:	ea95 0f0c 	teqne	r5, ip
   d8832:	d00c      	beq.n	d884e <__aeabi_dmul+0x206>
   d8834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8838:	bf18      	it	ne
   d883a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d883e:	d1d1      	bne.n	d87e4 <__aeabi_dmul+0x19c>
   d8840:	ea81 0103 	eor.w	r1, r1, r3
   d8844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8848:	f04f 0000 	mov.w	r0, #0
   d884c:	bd70      	pop	{r4, r5, r6, pc}
   d884e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8852:	bf06      	itte	eq
   d8854:	4610      	moveq	r0, r2
   d8856:	4619      	moveq	r1, r3
   d8858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d885c:	d019      	beq.n	d8892 <__aeabi_dmul+0x24a>
   d885e:	ea94 0f0c 	teq	r4, ip
   d8862:	d102      	bne.n	d886a <__aeabi_dmul+0x222>
   d8864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8868:	d113      	bne.n	d8892 <__aeabi_dmul+0x24a>
   d886a:	ea95 0f0c 	teq	r5, ip
   d886e:	d105      	bne.n	d887c <__aeabi_dmul+0x234>
   d8870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8874:	bf1c      	itt	ne
   d8876:	4610      	movne	r0, r2
   d8878:	4619      	movne	r1, r3
   d887a:	d10a      	bne.n	d8892 <__aeabi_dmul+0x24a>
   d887c:	ea81 0103 	eor.w	r1, r1, r3
   d8880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d888c:	f04f 0000 	mov.w	r0, #0
   d8890:	bd70      	pop	{r4, r5, r6, pc}
   d8892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d889a:	bd70      	pop	{r4, r5, r6, pc}

000d889c <__aeabi_ddiv>:
   d889c:	b570      	push	{r4, r5, r6, lr}
   d889e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d88a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d88a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d88aa:	bf1d      	ittte	ne
   d88ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d88b0:	ea94 0f0c 	teqne	r4, ip
   d88b4:	ea95 0f0c 	teqne	r5, ip
   d88b8:	f000 f8a7 	bleq	d8a0a <__aeabi_ddiv+0x16e>
   d88bc:	eba4 0405 	sub.w	r4, r4, r5
   d88c0:	ea81 0e03 	eor.w	lr, r1, r3
   d88c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d88c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d88cc:	f000 8088 	beq.w	d89e0 <__aeabi_ddiv+0x144>
   d88d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d88d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d88d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d88dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d88e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d88e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d88e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d88ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d88f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d88f4:	429d      	cmp	r5, r3
   d88f6:	bf08      	it	eq
   d88f8:	4296      	cmpeq	r6, r2
   d88fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d88fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8902:	d202      	bcs.n	d890a <__aeabi_ddiv+0x6e>
   d8904:	085b      	lsrs	r3, r3, #1
   d8906:	ea4f 0232 	mov.w	r2, r2, rrx
   d890a:	1ab6      	subs	r6, r6, r2
   d890c:	eb65 0503 	sbc.w	r5, r5, r3
   d8910:	085b      	lsrs	r3, r3, #1
   d8912:	ea4f 0232 	mov.w	r2, r2, rrx
   d8916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d891a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d891e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8922:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8926:	bf22      	ittt	cs
   d8928:	1ab6      	subcs	r6, r6, r2
   d892a:	4675      	movcs	r5, lr
   d892c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8930:	085b      	lsrs	r3, r3, #1
   d8932:	ea4f 0232 	mov.w	r2, r2, rrx
   d8936:	ebb6 0e02 	subs.w	lr, r6, r2
   d893a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d893e:	bf22      	ittt	cs
   d8940:	1ab6      	subcs	r6, r6, r2
   d8942:	4675      	movcs	r5, lr
   d8944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8948:	085b      	lsrs	r3, r3, #1
   d894a:	ea4f 0232 	mov.w	r2, r2, rrx
   d894e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8952:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8956:	bf22      	ittt	cs
   d8958:	1ab6      	subcs	r6, r6, r2
   d895a:	4675      	movcs	r5, lr
   d895c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8960:	085b      	lsrs	r3, r3, #1
   d8962:	ea4f 0232 	mov.w	r2, r2, rrx
   d8966:	ebb6 0e02 	subs.w	lr, r6, r2
   d896a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d896e:	bf22      	ittt	cs
   d8970:	1ab6      	subcs	r6, r6, r2
   d8972:	4675      	movcs	r5, lr
   d8974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8978:	ea55 0e06 	orrs.w	lr, r5, r6
   d897c:	d018      	beq.n	d89b0 <__aeabi_ddiv+0x114>
   d897e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8986:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d898a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d898e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d899a:	d1c0      	bne.n	d891e <__aeabi_ddiv+0x82>
   d899c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d89a0:	d10b      	bne.n	d89ba <__aeabi_ddiv+0x11e>
   d89a2:	ea41 0100 	orr.w	r1, r1, r0
   d89a6:	f04f 0000 	mov.w	r0, #0
   d89aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d89ae:	e7b6      	b.n	d891e <__aeabi_ddiv+0x82>
   d89b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d89b4:	bf04      	itt	eq
   d89b6:	4301      	orreq	r1, r0
   d89b8:	2000      	moveq	r0, #0
   d89ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d89be:	bf88      	it	hi
   d89c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d89c4:	f63f aeaf 	bhi.w	d8726 <__aeabi_dmul+0xde>
   d89c8:	ebb5 0c03 	subs.w	ip, r5, r3
   d89cc:	bf04      	itt	eq
   d89ce:	ebb6 0c02 	subseq.w	ip, r6, r2
   d89d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d89d6:	f150 0000 	adcs.w	r0, r0, #0
   d89da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d89de:	bd70      	pop	{r4, r5, r6, pc}
   d89e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d89e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d89e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d89ec:	bfc2      	ittt	gt
   d89ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d89f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d89f6:	bd70      	popgt	{r4, r5, r6, pc}
   d89f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d89fc:	f04f 0e00 	mov.w	lr, #0
   d8a00:	3c01      	subs	r4, #1
   d8a02:	e690      	b.n	d8726 <__aeabi_dmul+0xde>
   d8a04:	ea45 0e06 	orr.w	lr, r5, r6
   d8a08:	e68d      	b.n	d8726 <__aeabi_dmul+0xde>
   d8a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8a0e:	ea94 0f0c 	teq	r4, ip
   d8a12:	bf08      	it	eq
   d8a14:	ea95 0f0c 	teqeq	r5, ip
   d8a18:	f43f af3b 	beq.w	d8892 <__aeabi_dmul+0x24a>
   d8a1c:	ea94 0f0c 	teq	r4, ip
   d8a20:	d10a      	bne.n	d8a38 <__aeabi_ddiv+0x19c>
   d8a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a26:	f47f af34 	bne.w	d8892 <__aeabi_dmul+0x24a>
   d8a2a:	ea95 0f0c 	teq	r5, ip
   d8a2e:	f47f af25 	bne.w	d887c <__aeabi_dmul+0x234>
   d8a32:	4610      	mov	r0, r2
   d8a34:	4619      	mov	r1, r3
   d8a36:	e72c      	b.n	d8892 <__aeabi_dmul+0x24a>
   d8a38:	ea95 0f0c 	teq	r5, ip
   d8a3c:	d106      	bne.n	d8a4c <__aeabi_ddiv+0x1b0>
   d8a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8a42:	f43f aefd 	beq.w	d8840 <__aeabi_dmul+0x1f8>
   d8a46:	4610      	mov	r0, r2
   d8a48:	4619      	mov	r1, r3
   d8a4a:	e722      	b.n	d8892 <__aeabi_dmul+0x24a>
   d8a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8a50:	bf18      	it	ne
   d8a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8a56:	f47f aec5 	bne.w	d87e4 <__aeabi_dmul+0x19c>
   d8a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8a5e:	f47f af0d 	bne.w	d887c <__aeabi_dmul+0x234>
   d8a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8a66:	f47f aeeb 	bne.w	d8840 <__aeabi_dmul+0x1f8>
   d8a6a:	e712      	b.n	d8892 <__aeabi_dmul+0x24a>

000d8a6c <__gedf2>:
   d8a6c:	f04f 3cff 	mov.w	ip, #4294967295
   d8a70:	e006      	b.n	d8a80 <__cmpdf2+0x4>
   d8a72:	bf00      	nop

000d8a74 <__ledf2>:
   d8a74:	f04f 0c01 	mov.w	ip, #1
   d8a78:	e002      	b.n	d8a80 <__cmpdf2+0x4>
   d8a7a:	bf00      	nop

000d8a7c <__cmpdf2>:
   d8a7c:	f04f 0c01 	mov.w	ip, #1
   d8a80:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a90:	bf18      	it	ne
   d8a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8a96:	d01b      	beq.n	d8ad0 <__cmpdf2+0x54>
   d8a98:	b001      	add	sp, #4
   d8a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8a9e:	bf0c      	ite	eq
   d8aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8aa4:	ea91 0f03 	teqne	r1, r3
   d8aa8:	bf02      	ittt	eq
   d8aaa:	ea90 0f02 	teqeq	r0, r2
   d8aae:	2000      	moveq	r0, #0
   d8ab0:	4770      	bxeq	lr
   d8ab2:	f110 0f00 	cmn.w	r0, #0
   d8ab6:	ea91 0f03 	teq	r1, r3
   d8aba:	bf58      	it	pl
   d8abc:	4299      	cmppl	r1, r3
   d8abe:	bf08      	it	eq
   d8ac0:	4290      	cmpeq	r0, r2
   d8ac2:	bf2c      	ite	cs
   d8ac4:	17d8      	asrcs	r0, r3, #31
   d8ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8aca:	f040 0001 	orr.w	r0, r0, #1
   d8ace:	4770      	bx	lr
   d8ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ad8:	d102      	bne.n	d8ae0 <__cmpdf2+0x64>
   d8ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8ade:	d107      	bne.n	d8af0 <__cmpdf2+0x74>
   d8ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ae8:	d1d6      	bne.n	d8a98 <__cmpdf2+0x1c>
   d8aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8aee:	d0d3      	beq.n	d8a98 <__cmpdf2+0x1c>
   d8af0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8af4:	4770      	bx	lr
   d8af6:	bf00      	nop

000d8af8 <__aeabi_cdrcmple>:
   d8af8:	4684      	mov	ip, r0
   d8afa:	4610      	mov	r0, r2
   d8afc:	4662      	mov	r2, ip
   d8afe:	468c      	mov	ip, r1
   d8b00:	4619      	mov	r1, r3
   d8b02:	4663      	mov	r3, ip
   d8b04:	e000      	b.n	d8b08 <__aeabi_cdcmpeq>
   d8b06:	bf00      	nop

000d8b08 <__aeabi_cdcmpeq>:
   d8b08:	b501      	push	{r0, lr}
   d8b0a:	f7ff ffb7 	bl	d8a7c <__cmpdf2>
   d8b0e:	2800      	cmp	r0, #0
   d8b10:	bf48      	it	mi
   d8b12:	f110 0f00 	cmnmi.w	r0, #0
   d8b16:	bd01      	pop	{r0, pc}

000d8b18 <__aeabi_dcmpeq>:
   d8b18:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b1c:	f7ff fff4 	bl	d8b08 <__aeabi_cdcmpeq>
   d8b20:	bf0c      	ite	eq
   d8b22:	2001      	moveq	r0, #1
   d8b24:	2000      	movne	r0, #0
   d8b26:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b2a:	bf00      	nop

000d8b2c <__aeabi_dcmplt>:
   d8b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b30:	f7ff ffea 	bl	d8b08 <__aeabi_cdcmpeq>
   d8b34:	bf34      	ite	cc
   d8b36:	2001      	movcc	r0, #1
   d8b38:	2000      	movcs	r0, #0
   d8b3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b3e:	bf00      	nop

000d8b40 <__aeabi_dcmple>:
   d8b40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b44:	f7ff ffe0 	bl	d8b08 <__aeabi_cdcmpeq>
   d8b48:	bf94      	ite	ls
   d8b4a:	2001      	movls	r0, #1
   d8b4c:	2000      	movhi	r0, #0
   d8b4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b52:	bf00      	nop

000d8b54 <__aeabi_dcmpge>:
   d8b54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b58:	f7ff ffce 	bl	d8af8 <__aeabi_cdrcmple>
   d8b5c:	bf94      	ite	ls
   d8b5e:	2001      	movls	r0, #1
   d8b60:	2000      	movhi	r0, #0
   d8b62:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b66:	bf00      	nop

000d8b68 <__aeabi_dcmpgt>:
   d8b68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b6c:	f7ff ffc4 	bl	d8af8 <__aeabi_cdrcmple>
   d8b70:	bf34      	ite	cc
   d8b72:	2001      	movcc	r0, #1
   d8b74:	2000      	movcs	r0, #0
   d8b76:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b7a:	bf00      	nop

000d8b7c <__aeabi_dcmpun>:
   d8b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b84:	d102      	bne.n	d8b8c <__aeabi_dcmpun+0x10>
   d8b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8b8a:	d10a      	bne.n	d8ba2 <__aeabi_dcmpun+0x26>
   d8b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b94:	d102      	bne.n	d8b9c <__aeabi_dcmpun+0x20>
   d8b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b9a:	d102      	bne.n	d8ba2 <__aeabi_dcmpun+0x26>
   d8b9c:	f04f 0000 	mov.w	r0, #0
   d8ba0:	4770      	bx	lr
   d8ba2:	f04f 0001 	mov.w	r0, #1
   d8ba6:	4770      	bx	lr

000d8ba8 <__aeabi_d2iz>:
   d8ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8bb0:	d215      	bcs.n	d8bde <__aeabi_d2iz+0x36>
   d8bb2:	d511      	bpl.n	d8bd8 <__aeabi_d2iz+0x30>
   d8bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8bbc:	d912      	bls.n	d8be4 <__aeabi_d2iz+0x3c>
   d8bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8bce:	fa23 f002 	lsr.w	r0, r3, r2
   d8bd2:	bf18      	it	ne
   d8bd4:	4240      	negne	r0, r0
   d8bd6:	4770      	bx	lr
   d8bd8:	f04f 0000 	mov.w	r0, #0
   d8bdc:	4770      	bx	lr
   d8bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8be2:	d105      	bne.n	d8bf0 <__aeabi_d2iz+0x48>
   d8be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8be8:	bf08      	it	eq
   d8bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8bee:	4770      	bx	lr
   d8bf0:	f04f 0000 	mov.w	r0, #0
   d8bf4:	4770      	bx	lr
   d8bf6:	bf00      	nop

000d8bf8 <__aeabi_d2uiz>:
   d8bf8:	004a      	lsls	r2, r1, #1
   d8bfa:	d211      	bcs.n	d8c20 <__aeabi_d2uiz+0x28>
   d8bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8c00:	d211      	bcs.n	d8c26 <__aeabi_d2uiz+0x2e>
   d8c02:	d50d      	bpl.n	d8c20 <__aeabi_d2uiz+0x28>
   d8c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8c0c:	d40e      	bmi.n	d8c2c <__aeabi_d2uiz+0x34>
   d8c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8c1a:	fa23 f002 	lsr.w	r0, r3, r2
   d8c1e:	4770      	bx	lr
   d8c20:	f04f 0000 	mov.w	r0, #0
   d8c24:	4770      	bx	lr
   d8c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8c2a:	d102      	bne.n	d8c32 <__aeabi_d2uiz+0x3a>
   d8c2c:	f04f 30ff 	mov.w	r0, #4294967295
   d8c30:	4770      	bx	lr
   d8c32:	f04f 0000 	mov.w	r0, #0
   d8c36:	4770      	bx	lr

000d8c38 <__aeabi_d2f>:
   d8c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8c40:	bf24      	itt	cs
   d8c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8c4a:	d90d      	bls.n	d8c68 <__aeabi_d2f+0x30>
   d8c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8c60:	bf08      	it	eq
   d8c62:	f020 0001 	biceq.w	r0, r0, #1
   d8c66:	4770      	bx	lr
   d8c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8c6c:	d121      	bne.n	d8cb2 <__aeabi_d2f+0x7a>
   d8c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8c72:	bfbc      	itt	lt
   d8c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8c78:	4770      	bxlt	lr
   d8c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8c82:	f1c2 0218 	rsb	r2, r2, #24
   d8c86:	f1c2 0c20 	rsb	ip, r2, #32
   d8c8a:	fa10 f30c 	lsls.w	r3, r0, ip
   d8c8e:	fa20 f002 	lsr.w	r0, r0, r2
   d8c92:	bf18      	it	ne
   d8c94:	f040 0001 	orrne.w	r0, r0, #1
   d8c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8ca4:	ea40 000c 	orr.w	r0, r0, ip
   d8ca8:	fa23 f302 	lsr.w	r3, r3, r2
   d8cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8cb0:	e7cc      	b.n	d8c4c <__aeabi_d2f+0x14>
   d8cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8cb6:	d107      	bne.n	d8cc8 <__aeabi_d2f+0x90>
   d8cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8cbc:	bf1e      	ittt	ne
   d8cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8cc6:	4770      	bxne	lr
   d8cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8cd4:	4770      	bx	lr
   d8cd6:	bf00      	nop

000d8cd8 <__cxa_atexit>:
   d8cd8:	b510      	push	{r4, lr}
   d8cda:	4c05      	ldr	r4, [pc, #20]	; (d8cf0 <__cxa_atexit+0x18>)
   d8cdc:	4613      	mov	r3, r2
   d8cde:	b12c      	cbz	r4, d8cec <__cxa_atexit+0x14>
   d8ce0:	460a      	mov	r2, r1
   d8ce2:	4601      	mov	r1, r0
   d8ce4:	2002      	movs	r0, #2
   d8ce6:	f3af 8000 	nop.w
   d8cea:	bd10      	pop	{r4, pc}
   d8cec:	4620      	mov	r0, r4
   d8cee:	bd10      	pop	{r4, pc}
   d8cf0:	00000000 	.word	0x00000000

000d8cf4 <memcpy>:
   d8cf4:	b510      	push	{r4, lr}
   d8cf6:	1e43      	subs	r3, r0, #1
   d8cf8:	440a      	add	r2, r1
   d8cfa:	4291      	cmp	r1, r2
   d8cfc:	d004      	beq.n	d8d08 <memcpy+0x14>
   d8cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d02:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8d06:	e7f8      	b.n	d8cfa <memcpy+0x6>
   d8d08:	bd10      	pop	{r4, pc}

000d8d0a <memset>:
   d8d0a:	4402      	add	r2, r0
   d8d0c:	4603      	mov	r3, r0
   d8d0e:	4293      	cmp	r3, r2
   d8d10:	d002      	beq.n	d8d18 <memset+0xe>
   d8d12:	f803 1b01 	strb.w	r1, [r3], #1
   d8d16:	e7fa      	b.n	d8d0e <memset+0x4>
   d8d18:	4770      	bx	lr
	...

000d8d1c <srand>:
   d8d1c:	b538      	push	{r3, r4, r5, lr}
   d8d1e:	4b12      	ldr	r3, [pc, #72]	; (d8d68 <srand+0x4c>)
   d8d20:	681c      	ldr	r4, [r3, #0]
   d8d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8d24:	4605      	mov	r5, r0
   d8d26:	b9d3      	cbnz	r3, d8d5e <srand+0x42>
   d8d28:	2018      	movs	r0, #24
   d8d2a:	f7fd fe59 	bl	d69e0 <malloc>
   d8d2e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8d32:	63a0      	str	r0, [r4, #56]	; 0x38
   d8d34:	8003      	strh	r3, [r0, #0]
   d8d36:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8d3a:	8043      	strh	r3, [r0, #2]
   d8d3c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8d40:	8083      	strh	r3, [r0, #4]
   d8d42:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8d46:	80c3      	strh	r3, [r0, #6]
   d8d48:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8d4c:	8103      	strh	r3, [r0, #8]
   d8d4e:	2305      	movs	r3, #5
   d8d50:	8143      	strh	r3, [r0, #10]
   d8d52:	230b      	movs	r3, #11
   d8d54:	8183      	strh	r3, [r0, #12]
   d8d56:	2201      	movs	r2, #1
   d8d58:	2300      	movs	r3, #0
   d8d5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8d60:	2200      	movs	r2, #0
   d8d62:	611d      	str	r5, [r3, #16]
   d8d64:	615a      	str	r2, [r3, #20]
   d8d66:	bd38      	pop	{r3, r4, r5, pc}
   d8d68:	2003df9c 	.word	0x2003df9c

000d8d6c <strcmp>:
   d8d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8d70:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8d74:	2a01      	cmp	r2, #1
   d8d76:	bf28      	it	cs
   d8d78:	429a      	cmpcs	r2, r3
   d8d7a:	d0f7      	beq.n	d8d6c <strcmp>
   d8d7c:	1ad0      	subs	r0, r2, r3
   d8d7e:	4770      	bx	lr

000d8d80 <strlen>:
   d8d80:	4603      	mov	r3, r0
   d8d82:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8d86:	2a00      	cmp	r2, #0
   d8d88:	d1fb      	bne.n	d8d82 <strlen+0x2>
   d8d8a:	1a18      	subs	r0, r3, r0
   d8d8c:	3801      	subs	r0, #1
   d8d8e:	4770      	bx	lr

000d8d90 <strncpy>:
   d8d90:	b510      	push	{r4, lr}
   d8d92:	4603      	mov	r3, r0
   d8d94:	b142      	cbz	r2, d8da8 <strncpy+0x18>
   d8d96:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d9a:	f803 4b01 	strb.w	r4, [r3], #1
   d8d9e:	3a01      	subs	r2, #1
   d8da0:	2c00      	cmp	r4, #0
   d8da2:	d1f7      	bne.n	d8d94 <strncpy+0x4>
   d8da4:	441a      	add	r2, r3
   d8da6:	e000      	b.n	d8daa <strncpy+0x1a>
   d8da8:	bd10      	pop	{r4, pc}
   d8daa:	4293      	cmp	r3, r2
   d8dac:	d002      	beq.n	d8db4 <strncpy+0x24>
   d8dae:	f803 4b01 	strb.w	r4, [r3], #1
   d8db2:	e7fa      	b.n	d8daa <strncpy+0x1a>
   d8db4:	bd10      	pop	{r4, pc}

000d8db6 <link_code_end>:
	...

000d8db8 <dynalib_user>:
   d8db8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d8dc8:	0000 0000                                   ....

000d8dcc <_ZZ13telemetrySendPKcS0_zE12__FUNCTION__>:
   d8dcc:	6574 656c 656d 7274 5379 6e65 0064          telemetrySend.

000d8dda <_ZZ5setupE12__FUNCTION__>:
   d8dda:	6573 7574 0070                              setup.

000d8de0 <_ZZ12MQTTcallbackPcPhjE12__FUNCTION__>:
   d8de0:	514d 5454 6163 6c6c 6162 6b63 6c00               MQTTcallback.

000d8ded <_ZZ4loopE12__FUNCTION__>:
   d8ded:	6f6c 706f 5b00 7325 255d 2a2e 0073 4552     loop.[%s]%.*s.RE
   d8dfd:	0044 5247 4545 004e 4c42 4555 4100 4157     D.GREEN.BLUE.AWA
   d8e0d:	454b 4100 4c53 4545 0050 4e55 4e4b 574f     KE.ASLEEP.UNKNOW
   d8e1d:	004e 6573 7574 2870 0a29 4f00 6f6f 7370     N.setup()..Ooops
   d8e2d:	202c 6f6e 4220 4f4e 3530 2035 6564 6574     , no BNO055 dete
   d8e3d:	7463 6465 2e20 2e2e 4320 6568 6b63 7920     cted ... Check y
   d8e4d:	756f 2072 6977 6972 676e 6f20 2072 3249     our wiring or I2
   d8e5d:	2043 4441 5244 0021 255b 5d73 6e62 206f     C ADDR!.[%s]bno 
   d8e6d:	6572 6461 0079 255b 5d73 6772 2062 6572     ready.[%s]rgb re
   d8e7d:	6461 0079 255b 5d73 716d 7474 7220 6165     ady.[%s]mqtt rea
   d8e8d:	7964 6300 6c6f 726f 6600 6e75 5b00 7325     dy.color.fun.[%s
   d8e9d:	205d 7570 6c62 7369 2068 6568 6c6c 006f     ] publish hello.
   d8ead:	255b 5d73 4d20 5451 2054 4146 4c49 4445     [%s] MQTT FAILED
   d8ebd:	7420 206f 6f63 6e6e 6365 0074 255b 5d73      to connect.[%s]
   d8ecd:	3269 2063 6c73 7661 2065 6572 6461 0079     i2c slave ready.
   d8edd:	255b 5d73 6f6c 2077 6f70 6577 2072 6572     [%s]low power re
   d8eed:	6461 0079 255b 5d73 6269 7375 7220 6165     ady.[%s]ibus rea
   d8efd:	7964 5b00 7325 705d 6469 2073 6572 6461     dy.[%s]pids read
   d8f0d:	0079 6573 7574 2870 6320 6d6f 6c70 7465     y.setup( complet
   d8f1d:	2065 0a29 5b00 7325 635d 696c 6e65 2074     e )..[%s]client 
   d8f2d:	6166 6c69 6465 7420 206f 6f63 6e6e 6365     failed to connec
   d8f3d:	0074 5541 4f54 414d 4954 0043 414d 554e     t.AUTOMATIC.MANU
   d8f4d:	4c41 6d00 7361 6574 2072 7075 6164 6574     AL.master update
   d8f5d:	2064 7525 7420 206f 7525 7b00 2720 745f     d %u to %u.{ '_t
   d8f6d:	6d69 2765 203a 2527 756c 2c27 2720 7974     ime': '%lu', 'ty
   d8f7d:	6570 3a27 2720 6d69 2775 202c 5827 3a27     pe': 'imu', 'X':
   d8f8d:	2720 6625 2c27 2720 2759 273a 6625 2c27      '%f', 'Y':'%f',
   d8f9d:	5a20 2027 203a 2527 2766 7d20 6900 756d      Z' : '%f' }.imu
   d8fad:	6200 6c61 6e61 6563 6950 2064 207b 5f22     .balancePid { "_
   d8fbd:	6974 656d 3a22 2220 6c25 2275 202c 4922     time": "%lu", "I
   d8fcd:	706e 7475 2022 203a 2522 2266 202c 5322     nput" : "%f", "S
   d8fdd:	7465 6f70 6e69 2274 2020 203a 2522 2266     etpoint"  : "%f"
   d8fed:	202c 4f22 7475 7570 2274 3a20 2220 6625     , "Output" : "%f
   d8ffd:	2022 007d 207b 5f22 6974 656d 3a22 2220     " }.{ "_time": "
   d900d:	6c25 2275 202c 7422 7079 2265 223a 6970     %lu", "type":"pi
   d901d:	2264 202c 6e22 6d61 2265 223a 6162 616c     d", "name":"bala
   d902d:	636e 5065 6469 2c22 2220 6e49 7570 2274     ncePid", "Input"
   d903d:	3a20 2220 6625 2c22 2220 6553 7074 696f      : "%f", "Setpoi
   d904d:	746e 2022 3a20 2220 6625 2c22 2220 754f     nt"  : "%f", "Ou
   d905d:	7074 7475 2022 203a 2522 2266 202c 4b22     tput" : "%f", "K
   d906d:	2270 223a 6625 2c22 2220 694b 3a22 2522     p":"%f", "Ki":"%
   d907d:	2266 202c 4b22 2264 223a 6625 2c22 2220     f", "Kd":"%f", "
   d908d:	6f6d 6564 3a22 2522 2273 2020 007d 6162     mode":"%s"  }.ba
   d909d:	616c 636e 5065 6469 7200 6769 7468 7053     lancePid.rightSp
   d90ad:	6565 2064 7266 6d6f 5220 2058 203d 6425     eed from RX = %d
   d90bd:	6c00 6665 5374 6570 6465 6620 6f72 206d     .leftSpeed from 
   d90cd:	5852 3d20 2520 0064 207b 5f22 6974 656d     RX = %d.{ "_time
   d90dd:	3a22 2220 6c25 2275 202c 7422 7079 2265     ": "%lu", "type"
   d90ed:	223a 6970 2264 202c 6e22 6d61 2265 223a     :"pid", "name":"
   d90fd:	656c 7466 6950 2264 202c 4922 706e 7475     leftPid", "Input
   d910d:	2022 203a 2522 2266 202c 5322 7465 6f70     " : "%f", "Setpo
   d911d:	6e69 2274 2020 203a 2522 2266 202c 4f22     int"  : "%f", "O
   d912d:	7475 7570 2274 3a20 2220 6625 2c22 2220     utput" : "%f", "
   d913d:	704b 3a22 2522 2266 202c 4b22 2269 223a     Kp":"%f", "Ki":"
   d914d:	6625 2c22 2220 644b 3a22 2522 2266 202c     %f", "Kd":"%f", 
   d915d:	6d22 646f 2265 223a 7325 2022 7d20 6c00     "mode":"%s"  }.l
   d916d:	6665 5074 6469 7b00 2220 745f 6d69 2265     eftPid.{ "_time"
   d917d:	203a 6c25 2c75 2220 7974 6570 3a22 7022     : %lu, "type":"p
   d918d:	6469 2c22 2220 616e 656d 3a22 7222 6769     id", "name":"rig
   d919d:	7468 6950 2264 202c 4922 706e 7475 2022     htPid", "Input" 
   d91ad:	203a 6625 202c 5322 7465 6f70 6e69 2274     : %f, "Setpoint"
   d91bd:	2020 203a 6625 202c 4f22 7475 7570 2274       : %f, "Output"
   d91cd:	3a20 2520 2c66 2220 704b 3a22 6625 202c      : %f, "Kp":%f, 
   d91dd:	4b22 2269 253a 2c66 2220 644b 3a22 6625     "Ki":%f, "Kd":%f
   d91ed:	202c 6d22 646f 2265 223a 7325 2022 7d20     , "mode":"%s"  }
   d91fd:	7200 6769 7468 6950 0064 7345 6974 616d     .rightPid.Estima
   d920d:	6574 2064 7270 2d65 6373 6c61 3a65 0020     ted pre-scale: .
   d921d:	6946 616e 206c 7270 2d65 6373 6c61 3a65     Final pre-scale:
   d922d:	0020 0400 514d 5454 0004 4d06 4951 6473      ...MQTT...MQIsd
   d923d:	0370 4e42 304f 3535 0000 0000                    p.BNO055...

000d9248 <_ZTV15Adafruit_BNO055>:
	...
   d9250:	40d5 000d 4d21 000d 40b7 000d 6265 000d     .@..!M...@..eb..
   d9260:	5f8d 000d                                   ._..

000d9264 <_ZTV8I2CSlave>:
	...
   d926c:	62d1 000d 62f1 000d                         .b...b..

000d9274 <_ZTVN5spark12NetworkClassE>:
	...
   d927c:	6a41 000d 6a4b 000d 6a55 000d 6a5f 000d     Aj..Kj..Uj.._j..
   d928c:	6a69 000d 6a75 000d 6a81 000d 6a8d 000d     ij..uj...j...j..
   d929c:	6a95 000d 6a9f 000d 6aa9 000d               .j...j...j..

000d92a8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d92b0:	6bc9 000d 6bcf 000d 70b7 000d 6bdb 000d     .k...k...p...k..
   d92c0:	6bcb 000d                                   .k..

000d92c4 <_ZTV9TCPClient>:
	...
   d92cc:	574d 000d 5781 000d 6b41 000d 6b5b 000d     MW...W..Ak..[k..
   d92dc:	6f5d 000d 6d9f 000d 6d71 000d 6b85 000d     ]o...m..qm...k..
   d92ec:	6e35 000d 6be1 000d 6dd3 000d 6f2f 000d     5n...k...m../o..
   d92fc:	6b87 000d 6bbf 000d 6b6d 000d 6cd1 000d     .k...k..mk...l..
   d930c:	6d51 000d 6977 6972 676e 7200 6365 2076     Qm..wiring.recv 
   d931c:	7265 6f72 2072 203d 6425 0000               error = %d..

000d9328 <_ZTVN5spark9MeshClassE>:
	...
   d9330:	712d 000d 7123 000d 7119 000d 710f 000d     -q..#q...q...q..
   d9340:	7103 000d 70f7 000d 70eb 000d 70e3 000d     .q...p...p...p..
   d9350:	70d9 000d 70cf 000d 6aa9 000d               .p...p...j..

000d935c <_ZTV8SPIClass>:
	...
   d9364:	7201 000d 7203 000d                         .r...r..

000d936c <_ZTVN5spark9WiFiClassE>:
	...
   d9374:	729d 000d 7293 000d 7289 000d 723f 000d     .r...r...r..?r..
   d9384:	727d 000d 7271 000d 7265 000d 725d 000d     }r..qr..er..]r..
   d9394:	7253 000d 7249 000d 6aa9 000d               Sr..Ir...j..

000d93a0 <_ZTV7TwoWire>:
	...
   d93a8:	72bd 000d 7307 000d 72df 000d 72bf 000d     .r...s...r...r..
   d93b8:	72e7 000d 72ef 000d 72f7 000d 72ff 000d     .r...r...r...r..

000d93c8 <_ZTV11USARTSerial>:
	...
   d93d0:	7397 000d 73bb 000d 73c7 000d 78c7 000d     .s...s...s...x..
   d93e0:	73a3 000d 73af 000d 73a9 000d 73b5 000d     .s...s...s...s..
   d93f0:	7399 000d 739d 000d                         .s...s..

000d93f8 <_ZTV9USBSerial>:
	...
   d9400:	747d 000d 74c1 000d 749b 000d 78c7 000d     }t...t...t...x..
   d9410:	7495 000d 747f 000d 7487 000d 74bb 000d     .t...t...t...t..
   d9420:	748f 000d 7479 000d                         .t..yt..

000d9428 <_ZTV9IPAddress>:
	...
   d9430:	7567 000d 7559 000d 755b 000d 005a 2b25     gu..Yu..[u..Z.%+
   d9440:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d9450:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d9460:	6974 656d 6c00 006e 6e66 6300 646f 0065     time.ln.fn.code.
   d9470:	6564 6174 6c69 0d00 000a 3025 3031 2075     detail....%010u 
   d9480:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
   d9490:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d94a0:	2073 203d 6200 7561 0064 6553 6972 6c61     s = .baud.Serial
   d94b0:	5300 7265 6169 316c 7400 7079 0065 6170     .Serial1.type.pa
   d94c0:	6172 006d 6d63 0064 6e68 0064 7473 6d72     ram.cmd.hnd.strm
   d94d0:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
   d94e0:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
   d94f0:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
   d9500:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
   d9510:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
   d9520:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
   d9530:	6f72 0072 6170 696e 0063 6c61 006c 616e     ror.panic.all.na
   d9540:	006e 766f 0066 002e 6e69 0066               n.ovf...inf.

000d954c <_ZTVN5spark13EthernetClassE>:
	...
   d9554:	7da7 000d 7d9d 000d 7d93 000d 7d89 000d     .}...}...}...}..
   d9564:	7d7d 000d 7d71 000d 7d65 000d 7d5d 000d     }}..q}..e}..]}..
   d9574:	7d53 000d 7d49 000d 6aa9 000d               S}..I}...j..

000d9580 <__sf_fake_stdin>:
	...

000d95a0 <__sf_fake_stdout>:
	...

000d95c0 <__sf_fake_stderr>:
	...

000d95e0 <link_const_variable_data_end>:
   d95e0:	000d4d31 	.word	0x000d4d31
   d95e4:	000d52c9 	.word	0x000d52c9
   d95e8:	000d5467 	.word	0x000d5467
   d95ec:	000d5631 	.word	0x000d5631
   d95f0:	000d5747 	.word	0x000d5747
   d95f4:	000d5f87 	.word	0x000d5f87
   d95f8:	000d62b7 	.word	0x000d62b7
   d95fc:	000d62bb 	.word	0x000d62bb
   d9600:	000d62c1 	.word	0x000d62c1
   d9604:	000d649d 	.word	0x000d649d
   d9608:	000d64a1 	.word	0x000d64a1
   d960c:	000d6b2d 	.word	0x000d6b2d
   d9610:	000d71b5 	.word	0x000d71b5
   d9614:	000d72a9 	.word	0x000d72a9
   d9618:	000d77b9 	.word	0x000d77b9
   d961c:	000d789d 	.word	0x000d789d
   d9620:	000d78b1 	.word	0x000d78b1
   d9624:	000d7d31 	.word	0x000d7d31
   d9628:	000d7db1 	.word	0x000d7db1
   d962c:	000d7e45 	.word	0x000d7e45
   d9630:	000d7f29 	.word	0x000d7f29
   d9634:	000d7fad 	.word	0x000d7fad
   d9638:	000d8071 	.word	0x000d8071
   d963c:	000d8135 	.word	0x000d8135
